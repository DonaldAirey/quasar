//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Guardian.Core
{
    using MarkThree.Guardian;
    using MarkThree.Guardian.Server;
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Data.SqlClient;
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    public class Country
    {
        
        /// This value is used to map the object to a persistent storage device.  The parameters for the storage
        /// are found in the configuration file for this service.
        public static string PersistentStore = "Guardian";
        
        /// This member provides access to the in-memory database.
        private static ServerMarketData serverMarketData = new ServerMarketData();
        
        /// <summary>Collects the table lock request(s) for an Insert operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Insert(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for this operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.CountryLock);
        }
        
        /// <summary>Inserts a Country record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Insert(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            string abbreviation = parameters["abbreviation"];
            object externalId0 = parameters["externalId0"].Value;
            object externalId1 = parameters["externalId1"].Value;
            string name = parameters["name"];
            // The rowVersion is passed back to the caller in the event it's needed for additional commands in the batch.
            long rowVersion = long.MinValue;
            // Call the internal method to complete the operation.
            int countryId = Country.Insert(adoTransaction, sqlTransaction, ref rowVersion, abbreviation, externalId0, externalId1, name);
            // Return values.
            parameters["rowVersion"] = rowVersion;
            parameters.Return = countryId;
        }
        
        /// <summary>Inserts a Country record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="abbreviation">The value for the Abbreviation column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="externalId1">The value for the ExternalId1 column.</param>
        /// <param name="name">The value for the Name column.</param>
        public static int Insert(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, ref long rowVersion, string abbreviation, object externalId0, object externalId1, string name)
        {
            // Accessor for the Country Table.
            ServerMarketData.CountryDataTable countryTable = ServerMarketData.Country;
            // Apply Defaults
            if ((externalId0 == null))
            {
                externalId0 = System.DBNull.Value;
            }
            if ((externalId1 == null))
            {
                externalId1 = System.DBNull.Value;
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Insert the record into the ADO database.
            ServerMarketData.CountryRow countryRow = countryTable.NewCountryRow();
            countryRow[countryTable.RowVersionColumn] = rowVersion;
            countryRow[countryTable.AbbreviationColumn] = abbreviation;
            countryRow[countryTable.ExternalId0Column] = externalId0;
            countryRow[countryTable.ExternalId1Column] = externalId1;
            countryRow[countryTable.NameColumn] = name;
            countryTable.AddCountryRow(countryRow);
            adoTransaction.DataRows.Add(countryRow);
            // Insert the record into the SQL database.
            SqlCommand sqlCommand = new SqlCommand("insert \"Country\" (\"rowVersion\",\"Abbreviation\",\"CountryId\",\"ExternalId0\",\"External" +
                    "Id1\",\"Name\") values (@rowVersion,@abbreviation,@countryId,@externalId0,@external" +
                    "Id1,@name)");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@abbreviation", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, abbreviation));
            sqlCommand.Parameters.Add(new SqlParameter("@countryId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, countryRow[countryTable.CountryIdColumn]));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId1", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId1));
            sqlCommand.Parameters.Add(new SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, name));
            sqlCommand.ExecuteNonQuery();
            // Return Statements
            return countryRow.CountryId;
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Update(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Update' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.CountryLock);
            AccountBase.ArchiveChildren(adoTransaction);
            Holiday.Archive(adoTransaction);
            Province.Archive(adoTransaction);
            Security.ArchiveChildren(adoTransaction);
        }
        
        /// <summary>Inserts a Country record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Update(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            object abbreviation = parameters["abbreviation"].Value;
            int countryId = parameters["countryId"];
            object externalId0 = parameters["externalId0"].Value;
            object externalId1 = parameters["externalId1"].Value;
            object name = parameters["name"].Value;
            // Call the internal method to complete the operation.
            Country.Update(adoTransaction, sqlTransaction, ref rowVersion, abbreviation, countryId, externalId0, externalId1, name);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Updates a Country record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="rowVersion">The version number of the row</param>
        /// <param name="abbreviation">The value for the Abbreviation column.</param>
        /// <param name="countryId">The value for the CountryId column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="externalId1">The value for the ExternalId1 column.</param>
        /// <param name="name">The value for the Name column.</param>
        public static void Update(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, ref long rowVersion, object abbreviation, int countryId, object externalId0, object externalId1, object name)
        {
            // Accessor for the Country Table.
            ServerMarketData.CountryDataTable countryTable = ServerMarketData.Country;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.CountryRow countryRow = countryTable.FindByCountryId(countryId);
            if ((countryRow == null))
            {
                throw new Exception(string.Format("The Country table does not have an element identified by {0}", countryId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((countryRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Apply Defaults
            if ((abbreviation == null))
            {
                abbreviation = countryRow[countryTable.AbbreviationColumn];
            }
            if ((externalId0 == null))
            {
                externalId0 = countryRow[countryTable.ExternalId0Column];
            }
            if ((externalId1 == null))
            {
                externalId1 = countryRow[countryTable.ExternalId1Column];
            }
            if ((name == null))
            {
                name = countryRow[countryTable.NameColumn];
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Update the record in the ADO database.
            countryRow[countryTable.RowVersionColumn] = rowVersion;
            countryRow[countryTable.AbbreviationColumn] = abbreviation;
            countryRow[countryTable.ExternalId0Column] = externalId0;
            countryRow[countryTable.ExternalId1Column] = externalId1;
            countryRow[countryTable.NameColumn] = name;
            adoTransaction.DataRows.Add(countryRow);
            // Update the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Country\" set \"RowVersion\"=@rowVersion,\"Abbreviation\"=@abbreviation,\"Exter" +
                    "nalId0\"=@externalId0,\"ExternalId1\"=@externalId1,\"Name\"=@name where \"CountryId\"=@" +
                    "countryId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@abbreviation", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, abbreviation));
            sqlCommand.Parameters.Add(new SqlParameter("@countryId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, countryId));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId1", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId1));
            sqlCommand.Parameters.Add(new SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, name));
            // Update the record in the SQL database.
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Delete(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Delete' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.CountryLock);
            AccountBase.ArchiveChildren(adoTransaction);
            Holiday.Archive(adoTransaction);
            Province.Archive(adoTransaction);
            Security.ArchiveChildren(adoTransaction);
        }
        
        /// <summary>Inserts a Country record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Delete(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int countryId = parameters["countryId"];
            // Call the internal method to complete the operation.
            Country.Delete(adoTransaction, sqlTransaction, rowVersion, countryId);
        }
        
        /// <summary>Deletes a Country record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="countryId">The value for the CountryId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Delete(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int countryId)
        {
            // Accessor for the Country Table.
            ServerMarketData.CountryDataTable countryTable = ServerMarketData.Country;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.CountryRow countryRow = countryTable.FindByCountryId(countryId);
            if ((countryRow == null))
            {
                throw new Exception(string.Format("The Country table does not have an element identified by {0}", countryId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((countryRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Delete the child records.
            for (int index = 0; (index < countryRow.GetAccountBaseRows().Length); index = (index + 1))
            {
                ServerMarketData.AccountBaseRow childAccountBaseRow = countryRow.GetAccountBaseRows()[index];
                AccountBase.DeleteChildren(adoTransaction, sqlTransaction, childAccountBaseRow.RowVersion, childAccountBaseRow.AccountBaseId);
            }
            for (int index = 0; (index < countryRow.GetHolidayRows().Length); index = (index + 1))
            {
                ServerMarketData.HolidayRow childHolidayRow = countryRow.GetHolidayRows()[index];
                Holiday.Delete(adoTransaction, sqlTransaction, childHolidayRow.RowVersion, childHolidayRow.HolidayId);
            }
            for (int index = 0; (index < countryRow.GetProvinceRows().Length); index = (index + 1))
            {
                ServerMarketData.ProvinceRow childProvinceRow = countryRow.GetProvinceRows()[index];
                Province.Delete(adoTransaction, sqlTransaction, childProvinceRow.RowVersion, childProvinceRow.ProvinceId);
            }
            for (int index = 0; (index < countryRow.GetSecurityRows().Length); index = (index + 1))
            {
                ServerMarketData.SecurityRow childSecurityRow = countryRow.GetSecurityRows()[index];
                Security.DeleteChildren(adoTransaction, sqlTransaction, childSecurityRow.RowVersion, childSecurityRow.SecurityId);
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Delete the record in the ADO database.
            countryRow[countryTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(countryRow);
            countryRow.Delete();
            // Delete the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Country\" set \"IsDeleted\" = 1 where \"CountryId\"=@countryId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@countryId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, countryId));
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Archive(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Archive' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.CountryLock);
            AccountBase.ArchiveChildren(adoTransaction);
            Holiday.Archive(adoTransaction);
            Province.Archive(adoTransaction);
            Security.ArchiveChildren(adoTransaction);
        }
        
        /// <summary>Inserts a Country record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Archive(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int countryId = parameters["countryId"];
            // Call the internal method to complete the operation.
            Country.Archive(adoTransaction, sqlTransaction, rowVersion, countryId);
        }
        
        /// <summary>Archives a Country record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="countryId">The value for the CountryId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Archive(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int countryId)
        {
            // Accessor for the Country Table.
            ServerMarketData.CountryDataTable countryTable = ServerMarketData.Country;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.CountryRow countryRow = countryTable.FindByCountryId(countryId);
            if ((countryRow == null))
            {
                throw new Exception(string.Format("The Country table does not have an element identified by {0}", countryId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((countryRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Archive the child records.
            for (int index = 0; (index < countryRow.GetAccountBaseRows().Length); index = (index + 1))
            {
                ServerMarketData.AccountBaseRow childAccountBaseRow = countryRow.GetAccountBaseRows()[index];
                AccountBase.ArchiveChildren(adoTransaction, sqlTransaction, childAccountBaseRow.RowVersion, childAccountBaseRow.AccountBaseId);
            }
            for (int index = 0; (index < countryRow.GetHolidayRows().Length); index = (index + 1))
            {
                ServerMarketData.HolidayRow childHolidayRow = countryRow.GetHolidayRows()[index];
                Holiday.Archive(adoTransaction, sqlTransaction, childHolidayRow.RowVersion, childHolidayRow.HolidayId);
            }
            for (int index = 0; (index < countryRow.GetProvinceRows().Length); index = (index + 1))
            {
                ServerMarketData.ProvinceRow childProvinceRow = countryRow.GetProvinceRows()[index];
                Province.Archive(adoTransaction, sqlTransaction, childProvinceRow.RowVersion, childProvinceRow.ProvinceId);
            }
            for (int index = 0; (index < countryRow.GetSecurityRows().Length); index = (index + 1))
            {
                ServerMarketData.SecurityRow childSecurityRow = countryRow.GetSecurityRows()[index];
                Security.ArchiveChildren(adoTransaction, sqlTransaction, childSecurityRow.RowVersion, childSecurityRow.SecurityId);
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Delete the record in the ADO database.
            countryRow[countryTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(countryRow);
            countryRow.Delete();
            // Archive the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Country\" set \"IsArchived\" = 1 where \"CountryId\"=@countryId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@countryId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, countryId));
            sqlCommand.ExecuteNonQuery();
        }
    }
}
