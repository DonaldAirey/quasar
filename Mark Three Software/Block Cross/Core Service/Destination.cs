//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Guardian.Core
{
    using MarkThree.Guardian;
    using MarkThree.Guardian.Server;
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Data.SqlClient;
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    public class Destination
    {
        
        /// This value is used to map the object to a persistent storage device.  The parameters for the storage
        /// are found in the configuration file for this service.
        public static string PersistentStore = "Guardian";
        
        /// This member provides access to the in-memory database.
        private static ServerMarketData serverMarketData = new ServerMarketData();
        
        /// <summary>Collects the table lock request(s) for an Insert operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Insert(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for this operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.DestinationLock);
        }
        
        /// <summary>Inserts a Destination record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Insert(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object cancelCustomFixTag = parameters["cancelCustomFixTag"].Value;
            object clearingFirmId = parameters["clearingFirmId"].Value;
            object externalId0 = parameters["externalId0"].Value;
            object externalId1 = parameters["externalId1"].Value;
            object fixAccount = parameters["fixAccount"].Value;
            object fixAccountSuffixLength = parameters["fixAccountSuffixLength"].Value;
            object fixExchangeMnemonic = parameters["fixExchangeMnemonic"].Value;
            object fixExecBroker = parameters["fixExecBroker"].Value;
            object fixExecDestinationListed = parameters["fixExecDestinationListed"].Value;
            object fixExecDestinationUnlisted = parameters["fixExecDestinationUnlisted"].Value;
            object fixHandleInstListed = parameters["fixHandleInstListed"].Value;
            object fixHandleInstUnlisted = parameters["fixHandleInstUnlisted"].Value;
            object fixIoiRoutingId = parameters["fixIoiRoutingId"].Value;
            object fixIoiRoutingType = parameters["fixIoiRoutingType"].Value;
            object fixNetCommissionType = parameters["fixNetCommissionType"].Value;
            object fixNoteTagId = parameters["fixNoteTagId"].Value;
            object fixOnBehalfOf = parameters["fixOnBehalfOf"].Value;
            object fixOnBehalfOfSub = parameters["fixOnBehalfOfSub"].Value;
            object fixOrderIdFormat = parameters["fixOrderIdFormat"].Value;
            object fixPassiveTag = parameters["fixPassiveTag"].Value;
            object fixProactiveTag = parameters["fixProactiveTag"].Value;
            object fixSourceCompany = parameters["fixSourceCompany"].Value;
            object fixSourceId = parameters["fixSourceId"].Value;
            object fixSourceTrader = parameters["fixSourceTrader"].Value;
            object fixTargetCompany = parameters["fixTargetCompany"].Value;
            object fixTargetLocationId = parameters["fixTargetLocationId"].Value;
            object fixTargetTrader = parameters["fixTargetTrader"].Value;
            object fixVersion = parameters["fixVersion"].Value;
            object isBroker = parameters["isBroker"].Value;
            object isCancelAllowed = parameters["isCancelAllowed"].Value;
            object isCancelReplaceAllowed = parameters["isCancelReplaceAllowed"].Value;
            object isEcn = parameters["isEcn"].Value;
            object isExchange = parameters["isExchange"].Value;
            object isInternal = parameters["isInternal"].Value;
            object isIoiAllowed = parameters["isIoiAllowed"].Value;
            object isLimitPricingAllowed = parameters["isLimitPricingAllowed"].Value;
            object isMarketOnClosePricingAllowed = parameters["isMarketOnClosePricingAllowed"].Value;
            object isMarketPricingAllowed = parameters["isMarketPricingAllowed"].Value;
            object isSystemUp = parameters["isSystemUp"].Value;
            object isTagEligible = parameters["isTagEligible"].Value;
            object isTradeAwayAllowed = parameters["isTradeAwayAllowed"].Value;
            object isUnsolicitedTradeAllowed = parameters["isUnsolicitedTradeAllowed"].Value;
            object lotSize = parameters["lotSize"].Value;
            object maximumQuantityListedLimit = parameters["maximumQuantityListedLimit"].Value;
            object maximumQuantityListedMarket = parameters["maximumQuantityListedMarket"].Value;
            object maximumQuantityUnlistedLimit = parameters["maximumQuantityUnlistedLimit"].Value;
            object maximumQuantityUnlistedMarket = parameters["maximumQuantityUnlistedMarket"].Value;
            System.DateTime modifiedTime = parameters["modifiedTime"];
            object name = parameters["name"].Value;
            object newOrderCustomFixTag = parameters["newOrderCustomFixTag"].Value;
            object oatsDepartmentId = parameters["oatsDepartmentId"].Value;
            object oatsDestinationCode = parameters["oatsDestinationCode"].Value;
            object oatsReceivingMpi = parameters["oatsReceivingMpi"].Value;
            object oatsRouteMethod = parameters["oatsRouteMethod"].Value;
            object oatsRoutingMpi = parameters["oatsRoutingMpi"].Value;
            object oatsSentMpi = parameters["oatsSentMpi"].Value;
            object oatsTerminalId = parameters["oatsTerminalId"].Value;
            object onCloseCancelTime = parameters["onCloseCancelTime"].Value;
            object onCloseOrderTime = parameters["onCloseOrderTime"].Value;
            object perShareUsageFee = parameters["perShareUsageFee"].Value;
            object postMarketLogic = parameters["postMarketLogic"].Value;
            object primaryBackupDestinationId = parameters["primaryBackupDestinationId"].Value;
            object secondaryBackupDestinationId = parameters["secondaryBackupDestinationId"].Value;
            object selectnetFlag = parameters["selectnetFlag"].Value;
            string shortName = parameters["shortName"];
            object sourceId0 = parameters["sourceId0"].Value;
            object sourceId1 = parameters["sourceId1"].Value;
            object sourceId2 = parameters["sourceId2"].Value;
            object sourceId3 = parameters["sourceId3"].Value;
            object sourceId4 = parameters["sourceId4"].Value;
            object sourceId5 = parameters["sourceId5"].Value;
            object sourceId6 = parameters["sourceId6"].Value;
            object sourceId7 = parameters["sourceId7"].Value;
            string uniqueShortName = parameters["uniqueShortName"];
            // The rowVersion is passed back to the caller in the event it's needed for additional commands in the batch.
            long rowVersion = long.MinValue;
            // Call the internal method to complete the operation.
            int destinationId = Destination.Insert(adoTransaction, sqlTransaction, ref rowVersion, cancelCustomFixTag, clearingFirmId, externalId0, externalId1, fixAccount, fixAccountSuffixLength, fixExchangeMnemonic, fixExecBroker, fixExecDestinationListed, fixExecDestinationUnlisted, fixHandleInstListed, fixHandleInstUnlisted, fixIoiRoutingId, fixIoiRoutingType, fixNetCommissionType, fixNoteTagId, fixOnBehalfOf, fixOnBehalfOfSub, fixOrderIdFormat, fixPassiveTag, fixProactiveTag, fixSourceCompany, fixSourceId, fixSourceTrader, fixTargetCompany, fixTargetLocationId, fixTargetTrader, fixVersion, isBroker, isCancelAllowed, isCancelReplaceAllowed, isEcn, isExchange, isInternal, isIoiAllowed, isLimitPricingAllowed, isMarketOnClosePricingAllowed, isMarketPricingAllowed, isSystemUp, isTagEligible, isTradeAwayAllowed, isUnsolicitedTradeAllowed, lotSize, maximumQuantityListedLimit, maximumQuantityListedMarket, maximumQuantityUnlistedLimit, maximumQuantityUnlistedMarket, modifiedTime, name, newOrderCustomFixTag, oatsDepartmentId, oatsDestinationCode, oatsReceivingMpi, oatsRouteMethod, oatsRoutingMpi, oatsSentMpi, oatsTerminalId, onCloseCancelTime, onCloseOrderTime, perShareUsageFee, postMarketLogic, primaryBackupDestinationId, secondaryBackupDestinationId, selectnetFlag, shortName, sourceId0, sourceId1, sourceId2, sourceId3, sourceId4, sourceId5, sourceId6, sourceId7, uniqueShortName);
            // Return values.
            parameters["rowVersion"] = rowVersion;
            parameters.Return = destinationId;
        }
        
        /// <summary>Inserts a Destination record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="cancelCustomFixTag">The value for the CancelCustomFixTag column.</param>
        /// <param name="clearingFirmId">The value for the ClearingFirmId column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="externalId1">The value for the ExternalId1 column.</param>
        /// <param name="fixAccount">The value for the FixAccount column.</param>
        /// <param name="fixAccountSuffixLength">The value for the FixAccountSuffixLength column.</param>
        /// <param name="fixExchangeMnemonic">The value for the FixExchangeMnemonic column.</param>
        /// <param name="fixExecBroker">The value for the FixExecBroker column.</param>
        /// <param name="fixExecDestinationListed">The value for the FixExecDestinationListed column.</param>
        /// <param name="fixExecDestinationUnlisted">The value for the FixExecDestinationUnlisted column.</param>
        /// <param name="fixHandleInstListed">The value for the FixHandleInstListed column.</param>
        /// <param name="fixHandleInstUnlisted">The value for the FixHandleInstUnlisted column.</param>
        /// <param name="fixIoiRoutingId">The value for the FixIoiRoutingId column.</param>
        /// <param name="fixIoiRoutingType">The value for the FixIoiRoutingType column.</param>
        /// <param name="fixNetCommissionType">The value for the FixNetCommissionType column.</param>
        /// <param name="fixNoteTagId">The value for the FixNoteTagId column.</param>
        /// <param name="fixOnBehalfOf">The value for the FixOnBehalfOf column.</param>
        /// <param name="fixOnBehalfOfSub">The value for the FixOnBehalfOfSub column.</param>
        /// <param name="fixOrderIdFormat">The value for the FixOrderIdFormat column.</param>
        /// <param name="fixPassiveTag">The value for the FixPassiveTag column.</param>
        /// <param name="fixProactiveTag">The value for the FixProactiveTag column.</param>
        /// <param name="fixSourceCompany">The value for the FixSourceCompany column.</param>
        /// <param name="fixSourceId">The value for the FixSourceId column.</param>
        /// <param name="fixSourceTrader">The value for the FixSourceTrader column.</param>
        /// <param name="fixTargetCompany">The value for the FixTargetCompany column.</param>
        /// <param name="fixTargetLocationId">The value for the FixTargetLocationId column.</param>
        /// <param name="fixTargetTrader">The value for the FixTargetTrader column.</param>
        /// <param name="fixVersion">The value for the FixVersion column.</param>
        /// <param name="isBroker">The value for the IsBroker column.</param>
        /// <param name="isCancelAllowed">The value for the IsCancelAllowed column.</param>
        /// <param name="isCancelReplaceAllowed">The value for the IsCancelReplaceAllowed column.</param>
        /// <param name="isEcn">The value for the IsEcn column.</param>
        /// <param name="isExchange">The value for the IsExchange column.</param>
        /// <param name="isInternal">The value for the IsInternal column.</param>
        /// <param name="isIoiAllowed">The value for the IsIoiAllowed column.</param>
        /// <param name="isLimitPricingAllowed">The value for the IsLimitPricingAllowed column.</param>
        /// <param name="isMarketOnClosePricingAllowed">The value for the IsMarketOnClosePricingAllowed column.</param>
        /// <param name="isMarketPricingAllowed">The value for the IsMarketPricingAllowed column.</param>
        /// <param name="isSystemUp">The value for the IsSystemUp column.</param>
        /// <param name="isTagEligible">The value for the IsTagEligible column.</param>
        /// <param name="isTradeAwayAllowed">The value for the IsTradeAwayAllowed column.</param>
        /// <param name="isUnsolicitedTradeAllowed">The value for the IsUnsolicitedTradeAllowed column.</param>
        /// <param name="lotSize">The value for the LotSize column.</param>
        /// <param name="maximumQuantityListedLimit">The value for the MaximumQuantityListedLimit column.</param>
        /// <param name="maximumQuantityListedMarket">The value for the MaximumQuantityListedMarket column.</param>
        /// <param name="maximumQuantityUnlistedLimit">The value for the MaximumQuantityUnlistedLimit column.</param>
        /// <param name="maximumQuantityUnlistedMarket">The value for the MaximumQuantityUnlistedMarket column.</param>
        /// <param name="modifiedTime">The value for the ModifiedTime column.</param>
        /// <param name="name">The value for the Name column.</param>
        /// <param name="newOrderCustomFixTag">The value for the NewOrderCustomFixTag column.</param>
        /// <param name="oatsDepartmentId">The value for the OatsDepartmentId column.</param>
        /// <param name="oatsDestinationCode">The value for the OatsDestinationCode column.</param>
        /// <param name="oatsReceivingMpi">The value for the OatsReceivingMpi column.</param>
        /// <param name="oatsRouteMethod">The value for the OatsRouteMethod column.</param>
        /// <param name="oatsRoutingMpi">The value for the OatsRoutingMpi column.</param>
        /// <param name="oatsSentMpi">The value for the OatsSentMpi column.</param>
        /// <param name="oatsTerminalId">The value for the OatsTerminalId column.</param>
        /// <param name="onCloseCancelTime">The value for the OnCloseCancelTime column.</param>
        /// <param name="onCloseOrderTime">The value for the OnCloseOrderTime column.</param>
        /// <param name="perShareUsageFee">The value for the PerShareUsageFee column.</param>
        /// <param name="postMarketLogic">The value for the PostMarketLogic column.</param>
        /// <param name="primaryBackupDestinationId">The value for the PrimaryBackupDestinationId column.</param>
        /// <param name="secondaryBackupDestinationId">The value for the SecondaryBackupDestinationId column.</param>
        /// <param name="selectnetFlag">The value for the SelectnetFlag column.</param>
        /// <param name="shortName">The value for the ShortName column.</param>
        /// <param name="sourceId0">The value for the SourceId0 column.</param>
        /// <param name="sourceId1">The value for the SourceId1 column.</param>
        /// <param name="sourceId2">The value for the SourceId2 column.</param>
        /// <param name="sourceId3">The value for the SourceId3 column.</param>
        /// <param name="sourceId4">The value for the SourceId4 column.</param>
        /// <param name="sourceId5">The value for the SourceId5 column.</param>
        /// <param name="sourceId6">The value for the SourceId6 column.</param>
        /// <param name="sourceId7">The value for the SourceId7 column.</param>
        /// <param name="uniqueShortName">The value for the UniqueShortName column.</param>
        public static int Insert(
                    AdoTransaction adoTransaction, 
                    SqlTransaction sqlTransaction, 
                    ref long rowVersion, 
                    object cancelCustomFixTag, 
                    object clearingFirmId, 
                    object externalId0, 
                    object externalId1, 
                    object fixAccount, 
                    object fixAccountSuffixLength, 
                    object fixExchangeMnemonic, 
                    object fixExecBroker, 
                    object fixExecDestinationListed, 
                    object fixExecDestinationUnlisted, 
                    object fixHandleInstListed, 
                    object fixHandleInstUnlisted, 
                    object fixIoiRoutingId, 
                    object fixIoiRoutingType, 
                    object fixNetCommissionType, 
                    object fixNoteTagId, 
                    object fixOnBehalfOf, 
                    object fixOnBehalfOfSub, 
                    object fixOrderIdFormat, 
                    object fixPassiveTag, 
                    object fixProactiveTag, 
                    object fixSourceCompany, 
                    object fixSourceId, 
                    object fixSourceTrader, 
                    object fixTargetCompany, 
                    object fixTargetLocationId, 
                    object fixTargetTrader, 
                    object fixVersion, 
                    object isBroker, 
                    object isCancelAllowed, 
                    object isCancelReplaceAllowed, 
                    object isEcn, 
                    object isExchange, 
                    object isInternal, 
                    object isIoiAllowed, 
                    object isLimitPricingAllowed, 
                    object isMarketOnClosePricingAllowed, 
                    object isMarketPricingAllowed, 
                    object isSystemUp, 
                    object isTagEligible, 
                    object isTradeAwayAllowed, 
                    object isUnsolicitedTradeAllowed, 
                    object lotSize, 
                    object maximumQuantityListedLimit, 
                    object maximumQuantityListedMarket, 
                    object maximumQuantityUnlistedLimit, 
                    object maximumQuantityUnlistedMarket, 
                    System.DateTime modifiedTime, 
                    object name, 
                    object newOrderCustomFixTag, 
                    object oatsDepartmentId, 
                    object oatsDestinationCode, 
                    object oatsReceivingMpi, 
                    object oatsRouteMethod, 
                    object oatsRoutingMpi, 
                    object oatsSentMpi, 
                    object oatsTerminalId, 
                    object onCloseCancelTime, 
                    object onCloseOrderTime, 
                    object perShareUsageFee, 
                    object postMarketLogic, 
                    object primaryBackupDestinationId, 
                    object secondaryBackupDestinationId, 
                    object selectnetFlag, 
                    string shortName, 
                    object sourceId0, 
                    object sourceId1, 
                    object sourceId2, 
                    object sourceId3, 
                    object sourceId4, 
                    object sourceId5, 
                    object sourceId6, 
                    object sourceId7, 
                    string uniqueShortName)
        {
            // Accessor for the Destination Table.
            ServerMarketData.DestinationDataTable destinationTable = ServerMarketData.Destination;
            // Apply Defaults
            if ((cancelCustomFixTag == null))
            {
                cancelCustomFixTag = System.DBNull.Value;
            }
            if ((clearingFirmId == null))
            {
                clearingFirmId = System.DBNull.Value;
            }
            if ((externalId0 == null))
            {
                externalId0 = System.DBNull.Value;
            }
            if ((externalId1 == null))
            {
                externalId1 = System.DBNull.Value;
            }
            if ((fixAccount == null))
            {
                fixAccount = System.DBNull.Value;
            }
            if ((fixAccountSuffixLength == null))
            {
                fixAccountSuffixLength = System.DBNull.Value;
            }
            if ((fixExchangeMnemonic == null))
            {
                fixExchangeMnemonic = System.DBNull.Value;
            }
            if ((fixExecBroker == null))
            {
                fixExecBroker = System.DBNull.Value;
            }
            if ((fixExecDestinationListed == null))
            {
                fixExecDestinationListed = System.DBNull.Value;
            }
            if ((fixExecDestinationUnlisted == null))
            {
                fixExecDestinationUnlisted = System.DBNull.Value;
            }
            if ((fixHandleInstListed == null))
            {
                fixHandleInstListed = System.DBNull.Value;
            }
            if ((fixHandleInstUnlisted == null))
            {
                fixHandleInstUnlisted = System.DBNull.Value;
            }
            if ((fixIoiRoutingId == null))
            {
                fixIoiRoutingId = System.DBNull.Value;
            }
            if ((fixIoiRoutingType == null))
            {
                fixIoiRoutingType = System.DBNull.Value;
            }
            if ((fixNetCommissionType == null))
            {
                fixNetCommissionType = System.DBNull.Value;
            }
            if ((fixNoteTagId == null))
            {
                fixNoteTagId = System.DBNull.Value;
            }
            if ((fixOnBehalfOf == null))
            {
                fixOnBehalfOf = System.DBNull.Value;
            }
            if ((fixOnBehalfOfSub == null))
            {
                fixOnBehalfOfSub = System.DBNull.Value;
            }
            if ((fixOrderIdFormat == null))
            {
                fixOrderIdFormat = "{0:00000}";
            }
            if ((fixPassiveTag == null))
            {
                fixPassiveTag = System.DBNull.Value;
            }
            if ((fixProactiveTag == null))
            {
                fixProactiveTag = System.DBNull.Value;
            }
            if ((fixSourceCompany == null))
            {
                fixSourceCompany = System.DBNull.Value;
            }
            if ((fixSourceId == null))
            {
                fixSourceId = System.DBNull.Value;
            }
            if ((fixSourceTrader == null))
            {
                fixSourceTrader = System.DBNull.Value;
            }
            if ((fixTargetCompany == null))
            {
                fixTargetCompany = System.DBNull.Value;
            }
            if ((fixTargetLocationId == null))
            {
                fixTargetLocationId = System.DBNull.Value;
            }
            if ((fixTargetTrader == null))
            {
                fixTargetTrader = System.DBNull.Value;
            }
            if ((fixVersion == null))
            {
                fixVersion = "4.0";
            }
            if ((isBroker == null))
            {
                isBroker = false;
            }
            if ((isCancelAllowed == null))
            {
                isCancelAllowed = true;
            }
            if ((isCancelReplaceAllowed == null))
            {
                isCancelReplaceAllowed = true;
            }
            if ((isEcn == null))
            {
                isEcn = false;
            }
            if ((isExchange == null))
            {
                isExchange = false;
            }
            if ((isInternal == null))
            {
                isInternal = false;
            }
            if ((isIoiAllowed == null))
            {
                isIoiAllowed = false;
            }
            if ((isLimitPricingAllowed == null))
            {
                isLimitPricingAllowed = true;
            }
            if ((isMarketOnClosePricingAllowed == null))
            {
                isMarketOnClosePricingAllowed = false;
            }
            if ((isMarketPricingAllowed == null))
            {
                isMarketPricingAllowed = true;
            }
            if ((isSystemUp == null))
            {
                isSystemUp = false;
            }
            if ((isTagEligible == null))
            {
                isTagEligible = true;
            }
            if ((isTradeAwayAllowed == null))
            {
                isTradeAwayAllowed = false;
            }
            if ((isUnsolicitedTradeAllowed == null))
            {
                isUnsolicitedTradeAllowed = false;
            }
            if ((lotSize == null))
            {
                lotSize = System.DBNull.Value;
            }
            if ((maximumQuantityListedLimit == null))
            {
                maximumQuantityListedLimit = System.DBNull.Value;
            }
            if ((maximumQuantityListedMarket == null))
            {
                maximumQuantityListedMarket = System.DBNull.Value;
            }
            if ((maximumQuantityUnlistedLimit == null))
            {
                maximumQuantityUnlistedLimit = System.DBNull.Value;
            }
            if ((maximumQuantityUnlistedMarket == null))
            {
                maximumQuantityUnlistedMarket = System.DBNull.Value;
            }
            if ((name == null))
            {
                name = System.DBNull.Value;
            }
            if ((newOrderCustomFixTag == null))
            {
                newOrderCustomFixTag = System.DBNull.Value;
            }
            if ((oatsDepartmentId == null))
            {
                oatsDepartmentId = System.DBNull.Value;
            }
            if ((oatsDestinationCode == null))
            {
                oatsDestinationCode = System.DBNull.Value;
            }
            if ((oatsReceivingMpi == null))
            {
                oatsReceivingMpi = System.DBNull.Value;
            }
            if ((oatsRouteMethod == null))
            {
                oatsRouteMethod = System.DBNull.Value;
            }
            if ((oatsRoutingMpi == null))
            {
                oatsRoutingMpi = System.DBNull.Value;
            }
            if ((oatsSentMpi == null))
            {
                oatsSentMpi = System.DBNull.Value;
            }
            if ((oatsTerminalId == null))
            {
                oatsTerminalId = System.DBNull.Value;
            }
            if ((onCloseCancelTime == null))
            {
                onCloseCancelTime = System.DBNull.Value;
            }
            if ((onCloseOrderTime == null))
            {
                onCloseOrderTime = System.DBNull.Value;
            }
            if ((perShareUsageFee == null))
            {
                perShareUsageFee = 0.0m;
            }
            if ((postMarketLogic == null))
            {
                postMarketLogic = System.DBNull.Value;
            }
            if ((primaryBackupDestinationId == null))
            {
                primaryBackupDestinationId = System.DBNull.Value;
            }
            if ((secondaryBackupDestinationId == null))
            {
                secondaryBackupDestinationId = System.DBNull.Value;
            }
            if ((selectnetFlag == null))
            {
                selectnetFlag = false;
            }
            if ((sourceId0 == null))
            {
                sourceId0 = System.DBNull.Value;
            }
            if ((sourceId1 == null))
            {
                sourceId1 = System.DBNull.Value;
            }
            if ((sourceId2 == null))
            {
                sourceId2 = System.DBNull.Value;
            }
            if ((sourceId3 == null))
            {
                sourceId3 = System.DBNull.Value;
            }
            if ((sourceId4 == null))
            {
                sourceId4 = System.DBNull.Value;
            }
            if ((sourceId5 == null))
            {
                sourceId5 = System.DBNull.Value;
            }
            if ((sourceId6 == null))
            {
                sourceId6 = System.DBNull.Value;
            }
            if ((sourceId7 == null))
            {
                sourceId7 = System.DBNull.Value;
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Insert the record into the ADO database.
            ServerMarketData.DestinationRow destinationRow = destinationTable.NewDestinationRow();
            destinationRow[destinationTable.RowVersionColumn] = rowVersion;
            destinationRow[destinationTable.CancelCustomFixTagColumn] = cancelCustomFixTag;
            destinationRow[destinationTable.ClearingFirmIdColumn] = clearingFirmId;
            destinationRow[destinationTable.ExternalId0Column] = externalId0;
            destinationRow[destinationTable.ExternalId1Column] = externalId1;
            destinationRow[destinationTable.FixAccountColumn] = fixAccount;
            destinationRow[destinationTable.FixAccountSuffixLengthColumn] = fixAccountSuffixLength;
            destinationRow[destinationTable.FixExchangeMnemonicColumn] = fixExchangeMnemonic;
            destinationRow[destinationTable.FixExecBrokerColumn] = fixExecBroker;
            destinationRow[destinationTable.FixExecDestinationListedColumn] = fixExecDestinationListed;
            destinationRow[destinationTable.FixExecDestinationUnlistedColumn] = fixExecDestinationUnlisted;
            destinationRow[destinationTable.FixHandleInstListedColumn] = fixHandleInstListed;
            destinationRow[destinationTable.FixHandleInstUnlistedColumn] = fixHandleInstUnlisted;
            destinationRow[destinationTable.FixIoiRoutingIdColumn] = fixIoiRoutingId;
            destinationRow[destinationTable.FixIoiRoutingTypeColumn] = fixIoiRoutingType;
            destinationRow[destinationTable.FixNetCommissionTypeColumn] = fixNetCommissionType;
            destinationRow[destinationTable.FixNoteTagIdColumn] = fixNoteTagId;
            destinationRow[destinationTable.FixOnBehalfOfColumn] = fixOnBehalfOf;
            destinationRow[destinationTable.FixOnBehalfOfSubColumn] = fixOnBehalfOfSub;
            destinationRow[destinationTable.FixOrderIdFormatColumn] = fixOrderIdFormat;
            destinationRow[destinationTable.FixPassiveTagColumn] = fixPassiveTag;
            destinationRow[destinationTable.FixProactiveTagColumn] = fixProactiveTag;
            destinationRow[destinationTable.FixSourceCompanyColumn] = fixSourceCompany;
            destinationRow[destinationTable.FixSourceIdColumn] = fixSourceId;
            destinationRow[destinationTable.FixSourceTraderColumn] = fixSourceTrader;
            destinationRow[destinationTable.FixTargetCompanyColumn] = fixTargetCompany;
            destinationRow[destinationTable.FixTargetLocationIdColumn] = fixTargetLocationId;
            destinationRow[destinationTable.FixTargetTraderColumn] = fixTargetTrader;
            destinationRow[destinationTable.FixVersionColumn] = fixVersion;
            destinationRow[destinationTable.IsBrokerColumn] = isBroker;
            destinationRow[destinationTable.IsCancelAllowedColumn] = isCancelAllowed;
            destinationRow[destinationTable.IsCancelReplaceAllowedColumn] = isCancelReplaceAllowed;
            destinationRow[destinationTable.IsEcnColumn] = isEcn;
            destinationRow[destinationTable.IsExchangeColumn] = isExchange;
            destinationRow[destinationTable.IsInternalColumn] = isInternal;
            destinationRow[destinationTable.IsIoiAllowedColumn] = isIoiAllowed;
            destinationRow[destinationTable.IsLimitPricingAllowedColumn] = isLimitPricingAllowed;
            destinationRow[destinationTable.IsMarketOnClosePricingAllowedColumn] = isMarketOnClosePricingAllowed;
            destinationRow[destinationTable.IsMarketPricingAllowedColumn] = isMarketPricingAllowed;
            destinationRow[destinationTable.IsSystemUpColumn] = isSystemUp;
            destinationRow[destinationTable.IsTagEligibleColumn] = isTagEligible;
            destinationRow[destinationTable.IsTradeAwayAllowedColumn] = isTradeAwayAllowed;
            destinationRow[destinationTable.IsUnsolicitedTradeAllowedColumn] = isUnsolicitedTradeAllowed;
            destinationRow[destinationTable.LotSizeColumn] = lotSize;
            destinationRow[destinationTable.MaximumQuantityListedLimitColumn] = maximumQuantityListedLimit;
            destinationRow[destinationTable.MaximumQuantityListedMarketColumn] = maximumQuantityListedMarket;
            destinationRow[destinationTable.MaximumQuantityUnlistedLimitColumn] = maximumQuantityUnlistedLimit;
            destinationRow[destinationTable.MaximumQuantityUnlistedMarketColumn] = maximumQuantityUnlistedMarket;
            destinationRow[destinationTable.ModifiedTimeColumn] = modifiedTime;
            destinationRow[destinationTable.NameColumn] = name;
            destinationRow[destinationTable.NewOrderCustomFixTagColumn] = newOrderCustomFixTag;
            destinationRow[destinationTable.OatsDepartmentIdColumn] = oatsDepartmentId;
            destinationRow[destinationTable.OatsDestinationCodeColumn] = oatsDestinationCode;
            destinationRow[destinationTable.OatsReceivingMpiColumn] = oatsReceivingMpi;
            destinationRow[destinationTable.OatsRouteMethodColumn] = oatsRouteMethod;
            destinationRow[destinationTable.OatsRoutingMpiColumn] = oatsRoutingMpi;
            destinationRow[destinationTable.OatsSentMpiColumn] = oatsSentMpi;
            destinationRow[destinationTable.OatsTerminalIdColumn] = oatsTerminalId;
            destinationRow[destinationTable.OnCloseCancelTimeColumn] = onCloseCancelTime;
            destinationRow[destinationTable.OnCloseOrderTimeColumn] = onCloseOrderTime;
            destinationRow[destinationTable.PerShareUsageFeeColumn] = perShareUsageFee;
            destinationRow[destinationTable.PostMarketLogicColumn] = postMarketLogic;
            destinationRow[destinationTable.PrimaryBackupDestinationIdColumn] = primaryBackupDestinationId;
            destinationRow[destinationTable.SecondaryBackupDestinationIdColumn] = secondaryBackupDestinationId;
            destinationRow[destinationTable.SelectnetFlagColumn] = selectnetFlag;
            destinationRow[destinationTable.ShortNameColumn] = shortName;
            destinationRow[destinationTable.SourceId0Column] = sourceId0;
            destinationRow[destinationTable.SourceId1Column] = sourceId1;
            destinationRow[destinationTable.SourceId2Column] = sourceId2;
            destinationRow[destinationTable.SourceId3Column] = sourceId3;
            destinationRow[destinationTable.SourceId4Column] = sourceId4;
            destinationRow[destinationTable.SourceId5Column] = sourceId5;
            destinationRow[destinationTable.SourceId6Column] = sourceId6;
            destinationRow[destinationTable.SourceId7Column] = sourceId7;
            destinationRow[destinationTable.UniqueShortNameColumn] = uniqueShortName;
            destinationTable.AddDestinationRow(destinationRow);
            adoTransaction.DataRows.Add(destinationRow);
            // Insert the record into the SQL database.
            SqlCommand sqlCommand = new SqlCommand("insert \"Destination\" (\"rowVersion\",\"CancelCustomFixTag\",\"ClearingFirmId\",\"Destina" +
                    "tionId\",\"ExternalId0\",\"ExternalId1\",\"FixAccount\",\"FixAccountSuffixLength\",\"FixEx" +
                    "changeMnemonic\",\"FixExecBroker\",\"FixExecDestinationListed\",\"FixExecDestinationUn" +
                    "listed\",\"FixHandleInstListed\",\"FixHandleInstUnlisted\",\"FixIoiRoutingId\",\"FixIoiR" +
                    "outingType\",\"FixNetCommissionType\",\"FixNoteTagId\",\"FixOnBehalfOf\",\"FixOnBehalfOf" +
                    "Sub\",\"FixOrderIdFormat\",\"FixPassiveTag\",\"FixProactiveTag\",\"FixSourceCompany\",\"Fi" +
                    "xSourceId\",\"FixSourceTrader\",\"FixTargetCompany\",\"FixTargetLocationId\",\"FixTarget" +
                    "Trader\",\"FixVersion\",\"IsBroker\",\"IsCancelAllowed\",\"IsCancelReplaceAllowed\",\"IsEc" +
                    "n\",\"IsExchange\",\"IsInternal\",\"IsIoiAllowed\",\"IsLimitPricingAllowed\",\"IsMarketOnC" +
                    "losePricingAllowed\",\"IsMarketPricingAllowed\",\"IsSystemUp\",\"IsTagEligible\",\"IsTra" +
                    "deAwayAllowed\",\"IsUnsolicitedTradeAllowed\",\"LotSize\",\"MaximumQuantityListedLimit" +
                    "\",\"MaximumQuantityListedMarket\",\"MaximumQuantityUnlistedLimit\",\"MaximumQuantityU" +
                    "nlistedMarket\",\"ModifiedTime\",\"Name\",\"NewOrderCustomFixTag\",\"OatsDepartmentId\",\"" +
                    "OatsDestinationCode\",\"OatsReceivingMpi\",\"OatsRouteMethod\",\"OatsRoutingMpi\",\"Oats" +
                    "SentMpi\",\"OatsTerminalId\",\"OnCloseCancelTime\",\"OnCloseOrderTime\",\"PerShareUsageF" +
                    "ee\",\"PostMarketLogic\",\"PrimaryBackupDestinationId\",\"SecondaryBackupDestinationId" +
                    "\",\"SelectnetFlag\",\"ShortName\",\"SourceId0\",\"SourceId1\",\"SourceId2\",\"SourceId3\",\"S" +
                    "ourceId4\",\"SourceId5\",\"SourceId6\",\"SourceId7\",\"UniqueShortName\") values (@rowVer" +
                    "sion,@cancelCustomFixTag,@clearingFirmId,@destinationId,@externalId0,@externalId" +
                    "1,@fixAccount,@fixAccountSuffixLength,@fixExchangeMnemonic,@fixExecBroker,@fixEx" +
                    "ecDestinationListed,@fixExecDestinationUnlisted,@fixHandleInstListed,@fixHandleI" +
                    "nstUnlisted,@fixIoiRoutingId,@fixIoiRoutingType,@fixNetCommissionType,@fixNoteTa" +
                    "gId,@fixOnBehalfOf,@fixOnBehalfOfSub,@fixOrderIdFormat,@fixPassiveTag,@fixProact" +
                    "iveTag,@fixSourceCompany,@fixSourceId,@fixSourceTrader,@fixTargetCompany,@fixTar" +
                    "getLocationId,@fixTargetTrader,@fixVersion,@isBroker,@isCancelAllowed,@isCancelR" +
                    "eplaceAllowed,@isEcn,@isExchange,@isInternal,@isIoiAllowed,@isLimitPricingAllowe" +
                    "d,@isMarketOnClosePricingAllowed,@isMarketPricingAllowed,@isSystemUp,@isTagEligi" +
                    "ble,@isTradeAwayAllowed,@isUnsolicitedTradeAllowed,@lotSize,@maximumQuantityList" +
                    "edLimit,@maximumQuantityListedMarket,@maximumQuantityUnlistedLimit,@maximumQuant" +
                    "ityUnlistedMarket,@modifiedTime,@name,@newOrderCustomFixTag,@oatsDepartmentId,@o" +
                    "atsDestinationCode,@oatsReceivingMpi,@oatsRouteMethod,@oatsRoutingMpi,@oatsSentM" +
                    "pi,@oatsTerminalId,@onCloseCancelTime,@onCloseOrderTime,@perShareUsageFee,@postM" +
                    "arketLogic,@primaryBackupDestinationId,@secondaryBackupDestinationId,@selectnetF" +
                    "lag,@shortName,@sourceId0,@sourceId1,@sourceId2,@sourceId3,@sourceId4,@sourceId5" +
                    ",@sourceId6,@sourceId7,@uniqueShortName)");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@cancelCustomFixTag", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, cancelCustomFixTag));
            sqlCommand.Parameters.Add(new SqlParameter("@clearingFirmId", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, clearingFirmId));
            sqlCommand.Parameters.Add(new SqlParameter("@destinationId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, destinationRow[destinationTable.DestinationIdColumn]));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId1", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId1));
            sqlCommand.Parameters.Add(new SqlParameter("@fixAccount", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixAccount));
            sqlCommand.Parameters.Add(new SqlParameter("@fixAccountSuffixLength", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixAccountSuffixLength));
            sqlCommand.Parameters.Add(new SqlParameter("@fixExchangeMnemonic", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixExchangeMnemonic));
            sqlCommand.Parameters.Add(new SqlParameter("@fixExecBroker", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixExecBroker));
            sqlCommand.Parameters.Add(new SqlParameter("@fixExecDestinationListed", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixExecDestinationListed));
            sqlCommand.Parameters.Add(new SqlParameter("@fixExecDestinationUnlisted", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixExecDestinationUnlisted));
            sqlCommand.Parameters.Add(new SqlParameter("@fixHandleInstListed", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixHandleInstListed));
            sqlCommand.Parameters.Add(new SqlParameter("@fixHandleInstUnlisted", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixHandleInstUnlisted));
            sqlCommand.Parameters.Add(new SqlParameter("@fixIoiRoutingId", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixIoiRoutingId));
            sqlCommand.Parameters.Add(new SqlParameter("@fixIoiRoutingType", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixIoiRoutingType));
            sqlCommand.Parameters.Add(new SqlParameter("@fixNetCommissionType", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixNetCommissionType));
            sqlCommand.Parameters.Add(new SqlParameter("@fixNoteTagId", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixNoteTagId));
            sqlCommand.Parameters.Add(new SqlParameter("@fixOnBehalfOf", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixOnBehalfOf));
            sqlCommand.Parameters.Add(new SqlParameter("@fixOnBehalfOfSub", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixOnBehalfOfSub));
            sqlCommand.Parameters.Add(new SqlParameter("@fixOrderIdFormat", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixOrderIdFormat));
            sqlCommand.Parameters.Add(new SqlParameter("@fixPassiveTag", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixPassiveTag));
            sqlCommand.Parameters.Add(new SqlParameter("@fixProactiveTag", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixProactiveTag));
            sqlCommand.Parameters.Add(new SqlParameter("@fixSourceCompany", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixSourceCompany));
            sqlCommand.Parameters.Add(new SqlParameter("@fixSourceId", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixSourceId));
            sqlCommand.Parameters.Add(new SqlParameter("@fixSourceTrader", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixSourceTrader));
            sqlCommand.Parameters.Add(new SqlParameter("@fixTargetCompany", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixTargetCompany));
            sqlCommand.Parameters.Add(new SqlParameter("@fixTargetLocationId", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixTargetLocationId));
            sqlCommand.Parameters.Add(new SqlParameter("@fixTargetTrader", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixTargetTrader));
            sqlCommand.Parameters.Add(new SqlParameter("@fixVersion", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@isBroker", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isBroker));
            sqlCommand.Parameters.Add(new SqlParameter("@isCancelAllowed", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isCancelAllowed));
            sqlCommand.Parameters.Add(new SqlParameter("@isCancelReplaceAllowed", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isCancelReplaceAllowed));
            sqlCommand.Parameters.Add(new SqlParameter("@isEcn", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isEcn));
            sqlCommand.Parameters.Add(new SqlParameter("@isExchange", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isExchange));
            sqlCommand.Parameters.Add(new SqlParameter("@isInternal", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isInternal));
            sqlCommand.Parameters.Add(new SqlParameter("@isIoiAllowed", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isIoiAllowed));
            sqlCommand.Parameters.Add(new SqlParameter("@isLimitPricingAllowed", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isLimitPricingAllowed));
            sqlCommand.Parameters.Add(new SqlParameter("@isMarketOnClosePricingAllowed", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isMarketOnClosePricingAllowed));
            sqlCommand.Parameters.Add(new SqlParameter("@isMarketPricingAllowed", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isMarketPricingAllowed));
            sqlCommand.Parameters.Add(new SqlParameter("@isSystemUp", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isSystemUp));
            sqlCommand.Parameters.Add(new SqlParameter("@isTagEligible", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isTagEligible));
            sqlCommand.Parameters.Add(new SqlParameter("@isTradeAwayAllowed", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isTradeAwayAllowed));
            sqlCommand.Parameters.Add(new SqlParameter("@isUnsolicitedTradeAllowed", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isUnsolicitedTradeAllowed));
            sqlCommand.Parameters.Add(new SqlParameter("@lotSize", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, lotSize));
            sqlCommand.Parameters.Add(new SqlParameter("@maximumQuantityListedLimit", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, maximumQuantityListedLimit));
            sqlCommand.Parameters.Add(new SqlParameter("@maximumQuantityListedMarket", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, maximumQuantityListedMarket));
            sqlCommand.Parameters.Add(new SqlParameter("@maximumQuantityUnlistedLimit", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, maximumQuantityUnlistedLimit));
            sqlCommand.Parameters.Add(new SqlParameter("@maximumQuantityUnlistedMarket", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, maximumQuantityUnlistedMarket));
            sqlCommand.Parameters.Add(new SqlParameter("@modifiedTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, modifiedTime));
            sqlCommand.Parameters.Add(new SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, name));
            sqlCommand.Parameters.Add(new SqlParameter("@newOrderCustomFixTag", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, newOrderCustomFixTag));
            sqlCommand.Parameters.Add(new SqlParameter("@oatsDepartmentId", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, oatsDepartmentId));
            sqlCommand.Parameters.Add(new SqlParameter("@oatsDestinationCode", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, oatsDestinationCode));
            sqlCommand.Parameters.Add(new SqlParameter("@oatsReceivingMpi", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, oatsReceivingMpi));
            sqlCommand.Parameters.Add(new SqlParameter("@oatsRouteMethod", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, oatsRouteMethod));
            sqlCommand.Parameters.Add(new SqlParameter("@oatsRoutingMpi", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, oatsRoutingMpi));
            sqlCommand.Parameters.Add(new SqlParameter("@oatsSentMpi", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, oatsSentMpi));
            sqlCommand.Parameters.Add(new SqlParameter("@oatsTerminalId", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, oatsTerminalId));
            sqlCommand.Parameters.Add(new SqlParameter("@onCloseCancelTime", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, onCloseCancelTime));
            sqlCommand.Parameters.Add(new SqlParameter("@onCloseOrderTime", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, onCloseOrderTime));
            sqlCommand.Parameters.Add(new SqlParameter("@perShareUsageFee", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, perShareUsageFee));
            sqlCommand.Parameters.Add(new SqlParameter("@postMarketLogic", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, postMarketLogic));
            sqlCommand.Parameters.Add(new SqlParameter("@primaryBackupDestinationId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, primaryBackupDestinationId));
            sqlCommand.Parameters.Add(new SqlParameter("@secondaryBackupDestinationId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, secondaryBackupDestinationId));
            sqlCommand.Parameters.Add(new SqlParameter("@selectnetFlag", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, selectnetFlag));
            sqlCommand.Parameters.Add(new SqlParameter("@shortName", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, shortName));
            sqlCommand.Parameters.Add(new SqlParameter("@sourceId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, sourceId0));
            sqlCommand.Parameters.Add(new SqlParameter("@sourceId1", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, sourceId1));
            sqlCommand.Parameters.Add(new SqlParameter("@sourceId2", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, sourceId2));
            sqlCommand.Parameters.Add(new SqlParameter("@sourceId3", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, sourceId3));
            sqlCommand.Parameters.Add(new SqlParameter("@sourceId4", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, sourceId4));
            sqlCommand.Parameters.Add(new SqlParameter("@sourceId5", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, sourceId5));
            sqlCommand.Parameters.Add(new SqlParameter("@sourceId6", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, sourceId6));
            sqlCommand.Parameters.Add(new SqlParameter("@sourceId7", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, sourceId7));
            sqlCommand.Parameters.Add(new SqlParameter("@uniqueShortName", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, uniqueShortName));
            sqlCommand.ExecuteNonQuery();
            // Return Statements
            return destinationRow.DestinationId;
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Update(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Update' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.DestinationLock);
            DestinationOrder.Archive(adoTransaction);
            SourceOrder.Archive(adoTransaction);
            WorkingOrder.Archive(adoTransaction);
        }
        
        /// <summary>Inserts a Destination record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Update(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            object cancelCustomFixTag = parameters["cancelCustomFixTag"].Value;
            object clearingFirmId = parameters["clearingFirmId"].Value;
            int destinationId = parameters["destinationId"];
            object externalId0 = parameters["externalId0"].Value;
            object externalId1 = parameters["externalId1"].Value;
            object fixAccount = parameters["fixAccount"].Value;
            object fixAccountSuffixLength = parameters["fixAccountSuffixLength"].Value;
            object fixExchangeMnemonic = parameters["fixExchangeMnemonic"].Value;
            object fixExecBroker = parameters["fixExecBroker"].Value;
            object fixExecDestinationListed = parameters["fixExecDestinationListed"].Value;
            object fixExecDestinationUnlisted = parameters["fixExecDestinationUnlisted"].Value;
            object fixHandleInstListed = parameters["fixHandleInstListed"].Value;
            object fixHandleInstUnlisted = parameters["fixHandleInstUnlisted"].Value;
            object fixIoiRoutingId = parameters["fixIoiRoutingId"].Value;
            object fixIoiRoutingType = parameters["fixIoiRoutingType"].Value;
            object fixNetCommissionType = parameters["fixNetCommissionType"].Value;
            object fixNoteTagId = parameters["fixNoteTagId"].Value;
            object fixOnBehalfOf = parameters["fixOnBehalfOf"].Value;
            object fixOnBehalfOfSub = parameters["fixOnBehalfOfSub"].Value;
            object fixOrderIdFormat = parameters["fixOrderIdFormat"].Value;
            object fixPassiveTag = parameters["fixPassiveTag"].Value;
            object fixProactiveTag = parameters["fixProactiveTag"].Value;
            object fixSourceCompany = parameters["fixSourceCompany"].Value;
            object fixSourceId = parameters["fixSourceId"].Value;
            object fixSourceTrader = parameters["fixSourceTrader"].Value;
            object fixTargetCompany = parameters["fixTargetCompany"].Value;
            object fixTargetLocationId = parameters["fixTargetLocationId"].Value;
            object fixTargetTrader = parameters["fixTargetTrader"].Value;
            object fixVersion = parameters["fixVersion"].Value;
            object isBroker = parameters["isBroker"].Value;
            object isCancelAllowed = parameters["isCancelAllowed"].Value;
            object isCancelReplaceAllowed = parameters["isCancelReplaceAllowed"].Value;
            object isEcn = parameters["isEcn"].Value;
            object isExchange = parameters["isExchange"].Value;
            object isInternal = parameters["isInternal"].Value;
            object isIoiAllowed = parameters["isIoiAllowed"].Value;
            object isLimitPricingAllowed = parameters["isLimitPricingAllowed"].Value;
            object isMarketOnClosePricingAllowed = parameters["isMarketOnClosePricingAllowed"].Value;
            object isMarketPricingAllowed = parameters["isMarketPricingAllowed"].Value;
            object isSystemUp = parameters["isSystemUp"].Value;
            object isTagEligible = parameters["isTagEligible"].Value;
            object isTradeAwayAllowed = parameters["isTradeAwayAllowed"].Value;
            object isUnsolicitedTradeAllowed = parameters["isUnsolicitedTradeAllowed"].Value;
            object lotSize = parameters["lotSize"].Value;
            object maximumQuantityListedLimit = parameters["maximumQuantityListedLimit"].Value;
            object maximumQuantityListedMarket = parameters["maximumQuantityListedMarket"].Value;
            object maximumQuantityUnlistedLimit = parameters["maximumQuantityUnlistedLimit"].Value;
            object maximumQuantityUnlistedMarket = parameters["maximumQuantityUnlistedMarket"].Value;
            object modifiedTime = parameters["modifiedTime"].Value;
            object name = parameters["name"].Value;
            object newOrderCustomFixTag = parameters["newOrderCustomFixTag"].Value;
            object oatsDepartmentId = parameters["oatsDepartmentId"].Value;
            object oatsDestinationCode = parameters["oatsDestinationCode"].Value;
            object oatsReceivingMpi = parameters["oatsReceivingMpi"].Value;
            object oatsRouteMethod = parameters["oatsRouteMethod"].Value;
            object oatsRoutingMpi = parameters["oatsRoutingMpi"].Value;
            object oatsSentMpi = parameters["oatsSentMpi"].Value;
            object oatsTerminalId = parameters["oatsTerminalId"].Value;
            object onCloseCancelTime = parameters["onCloseCancelTime"].Value;
            object onCloseOrderTime = parameters["onCloseOrderTime"].Value;
            object perShareUsageFee = parameters["perShareUsageFee"].Value;
            object postMarketLogic = parameters["postMarketLogic"].Value;
            object primaryBackupDestinationId = parameters["primaryBackupDestinationId"].Value;
            object secondaryBackupDestinationId = parameters["secondaryBackupDestinationId"].Value;
            object selectnetFlag = parameters["selectnetFlag"].Value;
            object shortName = parameters["shortName"].Value;
            object sourceId0 = parameters["sourceId0"].Value;
            object sourceId1 = parameters["sourceId1"].Value;
            object sourceId2 = parameters["sourceId2"].Value;
            object sourceId3 = parameters["sourceId3"].Value;
            object sourceId4 = parameters["sourceId4"].Value;
            object sourceId5 = parameters["sourceId5"].Value;
            object sourceId6 = parameters["sourceId6"].Value;
            object sourceId7 = parameters["sourceId7"].Value;
            object uniqueShortName = parameters["uniqueShortName"].Value;
            // Call the internal method to complete the operation.
            Destination.Update(adoTransaction, sqlTransaction, ref rowVersion, cancelCustomFixTag, clearingFirmId, destinationId, externalId0, externalId1, fixAccount, fixAccountSuffixLength, fixExchangeMnemonic, fixExecBroker, fixExecDestinationListed, fixExecDestinationUnlisted, fixHandleInstListed, fixHandleInstUnlisted, fixIoiRoutingId, fixIoiRoutingType, fixNetCommissionType, fixNoteTagId, fixOnBehalfOf, fixOnBehalfOfSub, fixOrderIdFormat, fixPassiveTag, fixProactiveTag, fixSourceCompany, fixSourceId, fixSourceTrader, fixTargetCompany, fixTargetLocationId, fixTargetTrader, fixVersion, isBroker, isCancelAllowed, isCancelReplaceAllowed, isEcn, isExchange, isInternal, isIoiAllowed, isLimitPricingAllowed, isMarketOnClosePricingAllowed, isMarketPricingAllowed, isSystemUp, isTagEligible, isTradeAwayAllowed, isUnsolicitedTradeAllowed, lotSize, maximumQuantityListedLimit, maximumQuantityListedMarket, maximumQuantityUnlistedLimit, maximumQuantityUnlistedMarket, modifiedTime, name, newOrderCustomFixTag, oatsDepartmentId, oatsDestinationCode, oatsReceivingMpi, oatsRouteMethod, oatsRoutingMpi, oatsSentMpi, oatsTerminalId, onCloseCancelTime, onCloseOrderTime, perShareUsageFee, postMarketLogic, primaryBackupDestinationId, secondaryBackupDestinationId, selectnetFlag, shortName, sourceId0, sourceId1, sourceId2, sourceId3, sourceId4, sourceId5, sourceId6, sourceId7, uniqueShortName);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Updates a Destination record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="rowVersion">The version number of the row</param>
        /// <param name="cancelCustomFixTag">The value for the CancelCustomFixTag column.</param>
        /// <param name="clearingFirmId">The value for the ClearingFirmId column.</param>
        /// <param name="destinationId">The value for the DestinationId column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="externalId1">The value for the ExternalId1 column.</param>
        /// <param name="fixAccount">The value for the FixAccount column.</param>
        /// <param name="fixAccountSuffixLength">The value for the FixAccountSuffixLength column.</param>
        /// <param name="fixExchangeMnemonic">The value for the FixExchangeMnemonic column.</param>
        /// <param name="fixExecBroker">The value for the FixExecBroker column.</param>
        /// <param name="fixExecDestinationListed">The value for the FixExecDestinationListed column.</param>
        /// <param name="fixExecDestinationUnlisted">The value for the FixExecDestinationUnlisted column.</param>
        /// <param name="fixHandleInstListed">The value for the FixHandleInstListed column.</param>
        /// <param name="fixHandleInstUnlisted">The value for the FixHandleInstUnlisted column.</param>
        /// <param name="fixIoiRoutingId">The value for the FixIoiRoutingId column.</param>
        /// <param name="fixIoiRoutingType">The value for the FixIoiRoutingType column.</param>
        /// <param name="fixNetCommissionType">The value for the FixNetCommissionType column.</param>
        /// <param name="fixNoteTagId">The value for the FixNoteTagId column.</param>
        /// <param name="fixOnBehalfOf">The value for the FixOnBehalfOf column.</param>
        /// <param name="fixOnBehalfOfSub">The value for the FixOnBehalfOfSub column.</param>
        /// <param name="fixOrderIdFormat">The value for the FixOrderIdFormat column.</param>
        /// <param name="fixPassiveTag">The value for the FixPassiveTag column.</param>
        /// <param name="fixProactiveTag">The value for the FixProactiveTag column.</param>
        /// <param name="fixSourceCompany">The value for the FixSourceCompany column.</param>
        /// <param name="fixSourceId">The value for the FixSourceId column.</param>
        /// <param name="fixSourceTrader">The value for the FixSourceTrader column.</param>
        /// <param name="fixTargetCompany">The value for the FixTargetCompany column.</param>
        /// <param name="fixTargetLocationId">The value for the FixTargetLocationId column.</param>
        /// <param name="fixTargetTrader">The value for the FixTargetTrader column.</param>
        /// <param name="fixVersion">The value for the FixVersion column.</param>
        /// <param name="isBroker">The value for the IsBroker column.</param>
        /// <param name="isCancelAllowed">The value for the IsCancelAllowed column.</param>
        /// <param name="isCancelReplaceAllowed">The value for the IsCancelReplaceAllowed column.</param>
        /// <param name="isEcn">The value for the IsEcn column.</param>
        /// <param name="isExchange">The value for the IsExchange column.</param>
        /// <param name="isInternal">The value for the IsInternal column.</param>
        /// <param name="isIoiAllowed">The value for the IsIoiAllowed column.</param>
        /// <param name="isLimitPricingAllowed">The value for the IsLimitPricingAllowed column.</param>
        /// <param name="isMarketOnClosePricingAllowed">The value for the IsMarketOnClosePricingAllowed column.</param>
        /// <param name="isMarketPricingAllowed">The value for the IsMarketPricingAllowed column.</param>
        /// <param name="isSystemUp">The value for the IsSystemUp column.</param>
        /// <param name="isTagEligible">The value for the IsTagEligible column.</param>
        /// <param name="isTradeAwayAllowed">The value for the IsTradeAwayAllowed column.</param>
        /// <param name="isUnsolicitedTradeAllowed">The value for the IsUnsolicitedTradeAllowed column.</param>
        /// <param name="lotSize">The value for the LotSize column.</param>
        /// <param name="maximumQuantityListedLimit">The value for the MaximumQuantityListedLimit column.</param>
        /// <param name="maximumQuantityListedMarket">The value for the MaximumQuantityListedMarket column.</param>
        /// <param name="maximumQuantityUnlistedLimit">The value for the MaximumQuantityUnlistedLimit column.</param>
        /// <param name="maximumQuantityUnlistedMarket">The value for the MaximumQuantityUnlistedMarket column.</param>
        /// <param name="modifiedTime">The value for the ModifiedTime column.</param>
        /// <param name="name">The value for the Name column.</param>
        /// <param name="newOrderCustomFixTag">The value for the NewOrderCustomFixTag column.</param>
        /// <param name="oatsDepartmentId">The value for the OatsDepartmentId column.</param>
        /// <param name="oatsDestinationCode">The value for the OatsDestinationCode column.</param>
        /// <param name="oatsReceivingMpi">The value for the OatsReceivingMpi column.</param>
        /// <param name="oatsRouteMethod">The value for the OatsRouteMethod column.</param>
        /// <param name="oatsRoutingMpi">The value for the OatsRoutingMpi column.</param>
        /// <param name="oatsSentMpi">The value for the OatsSentMpi column.</param>
        /// <param name="oatsTerminalId">The value for the OatsTerminalId column.</param>
        /// <param name="onCloseCancelTime">The value for the OnCloseCancelTime column.</param>
        /// <param name="onCloseOrderTime">The value for the OnCloseOrderTime column.</param>
        /// <param name="perShareUsageFee">The value for the PerShareUsageFee column.</param>
        /// <param name="postMarketLogic">The value for the PostMarketLogic column.</param>
        /// <param name="primaryBackupDestinationId">The value for the PrimaryBackupDestinationId column.</param>
        /// <param name="secondaryBackupDestinationId">The value for the SecondaryBackupDestinationId column.</param>
        /// <param name="selectnetFlag">The value for the SelectnetFlag column.</param>
        /// <param name="shortName">The value for the ShortName column.</param>
        /// <param name="sourceId0">The value for the SourceId0 column.</param>
        /// <param name="sourceId1">The value for the SourceId1 column.</param>
        /// <param name="sourceId2">The value for the SourceId2 column.</param>
        /// <param name="sourceId3">The value for the SourceId3 column.</param>
        /// <param name="sourceId4">The value for the SourceId4 column.</param>
        /// <param name="sourceId5">The value for the SourceId5 column.</param>
        /// <param name="sourceId6">The value for the SourceId6 column.</param>
        /// <param name="sourceId7">The value for the SourceId7 column.</param>
        /// <param name="uniqueShortName">The value for the UniqueShortName column.</param>
        public static void Update(
                    AdoTransaction adoTransaction, 
                    SqlTransaction sqlTransaction, 
                    ref long rowVersion, 
                    object cancelCustomFixTag, 
                    object clearingFirmId, 
                    int destinationId, 
                    object externalId0, 
                    object externalId1, 
                    object fixAccount, 
                    object fixAccountSuffixLength, 
                    object fixExchangeMnemonic, 
                    object fixExecBroker, 
                    object fixExecDestinationListed, 
                    object fixExecDestinationUnlisted, 
                    object fixHandleInstListed, 
                    object fixHandleInstUnlisted, 
                    object fixIoiRoutingId, 
                    object fixIoiRoutingType, 
                    object fixNetCommissionType, 
                    object fixNoteTagId, 
                    object fixOnBehalfOf, 
                    object fixOnBehalfOfSub, 
                    object fixOrderIdFormat, 
                    object fixPassiveTag, 
                    object fixProactiveTag, 
                    object fixSourceCompany, 
                    object fixSourceId, 
                    object fixSourceTrader, 
                    object fixTargetCompany, 
                    object fixTargetLocationId, 
                    object fixTargetTrader, 
                    object fixVersion, 
                    object isBroker, 
                    object isCancelAllowed, 
                    object isCancelReplaceAllowed, 
                    object isEcn, 
                    object isExchange, 
                    object isInternal, 
                    object isIoiAllowed, 
                    object isLimitPricingAllowed, 
                    object isMarketOnClosePricingAllowed, 
                    object isMarketPricingAllowed, 
                    object isSystemUp, 
                    object isTagEligible, 
                    object isTradeAwayAllowed, 
                    object isUnsolicitedTradeAllowed, 
                    object lotSize, 
                    object maximumQuantityListedLimit, 
                    object maximumQuantityListedMarket, 
                    object maximumQuantityUnlistedLimit, 
                    object maximumQuantityUnlistedMarket, 
                    object modifiedTime, 
                    object name, 
                    object newOrderCustomFixTag, 
                    object oatsDepartmentId, 
                    object oatsDestinationCode, 
                    object oatsReceivingMpi, 
                    object oatsRouteMethod, 
                    object oatsRoutingMpi, 
                    object oatsSentMpi, 
                    object oatsTerminalId, 
                    object onCloseCancelTime, 
                    object onCloseOrderTime, 
                    object perShareUsageFee, 
                    object postMarketLogic, 
                    object primaryBackupDestinationId, 
                    object secondaryBackupDestinationId, 
                    object selectnetFlag, 
                    object shortName, 
                    object sourceId0, 
                    object sourceId1, 
                    object sourceId2, 
                    object sourceId3, 
                    object sourceId4, 
                    object sourceId5, 
                    object sourceId6, 
                    object sourceId7, 
                    object uniqueShortName)
        {
            // Accessor for the Destination Table.
            ServerMarketData.DestinationDataTable destinationTable = ServerMarketData.Destination;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.DestinationRow destinationRow = destinationTable.FindByDestinationId(destinationId);
            if ((destinationRow == null))
            {
                throw new Exception(string.Format("The Destination table does not have an element identified by {0}", destinationId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((destinationRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Apply Defaults
            if ((cancelCustomFixTag == null))
            {
                cancelCustomFixTag = destinationRow[destinationTable.CancelCustomFixTagColumn];
            }
            if ((clearingFirmId == null))
            {
                clearingFirmId = destinationRow[destinationTable.ClearingFirmIdColumn];
            }
            if ((externalId0 == null))
            {
                externalId0 = destinationRow[destinationTable.ExternalId0Column];
            }
            if ((externalId1 == null))
            {
                externalId1 = destinationRow[destinationTable.ExternalId1Column];
            }
            if ((fixAccount == null))
            {
                fixAccount = destinationRow[destinationTable.FixAccountColumn];
            }
            if ((fixAccountSuffixLength == null))
            {
                fixAccountSuffixLength = destinationRow[destinationTable.FixAccountSuffixLengthColumn];
            }
            if ((fixExchangeMnemonic == null))
            {
                fixExchangeMnemonic = destinationRow[destinationTable.FixExchangeMnemonicColumn];
            }
            if ((fixExecBroker == null))
            {
                fixExecBroker = destinationRow[destinationTable.FixExecBrokerColumn];
            }
            if ((fixExecDestinationListed == null))
            {
                fixExecDestinationListed = destinationRow[destinationTable.FixExecDestinationListedColumn];
            }
            if ((fixExecDestinationUnlisted == null))
            {
                fixExecDestinationUnlisted = destinationRow[destinationTable.FixExecDestinationUnlistedColumn];
            }
            if ((fixHandleInstListed == null))
            {
                fixHandleInstListed = destinationRow[destinationTable.FixHandleInstListedColumn];
            }
            if ((fixHandleInstUnlisted == null))
            {
                fixHandleInstUnlisted = destinationRow[destinationTable.FixHandleInstUnlistedColumn];
            }
            if ((fixIoiRoutingId == null))
            {
                fixIoiRoutingId = destinationRow[destinationTable.FixIoiRoutingIdColumn];
            }
            if ((fixIoiRoutingType == null))
            {
                fixIoiRoutingType = destinationRow[destinationTable.FixIoiRoutingTypeColumn];
            }
            if ((fixNetCommissionType == null))
            {
                fixNetCommissionType = destinationRow[destinationTable.FixNetCommissionTypeColumn];
            }
            if ((fixNoteTagId == null))
            {
                fixNoteTagId = destinationRow[destinationTable.FixNoteTagIdColumn];
            }
            if ((fixOnBehalfOf == null))
            {
                fixOnBehalfOf = destinationRow[destinationTable.FixOnBehalfOfColumn];
            }
            if ((fixOnBehalfOfSub == null))
            {
                fixOnBehalfOfSub = destinationRow[destinationTable.FixOnBehalfOfSubColumn];
            }
            if ((fixOrderIdFormat == null))
            {
                fixOrderIdFormat = destinationRow[destinationTable.FixOrderIdFormatColumn];
            }
            if ((fixPassiveTag == null))
            {
                fixPassiveTag = destinationRow[destinationTable.FixPassiveTagColumn];
            }
            if ((fixProactiveTag == null))
            {
                fixProactiveTag = destinationRow[destinationTable.FixProactiveTagColumn];
            }
            if ((fixSourceCompany == null))
            {
                fixSourceCompany = destinationRow[destinationTable.FixSourceCompanyColumn];
            }
            if ((fixSourceId == null))
            {
                fixSourceId = destinationRow[destinationTable.FixSourceIdColumn];
            }
            if ((fixSourceTrader == null))
            {
                fixSourceTrader = destinationRow[destinationTable.FixSourceTraderColumn];
            }
            if ((fixTargetCompany == null))
            {
                fixTargetCompany = destinationRow[destinationTable.FixTargetCompanyColumn];
            }
            if ((fixTargetLocationId == null))
            {
                fixTargetLocationId = destinationRow[destinationTable.FixTargetLocationIdColumn];
            }
            if ((fixTargetTrader == null))
            {
                fixTargetTrader = destinationRow[destinationTable.FixTargetTraderColumn];
            }
            if ((fixVersion == null))
            {
                fixVersion = destinationRow[destinationTable.FixVersionColumn];
            }
            if ((isBroker == null))
            {
                isBroker = destinationRow[destinationTable.IsBrokerColumn];
            }
            if ((isCancelAllowed == null))
            {
                isCancelAllowed = destinationRow[destinationTable.IsCancelAllowedColumn];
            }
            if ((isCancelReplaceAllowed == null))
            {
                isCancelReplaceAllowed = destinationRow[destinationTable.IsCancelReplaceAllowedColumn];
            }
            if ((isEcn == null))
            {
                isEcn = destinationRow[destinationTable.IsEcnColumn];
            }
            if ((isExchange == null))
            {
                isExchange = destinationRow[destinationTable.IsExchangeColumn];
            }
            if ((isInternal == null))
            {
                isInternal = destinationRow[destinationTable.IsInternalColumn];
            }
            if ((isIoiAllowed == null))
            {
                isIoiAllowed = destinationRow[destinationTable.IsIoiAllowedColumn];
            }
            if ((isLimitPricingAllowed == null))
            {
                isLimitPricingAllowed = destinationRow[destinationTable.IsLimitPricingAllowedColumn];
            }
            if ((isMarketOnClosePricingAllowed == null))
            {
                isMarketOnClosePricingAllowed = destinationRow[destinationTable.IsMarketOnClosePricingAllowedColumn];
            }
            if ((isMarketPricingAllowed == null))
            {
                isMarketPricingAllowed = destinationRow[destinationTable.IsMarketPricingAllowedColumn];
            }
            if ((isSystemUp == null))
            {
                isSystemUp = destinationRow[destinationTable.IsSystemUpColumn];
            }
            if ((isTagEligible == null))
            {
                isTagEligible = destinationRow[destinationTable.IsTagEligibleColumn];
            }
            if ((isTradeAwayAllowed == null))
            {
                isTradeAwayAllowed = destinationRow[destinationTable.IsTradeAwayAllowedColumn];
            }
            if ((isUnsolicitedTradeAllowed == null))
            {
                isUnsolicitedTradeAllowed = destinationRow[destinationTable.IsUnsolicitedTradeAllowedColumn];
            }
            if ((lotSize == null))
            {
                lotSize = destinationRow[destinationTable.LotSizeColumn];
            }
            if ((maximumQuantityListedLimit == null))
            {
                maximumQuantityListedLimit = destinationRow[destinationTable.MaximumQuantityListedLimitColumn];
            }
            if ((maximumQuantityListedMarket == null))
            {
                maximumQuantityListedMarket = destinationRow[destinationTable.MaximumQuantityListedMarketColumn];
            }
            if ((maximumQuantityUnlistedLimit == null))
            {
                maximumQuantityUnlistedLimit = destinationRow[destinationTable.MaximumQuantityUnlistedLimitColumn];
            }
            if ((maximumQuantityUnlistedMarket == null))
            {
                maximumQuantityUnlistedMarket = destinationRow[destinationTable.MaximumQuantityUnlistedMarketColumn];
            }
            if ((modifiedTime == null))
            {
                modifiedTime = destinationRow[destinationTable.ModifiedTimeColumn];
            }
            if ((name == null))
            {
                name = destinationRow[destinationTable.NameColumn];
            }
            if ((newOrderCustomFixTag == null))
            {
                newOrderCustomFixTag = destinationRow[destinationTable.NewOrderCustomFixTagColumn];
            }
            if ((oatsDepartmentId == null))
            {
                oatsDepartmentId = destinationRow[destinationTable.OatsDepartmentIdColumn];
            }
            if ((oatsDestinationCode == null))
            {
                oatsDestinationCode = destinationRow[destinationTable.OatsDestinationCodeColumn];
            }
            if ((oatsReceivingMpi == null))
            {
                oatsReceivingMpi = destinationRow[destinationTable.OatsReceivingMpiColumn];
            }
            if ((oatsRouteMethod == null))
            {
                oatsRouteMethod = destinationRow[destinationTable.OatsRouteMethodColumn];
            }
            if ((oatsRoutingMpi == null))
            {
                oatsRoutingMpi = destinationRow[destinationTable.OatsRoutingMpiColumn];
            }
            if ((oatsSentMpi == null))
            {
                oatsSentMpi = destinationRow[destinationTable.OatsSentMpiColumn];
            }
            if ((oatsTerminalId == null))
            {
                oatsTerminalId = destinationRow[destinationTable.OatsTerminalIdColumn];
            }
            if ((onCloseCancelTime == null))
            {
                onCloseCancelTime = destinationRow[destinationTable.OnCloseCancelTimeColumn];
            }
            if ((onCloseOrderTime == null))
            {
                onCloseOrderTime = destinationRow[destinationTable.OnCloseOrderTimeColumn];
            }
            if ((perShareUsageFee == null))
            {
                perShareUsageFee = destinationRow[destinationTable.PerShareUsageFeeColumn];
            }
            if ((postMarketLogic == null))
            {
                postMarketLogic = destinationRow[destinationTable.PostMarketLogicColumn];
            }
            if ((primaryBackupDestinationId == null))
            {
                primaryBackupDestinationId = destinationRow[destinationTable.PrimaryBackupDestinationIdColumn];
            }
            if ((secondaryBackupDestinationId == null))
            {
                secondaryBackupDestinationId = destinationRow[destinationTable.SecondaryBackupDestinationIdColumn];
            }
            if ((selectnetFlag == null))
            {
                selectnetFlag = destinationRow[destinationTable.SelectnetFlagColumn];
            }
            if ((shortName == null))
            {
                shortName = destinationRow[destinationTable.ShortNameColumn];
            }
            if ((sourceId0 == null))
            {
                sourceId0 = destinationRow[destinationTable.SourceId0Column];
            }
            if ((sourceId1 == null))
            {
                sourceId1 = destinationRow[destinationTable.SourceId1Column];
            }
            if ((sourceId2 == null))
            {
                sourceId2 = destinationRow[destinationTable.SourceId2Column];
            }
            if ((sourceId3 == null))
            {
                sourceId3 = destinationRow[destinationTable.SourceId3Column];
            }
            if ((sourceId4 == null))
            {
                sourceId4 = destinationRow[destinationTable.SourceId4Column];
            }
            if ((sourceId5 == null))
            {
                sourceId5 = destinationRow[destinationTable.SourceId5Column];
            }
            if ((sourceId6 == null))
            {
                sourceId6 = destinationRow[destinationTable.SourceId6Column];
            }
            if ((sourceId7 == null))
            {
                sourceId7 = destinationRow[destinationTable.SourceId7Column];
            }
            if ((uniqueShortName == null))
            {
                uniqueShortName = destinationRow[destinationTable.UniqueShortNameColumn];
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Update the record in the ADO database.
            destinationRow[destinationTable.RowVersionColumn] = rowVersion;
            destinationRow[destinationTable.CancelCustomFixTagColumn] = cancelCustomFixTag;
            destinationRow[destinationTable.ClearingFirmIdColumn] = clearingFirmId;
            destinationRow[destinationTable.ExternalId0Column] = externalId0;
            destinationRow[destinationTable.ExternalId1Column] = externalId1;
            destinationRow[destinationTable.FixAccountColumn] = fixAccount;
            destinationRow[destinationTable.FixAccountSuffixLengthColumn] = fixAccountSuffixLength;
            destinationRow[destinationTable.FixExchangeMnemonicColumn] = fixExchangeMnemonic;
            destinationRow[destinationTable.FixExecBrokerColumn] = fixExecBroker;
            destinationRow[destinationTable.FixExecDestinationListedColumn] = fixExecDestinationListed;
            destinationRow[destinationTable.FixExecDestinationUnlistedColumn] = fixExecDestinationUnlisted;
            destinationRow[destinationTable.FixHandleInstListedColumn] = fixHandleInstListed;
            destinationRow[destinationTable.FixHandleInstUnlistedColumn] = fixHandleInstUnlisted;
            destinationRow[destinationTable.FixIoiRoutingIdColumn] = fixIoiRoutingId;
            destinationRow[destinationTable.FixIoiRoutingTypeColumn] = fixIoiRoutingType;
            destinationRow[destinationTable.FixNetCommissionTypeColumn] = fixNetCommissionType;
            destinationRow[destinationTable.FixNoteTagIdColumn] = fixNoteTagId;
            destinationRow[destinationTable.FixOnBehalfOfColumn] = fixOnBehalfOf;
            destinationRow[destinationTable.FixOnBehalfOfSubColumn] = fixOnBehalfOfSub;
            destinationRow[destinationTable.FixOrderIdFormatColumn] = fixOrderIdFormat;
            destinationRow[destinationTable.FixPassiveTagColumn] = fixPassiveTag;
            destinationRow[destinationTable.FixProactiveTagColumn] = fixProactiveTag;
            destinationRow[destinationTable.FixSourceCompanyColumn] = fixSourceCompany;
            destinationRow[destinationTable.FixSourceIdColumn] = fixSourceId;
            destinationRow[destinationTable.FixSourceTraderColumn] = fixSourceTrader;
            destinationRow[destinationTable.FixTargetCompanyColumn] = fixTargetCompany;
            destinationRow[destinationTable.FixTargetLocationIdColumn] = fixTargetLocationId;
            destinationRow[destinationTable.FixTargetTraderColumn] = fixTargetTrader;
            destinationRow[destinationTable.FixVersionColumn] = fixVersion;
            destinationRow[destinationTable.IsBrokerColumn] = isBroker;
            destinationRow[destinationTable.IsCancelAllowedColumn] = isCancelAllowed;
            destinationRow[destinationTable.IsCancelReplaceAllowedColumn] = isCancelReplaceAllowed;
            destinationRow[destinationTable.IsEcnColumn] = isEcn;
            destinationRow[destinationTable.IsExchangeColumn] = isExchange;
            destinationRow[destinationTable.IsInternalColumn] = isInternal;
            destinationRow[destinationTable.IsIoiAllowedColumn] = isIoiAllowed;
            destinationRow[destinationTable.IsLimitPricingAllowedColumn] = isLimitPricingAllowed;
            destinationRow[destinationTable.IsMarketOnClosePricingAllowedColumn] = isMarketOnClosePricingAllowed;
            destinationRow[destinationTable.IsMarketPricingAllowedColumn] = isMarketPricingAllowed;
            destinationRow[destinationTable.IsSystemUpColumn] = isSystemUp;
            destinationRow[destinationTable.IsTagEligibleColumn] = isTagEligible;
            destinationRow[destinationTable.IsTradeAwayAllowedColumn] = isTradeAwayAllowed;
            destinationRow[destinationTable.IsUnsolicitedTradeAllowedColumn] = isUnsolicitedTradeAllowed;
            destinationRow[destinationTable.LotSizeColumn] = lotSize;
            destinationRow[destinationTable.MaximumQuantityListedLimitColumn] = maximumQuantityListedLimit;
            destinationRow[destinationTable.MaximumQuantityListedMarketColumn] = maximumQuantityListedMarket;
            destinationRow[destinationTable.MaximumQuantityUnlistedLimitColumn] = maximumQuantityUnlistedLimit;
            destinationRow[destinationTable.MaximumQuantityUnlistedMarketColumn] = maximumQuantityUnlistedMarket;
            destinationRow[destinationTable.ModifiedTimeColumn] = modifiedTime;
            destinationRow[destinationTable.NameColumn] = name;
            destinationRow[destinationTable.NewOrderCustomFixTagColumn] = newOrderCustomFixTag;
            destinationRow[destinationTable.OatsDepartmentIdColumn] = oatsDepartmentId;
            destinationRow[destinationTable.OatsDestinationCodeColumn] = oatsDestinationCode;
            destinationRow[destinationTable.OatsReceivingMpiColumn] = oatsReceivingMpi;
            destinationRow[destinationTable.OatsRouteMethodColumn] = oatsRouteMethod;
            destinationRow[destinationTable.OatsRoutingMpiColumn] = oatsRoutingMpi;
            destinationRow[destinationTable.OatsSentMpiColumn] = oatsSentMpi;
            destinationRow[destinationTable.OatsTerminalIdColumn] = oatsTerminalId;
            destinationRow[destinationTable.OnCloseCancelTimeColumn] = onCloseCancelTime;
            destinationRow[destinationTable.OnCloseOrderTimeColumn] = onCloseOrderTime;
            destinationRow[destinationTable.PerShareUsageFeeColumn] = perShareUsageFee;
            destinationRow[destinationTable.PostMarketLogicColumn] = postMarketLogic;
            destinationRow[destinationTable.PrimaryBackupDestinationIdColumn] = primaryBackupDestinationId;
            destinationRow[destinationTable.SecondaryBackupDestinationIdColumn] = secondaryBackupDestinationId;
            destinationRow[destinationTable.SelectnetFlagColumn] = selectnetFlag;
            destinationRow[destinationTable.ShortNameColumn] = shortName;
            destinationRow[destinationTable.SourceId0Column] = sourceId0;
            destinationRow[destinationTable.SourceId1Column] = sourceId1;
            destinationRow[destinationTable.SourceId2Column] = sourceId2;
            destinationRow[destinationTable.SourceId3Column] = sourceId3;
            destinationRow[destinationTable.SourceId4Column] = sourceId4;
            destinationRow[destinationTable.SourceId5Column] = sourceId5;
            destinationRow[destinationTable.SourceId6Column] = sourceId6;
            destinationRow[destinationTable.SourceId7Column] = sourceId7;
            destinationRow[destinationTable.UniqueShortNameColumn] = uniqueShortName;
            adoTransaction.DataRows.Add(destinationRow);
            // Update the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Destination\" set \"RowVersion\"=@rowVersion,\"CancelCustomFixTag\"=@cancelCus" +
                    "tomFixTag,\"ClearingFirmId\"=@clearingFirmId,\"ExternalId0\"=@externalId0,\"ExternalI" +
                    "d1\"=@externalId1,\"FixAccount\"=@fixAccount,\"FixAccountSuffixLength\"=@fixAccountSu" +
                    "ffixLength,\"FixExchangeMnemonic\"=@fixExchangeMnemonic,\"FixExecBroker\"=@fixExecBr" +
                    "oker,\"FixExecDestinationListed\"=@fixExecDestinationListed,\"FixExecDestinationUnl" +
                    "isted\"=@fixExecDestinationUnlisted,\"FixHandleInstListed\"=@fixHandleInstListed,\"F" +
                    "ixHandleInstUnlisted\"=@fixHandleInstUnlisted,\"FixIoiRoutingId\"=@fixIoiRoutingId," +
                    "\"FixIoiRoutingType\"=@fixIoiRoutingType,\"FixNetCommissionType\"=@fixNetCommissionT" +
                    "ype,\"FixNoteTagId\"=@fixNoteTagId,\"FixOnBehalfOf\"=@fixOnBehalfOf,\"FixOnBehalfOfSu" +
                    "b\"=@fixOnBehalfOfSub,\"FixOrderIdFormat\"=@fixOrderIdFormat,\"FixPassiveTag\"=@fixPa" +
                    "ssiveTag,\"FixProactiveTag\"=@fixProactiveTag,\"FixSourceCompany\"=@fixSourceCompany" +
                    ",\"FixSourceId\"=@fixSourceId,\"FixSourceTrader\"=@fixSourceTrader,\"FixTargetCompany" +
                    "\"=@fixTargetCompany,\"FixTargetLocationId\"=@fixTargetLocationId,\"FixTargetTrader\"" +
                    "=@fixTargetTrader,\"FixVersion\"=@fixVersion,\"IsBroker\"=@isBroker,\"IsCancelAllowed" +
                    "\"=@isCancelAllowed,\"IsCancelReplaceAllowed\"=@isCancelReplaceAllowed,\"IsEcn\"=@isE" +
                    "cn,\"IsExchange\"=@isExchange,\"IsInternal\"=@isInternal,\"IsIoiAllowed\"=@isIoiAllowe" +
                    "d,\"IsLimitPricingAllowed\"=@isLimitPricingAllowed,\"IsMarketOnClosePricingAllowed\"" +
                    "=@isMarketOnClosePricingAllowed,\"IsMarketPricingAllowed\"=@isMarketPricingAllowed" +
                    ",\"IsSystemUp\"=@isSystemUp,\"IsTagEligible\"=@isTagEligible,\"IsTradeAwayAllowed\"=@i" +
                    "sTradeAwayAllowed,\"IsUnsolicitedTradeAllowed\"=@isUnsolicitedTradeAllowed,\"LotSiz" +
                    "e\"=@lotSize,\"MaximumQuantityListedLimit\"=@maximumQuantityListedLimit,\"MaximumQua" +
                    "ntityListedMarket\"=@maximumQuantityListedMarket,\"MaximumQuantityUnlistedLimit\"=@" +
                    "maximumQuantityUnlistedLimit,\"MaximumQuantityUnlistedMarket\"=@maximumQuantityUnl" +
                    "istedMarket,\"ModifiedTime\"=@modifiedTime,\"Name\"=@name,\"NewOrderCustomFixTag\"=@ne" +
                    "wOrderCustomFixTag,\"OatsDepartmentId\"=@oatsDepartmentId,\"OatsDestinationCode\"=@o" +
                    "atsDestinationCode,\"OatsReceivingMpi\"=@oatsReceivingMpi,\"OatsRouteMethod\"=@oatsR" +
                    "outeMethod,\"OatsRoutingMpi\"=@oatsRoutingMpi,\"OatsSentMpi\"=@oatsSentMpi,\"OatsTerm" +
                    "inalId\"=@oatsTerminalId,\"OnCloseCancelTime\"=@onCloseCancelTime,\"OnCloseOrderTime" +
                    "\"=@onCloseOrderTime,\"PerShareUsageFee\"=@perShareUsageFee,\"PostMarketLogic\"=@post" +
                    "MarketLogic,\"PrimaryBackupDestinationId\"=@primaryBackupDestinationId,\"SecondaryB" +
                    "ackupDestinationId\"=@secondaryBackupDestinationId,\"SelectnetFlag\"=@selectnetFlag" +
                    ",\"ShortName\"=@shortName,\"SourceId0\"=@sourceId0,\"SourceId1\"=@sourceId1,\"SourceId2" +
                    "\"=@sourceId2,\"SourceId3\"=@sourceId3,\"SourceId4\"=@sourceId4,\"SourceId5\"=@sourceId" +
                    "5,\"SourceId6\"=@sourceId6,\"SourceId7\"=@sourceId7,\"UniqueShortName\"=@uniqueShortNa" +
                    "me where \"DestinationId\"=@destinationId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@cancelCustomFixTag", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, cancelCustomFixTag));
            sqlCommand.Parameters.Add(new SqlParameter("@clearingFirmId", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, clearingFirmId));
            sqlCommand.Parameters.Add(new SqlParameter("@destinationId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, destinationId));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId1", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId1));
            sqlCommand.Parameters.Add(new SqlParameter("@fixAccount", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixAccount));
            sqlCommand.Parameters.Add(new SqlParameter("@fixAccountSuffixLength", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixAccountSuffixLength));
            sqlCommand.Parameters.Add(new SqlParameter("@fixExchangeMnemonic", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixExchangeMnemonic));
            sqlCommand.Parameters.Add(new SqlParameter("@fixExecBroker", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixExecBroker));
            sqlCommand.Parameters.Add(new SqlParameter("@fixExecDestinationListed", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixExecDestinationListed));
            sqlCommand.Parameters.Add(new SqlParameter("@fixExecDestinationUnlisted", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixExecDestinationUnlisted));
            sqlCommand.Parameters.Add(new SqlParameter("@fixHandleInstListed", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixHandleInstListed));
            sqlCommand.Parameters.Add(new SqlParameter("@fixHandleInstUnlisted", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixHandleInstUnlisted));
            sqlCommand.Parameters.Add(new SqlParameter("@fixIoiRoutingId", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixIoiRoutingId));
            sqlCommand.Parameters.Add(new SqlParameter("@fixIoiRoutingType", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixIoiRoutingType));
            sqlCommand.Parameters.Add(new SqlParameter("@fixNetCommissionType", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixNetCommissionType));
            sqlCommand.Parameters.Add(new SqlParameter("@fixNoteTagId", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixNoteTagId));
            sqlCommand.Parameters.Add(new SqlParameter("@fixOnBehalfOf", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixOnBehalfOf));
            sqlCommand.Parameters.Add(new SqlParameter("@fixOnBehalfOfSub", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixOnBehalfOfSub));
            sqlCommand.Parameters.Add(new SqlParameter("@fixOrderIdFormat", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixOrderIdFormat));
            sqlCommand.Parameters.Add(new SqlParameter("@fixPassiveTag", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixPassiveTag));
            sqlCommand.Parameters.Add(new SqlParameter("@fixProactiveTag", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixProactiveTag));
            sqlCommand.Parameters.Add(new SqlParameter("@fixSourceCompany", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixSourceCompany));
            sqlCommand.Parameters.Add(new SqlParameter("@fixSourceId", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixSourceId));
            sqlCommand.Parameters.Add(new SqlParameter("@fixSourceTrader", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixSourceTrader));
            sqlCommand.Parameters.Add(new SqlParameter("@fixTargetCompany", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixTargetCompany));
            sqlCommand.Parameters.Add(new SqlParameter("@fixTargetLocationId", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixTargetLocationId));
            sqlCommand.Parameters.Add(new SqlParameter("@fixTargetTrader", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixTargetTrader));
            sqlCommand.Parameters.Add(new SqlParameter("@fixVersion", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@isBroker", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isBroker));
            sqlCommand.Parameters.Add(new SqlParameter("@isCancelAllowed", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isCancelAllowed));
            sqlCommand.Parameters.Add(new SqlParameter("@isCancelReplaceAllowed", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isCancelReplaceAllowed));
            sqlCommand.Parameters.Add(new SqlParameter("@isEcn", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isEcn));
            sqlCommand.Parameters.Add(new SqlParameter("@isExchange", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isExchange));
            sqlCommand.Parameters.Add(new SqlParameter("@isInternal", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isInternal));
            sqlCommand.Parameters.Add(new SqlParameter("@isIoiAllowed", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isIoiAllowed));
            sqlCommand.Parameters.Add(new SqlParameter("@isLimitPricingAllowed", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isLimitPricingAllowed));
            sqlCommand.Parameters.Add(new SqlParameter("@isMarketOnClosePricingAllowed", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isMarketOnClosePricingAllowed));
            sqlCommand.Parameters.Add(new SqlParameter("@isMarketPricingAllowed", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isMarketPricingAllowed));
            sqlCommand.Parameters.Add(new SqlParameter("@isSystemUp", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isSystemUp));
            sqlCommand.Parameters.Add(new SqlParameter("@isTagEligible", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isTagEligible));
            sqlCommand.Parameters.Add(new SqlParameter("@isTradeAwayAllowed", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isTradeAwayAllowed));
            sqlCommand.Parameters.Add(new SqlParameter("@isUnsolicitedTradeAllowed", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isUnsolicitedTradeAllowed));
            sqlCommand.Parameters.Add(new SqlParameter("@lotSize", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, lotSize));
            sqlCommand.Parameters.Add(new SqlParameter("@maximumQuantityListedLimit", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, maximumQuantityListedLimit));
            sqlCommand.Parameters.Add(new SqlParameter("@maximumQuantityListedMarket", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, maximumQuantityListedMarket));
            sqlCommand.Parameters.Add(new SqlParameter("@maximumQuantityUnlistedLimit", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, maximumQuantityUnlistedLimit));
            sqlCommand.Parameters.Add(new SqlParameter("@maximumQuantityUnlistedMarket", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, maximumQuantityUnlistedMarket));
            sqlCommand.Parameters.Add(new SqlParameter("@modifiedTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, modifiedTime));
            sqlCommand.Parameters.Add(new SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, name));
            sqlCommand.Parameters.Add(new SqlParameter("@newOrderCustomFixTag", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, newOrderCustomFixTag));
            sqlCommand.Parameters.Add(new SqlParameter("@oatsDepartmentId", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, oatsDepartmentId));
            sqlCommand.Parameters.Add(new SqlParameter("@oatsDestinationCode", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, oatsDestinationCode));
            sqlCommand.Parameters.Add(new SqlParameter("@oatsReceivingMpi", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, oatsReceivingMpi));
            sqlCommand.Parameters.Add(new SqlParameter("@oatsRouteMethod", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, oatsRouteMethod));
            sqlCommand.Parameters.Add(new SqlParameter("@oatsRoutingMpi", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, oatsRoutingMpi));
            sqlCommand.Parameters.Add(new SqlParameter("@oatsSentMpi", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, oatsSentMpi));
            sqlCommand.Parameters.Add(new SqlParameter("@oatsTerminalId", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, oatsTerminalId));
            sqlCommand.Parameters.Add(new SqlParameter("@onCloseCancelTime", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, onCloseCancelTime));
            sqlCommand.Parameters.Add(new SqlParameter("@onCloseOrderTime", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, onCloseOrderTime));
            sqlCommand.Parameters.Add(new SqlParameter("@perShareUsageFee", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, perShareUsageFee));
            sqlCommand.Parameters.Add(new SqlParameter("@postMarketLogic", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, postMarketLogic));
            sqlCommand.Parameters.Add(new SqlParameter("@primaryBackupDestinationId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, primaryBackupDestinationId));
            sqlCommand.Parameters.Add(new SqlParameter("@secondaryBackupDestinationId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, secondaryBackupDestinationId));
            sqlCommand.Parameters.Add(new SqlParameter("@selectnetFlag", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, selectnetFlag));
            sqlCommand.Parameters.Add(new SqlParameter("@shortName", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, shortName));
            sqlCommand.Parameters.Add(new SqlParameter("@sourceId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, sourceId0));
            sqlCommand.Parameters.Add(new SqlParameter("@sourceId1", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, sourceId1));
            sqlCommand.Parameters.Add(new SqlParameter("@sourceId2", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, sourceId2));
            sqlCommand.Parameters.Add(new SqlParameter("@sourceId3", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, sourceId3));
            sqlCommand.Parameters.Add(new SqlParameter("@sourceId4", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, sourceId4));
            sqlCommand.Parameters.Add(new SqlParameter("@sourceId5", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, sourceId5));
            sqlCommand.Parameters.Add(new SqlParameter("@sourceId6", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, sourceId6));
            sqlCommand.Parameters.Add(new SqlParameter("@sourceId7", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, sourceId7));
            sqlCommand.Parameters.Add(new SqlParameter("@uniqueShortName", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, uniqueShortName));
            // Update the record in the SQL database.
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Delete(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Delete' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.DestinationLock);
            DestinationOrder.Archive(adoTransaction);
            SourceOrder.Archive(adoTransaction);
            WorkingOrder.Archive(adoTransaction);
        }
        
        /// <summary>Inserts a Destination record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Delete(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int destinationId = parameters["destinationId"];
            // Call the internal method to complete the operation.
            Destination.Delete(adoTransaction, sqlTransaction, rowVersion, destinationId);
        }
        
        /// <summary>Deletes a Destination record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="destinationId">The value for the DestinationId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Delete(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int destinationId)
        {
            // Accessor for the Destination Table.
            ServerMarketData.DestinationDataTable destinationTable = ServerMarketData.Destination;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.DestinationRow destinationRow = destinationTable.FindByDestinationId(destinationId);
            if ((destinationRow == null))
            {
                throw new Exception(string.Format("The Destination table does not have an element identified by {0}", destinationId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((destinationRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Delete the child records.
            for (int index = 0; (index < destinationRow.GetDestinationOrderRows().Length); index = (index + 1))
            {
                ServerMarketData.DestinationOrderRow childDestinationOrderRow = destinationRow.GetDestinationOrderRows()[index];
                DestinationOrder.Delete(adoTransaction, sqlTransaction, childDestinationOrderRow.RowVersion, childDestinationOrderRow.DestinationOrderId);
            }
            for (int index = 0; (index < destinationRow.GetSourceOrderRows().Length); index = (index + 1))
            {
                ServerMarketData.SourceOrderRow childSourceOrderRow = destinationRow.GetSourceOrderRows()[index];
                SourceOrder.Delete(adoTransaction, sqlTransaction, childSourceOrderRow.RowVersion, childSourceOrderRow.SourceOrderId);
            }
            for (int index = 0; (index < destinationRow.GetWorkingOrderRows().Length); index = (index + 1))
            {
                ServerMarketData.WorkingOrderRow childWorkingOrderRow = destinationRow.GetWorkingOrderRows()[index];
                WorkingOrder.Delete(adoTransaction, sqlTransaction, childWorkingOrderRow.RowVersion, childWorkingOrderRow.WorkingOrderId);
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Delete the record in the ADO database.
            destinationRow[destinationTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(destinationRow);
            destinationRow.Delete();
            // Delete the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Destination\" set \"IsDeleted\" = 1 where \"DestinationId\"=@destinationId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@destinationId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, destinationId));
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Archive(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Archive' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.DestinationLock);
            DestinationOrder.Archive(adoTransaction);
            SourceOrder.Archive(adoTransaction);
            WorkingOrder.Archive(adoTransaction);
        }
        
        /// <summary>Inserts a Destination record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Archive(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int destinationId = parameters["destinationId"];
            // Call the internal method to complete the operation.
            Destination.Archive(adoTransaction, sqlTransaction, rowVersion, destinationId);
        }
        
        /// <summary>Archives a Destination record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="destinationId">The value for the DestinationId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Archive(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int destinationId)
        {
            // Accessor for the Destination Table.
            ServerMarketData.DestinationDataTable destinationTable = ServerMarketData.Destination;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.DestinationRow destinationRow = destinationTable.FindByDestinationId(destinationId);
            if ((destinationRow == null))
            {
                throw new Exception(string.Format("The Destination table does not have an element identified by {0}", destinationId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((destinationRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Archive the child records.
            for (int index = 0; (index < destinationRow.GetDestinationOrderRows().Length); index = (index + 1))
            {
                ServerMarketData.DestinationOrderRow childDestinationOrderRow = destinationRow.GetDestinationOrderRows()[index];
                DestinationOrder.Archive(adoTransaction, sqlTransaction, childDestinationOrderRow.RowVersion, childDestinationOrderRow.DestinationOrderId);
            }
            for (int index = 0; (index < destinationRow.GetSourceOrderRows().Length); index = (index + 1))
            {
                ServerMarketData.SourceOrderRow childSourceOrderRow = destinationRow.GetSourceOrderRows()[index];
                SourceOrder.Archive(adoTransaction, sqlTransaction, childSourceOrderRow.RowVersion, childSourceOrderRow.SourceOrderId);
            }
            for (int index = 0; (index < destinationRow.GetWorkingOrderRows().Length); index = (index + 1))
            {
                ServerMarketData.WorkingOrderRow childWorkingOrderRow = destinationRow.GetWorkingOrderRows()[index];
                WorkingOrder.Archive(adoTransaction, sqlTransaction, childWorkingOrderRow.RowVersion, childWorkingOrderRow.WorkingOrderId);
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Delete the record in the ADO database.
            destinationRow[destinationTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(destinationRow);
            destinationRow.Delete();
            // Archive the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Destination\" set \"IsArchived\" = 1 where \"DestinationId\"=@destinationId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@destinationId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, destinationId));
            sqlCommand.ExecuteNonQuery();
        }
    }
}
