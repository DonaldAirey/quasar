//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Guardian.Core
{
    using MarkThree.Guardian;
    using MarkThree.Guardian.Server;
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Data.SqlClient;
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    public class DestinationOrder
    {
        
        /// This value is used to map the object to a persistent storage device.  The parameters for the storage
        /// are found in the configuration file for this service.
        public static string PersistentStore = "Guardian";
        
        /// This member provides access to the in-memory database.
        private static ServerMarketData serverMarketData = new ServerMarketData();
        
        /// <summary>Collects the table lock request(s) for an Insert operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Insert(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for this operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.DestinationOrderLock);
        }
        
        /// <summary>Inserts a DestinationOrder record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Insert(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object canceledQuantity = parameters["canceledQuantity"].Value;
            object canceledTime = parameters["canceledTime"].Value;
            System.DateTime createdTime = parameters["createdTime"];
            int createdUserId = parameters["createdUserId"];
            int destinationId = parameters["destinationId"];
            object externalId0 = parameters["externalId0"].Value;
            object isCanceledByUser = parameters["isCanceledByUser"].Value;
            object isHidden = parameters["isHidden"].Value;
            object limitPrice = parameters["limitPrice"].Value;
            System.DateTime modifiedTime = parameters["modifiedTime"];
            int modifiedUserId = parameters["modifiedUserId"];
            int orderTypeCode = parameters["orderTypeCode"];
            decimal orderedQuantity = parameters["orderedQuantity"];
            int priceTypeCode = parameters["priceTypeCode"];
            int stateCode = parameters["stateCode"];
            int statusCode = parameters["statusCode"];
            object stopPrice = parameters["stopPrice"].Value;
            object traderId = parameters["traderId"].Value;
            int timeInForceCode = parameters["timeInForceCode"];
            int workingOrderId = parameters["workingOrderId"];
            // The rowVersion is passed back to the caller in the event it's needed for additional commands in the batch.
            long rowVersion = long.MinValue;
            // Call the internal method to complete the operation.
            int destinationOrderId = DestinationOrder.Insert(adoTransaction, sqlTransaction, ref rowVersion, canceledQuantity, canceledTime, createdTime, createdUserId, destinationId, externalId0, isCanceledByUser, isHidden, limitPrice, modifiedTime, modifiedUserId, orderTypeCode, orderedQuantity, priceTypeCode, stateCode, statusCode, stopPrice, traderId, timeInForceCode, workingOrderId);
            // Return values.
            parameters["rowVersion"] = rowVersion;
            parameters.Return = destinationOrderId;
        }
        
        /// <summary>Inserts a DestinationOrder record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="canceledQuantity">The value for the CanceledQuantity column.</param>
        /// <param name="canceledTime">The value for the CanceledTime column.</param>
        /// <param name="createdTime">The value for the CreatedTime column.</param>
        /// <param name="createdUserId">The value for the CreatedUserId column.</param>
        /// <param name="destinationId">The value for the DestinationId column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="isCanceledByUser">The value for the IsCanceledByUser column.</param>
        /// <param name="isHidden">The value for the IsHidden column.</param>
        /// <param name="limitPrice">The value for the LimitPrice column.</param>
        /// <param name="modifiedTime">The value for the ModifiedTime column.</param>
        /// <param name="modifiedUserId">The value for the ModifiedUserId column.</param>
        /// <param name="orderTypeCode">The value for the OrderTypeCode column.</param>
        /// <param name="orderedQuantity">The value for the OrderedQuantity column.</param>
        /// <param name="priceTypeCode">The value for the PriceTypeCode column.</param>
        /// <param name="stateCode">The value for the StateCode column.</param>
        /// <param name="statusCode">The value for the StatusCode column.</param>
        /// <param name="stopPrice">The value for the StopPrice column.</param>
        /// <param name="traderId">The value for the TraderId column.</param>
        /// <param name="timeInForceCode">The value for the TimeInForceCode column.</param>
        /// <param name="workingOrderId">The value for the WorkingOrderId column.</param>
        public static int Insert(
                    AdoTransaction adoTransaction, 
                    SqlTransaction sqlTransaction, 
                    ref long rowVersion, 
                    object canceledQuantity, 
                    object canceledTime, 
                    System.DateTime createdTime, 
                    int createdUserId, 
                    int destinationId, 
                    object externalId0, 
                    object isCanceledByUser, 
                    object isHidden, 
                    object limitPrice, 
                    System.DateTime modifiedTime, 
                    int modifiedUserId, 
                    int orderTypeCode, 
                    decimal orderedQuantity, 
                    int priceTypeCode, 
                    int stateCode, 
                    int statusCode, 
                    object stopPrice, 
                    object traderId, 
                    int timeInForceCode, 
                    int workingOrderId)
        {
            // Accessor for the DestinationOrder Table.
            ServerMarketData.DestinationOrderDataTable destinationOrderTable = ServerMarketData.DestinationOrder;
            // Apply Defaults
            if ((canceledQuantity == null))
            {
                canceledQuantity = 0m;
            }
            if ((canceledTime == null))
            {
                canceledTime = System.DBNull.Value;
            }
            if ((externalId0 == null))
            {
                externalId0 = System.DBNull.Value;
            }
            if ((isCanceledByUser == null))
            {
                isCanceledByUser = false;
            }
            if ((isHidden == null))
            {
                isHidden = false;
            }
            if ((limitPrice == null))
            {
                limitPrice = System.DBNull.Value;
            }
            if ((stopPrice == null))
            {
                stopPrice = System.DBNull.Value;
            }
            if ((traderId == null))
            {
                traderId = System.DBNull.Value;
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Insert the record into the ADO database.
            ServerMarketData.DestinationOrderRow destinationOrderRow = destinationOrderTable.NewDestinationOrderRow();
            destinationOrderRow[destinationOrderTable.RowVersionColumn] = rowVersion;
            destinationOrderRow[destinationOrderTable.CanceledQuantityColumn] = canceledQuantity;
            destinationOrderRow[destinationOrderTable.CanceledTimeColumn] = canceledTime;
            destinationOrderRow[destinationOrderTable.CreatedTimeColumn] = createdTime;
            destinationOrderRow[destinationOrderTable.CreatedUserIdColumn] = createdUserId;
            destinationOrderRow[destinationOrderTable.DestinationIdColumn] = destinationId;
            destinationOrderRow[destinationOrderTable.ExternalId0Column] = externalId0;
            destinationOrderRow[destinationOrderTable.IsCanceledByUserColumn] = isCanceledByUser;
            destinationOrderRow[destinationOrderTable.IsHiddenColumn] = isHidden;
            destinationOrderRow[destinationOrderTable.LimitPriceColumn] = limitPrice;
            destinationOrderRow[destinationOrderTable.ModifiedTimeColumn] = modifiedTime;
            destinationOrderRow[destinationOrderTable.ModifiedUserIdColumn] = modifiedUserId;
            destinationOrderRow[destinationOrderTable.OrderTypeCodeColumn] = orderTypeCode;
            destinationOrderRow[destinationOrderTable.OrderedQuantityColumn] = orderedQuantity;
            destinationOrderRow[destinationOrderTable.PriceTypeCodeColumn] = priceTypeCode;
            destinationOrderRow[destinationOrderTable.StateCodeColumn] = stateCode;
            destinationOrderRow[destinationOrderTable.StatusCodeColumn] = statusCode;
            destinationOrderRow[destinationOrderTable.StopPriceColumn] = stopPrice;
            destinationOrderRow[destinationOrderTable.TraderIdColumn] = traderId;
            destinationOrderRow[destinationOrderTable.TimeInForceCodeColumn] = timeInForceCode;
            destinationOrderRow[destinationOrderTable.WorkingOrderIdColumn] = workingOrderId;
            destinationOrderTable.AddDestinationOrderRow(destinationOrderRow);
            adoTransaction.DataRows.Add(destinationOrderRow);
            // Insert the record into the SQL database.
            SqlCommand sqlCommand = new SqlCommand(@"insert ""DestinationOrder"" (""rowVersion"",""CanceledQuantity"",""CanceledTime"",""CreatedTime"",""CreatedUserId"",""DestinationId"",""DestinationOrderId"",""ExternalId0"",""IsCanceledByUser"",""IsHidden"",""LimitPrice"",""ModifiedTime"",""ModifiedUserId"",""OrderTypeCode"",""OrderedQuantity"",""PriceTypeCode"",""StateCode"",""StatusCode"",""StopPrice"",""TraderId"",""TimeInForceCode"",""WorkingOrderId"") values (@rowVersion,@canceledQuantity,@canceledTime,@createdTime,@createdUserId,@destinationId,@destinationOrderId,@externalId0,@isCanceledByUser,@isHidden,@limitPrice,@modifiedTime,@modifiedUserId,@orderTypeCode,@orderedQuantity,@priceTypeCode,@stateCode,@statusCode,@stopPrice,@traderId,@timeInForceCode,@workingOrderId)");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@canceledQuantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, canceledQuantity));
            sqlCommand.Parameters.Add(new SqlParameter("@canceledTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, canceledTime));
            sqlCommand.Parameters.Add(new SqlParameter("@createdTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, createdTime));
            sqlCommand.Parameters.Add(new SqlParameter("@createdUserId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, createdUserId));
            sqlCommand.Parameters.Add(new SqlParameter("@destinationId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, destinationId));
            sqlCommand.Parameters.Add(new SqlParameter("@destinationOrderId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, destinationOrderRow[destinationOrderTable.DestinationOrderIdColumn]));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@isCanceledByUser", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isCanceledByUser));
            sqlCommand.Parameters.Add(new SqlParameter("@isHidden", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isHidden));
            sqlCommand.Parameters.Add(new SqlParameter("@limitPrice", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, limitPrice));
            sqlCommand.Parameters.Add(new SqlParameter("@modifiedTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, modifiedTime));
            sqlCommand.Parameters.Add(new SqlParameter("@modifiedUserId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, modifiedUserId));
            sqlCommand.Parameters.Add(new SqlParameter("@orderTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, orderTypeCode));
            sqlCommand.Parameters.Add(new SqlParameter("@orderedQuantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, orderedQuantity));
            sqlCommand.Parameters.Add(new SqlParameter("@priceTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, priceTypeCode));
            sqlCommand.Parameters.Add(new SqlParameter("@stateCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, stateCode));
            sqlCommand.Parameters.Add(new SqlParameter("@statusCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, statusCode));
            sqlCommand.Parameters.Add(new SqlParameter("@stopPrice", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, stopPrice));
            sqlCommand.Parameters.Add(new SqlParameter("@traderId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, traderId));
            sqlCommand.Parameters.Add(new SqlParameter("@timeInForceCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, timeInForceCode));
            sqlCommand.Parameters.Add(new SqlParameter("@workingOrderId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, workingOrderId));
            sqlCommand.ExecuteNonQuery();
            // Return Statements
            return destinationOrderRow.DestinationOrderId;
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Update(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Update' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.DestinationOrderLock);
            Execution.Archive(adoTransaction);
        }
        
        /// <summary>Inserts a DestinationOrder record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Update(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            object canceledQuantity = parameters["canceledQuantity"].Value;
            object canceledTime = parameters["canceledTime"].Value;
            object createdTime = parameters["createdTime"].Value;
            object createdUserId = parameters["createdUserId"].Value;
            object destinationId = parameters["destinationId"].Value;
            int destinationOrderId = parameters["destinationOrderId"];
            object externalId0 = parameters["externalId0"].Value;
            object isCanceledByUser = parameters["isCanceledByUser"].Value;
            object isHidden = parameters["isHidden"].Value;
            object limitPrice = parameters["limitPrice"].Value;
            object modifiedTime = parameters["modifiedTime"].Value;
            object modifiedUserId = parameters["modifiedUserId"].Value;
            object orderTypeCode = parameters["orderTypeCode"].Value;
            object orderedQuantity = parameters["orderedQuantity"].Value;
            object priceTypeCode = parameters["priceTypeCode"].Value;
            object stateCode = parameters["stateCode"].Value;
            object statusCode = parameters["statusCode"].Value;
            object stopPrice = parameters["stopPrice"].Value;
            object traderId = parameters["traderId"].Value;
            object timeInForceCode = parameters["timeInForceCode"].Value;
            object workingOrderId = parameters["workingOrderId"].Value;
            // Call the internal method to complete the operation.
            DestinationOrder.Update(adoTransaction, sqlTransaction, ref rowVersion, canceledQuantity, canceledTime, createdTime, createdUserId, destinationId, destinationOrderId, externalId0, isCanceledByUser, isHidden, limitPrice, modifiedTime, modifiedUserId, orderTypeCode, orderedQuantity, priceTypeCode, stateCode, statusCode, stopPrice, traderId, timeInForceCode, workingOrderId);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Updates a DestinationOrder record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="rowVersion">The version number of the row</param>
        /// <param name="canceledQuantity">The value for the CanceledQuantity column.</param>
        /// <param name="canceledTime">The value for the CanceledTime column.</param>
        /// <param name="createdTime">The value for the CreatedTime column.</param>
        /// <param name="createdUserId">The value for the CreatedUserId column.</param>
        /// <param name="destinationId">The value for the DestinationId column.</param>
        /// <param name="destinationOrderId">The value for the DestinationOrderId column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="isCanceledByUser">The value for the IsCanceledByUser column.</param>
        /// <param name="isHidden">The value for the IsHidden column.</param>
        /// <param name="limitPrice">The value for the LimitPrice column.</param>
        /// <param name="modifiedTime">The value for the ModifiedTime column.</param>
        /// <param name="modifiedUserId">The value for the ModifiedUserId column.</param>
        /// <param name="orderTypeCode">The value for the OrderTypeCode column.</param>
        /// <param name="orderedQuantity">The value for the OrderedQuantity column.</param>
        /// <param name="priceTypeCode">The value for the PriceTypeCode column.</param>
        /// <param name="stateCode">The value for the StateCode column.</param>
        /// <param name="statusCode">The value for the StatusCode column.</param>
        /// <param name="stopPrice">The value for the StopPrice column.</param>
        /// <param name="traderId">The value for the TraderId column.</param>
        /// <param name="timeInForceCode">The value for the TimeInForceCode column.</param>
        /// <param name="workingOrderId">The value for the WorkingOrderId column.</param>
        public static void Update(
                    AdoTransaction adoTransaction, 
                    SqlTransaction sqlTransaction, 
                    ref long rowVersion, 
                    object canceledQuantity, 
                    object canceledTime, 
                    object createdTime, 
                    object createdUserId, 
                    object destinationId, 
                    int destinationOrderId, 
                    object externalId0, 
                    object isCanceledByUser, 
                    object isHidden, 
                    object limitPrice, 
                    object modifiedTime, 
                    object modifiedUserId, 
                    object orderTypeCode, 
                    object orderedQuantity, 
                    object priceTypeCode, 
                    object stateCode, 
                    object statusCode, 
                    object stopPrice, 
                    object traderId, 
                    object timeInForceCode, 
                    object workingOrderId)
        {
            // Accessor for the DestinationOrder Table.
            ServerMarketData.DestinationOrderDataTable destinationOrderTable = ServerMarketData.DestinationOrder;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.DestinationOrderRow destinationOrderRow = destinationOrderTable.FindByDestinationOrderId(destinationOrderId);
            if ((destinationOrderRow == null))
            {
                throw new Exception(string.Format("The DestinationOrder table does not have an element identified by {0}", destinationOrderId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((destinationOrderRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Apply Defaults
            if ((canceledQuantity == null))
            {
                canceledQuantity = destinationOrderRow[destinationOrderTable.CanceledQuantityColumn];
            }
            if ((canceledTime == null))
            {
                canceledTime = destinationOrderRow[destinationOrderTable.CanceledTimeColumn];
            }
            if ((createdTime == null))
            {
                createdTime = destinationOrderRow[destinationOrderTable.CreatedTimeColumn];
            }
            if ((createdUserId == null))
            {
                createdUserId = destinationOrderRow[destinationOrderTable.CreatedUserIdColumn];
            }
            if ((destinationId == null))
            {
                destinationId = destinationOrderRow[destinationOrderTable.DestinationIdColumn];
            }
            if ((externalId0 == null))
            {
                externalId0 = destinationOrderRow[destinationOrderTable.ExternalId0Column];
            }
            if ((isCanceledByUser == null))
            {
                isCanceledByUser = destinationOrderRow[destinationOrderTable.IsCanceledByUserColumn];
            }
            if ((isHidden == null))
            {
                isHidden = destinationOrderRow[destinationOrderTable.IsHiddenColumn];
            }
            if ((limitPrice == null))
            {
                limitPrice = destinationOrderRow[destinationOrderTable.LimitPriceColumn];
            }
            if ((modifiedTime == null))
            {
                modifiedTime = destinationOrderRow[destinationOrderTable.ModifiedTimeColumn];
            }
            if ((modifiedUserId == null))
            {
                modifiedUserId = destinationOrderRow[destinationOrderTable.ModifiedUserIdColumn];
            }
            if ((orderTypeCode == null))
            {
                orderTypeCode = destinationOrderRow[destinationOrderTable.OrderTypeCodeColumn];
            }
            if ((orderedQuantity == null))
            {
                orderedQuantity = destinationOrderRow[destinationOrderTable.OrderedQuantityColumn];
            }
            if ((priceTypeCode == null))
            {
                priceTypeCode = destinationOrderRow[destinationOrderTable.PriceTypeCodeColumn];
            }
            if ((stateCode == null))
            {
                stateCode = destinationOrderRow[destinationOrderTable.StateCodeColumn];
            }
            if ((statusCode == null))
            {
                statusCode = destinationOrderRow[destinationOrderTable.StatusCodeColumn];
            }
            if ((stopPrice == null))
            {
                stopPrice = destinationOrderRow[destinationOrderTable.StopPriceColumn];
            }
            if ((traderId == null))
            {
                traderId = destinationOrderRow[destinationOrderTable.TraderIdColumn];
            }
            if ((timeInForceCode == null))
            {
                timeInForceCode = destinationOrderRow[destinationOrderTable.TimeInForceCodeColumn];
            }
            if ((workingOrderId == null))
            {
                workingOrderId = destinationOrderRow[destinationOrderTable.WorkingOrderIdColumn];
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Update the record in the ADO database.
            destinationOrderRow[destinationOrderTable.RowVersionColumn] = rowVersion;
            destinationOrderRow[destinationOrderTable.CanceledQuantityColumn] = canceledQuantity;
            destinationOrderRow[destinationOrderTable.CanceledTimeColumn] = canceledTime;
            destinationOrderRow[destinationOrderTable.CreatedTimeColumn] = createdTime;
            destinationOrderRow[destinationOrderTable.CreatedUserIdColumn] = createdUserId;
            destinationOrderRow[destinationOrderTable.DestinationIdColumn] = destinationId;
            destinationOrderRow[destinationOrderTable.ExternalId0Column] = externalId0;
            destinationOrderRow[destinationOrderTable.IsCanceledByUserColumn] = isCanceledByUser;
            destinationOrderRow[destinationOrderTable.IsHiddenColumn] = isHidden;
            destinationOrderRow[destinationOrderTable.LimitPriceColumn] = limitPrice;
            destinationOrderRow[destinationOrderTable.ModifiedTimeColumn] = modifiedTime;
            destinationOrderRow[destinationOrderTable.ModifiedUserIdColumn] = modifiedUserId;
            destinationOrderRow[destinationOrderTable.OrderTypeCodeColumn] = orderTypeCode;
            destinationOrderRow[destinationOrderTable.OrderedQuantityColumn] = orderedQuantity;
            destinationOrderRow[destinationOrderTable.PriceTypeCodeColumn] = priceTypeCode;
            destinationOrderRow[destinationOrderTable.StateCodeColumn] = stateCode;
            destinationOrderRow[destinationOrderTable.StatusCodeColumn] = statusCode;
            destinationOrderRow[destinationOrderTable.StopPriceColumn] = stopPrice;
            destinationOrderRow[destinationOrderTable.TraderIdColumn] = traderId;
            destinationOrderRow[destinationOrderTable.TimeInForceCodeColumn] = timeInForceCode;
            destinationOrderRow[destinationOrderTable.WorkingOrderIdColumn] = workingOrderId;
            adoTransaction.DataRows.Add(destinationOrderRow);
            // Update the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand(@"update ""DestinationOrder"" set ""RowVersion""=@rowVersion,""CanceledQuantity""=@canceledQuantity,""CanceledTime""=@canceledTime,""CreatedTime""=@createdTime,""CreatedUserId""=@createdUserId,""DestinationId""=@destinationId,""ExternalId0""=@externalId0,""IsCanceledByUser""=@isCanceledByUser,""IsHidden""=@isHidden,""LimitPrice""=@limitPrice,""ModifiedTime""=@modifiedTime,""ModifiedUserId""=@modifiedUserId,""OrderTypeCode""=@orderTypeCode,""OrderedQuantity""=@orderedQuantity,""PriceTypeCode""=@priceTypeCode,""StateCode""=@stateCode,""StatusCode""=@statusCode,""StopPrice""=@stopPrice,""TraderId""=@traderId,""TimeInForceCode""=@timeInForceCode,""WorkingOrderId""=@workingOrderId where ""DestinationOrderId""=@destinationOrderId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@canceledQuantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, canceledQuantity));
            sqlCommand.Parameters.Add(new SqlParameter("@canceledTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, canceledTime));
            sqlCommand.Parameters.Add(new SqlParameter("@createdTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, createdTime));
            sqlCommand.Parameters.Add(new SqlParameter("@createdUserId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, createdUserId));
            sqlCommand.Parameters.Add(new SqlParameter("@destinationId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, destinationId));
            sqlCommand.Parameters.Add(new SqlParameter("@destinationOrderId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, destinationOrderId));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@isCanceledByUser", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isCanceledByUser));
            sqlCommand.Parameters.Add(new SqlParameter("@isHidden", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isHidden));
            sqlCommand.Parameters.Add(new SqlParameter("@limitPrice", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, limitPrice));
            sqlCommand.Parameters.Add(new SqlParameter("@modifiedTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, modifiedTime));
            sqlCommand.Parameters.Add(new SqlParameter("@modifiedUserId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, modifiedUserId));
            sqlCommand.Parameters.Add(new SqlParameter("@orderTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, orderTypeCode));
            sqlCommand.Parameters.Add(new SqlParameter("@orderedQuantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, orderedQuantity));
            sqlCommand.Parameters.Add(new SqlParameter("@priceTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, priceTypeCode));
            sqlCommand.Parameters.Add(new SqlParameter("@stateCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, stateCode));
            sqlCommand.Parameters.Add(new SqlParameter("@statusCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, statusCode));
            sqlCommand.Parameters.Add(new SqlParameter("@stopPrice", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, stopPrice));
            sqlCommand.Parameters.Add(new SqlParameter("@traderId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, traderId));
            sqlCommand.Parameters.Add(new SqlParameter("@timeInForceCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, timeInForceCode));
            sqlCommand.Parameters.Add(new SqlParameter("@workingOrderId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, workingOrderId));
            // Update the record in the SQL database.
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Delete(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Delete' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.DestinationOrderLock);
            Execution.Archive(adoTransaction);
        }
        
        /// <summary>Inserts a DestinationOrder record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Delete(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int destinationOrderId = parameters["destinationOrderId"];
            // Call the internal method to complete the operation.
            DestinationOrder.Delete(adoTransaction, sqlTransaction, rowVersion, destinationOrderId);
        }
        
        /// <summary>Deletes a DestinationOrder record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="destinationOrderId">The value for the DestinationOrderId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Delete(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int destinationOrderId)
        {
            // Accessor for the DestinationOrder Table.
            ServerMarketData.DestinationOrderDataTable destinationOrderTable = ServerMarketData.DestinationOrder;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.DestinationOrderRow destinationOrderRow = destinationOrderTable.FindByDestinationOrderId(destinationOrderId);
            if ((destinationOrderRow == null))
            {
                throw new Exception(string.Format("The DestinationOrder table does not have an element identified by {0}", destinationOrderId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((destinationOrderRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Delete the child records.
            for (int index = 0; (index < destinationOrderRow.GetExecutionRows().Length); index = (index + 1))
            {
                ServerMarketData.ExecutionRow childExecutionRow = destinationOrderRow.GetExecutionRows()[index];
                Execution.Delete(adoTransaction, sqlTransaction, childExecutionRow.RowVersion, childExecutionRow.ExecutionId);
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Delete the record in the ADO database.
            destinationOrderRow[destinationOrderTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(destinationOrderRow);
            destinationOrderRow.Delete();
            // Delete the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"DestinationOrder\" set \"IsDeleted\" = 1 where \"DestinationOrderId\"=@destina" +
                    "tionOrderId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@destinationOrderId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, destinationOrderId));
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Archive(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Archive' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.DestinationOrderLock);
            Execution.Archive(adoTransaction);
        }
        
        /// <summary>Inserts a DestinationOrder record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Archive(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int destinationOrderId = parameters["destinationOrderId"];
            // Call the internal method to complete the operation.
            DestinationOrder.Archive(adoTransaction, sqlTransaction, rowVersion, destinationOrderId);
        }
        
        /// <summary>Archives a DestinationOrder record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="destinationOrderId">The value for the DestinationOrderId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Archive(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int destinationOrderId)
        {
            // Accessor for the DestinationOrder Table.
            ServerMarketData.DestinationOrderDataTable destinationOrderTable = ServerMarketData.DestinationOrder;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.DestinationOrderRow destinationOrderRow = destinationOrderTable.FindByDestinationOrderId(destinationOrderId);
            if ((destinationOrderRow == null))
            {
                throw new Exception(string.Format("The DestinationOrder table does not have an element identified by {0}", destinationOrderId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((destinationOrderRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Archive the child records.
            for (int index = 0; (index < destinationOrderRow.GetExecutionRows().Length); index = (index + 1))
            {
                ServerMarketData.ExecutionRow childExecutionRow = destinationOrderRow.GetExecutionRows()[index];
                Execution.Archive(adoTransaction, sqlTransaction, childExecutionRow.RowVersion, childExecutionRow.ExecutionId);
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Delete the record in the ADO database.
            destinationOrderRow[destinationOrderTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(destinationOrderRow);
            destinationOrderRow.Delete();
            // Archive the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"DestinationOrder\" set \"IsArchived\" = 1 where \"DestinationOrderId\"=@destin" +
                    "ationOrderId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@destinationOrderId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, destinationOrderId));
            sqlCommand.ExecuteNonQuery();
        }
    }
}
