//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Guardian.Core
{
    using MarkThree.Guardian;
    using MarkThree.Guardian.Server;
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Data.SqlClient;
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    public class Exchange
    {
        
        /// This value is used to map the object to a persistent storage device.  The parameters for the storage
        /// are found in the configuration file for this service.
        public static string PersistentStore = "Guardian";
        
        /// This member provides access to the in-memory database.
        private static ServerMarketData serverMarketData = new ServerMarketData();
        
        /// <summary>Collects the table lock request(s) for an Insert operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Insert(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for this operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.ExchangeLock);
        }
        
        /// <summary>Inserts a Exchange record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Insert(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object externalId0 = parameters["externalId0"].Value;
            object externalId1 = parameters["externalId1"].Value;
            object externalId2 = parameters["externalId2"].Value;
            object externalId3 = parameters["externalId3"].Value;
            string name = parameters["name"];
            // The rowVersion is passed back to the caller in the event it's needed for additional commands in the batch.
            long rowVersion = long.MinValue;
            // Call the internal method to complete the operation.
            int exchangeId = Exchange.Insert(adoTransaction, sqlTransaction, ref rowVersion, externalId0, externalId1, externalId2, externalId3, name);
            // Return values.
            parameters["rowVersion"] = rowVersion;
            parameters.Return = exchangeId;
        }
        
        /// <summary>Inserts a Exchange record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="externalId1">The value for the ExternalId1 column.</param>
        /// <param name="externalId2">The value for the ExternalId2 column.</param>
        /// <param name="externalId3">The value for the ExternalId3 column.</param>
        /// <param name="name">The value for the Name column.</param>
        public static int Insert(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, ref long rowVersion, object externalId0, object externalId1, object externalId2, object externalId3, string name)
        {
            // Accessor for the Exchange Table.
            ServerMarketData.ExchangeDataTable exchangeTable = ServerMarketData.Exchange;
            // Apply Defaults
            if ((externalId0 == null))
            {
                externalId0 = System.DBNull.Value;
            }
            if ((externalId1 == null))
            {
                externalId1 = System.DBNull.Value;
            }
            if ((externalId2 == null))
            {
                externalId2 = System.DBNull.Value;
            }
            if ((externalId3 == null))
            {
                externalId3 = System.DBNull.Value;
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Insert the record into the ADO database.
            ServerMarketData.ExchangeRow exchangeRow = exchangeTable.NewExchangeRow();
            exchangeRow[exchangeTable.RowVersionColumn] = rowVersion;
            exchangeRow[exchangeTable.ExternalId0Column] = externalId0;
            exchangeRow[exchangeTable.ExternalId1Column] = externalId1;
            exchangeRow[exchangeTable.ExternalId2Column] = externalId2;
            exchangeRow[exchangeTable.ExternalId3Column] = externalId3;
            exchangeRow[exchangeTable.NameColumn] = name;
            exchangeTable.AddExchangeRow(exchangeRow);
            adoTransaction.DataRows.Add(exchangeRow);
            // Insert the record into the SQL database.
            SqlCommand sqlCommand = new SqlCommand("insert \"Exchange\" (\"rowVersion\",\"ExchangeId\",\"ExternalId0\",\"ExternalId1\",\"Externa" +
                    "lId2\",\"ExternalId3\",\"Name\") values (@rowVersion,@exchangeId,@externalId0,@extern" +
                    "alId1,@externalId2,@externalId3,@name)");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@exchangeId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, exchangeRow[exchangeTable.ExchangeIdColumn]));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId1", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId1));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId2", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId2));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId3", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId3));
            sqlCommand.Parameters.Add(new SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, name));
            sqlCommand.ExecuteNonQuery();
            // Return Statements
            return exchangeRow.ExchangeId;
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Update(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Update' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.ExchangeLock);
            Equity.ArchiveChildren(adoTransaction);
        }
        
        /// <summary>Inserts a Exchange record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Update(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int exchangeId = parameters["exchangeId"];
            object externalId0 = parameters["externalId0"].Value;
            object externalId1 = parameters["externalId1"].Value;
            object externalId2 = parameters["externalId2"].Value;
            object externalId3 = parameters["externalId3"].Value;
            object name = parameters["name"].Value;
            // Call the internal method to complete the operation.
            Exchange.Update(adoTransaction, sqlTransaction, ref rowVersion, exchangeId, externalId0, externalId1, externalId2, externalId3, name);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Updates a Exchange record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="rowVersion">The version number of the row</param>
        /// <param name="exchangeId">The value for the ExchangeId column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="externalId1">The value for the ExternalId1 column.</param>
        /// <param name="externalId2">The value for the ExternalId2 column.</param>
        /// <param name="externalId3">The value for the ExternalId3 column.</param>
        /// <param name="name">The value for the Name column.</param>
        public static void Update(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, ref long rowVersion, int exchangeId, object externalId0, object externalId1, object externalId2, object externalId3, object name)
        {
            // Accessor for the Exchange Table.
            ServerMarketData.ExchangeDataTable exchangeTable = ServerMarketData.Exchange;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.ExchangeRow exchangeRow = exchangeTable.FindByExchangeId(exchangeId);
            if ((exchangeRow == null))
            {
                throw new Exception(string.Format("The Exchange table does not have an element identified by {0}", exchangeId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((exchangeRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Apply Defaults
            if ((externalId0 == null))
            {
                externalId0 = exchangeRow[exchangeTable.ExternalId0Column];
            }
            if ((externalId1 == null))
            {
                externalId1 = exchangeRow[exchangeTable.ExternalId1Column];
            }
            if ((externalId2 == null))
            {
                externalId2 = exchangeRow[exchangeTable.ExternalId2Column];
            }
            if ((externalId3 == null))
            {
                externalId3 = exchangeRow[exchangeTable.ExternalId3Column];
            }
            if ((name == null))
            {
                name = exchangeRow[exchangeTable.NameColumn];
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Update the record in the ADO database.
            exchangeRow[exchangeTable.RowVersionColumn] = rowVersion;
            exchangeRow[exchangeTable.ExternalId0Column] = externalId0;
            exchangeRow[exchangeTable.ExternalId1Column] = externalId1;
            exchangeRow[exchangeTable.ExternalId2Column] = externalId2;
            exchangeRow[exchangeTable.ExternalId3Column] = externalId3;
            exchangeRow[exchangeTable.NameColumn] = name;
            adoTransaction.DataRows.Add(exchangeRow);
            // Update the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Exchange\" set \"RowVersion\"=@rowVersion,\"ExternalId0\"=@externalId0,\"Extern" +
                    "alId1\"=@externalId1,\"ExternalId2\"=@externalId2,\"ExternalId3\"=@externalId3,\"Name\"" +
                    "=@name where \"ExchangeId\"=@exchangeId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@exchangeId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, exchangeId));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId1", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId1));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId2", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId2));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId3", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId3));
            sqlCommand.Parameters.Add(new SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, name));
            // Update the record in the SQL database.
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Delete(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Delete' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.ExchangeLock);
            Equity.ArchiveChildren(adoTransaction);
        }
        
        /// <summary>Inserts a Exchange record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Delete(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int exchangeId = parameters["exchangeId"];
            // Call the internal method to complete the operation.
            Exchange.Delete(adoTransaction, sqlTransaction, rowVersion, exchangeId);
        }
        
        /// <summary>Deletes a Exchange record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="exchangeId">The value for the ExchangeId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Delete(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int exchangeId)
        {
            // Accessor for the Exchange Table.
            ServerMarketData.ExchangeDataTable exchangeTable = ServerMarketData.Exchange;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.ExchangeRow exchangeRow = exchangeTable.FindByExchangeId(exchangeId);
            if ((exchangeRow == null))
            {
                throw new Exception(string.Format("The Exchange table does not have an element identified by {0}", exchangeId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((exchangeRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Delete the child records.
            for (int index = 0; (index < exchangeRow.GetEquityRows().Length); index = (index + 1))
            {
                ServerMarketData.EquityRow childEquityRow = exchangeRow.GetEquityRows()[index];
                Equity.DeleteChildren(adoTransaction, sqlTransaction, childEquityRow.RowVersion, childEquityRow.EquityId);
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Delete the record in the ADO database.
            exchangeRow[exchangeTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(exchangeRow);
            exchangeRow.Delete();
            // Delete the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Exchange\" set \"IsDeleted\" = 1 where \"ExchangeId\"=@exchangeId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@exchangeId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, exchangeId));
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Archive(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Archive' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.ExchangeLock);
            Equity.ArchiveChildren(adoTransaction);
        }
        
        /// <summary>Inserts a Exchange record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Archive(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int exchangeId = parameters["exchangeId"];
            // Call the internal method to complete the operation.
            Exchange.Archive(adoTransaction, sqlTransaction, rowVersion, exchangeId);
        }
        
        /// <summary>Archives a Exchange record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="exchangeId">The value for the ExchangeId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Archive(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int exchangeId)
        {
            // Accessor for the Exchange Table.
            ServerMarketData.ExchangeDataTable exchangeTable = ServerMarketData.Exchange;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.ExchangeRow exchangeRow = exchangeTable.FindByExchangeId(exchangeId);
            if ((exchangeRow == null))
            {
                throw new Exception(string.Format("The Exchange table does not have an element identified by {0}", exchangeId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((exchangeRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Archive the child records.
            for (int index = 0; (index < exchangeRow.GetEquityRows().Length); index = (index + 1))
            {
                ServerMarketData.EquityRow childEquityRow = exchangeRow.GetEquityRows()[index];
                Equity.ArchiveChildren(adoTransaction, sqlTransaction, childEquityRow.RowVersion, childEquityRow.EquityId);
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Delete the record in the ADO database.
            exchangeRow[exchangeTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(exchangeRow);
            exchangeRow.Delete();
            // Archive the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Exchange\" set \"IsArchived\" = 1 where \"ExchangeId\"=@exchangeId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@exchangeId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, exchangeId));
            sqlCommand.ExecuteNonQuery();
        }
    }
}
