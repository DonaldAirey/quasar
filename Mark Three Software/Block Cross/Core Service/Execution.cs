//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Guardian.Core
{
    using MarkThree.Guardian;
    using MarkThree.Guardian.Server;
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Data.SqlClient;
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    public class Execution
    {
        
        /// This value is used to map the object to a persistent storage device.  The parameters for the storage
        /// are found in the configuration file for this service.
        public static string PersistentStore = "Guardian";
        
        /// This member provides access to the in-memory database.
        private static ServerMarketData serverMarketData = new ServerMarketData();
        
        /// <summary>Collects the table lock request(s) for an Insert operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Insert(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for this operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.ExecutionLock);
        }
        
        /// <summary>Inserts a Execution record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Insert(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object accruedInterest = parameters["accruedInterest"].Value;
            object brokerAccountId = parameters["brokerAccountId"].Value;
            object brokerId = parameters["brokerId"].Value;
            object commission = parameters["commission"].Value;
            object createdTime = parameters["createdTime"].Value;
            object createdUserId = parameters["createdUserId"].Value;
            int destinationOrderId = parameters["destinationOrderId"];
            int destinationStateCode = parameters["destinationStateCode"];
            decimal executionPrice = parameters["executionPrice"];
            decimal executionQuantity = parameters["executionQuantity"];
            object externalId0 = parameters["externalId0"].Value;
            object fixMessageId = parameters["fixMessageId"].Value;
            object isHidden = parameters["isHidden"].Value;
            object modifiedTime = parameters["modifiedTime"].Value;
            object modifiedUserId = parameters["modifiedUserId"].Value;
            object originalDestinationOrderId = parameters["originalDestinationOrderId"].Value;
            object originalPrice = parameters["originalPrice"].Value;
            object originalQuantity = parameters["originalQuantity"].Value;
            System.DateTime settlementDate = parameters["settlementDate"];
            object sourceExecutionId = parameters["sourceExecutionId"].Value;
            int sourceStateCode = parameters["sourceStateCode"];
            System.DateTime tradeDate = parameters["tradeDate"];
            object userFee0 = parameters["userFee0"].Value;
            object userFee1 = parameters["userFee1"].Value;
            object userFee2 = parameters["userFee2"].Value;
            object userFee3 = parameters["userFee3"].Value;
            // The rowVersion is passed back to the caller in the event it's needed for additional commands in the batch.
            long rowVersion = long.MinValue;
            // Call the internal method to complete the operation.
            int executionId = Execution.Insert(adoTransaction, sqlTransaction, ref rowVersion, accruedInterest, brokerAccountId, brokerId, commission, createdTime, createdUserId, destinationOrderId, destinationStateCode, executionPrice, executionQuantity, externalId0, fixMessageId, isHidden, modifiedTime, modifiedUserId, originalDestinationOrderId, originalPrice, originalQuantity, settlementDate, sourceExecutionId, sourceStateCode, tradeDate, userFee0, userFee1, userFee2, userFee3);
            // Return values.
            parameters["rowVersion"] = rowVersion;
            parameters.Return = executionId;
        }
        
        /// <summary>Inserts a Execution record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="accruedInterest">The value for the AccruedInterest column.</param>
        /// <param name="brokerAccountId">The value for the BrokerAccountId column.</param>
        /// <param name="brokerId">The value for the BrokerId column.</param>
        /// <param name="commission">The value for the Commission column.</param>
        /// <param name="createdTime">The value for the CreatedTime column.</param>
        /// <param name="createdUserId">The value for the CreatedUserId column.</param>
        /// <param name="destinationOrderId">The value for the DestinationOrderId column.</param>
        /// <param name="destinationStateCode">The value for the DestinationStateCode column.</param>
        /// <param name="executionPrice">The value for the ExecutionPrice column.</param>
        /// <param name="executionQuantity">The value for the ExecutionQuantity column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="fixMessageId">The value for the FixMessageId column.</param>
        /// <param name="isHidden">The value for the IsHidden column.</param>
        /// <param name="modifiedTime">The value for the ModifiedTime column.</param>
        /// <param name="modifiedUserId">The value for the ModifiedUserId column.</param>
        /// <param name="originalDestinationOrderId">The value for the OriginalDestinationOrderId column.</param>
        /// <param name="originalPrice">The value for the OriginalPrice column.</param>
        /// <param name="originalQuantity">The value for the OriginalQuantity column.</param>
        /// <param name="settlementDate">The value for the SettlementDate column.</param>
        /// <param name="sourceExecutionId">The value for the SourceExecutionId column.</param>
        /// <param name="sourceStateCode">The value for the SourceStateCode column.</param>
        /// <param name="tradeDate">The value for the TradeDate column.</param>
        /// <param name="userFee0">The value for the UserFee0 column.</param>
        /// <param name="userFee1">The value for the UserFee1 column.</param>
        /// <param name="userFee2">The value for the UserFee2 column.</param>
        /// <param name="userFee3">The value for the UserFee3 column.</param>
        public static int Insert(
                    AdoTransaction adoTransaction, 
                    SqlTransaction sqlTransaction, 
                    ref long rowVersion, 
                    object accruedInterest, 
                    object brokerAccountId, 
                    object brokerId, 
                    object commission, 
                    object createdTime, 
                    object createdUserId, 
                    int destinationOrderId, 
                    int destinationStateCode, 
                    decimal executionPrice, 
                    decimal executionQuantity, 
                    object externalId0, 
                    object fixMessageId, 
                    object isHidden, 
                    object modifiedTime, 
                    object modifiedUserId, 
                    object originalDestinationOrderId, 
                    object originalPrice, 
                    object originalQuantity, 
                    System.DateTime settlementDate, 
                    object sourceExecutionId, 
                    int sourceStateCode, 
                    System.DateTime tradeDate, 
                    object userFee0, 
                    object userFee1, 
                    object userFee2, 
                    object userFee3)
        {
            // Accessor for the Execution Table.
            ServerMarketData.ExecutionDataTable executionTable = ServerMarketData.Execution;
            // Apply Defaults
            if ((accruedInterest == null))
            {
                accruedInterest = 0.0m;
            }
            if ((brokerAccountId == null))
            {
                brokerAccountId = System.DBNull.Value;
            }
            if ((brokerId == null))
            {
                brokerId = System.DBNull.Value;
            }
            if ((commission == null))
            {
                commission = 0.0m;
            }
            if ((createdTime == null))
            {
                createdTime = System.DBNull.Value;
            }
            if ((createdUserId == null))
            {
                createdUserId = System.DBNull.Value;
            }
            if ((externalId0 == null))
            {
                externalId0 = System.DBNull.Value;
            }
            if ((fixMessageId == null))
            {
                fixMessageId = System.DBNull.Value;
            }
            if ((isHidden == null))
            {
                isHidden = false;
            }
            if ((modifiedTime == null))
            {
                modifiedTime = System.DBNull.Value;
            }
            if ((modifiedUserId == null))
            {
                modifiedUserId = System.DBNull.Value;
            }
            if ((originalDestinationOrderId == null))
            {
                originalDestinationOrderId = System.DBNull.Value;
            }
            if ((originalPrice == null))
            {
                originalPrice = System.DBNull.Value;
            }
            if ((originalQuantity == null))
            {
                originalQuantity = System.DBNull.Value;
            }
            if ((sourceExecutionId == null))
            {
                sourceExecutionId = System.DBNull.Value;
            }
            if ((userFee0 == null))
            {
                userFee0 = 0.0m;
            }
            if ((userFee1 == null))
            {
                userFee1 = 0.0m;
            }
            if ((userFee2 == null))
            {
                userFee2 = 0.0m;
            }
            if ((userFee3 == null))
            {
                userFee3 = 0.0m;
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Insert the record into the ADO database.
            ServerMarketData.ExecutionRow executionRow = executionTable.NewExecutionRow();
            executionRow[executionTable.RowVersionColumn] = rowVersion;
            executionRow[executionTable.AccruedInterestColumn] = accruedInterest;
            executionRow[executionTable.BrokerAccountIdColumn] = brokerAccountId;
            executionRow[executionTable.BrokerIdColumn] = brokerId;
            executionRow[executionTable.CommissionColumn] = commission;
            executionRow[executionTable.CreatedTimeColumn] = createdTime;
            executionRow[executionTable.CreatedUserIdColumn] = createdUserId;
            executionRow[executionTable.DestinationOrderIdColumn] = destinationOrderId;
            executionRow[executionTable.DestinationStateCodeColumn] = destinationStateCode;
            executionRow[executionTable.ExecutionPriceColumn] = executionPrice;
            executionRow[executionTable.ExecutionQuantityColumn] = executionQuantity;
            executionRow[executionTable.ExternalId0Column] = externalId0;
            executionRow[executionTable.FixMessageIdColumn] = fixMessageId;
            executionRow[executionTable.IsHiddenColumn] = isHidden;
            executionRow[executionTable.ModifiedTimeColumn] = modifiedTime;
            executionRow[executionTable.ModifiedUserIdColumn] = modifiedUserId;
            executionRow[executionTable.OriginalDestinationOrderIdColumn] = originalDestinationOrderId;
            executionRow[executionTable.OriginalPriceColumn] = originalPrice;
            executionRow[executionTable.OriginalQuantityColumn] = originalQuantity;
            executionRow[executionTable.SettlementDateColumn] = settlementDate;
            executionRow[executionTable.SourceExecutionIdColumn] = sourceExecutionId;
            executionRow[executionTable.SourceStateCodeColumn] = sourceStateCode;
            executionRow[executionTable.TradeDateColumn] = tradeDate;
            executionRow[executionTable.UserFee0Column] = userFee0;
            executionRow[executionTable.UserFee1Column] = userFee1;
            executionRow[executionTable.UserFee2Column] = userFee2;
            executionRow[executionTable.UserFee3Column] = userFee3;
            executionTable.AddExecutionRow(executionRow);
            adoTransaction.DataRows.Add(executionRow);
            // Insert the record into the SQL database.
            SqlCommand sqlCommand = new SqlCommand(@"insert ""Execution"" (""rowVersion"",""AccruedInterest"",""BrokerAccountId"",""BrokerId"",""Commission"",""CreatedTime"",""CreatedUserId"",""DestinationOrderId"",""DestinationStateCode"",""ExecutionId"",""ExecutionPrice"",""ExecutionQuantity"",""ExternalId0"",""FixMessageId"",""IsHidden"",""ModifiedTime"",""ModifiedUserId"",""OriginalDestinationOrderId"",""OriginalPrice"",""OriginalQuantity"",""SettlementDate"",""SourceExecutionId"",""SourceStateCode"",""TradeDate"",""UserFee0"",""UserFee1"",""UserFee2"",""UserFee3"") values (@rowVersion,@accruedInterest,@brokerAccountId,@brokerId,@commission,@createdTime,@createdUserId,@destinationOrderId,@destinationStateCode,@executionId,@executionPrice,@executionQuantity,@externalId0,@fixMessageId,@isHidden,@modifiedTime,@modifiedUserId,@originalDestinationOrderId,@originalPrice,@originalQuantity,@settlementDate,@sourceExecutionId,@sourceStateCode,@tradeDate,@userFee0,@userFee1,@userFee2,@userFee3)");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@accruedInterest", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, accruedInterest));
            sqlCommand.Parameters.Add(new SqlParameter("@brokerAccountId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, brokerAccountId));
            sqlCommand.Parameters.Add(new SqlParameter("@brokerId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, brokerId));
            sqlCommand.Parameters.Add(new SqlParameter("@commission", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, commission));
            sqlCommand.Parameters.Add(new SqlParameter("@createdTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, createdTime));
            sqlCommand.Parameters.Add(new SqlParameter("@createdUserId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, createdUserId));
            sqlCommand.Parameters.Add(new SqlParameter("@destinationOrderId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, destinationOrderId));
            sqlCommand.Parameters.Add(new SqlParameter("@destinationStateCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, destinationStateCode));
            sqlCommand.Parameters.Add(new SqlParameter("@executionId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, executionRow[executionTable.ExecutionIdColumn]));
            sqlCommand.Parameters.Add(new SqlParameter("@executionPrice", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, executionPrice));
            sqlCommand.Parameters.Add(new SqlParameter("@executionQuantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, executionQuantity));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@fixMessageId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixMessageId));
            sqlCommand.Parameters.Add(new SqlParameter("@isHidden", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isHidden));
            sqlCommand.Parameters.Add(new SqlParameter("@modifiedTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, modifiedTime));
            sqlCommand.Parameters.Add(new SqlParameter("@modifiedUserId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, modifiedUserId));
            sqlCommand.Parameters.Add(new SqlParameter("@originalDestinationOrderId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, originalDestinationOrderId));
            sqlCommand.Parameters.Add(new SqlParameter("@originalPrice", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, originalPrice));
            sqlCommand.Parameters.Add(new SqlParameter("@originalQuantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, originalQuantity));
            sqlCommand.Parameters.Add(new SqlParameter("@settlementDate", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, settlementDate));
            sqlCommand.Parameters.Add(new SqlParameter("@sourceExecutionId", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, sourceExecutionId));
            sqlCommand.Parameters.Add(new SqlParameter("@sourceStateCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, sourceStateCode));
            sqlCommand.Parameters.Add(new SqlParameter("@tradeDate", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, tradeDate));
            sqlCommand.Parameters.Add(new SqlParameter("@userFee0", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, userFee0));
            sqlCommand.Parameters.Add(new SqlParameter("@userFee1", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, userFee1));
            sqlCommand.Parameters.Add(new SqlParameter("@userFee2", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, userFee2));
            sqlCommand.Parameters.Add(new SqlParameter("@userFee3", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, userFee3));
            sqlCommand.ExecuteNonQuery();
            // Return Statements
            return executionRow.ExecutionId;
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Update(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Update' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.ExecutionLock);
            Negotiation.Archive(adoTransaction);
        }
        
        /// <summary>Inserts a Execution record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Update(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            object accruedInterest = parameters["accruedInterest"].Value;
            object brokerAccountId = parameters["brokerAccountId"].Value;
            object brokerId = parameters["brokerId"].Value;
            object commission = parameters["commission"].Value;
            object createdTime = parameters["createdTime"].Value;
            object createdUserId = parameters["createdUserId"].Value;
            object destinationOrderId = parameters["destinationOrderId"].Value;
            object destinationStateCode = parameters["destinationStateCode"].Value;
            int executionId = parameters["executionId"];
            object executionPrice = parameters["executionPrice"].Value;
            object executionQuantity = parameters["executionQuantity"].Value;
            object externalId0 = parameters["externalId0"].Value;
            object fixMessageId = parameters["fixMessageId"].Value;
            object isHidden = parameters["isHidden"].Value;
            object modifiedTime = parameters["modifiedTime"].Value;
            object modifiedUserId = parameters["modifiedUserId"].Value;
            object originalDestinationOrderId = parameters["originalDestinationOrderId"].Value;
            object originalPrice = parameters["originalPrice"].Value;
            object originalQuantity = parameters["originalQuantity"].Value;
            object settlementDate = parameters["settlementDate"].Value;
            object sourceExecutionId = parameters["sourceExecutionId"].Value;
            object sourceStateCode = parameters["sourceStateCode"].Value;
            object tradeDate = parameters["tradeDate"].Value;
            object userFee0 = parameters["userFee0"].Value;
            object userFee1 = parameters["userFee1"].Value;
            object userFee2 = parameters["userFee2"].Value;
            object userFee3 = parameters["userFee3"].Value;
            // Call the internal method to complete the operation.
            Execution.Update(adoTransaction, sqlTransaction, ref rowVersion, accruedInterest, brokerAccountId, brokerId, commission, createdTime, createdUserId, destinationOrderId, destinationStateCode, executionId, executionPrice, executionQuantity, externalId0, fixMessageId, isHidden, modifiedTime, modifiedUserId, originalDestinationOrderId, originalPrice, originalQuantity, settlementDate, sourceExecutionId, sourceStateCode, tradeDate, userFee0, userFee1, userFee2, userFee3);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Updates a Execution record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="rowVersion">The version number of the row</param>
        /// <param name="accruedInterest">The value for the AccruedInterest column.</param>
        /// <param name="brokerAccountId">The value for the BrokerAccountId column.</param>
        /// <param name="brokerId">The value for the BrokerId column.</param>
        /// <param name="commission">The value for the Commission column.</param>
        /// <param name="createdTime">The value for the CreatedTime column.</param>
        /// <param name="createdUserId">The value for the CreatedUserId column.</param>
        /// <param name="destinationOrderId">The value for the DestinationOrderId column.</param>
        /// <param name="destinationStateCode">The value for the DestinationStateCode column.</param>
        /// <param name="executionId">The value for the ExecutionId column.</param>
        /// <param name="executionPrice">The value for the ExecutionPrice column.</param>
        /// <param name="executionQuantity">The value for the ExecutionQuantity column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="fixMessageId">The value for the FixMessageId column.</param>
        /// <param name="isHidden">The value for the IsHidden column.</param>
        /// <param name="modifiedTime">The value for the ModifiedTime column.</param>
        /// <param name="modifiedUserId">The value for the ModifiedUserId column.</param>
        /// <param name="originalDestinationOrderId">The value for the OriginalDestinationOrderId column.</param>
        /// <param name="originalPrice">The value for the OriginalPrice column.</param>
        /// <param name="originalQuantity">The value for the OriginalQuantity column.</param>
        /// <param name="settlementDate">The value for the SettlementDate column.</param>
        /// <param name="sourceExecutionId">The value for the SourceExecutionId column.</param>
        /// <param name="sourceStateCode">The value for the SourceStateCode column.</param>
        /// <param name="tradeDate">The value for the TradeDate column.</param>
        /// <param name="userFee0">The value for the UserFee0 column.</param>
        /// <param name="userFee1">The value for the UserFee1 column.</param>
        /// <param name="userFee2">The value for the UserFee2 column.</param>
        /// <param name="userFee3">The value for the UserFee3 column.</param>
        public static void Update(
                    AdoTransaction adoTransaction, 
                    SqlTransaction sqlTransaction, 
                    ref long rowVersion, 
                    object accruedInterest, 
                    object brokerAccountId, 
                    object brokerId, 
                    object commission, 
                    object createdTime, 
                    object createdUserId, 
                    object destinationOrderId, 
                    object destinationStateCode, 
                    int executionId, 
                    object executionPrice, 
                    object executionQuantity, 
                    object externalId0, 
                    object fixMessageId, 
                    object isHidden, 
                    object modifiedTime, 
                    object modifiedUserId, 
                    object originalDestinationOrderId, 
                    object originalPrice, 
                    object originalQuantity, 
                    object settlementDate, 
                    object sourceExecutionId, 
                    object sourceStateCode, 
                    object tradeDate, 
                    object userFee0, 
                    object userFee1, 
                    object userFee2, 
                    object userFee3)
        {
            // Accessor for the Execution Table.
            ServerMarketData.ExecutionDataTable executionTable = ServerMarketData.Execution;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.ExecutionRow executionRow = executionTable.FindByExecutionId(executionId);
            if ((executionRow == null))
            {
                throw new Exception(string.Format("The Execution table does not have an element identified by {0}", executionId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((executionRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Apply Defaults
            if ((accruedInterest == null))
            {
                accruedInterest = executionRow[executionTable.AccruedInterestColumn];
            }
            if ((brokerAccountId == null))
            {
                brokerAccountId = executionRow[executionTable.BrokerAccountIdColumn];
            }
            if ((brokerId == null))
            {
                brokerId = executionRow[executionTable.BrokerIdColumn];
            }
            if ((commission == null))
            {
                commission = executionRow[executionTable.CommissionColumn];
            }
            if ((createdTime == null))
            {
                createdTime = executionRow[executionTable.CreatedTimeColumn];
            }
            if ((createdUserId == null))
            {
                createdUserId = executionRow[executionTable.CreatedUserIdColumn];
            }
            if ((destinationOrderId == null))
            {
                destinationOrderId = executionRow[executionTable.DestinationOrderIdColumn];
            }
            if ((destinationStateCode == null))
            {
                destinationStateCode = executionRow[executionTable.DestinationStateCodeColumn];
            }
            if ((executionPrice == null))
            {
                executionPrice = executionRow[executionTable.ExecutionPriceColumn];
            }
            if ((executionQuantity == null))
            {
                executionQuantity = executionRow[executionTable.ExecutionQuantityColumn];
            }
            if ((externalId0 == null))
            {
                externalId0 = executionRow[executionTable.ExternalId0Column];
            }
            if ((fixMessageId == null))
            {
                fixMessageId = executionRow[executionTable.FixMessageIdColumn];
            }
            if ((isHidden == null))
            {
                isHidden = executionRow[executionTable.IsHiddenColumn];
            }
            if ((modifiedTime == null))
            {
                modifiedTime = executionRow[executionTable.ModifiedTimeColumn];
            }
            if ((modifiedUserId == null))
            {
                modifiedUserId = executionRow[executionTable.ModifiedUserIdColumn];
            }
            if ((originalDestinationOrderId == null))
            {
                originalDestinationOrderId = executionRow[executionTable.OriginalDestinationOrderIdColumn];
            }
            if ((originalPrice == null))
            {
                originalPrice = executionRow[executionTable.OriginalPriceColumn];
            }
            if ((originalQuantity == null))
            {
                originalQuantity = executionRow[executionTable.OriginalQuantityColumn];
            }
            if ((settlementDate == null))
            {
                settlementDate = executionRow[executionTable.SettlementDateColumn];
            }
            if ((sourceExecutionId == null))
            {
                sourceExecutionId = executionRow[executionTable.SourceExecutionIdColumn];
            }
            if ((sourceStateCode == null))
            {
                sourceStateCode = executionRow[executionTable.SourceStateCodeColumn];
            }
            if ((tradeDate == null))
            {
                tradeDate = executionRow[executionTable.TradeDateColumn];
            }
            if ((userFee0 == null))
            {
                userFee0 = executionRow[executionTable.UserFee0Column];
            }
            if ((userFee1 == null))
            {
                userFee1 = executionRow[executionTable.UserFee1Column];
            }
            if ((userFee2 == null))
            {
                userFee2 = executionRow[executionTable.UserFee2Column];
            }
            if ((userFee3 == null))
            {
                userFee3 = executionRow[executionTable.UserFee3Column];
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Update the record in the ADO database.
            executionRow[executionTable.RowVersionColumn] = rowVersion;
            executionRow[executionTable.AccruedInterestColumn] = accruedInterest;
            executionRow[executionTable.BrokerAccountIdColumn] = brokerAccountId;
            executionRow[executionTable.BrokerIdColumn] = brokerId;
            executionRow[executionTable.CommissionColumn] = commission;
            executionRow[executionTable.CreatedTimeColumn] = createdTime;
            executionRow[executionTable.CreatedUserIdColumn] = createdUserId;
            executionRow[executionTable.DestinationOrderIdColumn] = destinationOrderId;
            executionRow[executionTable.DestinationStateCodeColumn] = destinationStateCode;
            executionRow[executionTable.ExecutionPriceColumn] = executionPrice;
            executionRow[executionTable.ExecutionQuantityColumn] = executionQuantity;
            executionRow[executionTable.ExternalId0Column] = externalId0;
            executionRow[executionTable.FixMessageIdColumn] = fixMessageId;
            executionRow[executionTable.IsHiddenColumn] = isHidden;
            executionRow[executionTable.ModifiedTimeColumn] = modifiedTime;
            executionRow[executionTable.ModifiedUserIdColumn] = modifiedUserId;
            executionRow[executionTable.OriginalDestinationOrderIdColumn] = originalDestinationOrderId;
            executionRow[executionTable.OriginalPriceColumn] = originalPrice;
            executionRow[executionTable.OriginalQuantityColumn] = originalQuantity;
            executionRow[executionTable.SettlementDateColumn] = settlementDate;
            executionRow[executionTable.SourceExecutionIdColumn] = sourceExecutionId;
            executionRow[executionTable.SourceStateCodeColumn] = sourceStateCode;
            executionRow[executionTable.TradeDateColumn] = tradeDate;
            executionRow[executionTable.UserFee0Column] = userFee0;
            executionRow[executionTable.UserFee1Column] = userFee1;
            executionRow[executionTable.UserFee2Column] = userFee2;
            executionRow[executionTable.UserFee3Column] = userFee3;
            adoTransaction.DataRows.Add(executionRow);
            // Update the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand(@"update ""Execution"" set ""RowVersion""=@rowVersion,""AccruedInterest""=@accruedInterest,""BrokerAccountId""=@brokerAccountId,""BrokerId""=@brokerId,""Commission""=@commission,""CreatedTime""=@createdTime,""CreatedUserId""=@createdUserId,""DestinationOrderId""=@destinationOrderId,""DestinationStateCode""=@destinationStateCode,""ExecutionPrice""=@executionPrice,""ExecutionQuantity""=@executionQuantity,""ExternalId0""=@externalId0,""FixMessageId""=@fixMessageId,""IsHidden""=@isHidden,""ModifiedTime""=@modifiedTime,""ModifiedUserId""=@modifiedUserId,""OriginalDestinationOrderId""=@originalDestinationOrderId,""OriginalPrice""=@originalPrice,""OriginalQuantity""=@originalQuantity,""SettlementDate""=@settlementDate,""SourceExecutionId""=@sourceExecutionId,""SourceStateCode""=@sourceStateCode,""TradeDate""=@tradeDate,""UserFee0""=@userFee0,""UserFee1""=@userFee1,""UserFee2""=@userFee2,""UserFee3""=@userFee3 where ""ExecutionId""=@executionId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@accruedInterest", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, accruedInterest));
            sqlCommand.Parameters.Add(new SqlParameter("@brokerAccountId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, brokerAccountId));
            sqlCommand.Parameters.Add(new SqlParameter("@brokerId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, brokerId));
            sqlCommand.Parameters.Add(new SqlParameter("@commission", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, commission));
            sqlCommand.Parameters.Add(new SqlParameter("@createdTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, createdTime));
            sqlCommand.Parameters.Add(new SqlParameter("@createdUserId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, createdUserId));
            sqlCommand.Parameters.Add(new SqlParameter("@destinationOrderId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, destinationOrderId));
            sqlCommand.Parameters.Add(new SqlParameter("@destinationStateCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, destinationStateCode));
            sqlCommand.Parameters.Add(new SqlParameter("@executionId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, executionId));
            sqlCommand.Parameters.Add(new SqlParameter("@executionPrice", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, executionPrice));
            sqlCommand.Parameters.Add(new SqlParameter("@executionQuantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, executionQuantity));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@fixMessageId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixMessageId));
            sqlCommand.Parameters.Add(new SqlParameter("@isHidden", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isHidden));
            sqlCommand.Parameters.Add(new SqlParameter("@modifiedTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, modifiedTime));
            sqlCommand.Parameters.Add(new SqlParameter("@modifiedUserId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, modifiedUserId));
            sqlCommand.Parameters.Add(new SqlParameter("@originalDestinationOrderId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, originalDestinationOrderId));
            sqlCommand.Parameters.Add(new SqlParameter("@originalPrice", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, originalPrice));
            sqlCommand.Parameters.Add(new SqlParameter("@originalQuantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, originalQuantity));
            sqlCommand.Parameters.Add(new SqlParameter("@settlementDate", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, settlementDate));
            sqlCommand.Parameters.Add(new SqlParameter("@sourceExecutionId", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, sourceExecutionId));
            sqlCommand.Parameters.Add(new SqlParameter("@sourceStateCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, sourceStateCode));
            sqlCommand.Parameters.Add(new SqlParameter("@tradeDate", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, tradeDate));
            sqlCommand.Parameters.Add(new SqlParameter("@userFee0", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, userFee0));
            sqlCommand.Parameters.Add(new SqlParameter("@userFee1", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, userFee1));
            sqlCommand.Parameters.Add(new SqlParameter("@userFee2", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, userFee2));
            sqlCommand.Parameters.Add(new SqlParameter("@userFee3", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, userFee3));
            // Update the record in the SQL database.
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Delete(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Delete' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.ExecutionLock);
            Negotiation.Archive(adoTransaction);
        }
        
        /// <summary>Inserts a Execution record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Delete(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int executionId = parameters["executionId"];
            // Call the internal method to complete the operation.
            Execution.Delete(adoTransaction, sqlTransaction, rowVersion, executionId);
        }
        
        /// <summary>Deletes a Execution record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="executionId">The value for the ExecutionId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Delete(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int executionId)
        {
            // Accessor for the Execution Table.
            ServerMarketData.ExecutionDataTable executionTable = ServerMarketData.Execution;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.ExecutionRow executionRow = executionTable.FindByExecutionId(executionId);
            if ((executionRow == null))
            {
                throw new Exception(string.Format("The Execution table does not have an element identified by {0}", executionId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((executionRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Delete the child records.
            for (int index = 0; (index < executionRow.GetNegotiationRows().Length); index = (index + 1))
            {
                ServerMarketData.NegotiationRow childNegotiationRow = executionRow.GetNegotiationRows()[index];
                Negotiation.Delete(adoTransaction, sqlTransaction, childNegotiationRow.RowVersion, childNegotiationRow.NegotiationId);
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Delete the record in the ADO database.
            executionRow[executionTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(executionRow);
            executionRow.Delete();
            // Delete the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Execution\" set \"IsDeleted\" = 1 where \"ExecutionId\"=@executionId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@executionId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, executionId));
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Archive(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Archive' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.ExecutionLock);
            Negotiation.Archive(adoTransaction);
        }
        
        /// <summary>Inserts a Execution record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Archive(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int executionId = parameters["executionId"];
            // Call the internal method to complete the operation.
            Execution.Archive(adoTransaction, sqlTransaction, rowVersion, executionId);
        }
        
        /// <summary>Archives a Execution record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="executionId">The value for the ExecutionId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Archive(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int executionId)
        {
            // Accessor for the Execution Table.
            ServerMarketData.ExecutionDataTable executionTable = ServerMarketData.Execution;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.ExecutionRow executionRow = executionTable.FindByExecutionId(executionId);
            if ((executionRow == null))
            {
                throw new Exception(string.Format("The Execution table does not have an element identified by {0}", executionId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((executionRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Archive the child records.
            for (int index = 0; (index < executionRow.GetNegotiationRows().Length); index = (index + 1))
            {
                ServerMarketData.NegotiationRow childNegotiationRow = executionRow.GetNegotiationRows()[index];
                Negotiation.Archive(adoTransaction, sqlTransaction, childNegotiationRow.RowVersion, childNegotiationRow.NegotiationId);
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Delete the record in the ADO database.
            executionRow[executionTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(executionRow);
            executionRow.Delete();
            // Archive the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Execution\" set \"IsArchived\" = 1 where \"ExecutionId\"=@executionId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@executionId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, executionId));
            sqlCommand.ExecuteNonQuery();
        }
    }
}
