//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Guardian.Core
{
    using MarkThree.Guardian;
    using MarkThree.Guardian.Server;
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Data.SqlClient;
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    public class Province
    {
        
        /// This value is used to map the object to a persistent storage device.  The parameters for the storage
        /// are found in the configuration file for this service.
        public static string PersistentStore = "Guardian";
        
        /// This member provides access to the in-memory database.
        private static ServerMarketData serverMarketData = new ServerMarketData();
        
        /// <summary>Collects the table lock request(s) for an Insert operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Insert(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for this operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.ProvinceLock);
        }
        
        /// <summary>Inserts a Province record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Insert(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            string abbreviation = parameters["abbreviation"];
            int countryId = parameters["countryId"];
            object externalId0 = parameters["externalId0"].Value;
            object externalId1 = parameters["externalId1"].Value;
            string name = parameters["name"];
            // The rowVersion is passed back to the caller in the event it's needed for additional commands in the batch.
            long rowVersion = long.MinValue;
            // Call the internal method to complete the operation.
            int provinceId = Province.Insert(adoTransaction, sqlTransaction, ref rowVersion, abbreviation, countryId, externalId0, externalId1, name);
            // Return values.
            parameters["rowVersion"] = rowVersion;
            parameters.Return = provinceId;
        }
        
        /// <summary>Inserts a Province record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="abbreviation">The value for the Abbreviation column.</param>
        /// <param name="countryId">The value for the CountryId column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="externalId1">The value for the ExternalId1 column.</param>
        /// <param name="name">The value for the Name column.</param>
        public static int Insert(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, ref long rowVersion, string abbreviation, int countryId, object externalId0, object externalId1, string name)
        {
            // Accessor for the Province Table.
            ServerMarketData.ProvinceDataTable provinceTable = ServerMarketData.Province;
            // Apply Defaults
            if ((externalId0 == null))
            {
                externalId0 = System.DBNull.Value;
            }
            if ((externalId1 == null))
            {
                externalId1 = System.DBNull.Value;
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Insert the record into the ADO database.
            ServerMarketData.ProvinceRow provinceRow = provinceTable.NewProvinceRow();
            provinceRow[provinceTable.RowVersionColumn] = rowVersion;
            provinceRow[provinceTable.AbbreviationColumn] = abbreviation;
            provinceRow[provinceTable.CountryIdColumn] = countryId;
            provinceRow[provinceTable.ExternalId0Column] = externalId0;
            provinceRow[provinceTable.ExternalId1Column] = externalId1;
            provinceRow[provinceTable.NameColumn] = name;
            provinceTable.AddProvinceRow(provinceRow);
            adoTransaction.DataRows.Add(provinceRow);
            // Insert the record into the SQL database.
            SqlCommand sqlCommand = new SqlCommand("insert \"Province\" (\"rowVersion\",\"Abbreviation\",\"CountryId\",\"ExternalId0\",\"Externa" +
                    "lId1\",\"Name\",\"ProvinceId\") values (@rowVersion,@abbreviation,@countryId,@externa" +
                    "lId0,@externalId1,@name,@provinceId)");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@abbreviation", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, abbreviation));
            sqlCommand.Parameters.Add(new SqlParameter("@countryId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, countryId));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId1", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId1));
            sqlCommand.Parameters.Add(new SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, name));
            sqlCommand.Parameters.Add(new SqlParameter("@provinceId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, provinceRow[provinceTable.ProvinceIdColumn]));
            sqlCommand.ExecuteNonQuery();
            // Return Statements
            return provinceRow.ProvinceId;
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Update(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Update' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.ProvinceLock);
            AccountBase.ArchiveChildren(adoTransaction);
        }
        
        /// <summary>Inserts a Province record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Update(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            object abbreviation = parameters["abbreviation"].Value;
            object countryId = parameters["countryId"].Value;
            object externalId0 = parameters["externalId0"].Value;
            object externalId1 = parameters["externalId1"].Value;
            object name = parameters["name"].Value;
            int provinceId = parameters["provinceId"];
            // Call the internal method to complete the operation.
            Province.Update(adoTransaction, sqlTransaction, ref rowVersion, abbreviation, countryId, externalId0, externalId1, name, provinceId);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Updates a Province record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="rowVersion">The version number of the row</param>
        /// <param name="abbreviation">The value for the Abbreviation column.</param>
        /// <param name="countryId">The value for the CountryId column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="externalId1">The value for the ExternalId1 column.</param>
        /// <param name="name">The value for the Name column.</param>
        /// <param name="provinceId">The value for the ProvinceId column.</param>
        public static void Update(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, ref long rowVersion, object abbreviation, object countryId, object externalId0, object externalId1, object name, int provinceId)
        {
            // Accessor for the Province Table.
            ServerMarketData.ProvinceDataTable provinceTable = ServerMarketData.Province;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.ProvinceRow provinceRow = provinceTable.FindByProvinceId(provinceId);
            if ((provinceRow == null))
            {
                throw new Exception(string.Format("The Province table does not have an element identified by {0}", provinceId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((provinceRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Apply Defaults
            if ((abbreviation == null))
            {
                abbreviation = provinceRow[provinceTable.AbbreviationColumn];
            }
            if ((countryId == null))
            {
                countryId = provinceRow[provinceTable.CountryIdColumn];
            }
            if ((externalId0 == null))
            {
                externalId0 = provinceRow[provinceTable.ExternalId0Column];
            }
            if ((externalId1 == null))
            {
                externalId1 = provinceRow[provinceTable.ExternalId1Column];
            }
            if ((name == null))
            {
                name = provinceRow[provinceTable.NameColumn];
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Update the record in the ADO database.
            provinceRow[provinceTable.RowVersionColumn] = rowVersion;
            provinceRow[provinceTable.AbbreviationColumn] = abbreviation;
            provinceRow[provinceTable.CountryIdColumn] = countryId;
            provinceRow[provinceTable.ExternalId0Column] = externalId0;
            provinceRow[provinceTable.ExternalId1Column] = externalId1;
            provinceRow[provinceTable.NameColumn] = name;
            adoTransaction.DataRows.Add(provinceRow);
            // Update the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Province\" set \"RowVersion\"=@rowVersion,\"Abbreviation\"=@abbreviation,\"Coun" +
                    "tryId\"=@countryId,\"ExternalId0\"=@externalId0,\"ExternalId1\"=@externalId1,\"Name\"=@" +
                    "name where \"ProvinceId\"=@provinceId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@abbreviation", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, abbreviation));
            sqlCommand.Parameters.Add(new SqlParameter("@countryId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, countryId));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId1", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId1));
            sqlCommand.Parameters.Add(new SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, name));
            sqlCommand.Parameters.Add(new SqlParameter("@provinceId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, provinceId));
            // Update the record in the SQL database.
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Delete(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Delete' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.ProvinceLock);
            AccountBase.ArchiveChildren(adoTransaction);
        }
        
        /// <summary>Inserts a Province record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Delete(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int provinceId = parameters["provinceId"];
            // Call the internal method to complete the operation.
            Province.Delete(adoTransaction, sqlTransaction, rowVersion, provinceId);
        }
        
        /// <summary>Deletes a Province record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="provinceId">The value for the ProvinceId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Delete(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int provinceId)
        {
            // Accessor for the Province Table.
            ServerMarketData.ProvinceDataTable provinceTable = ServerMarketData.Province;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.ProvinceRow provinceRow = provinceTable.FindByProvinceId(provinceId);
            if ((provinceRow == null))
            {
                throw new Exception(string.Format("The Province table does not have an element identified by {0}", provinceId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((provinceRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Delete the child records.
            for (int index = 0; (index < provinceRow.GetAccountBaseRows().Length); index = (index + 1))
            {
                ServerMarketData.AccountBaseRow childAccountBaseRow = provinceRow.GetAccountBaseRows()[index];
                AccountBase.DeleteChildren(adoTransaction, sqlTransaction, childAccountBaseRow.RowVersion, childAccountBaseRow.AccountBaseId);
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Delete the record in the ADO database.
            provinceRow[provinceTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(provinceRow);
            provinceRow.Delete();
            // Delete the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Province\" set \"IsDeleted\" = 1 where \"ProvinceId\"=@provinceId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@provinceId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, provinceId));
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Archive(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Archive' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.ProvinceLock);
            AccountBase.ArchiveChildren(adoTransaction);
        }
        
        /// <summary>Inserts a Province record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Archive(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int provinceId = parameters["provinceId"];
            // Call the internal method to complete the operation.
            Province.Archive(adoTransaction, sqlTransaction, rowVersion, provinceId);
        }
        
        /// <summary>Archives a Province record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="provinceId">The value for the ProvinceId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Archive(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int provinceId)
        {
            // Accessor for the Province Table.
            ServerMarketData.ProvinceDataTable provinceTable = ServerMarketData.Province;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.ProvinceRow provinceRow = provinceTable.FindByProvinceId(provinceId);
            if ((provinceRow == null))
            {
                throw new Exception(string.Format("The Province table does not have an element identified by {0}", provinceId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((provinceRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Archive the child records.
            for (int index = 0; (index < provinceRow.GetAccountBaseRows().Length); index = (index + 1))
            {
                ServerMarketData.AccountBaseRow childAccountBaseRow = provinceRow.GetAccountBaseRows()[index];
                AccountBase.ArchiveChildren(adoTransaction, sqlTransaction, childAccountBaseRow.RowVersion, childAccountBaseRow.AccountBaseId);
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Delete the record in the ADO database.
            provinceRow[provinceTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(provinceRow);
            provinceRow.Delete();
            // Archive the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Province\" set \"IsArchived\" = 1 where \"ProvinceId\"=@provinceId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@provinceId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, provinceId));
            sqlCommand.ExecuteNonQuery();
        }
    }
}
