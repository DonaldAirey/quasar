//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Guardian.Core
{
    using MarkThree.Guardian;
    using MarkThree.Guardian.Server;
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Data.SqlClient;
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    public class StylesheetType
    {
        
        /// This value is used to map the object to a persistent storage device.  The parameters for the storage
        /// are found in the configuration file for this service.
        public static string PersistentStore = "Guardian";
        
        /// This member provides access to the in-memory database.
        private static ServerMarketData serverMarketData = new ServerMarketData();
        
        /// <summary>Collects the table lock request(s) for an Insert operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Insert(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for this operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.StylesheetTypeLock);
        }
        
        /// <summary>Inserts a StylesheetType record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Insert(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object description = parameters["description"].Value;
            object externalId0 = parameters["externalId0"].Value;
            object externalId1 = parameters["externalId1"].Value;
            object name = parameters["name"].Value;
            int stylesheetTypeCode = parameters["stylesheetTypeCode"];
            // The rowVersion is passed back to the caller in the event it's needed for additional commands in the batch.
            long rowVersion = long.MinValue;
            // Call the internal method to complete the operation.
            StylesheetType.Insert(adoTransaction, sqlTransaction, ref rowVersion, description, externalId0, externalId1, name, stylesheetTypeCode);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Inserts a StylesheetType record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="description">The value for the Description column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="externalId1">The value for the ExternalId1 column.</param>
        /// <param name="name">The value for the Name column.</param>
        /// <param name="stylesheetTypeCode">The value for the StylesheetTypeCode column.</param>
        public static void Insert(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, ref long rowVersion, object description, object externalId0, object externalId1, object name, int stylesheetTypeCode)
        {
            // Accessor for the StylesheetType Table.
            ServerMarketData.StylesheetTypeDataTable stylesheetTypeTable = ServerMarketData.StylesheetType;
            // Apply Defaults
            if ((description == null))
            {
                description = System.DBNull.Value;
            }
            if ((externalId0 == null))
            {
                externalId0 = System.DBNull.Value;
            }
            if ((externalId1 == null))
            {
                externalId1 = System.DBNull.Value;
            }
            if ((name == null))
            {
                name = System.DBNull.Value;
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Insert the record into the ADO database.
            ServerMarketData.StylesheetTypeRow stylesheetTypeRow = stylesheetTypeTable.NewStylesheetTypeRow();
            stylesheetTypeRow[stylesheetTypeTable.RowVersionColumn] = rowVersion;
            stylesheetTypeRow[stylesheetTypeTable.DescriptionColumn] = description;
            stylesheetTypeRow[stylesheetTypeTable.ExternalId0Column] = externalId0;
            stylesheetTypeRow[stylesheetTypeTable.ExternalId1Column] = externalId1;
            stylesheetTypeRow[stylesheetTypeTable.NameColumn] = name;
            stylesheetTypeRow[stylesheetTypeTable.StylesheetTypeCodeColumn] = stylesheetTypeCode;
            stylesheetTypeTable.AddStylesheetTypeRow(stylesheetTypeRow);
            adoTransaction.DataRows.Add(stylesheetTypeRow);
            // Insert the record into the SQL database.
            SqlCommand sqlCommand = new SqlCommand("insert \"StylesheetType\" (\"rowVersion\",\"Description\",\"ExternalId0\",\"ExternalId1\",\"" +
                    "Name\",\"StylesheetTypeCode\") values (@rowVersion,@description,@externalId0,@exter" +
                    "nalId1,@name,@stylesheetTypeCode)");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@description", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, description));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId1", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId1));
            sqlCommand.Parameters.Add(new SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, name));
            sqlCommand.Parameters.Add(new SqlParameter("@stylesheetTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, stylesheetTypeCode));
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Update(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Update' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.StylesheetTypeLock);
            Stylesheet.Archive(adoTransaction);
        }
        
        /// <summary>Inserts a StylesheetType record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Update(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            object description = parameters["description"].Value;
            object externalId0 = parameters["externalId0"].Value;
            object externalId1 = parameters["externalId1"].Value;
            object name = parameters["name"].Value;
            int stylesheetTypeCode = parameters["stylesheetTypeCode"];
            // Call the internal method to complete the operation.
            StylesheetType.Update(adoTransaction, sqlTransaction, ref rowVersion, description, externalId0, externalId1, name, stylesheetTypeCode);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Updates a StylesheetType record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="rowVersion">The version number of the row</param>
        /// <param name="description">The value for the Description column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="externalId1">The value for the ExternalId1 column.</param>
        /// <param name="name">The value for the Name column.</param>
        /// <param name="stylesheetTypeCode">The value for the StylesheetTypeCode column.</param>
        public static void Update(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, ref long rowVersion, object description, object externalId0, object externalId1, object name, int stylesheetTypeCode)
        {
            // Accessor for the StylesheetType Table.
            ServerMarketData.StylesheetTypeDataTable stylesheetTypeTable = ServerMarketData.StylesheetType;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.StylesheetTypeRow stylesheetTypeRow = stylesheetTypeTable.FindByStylesheetTypeCode(stylesheetTypeCode);
            if ((stylesheetTypeRow == null))
            {
                throw new Exception(string.Format("The StylesheetType table does not have an element identified by {0}", stylesheetTypeCode));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((stylesheetTypeRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Apply Defaults
            if ((description == null))
            {
                description = stylesheetTypeRow[stylesheetTypeTable.DescriptionColumn];
            }
            if ((externalId0 == null))
            {
                externalId0 = stylesheetTypeRow[stylesheetTypeTable.ExternalId0Column];
            }
            if ((externalId1 == null))
            {
                externalId1 = stylesheetTypeRow[stylesheetTypeTable.ExternalId1Column];
            }
            if ((name == null))
            {
                name = stylesheetTypeRow[stylesheetTypeTable.NameColumn];
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Update the record in the ADO database.
            stylesheetTypeRow[stylesheetTypeTable.RowVersionColumn] = rowVersion;
            stylesheetTypeRow[stylesheetTypeTable.DescriptionColumn] = description;
            stylesheetTypeRow[stylesheetTypeTable.ExternalId0Column] = externalId0;
            stylesheetTypeRow[stylesheetTypeTable.ExternalId1Column] = externalId1;
            stylesheetTypeRow[stylesheetTypeTable.NameColumn] = name;
            adoTransaction.DataRows.Add(stylesheetTypeRow);
            // Update the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"StylesheetType\" set \"RowVersion\"=@rowVersion,\"Description\"=@description,\"" +
                    "ExternalId0\"=@externalId0,\"ExternalId1\"=@externalId1,\"Name\"=@name where \"Stylesh" +
                    "eetTypeCode\"=@stylesheetTypeCode");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@description", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, description));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId1", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId1));
            sqlCommand.Parameters.Add(new SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, name));
            sqlCommand.Parameters.Add(new SqlParameter("@stylesheetTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, stylesheetTypeCode));
            // Update the record in the SQL database.
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Delete(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Delete' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.StylesheetTypeLock);
            Stylesheet.Archive(adoTransaction);
        }
        
        /// <summary>Inserts a StylesheetType record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Delete(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int stylesheetTypeCode = parameters["stylesheetTypeCode"];
            // Call the internal method to complete the operation.
            StylesheetType.Delete(adoTransaction, sqlTransaction, rowVersion, stylesheetTypeCode);
        }
        
        /// <summary>Deletes a StylesheetType record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="stylesheetTypeCode">The value for the StylesheetTypeCode column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Delete(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int stylesheetTypeCode)
        {
            // Accessor for the StylesheetType Table.
            ServerMarketData.StylesheetTypeDataTable stylesheetTypeTable = ServerMarketData.StylesheetType;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.StylesheetTypeRow stylesheetTypeRow = stylesheetTypeTable.FindByStylesheetTypeCode(stylesheetTypeCode);
            if ((stylesheetTypeRow == null))
            {
                throw new Exception(string.Format("The StylesheetType table does not have an element identified by {0}", stylesheetTypeCode));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((stylesheetTypeRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Delete the child records.
            for (int index = 0; (index < stylesheetTypeRow.GetStylesheetRows().Length); index = (index + 1))
            {
                ServerMarketData.StylesheetRow childStylesheetRow = stylesheetTypeRow.GetStylesheetRows()[index];
                Stylesheet.Delete(adoTransaction, sqlTransaction, childStylesheetRow.RowVersion, childStylesheetRow.StylesheetId);
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Delete the record in the ADO database.
            stylesheetTypeRow[stylesheetTypeTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(stylesheetTypeRow);
            stylesheetTypeRow.Delete();
            // Delete the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"StylesheetType\" set \"IsDeleted\" = 1 where \"StylesheetTypeCode\"=@styleshee" +
                    "tTypeCode");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@stylesheetTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, stylesheetTypeCode));
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Archive(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Archive' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.StylesheetTypeLock);
            Stylesheet.Archive(adoTransaction);
        }
        
        /// <summary>Inserts a StylesheetType record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Archive(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int stylesheetTypeCode = parameters["stylesheetTypeCode"];
            // Call the internal method to complete the operation.
            StylesheetType.Archive(adoTransaction, sqlTransaction, rowVersion, stylesheetTypeCode);
        }
        
        /// <summary>Archives a StylesheetType record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="stylesheetTypeCode">The value for the StylesheetTypeCode column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Archive(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int stylesheetTypeCode)
        {
            // Accessor for the StylesheetType Table.
            ServerMarketData.StylesheetTypeDataTable stylesheetTypeTable = ServerMarketData.StylesheetType;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.StylesheetTypeRow stylesheetTypeRow = stylesheetTypeTable.FindByStylesheetTypeCode(stylesheetTypeCode);
            if ((stylesheetTypeRow == null))
            {
                throw new Exception(string.Format("The StylesheetType table does not have an element identified by {0}", stylesheetTypeCode));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((stylesheetTypeRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Archive the child records.
            for (int index = 0; (index < stylesheetTypeRow.GetStylesheetRows().Length); index = (index + 1))
            {
                ServerMarketData.StylesheetRow childStylesheetRow = stylesheetTypeRow.GetStylesheetRows()[index];
                Stylesheet.Archive(adoTransaction, sqlTransaction, childStylesheetRow.RowVersion, childStylesheetRow.StylesheetId);
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Delete the record in the ADO database.
            stylesheetTypeRow[stylesheetTypeTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(stylesheetTypeRow);
            stylesheetTypeRow.Delete();
            // Archive the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"StylesheetType\" set \"IsArchived\" = 1 where \"StylesheetTypeCode\"=@styleshe" +
                    "etTypeCode");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@stylesheetTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, stylesheetTypeCode));
            sqlCommand.ExecuteNonQuery();
        }
    }
}
