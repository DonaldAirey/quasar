//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Guardian.Core
{
    using MarkThree.Guardian;
    using MarkThree.Guardian.Server;
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Data.SqlClient;
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    public class Trader : MarkThree.Guardian.Core.User
    {
        
        /// <summary>Collects the table lock request(s) for an Insert operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public new static void Insert(AdoTransaction adoTransaction)
        {
            // Lock the tables at the base level of the object hierarchy.
            User.Insert(adoTransaction);
            // These table lock(s) are required for the 'Insert' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.TraderLock);
        }
        
        /// <summary>Inserts a Trader record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public new static void Insert(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object description = parameters["description"].Value;
            object externalId0 = parameters["externalId0"].Value;
            object externalId1 = parameters["externalId1"].Value;
            object externalId2 = parameters["externalId2"].Value;
            object externalId3 = parameters["externalId3"].Value;
            object externalId4 = parameters["externalId4"].Value;
            object externalId5 = parameters["externalId5"].Value;
            object externalId6 = parameters["externalId6"].Value;
            object externalId7 = parameters["externalId7"].Value;
            object groupPermission = parameters["groupPermission"].Value;
            object hidden = parameters["hidden"].Value;
            string name = parameters["name"];
            object owner = parameters["owner"].Value;
            object ownerPermission = parameters["ownerPermission"].Value;
            object readOnly = parameters["readOnly"].Value;
            object worldPermission = parameters["worldPermission"].Value;
            object preferences = parameters["preferences"].Value;
            object systemFolderId = parameters["systemFolderId"].Value;
            string userName = parameters["userName"];
            object accountIdDefault = parameters["accountIdDefault"].Value;
            object address1 = parameters["address1"].Value;
            object address2 = parameters["address2"].Value;
            object address3 = parameters["address3"].Value;
            object blotterIdDefault = parameters["blotterIdDefault"].Value;
            object commissionMaximum = parameters["commissionMaximum"].Value;
            object commissionMinimum = parameters["commissionMinimum"].Value;
            object commissionRate = parameters["commissionRate"].Value;
            object commissionRateTypeCode = parameters["commissionRateTypeCode"].Value;
            object emailAddress = parameters["emailAddress"].Value;
            object fixAccountId = parameters["fixAccountId"].Value;
            object isAgencyMatch = parameters["isAgencyMatch"].Value;
            object isBrokerMatch = parameters["isBrokerMatch"].Value;
            object isCommissionChangeAllowed = parameters["isCommissionChangeAllowed"].Value;
            object isEditExecutionsAllowed = parameters["isEditExecutionsAllowed"].Value;
            object isHedgeMatch = parameters["isHedgeMatch"].Value;
            object isHeld = parameters["isHeld"].Value;
            object isInstitutionMatch = parameters["isInstitutionMatch"].Value;
            object lastDeletedOrder = parameters["lastDeletedOrder"].Value;
            object lastFilledOrder = parameters["lastFilledOrder"].Value;
            object lastFilledSourceOrder = parameters["lastFilledSourceOrder"].Value;
            object lastTrade = parameters["lastTrade"].Value;
            object lotSizeDefault = parameters["lotSizeDefault"].Value;
            object marketSleep = parameters["marketSleep"].Value;
            object maximumVolatilityDefault = parameters["maximumVolatilityDefault"].Value;
            object newsFreeTimeDefault = parameters["newsFreeTimeDefault"].Value;
            object oatsAccountType = parameters["oatsAccountType"].Value;
            object oatsOrigDeptId = parameters["oatsOrigDeptId"].Value;
            object orderMaximumLimitDelta = parameters["orderMaximumLimitDelta"].Value;
            object orderMaximumMarketValue = parameters["orderMaximumMarketValue"].Value;
            object orderMaximumQuantity = parameters["orderMaximumQuantity"].Value;
            object orderWarningMarketValue = parameters["orderWarningMarketValue"].Value;
            object orderWarningQuantity = parameters["orderWarningQuantity"].Value;
            object phone = parameters["phone"].Value;
            object reviewWindow = parameters["reviewWindow"].Value;
            object scraperConfigurationString = parameters["scraperConfigurationString"].Value;
            object startTimeDefault = parameters["startTimeDefault"].Value;
            object stopTimeDefault = parameters["stopTimeDefault"].Value;
            object submissionTypeCode = parameters["submissionTypeCode"].Value;
            object tagId = parameters["tagId"].Value;
            object typeCode = parameters["typeCode"].Value;
            // The rowVersion is passed back to the caller in the event it's needed for additional commands in the batch.
            long rowVersion = long.MinValue;
            // Call the internal method to complete the operation.
            int traderId = Trader.Insert(adoTransaction, sqlTransaction, ref rowVersion, description, externalId0, externalId1, externalId2, externalId3, externalId4, externalId5, externalId6, externalId7, groupPermission, hidden, name, owner, ownerPermission, readOnly, worldPermission, preferences, systemFolderId, userName, accountIdDefault, address1, address2, address3, blotterIdDefault, commissionMaximum, commissionMinimum, commissionRate, commissionRateTypeCode, emailAddress, fixAccountId, isAgencyMatch, isBrokerMatch, isCommissionChangeAllowed, isEditExecutionsAllowed, isHedgeMatch, isHeld, isInstitutionMatch, lastDeletedOrder, lastFilledOrder, lastFilledSourceOrder, lastTrade, lotSizeDefault, marketSleep, maximumVolatilityDefault, newsFreeTimeDefault, oatsAccountType, oatsOrigDeptId, orderMaximumLimitDelta, orderMaximumMarketValue, orderMaximumQuantity, orderWarningMarketValue, orderWarningQuantity, phone, reviewWindow, scraperConfigurationString, startTimeDefault, stopTimeDefault, submissionTypeCode, tagId, typeCode);
            // Return values.
            parameters["rowVersion"] = rowVersion;
            parameters.Return = traderId;
        }
        
        /// <summary>Inserts a Trader record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="rowVersion">The version number of the row.</param>
        /// <param name="description">The value for the Description column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="externalId1">The value for the ExternalId1 column.</param>
        /// <param name="externalId2">The value for the ExternalId2 column.</param>
        /// <param name="externalId3">The value for the ExternalId3 column.</param>
        /// <param name="externalId4">The value for the ExternalId4 column.</param>
        /// <param name="externalId5">The value for the ExternalId5 column.</param>
        /// <param name="externalId6">The value for the ExternalId6 column.</param>
        /// <param name="externalId7">The value for the ExternalId7 column.</param>
        /// <param name="groupPermission">The value for the GroupPermission column.</param>
        /// <param name="hidden">The value for the Hidden column.</param>
        /// <param name="name">The value for the Name column.</param>
        /// <param name="owner">The value for the Owner column.</param>
        /// <param name="ownerPermission">The value for the OwnerPermission column.</param>
        /// <param name="readOnly">The value for the ReadOnly column.</param>
        /// <param name="worldPermission">The value for the WorldPermission column.</param>
        /// <param name="preferences">The value for the Preferences column.</param>
        /// <param name="systemFolderId">The value for the SystemFolderId column.</param>
        /// <param name="userName">The value for the UserName column.</param>
        /// <param name="accountIdDefault">The value for the AccountIdDefault column.</param>
        /// <param name="address1">The value for the Address1 column.</param>
        /// <param name="address2">The value for the Address2 column.</param>
        /// <param name="address3">The value for the Address3 column.</param>
        /// <param name="blotterIdDefault">The value for the BlotterIdDefault column.</param>
        /// <param name="commissionMaximum">The value for the CommissionMaximum column.</param>
        /// <param name="commissionMinimum">The value for the CommissionMinimum column.</param>
        /// <param name="commissionRate">The value for the CommissionRate column.</param>
        /// <param name="commissionRateTypeCode">The value for the CommissionRateTypeCode column.</param>
        /// <param name="emailAddress">The value for the EmailAddress column.</param>
        /// <param name="fixAccountId">The value for the FixAccountId column.</param>
        /// <param name="isAgencyMatch">The value for the IsAgencyMatch column.</param>
        /// <param name="isBrokerMatch">The value for the IsBrokerMatch column.</param>
        /// <param name="isCommissionChangeAllowed">The value for the IsCommissionChangeAllowed column.</param>
        /// <param name="isEditExecutionsAllowed">The value for the IsEditExecutionsAllowed column.</param>
        /// <param name="isHedgeMatch">The value for the IsHedgeMatch column.</param>
        /// <param name="isHeld">The value for the IsHeld column.</param>
        /// <param name="isInstitutionMatch">The value for the IsInstitutionMatch column.</param>
        /// <param name="lastDeletedOrder">The value for the LastDeletedOrder column.</param>
        /// <param name="lastFilledOrder">The value for the LastFilledOrder column.</param>
        /// <param name="lastFilledSourceOrder">The value for the LastFilledSourceOrder column.</param>
        /// <param name="lastTrade">The value for the LastTrade column.</param>
        /// <param name="lotSizeDefault">The value for the LotSizeDefault column.</param>
        /// <param name="marketSleep">The value for the MarketSleep column.</param>
        /// <param name="maximumVolatilityDefault">The value for the MaximumVolatilityDefault column.</param>
        /// <param name="newsFreeTimeDefault">The value for the NewsFreeTimeDefault column.</param>
        /// <param name="oatsAccountType">The value for the OatsAccountType column.</param>
        /// <param name="oatsOrigDeptId">The value for the OatsOrigDeptId column.</param>
        /// <param name="orderMaximumLimitDelta">The value for the OrderMaximumLimitDelta column.</param>
        /// <param name="orderMaximumMarketValue">The value for the OrderMaximumMarketValue column.</param>
        /// <param name="orderMaximumQuantity">The value for the OrderMaximumQuantity column.</param>
        /// <param name="orderWarningMarketValue">The value for the OrderWarningMarketValue column.</param>
        /// <param name="orderWarningQuantity">The value for the OrderWarningQuantity column.</param>
        /// <param name="phone">The value for the Phone column.</param>
        /// <param name="reviewWindow">The value for the ReviewWindow column.</param>
        /// <param name="scraperConfigurationString">The value for the ScraperConfigurationString column.</param>
        /// <param name="startTimeDefault">The value for the StartTimeDefault column.</param>
        /// <param name="stopTimeDefault">The value for the StopTimeDefault column.</param>
        /// <param name="submissionTypeCode">The value for the SubmissionTypeCode column.</param>
        /// <param name="tagId">The value for the TagId column.</param>
        /// <param name="typeCode">The value for the TypeCode column.</param>
        public static int Insert(
                    AdoTransaction adoTransaction, 
                    SqlTransaction sqlTransaction, 
                    ref long rowVersion, 
                    object description, 
                    object externalId0, 
                    object externalId1, 
                    object externalId2, 
                    object externalId3, 
                    object externalId4, 
                    object externalId5, 
                    object externalId6, 
                    object externalId7, 
                    object groupPermission, 
                    object hidden, 
                    string name, 
                    object owner, 
                    object ownerPermission, 
                    object readOnly, 
                    object worldPermission, 
                    object preferences, 
                    object systemFolderId, 
                    string userName, 
                    object accountIdDefault, 
                    object address1, 
                    object address2, 
                    object address3, 
                    object blotterIdDefault, 
                    object commissionMaximum, 
                    object commissionMinimum, 
                    object commissionRate, 
                    object commissionRateTypeCode, 
                    object emailAddress, 
                    object fixAccountId, 
                    object isAgencyMatch, 
                    object isBrokerMatch, 
                    object isCommissionChangeAllowed, 
                    object isEditExecutionsAllowed, 
                    object isHedgeMatch, 
                    object isHeld, 
                    object isInstitutionMatch, 
                    object lastDeletedOrder, 
                    object lastFilledOrder, 
                    object lastFilledSourceOrder, 
                    object lastTrade, 
                    object lotSizeDefault, 
                    object marketSleep, 
                    object maximumVolatilityDefault, 
                    object newsFreeTimeDefault, 
                    object oatsAccountType, 
                    object oatsOrigDeptId, 
                    object orderMaximumLimitDelta, 
                    object orderMaximumMarketValue, 
                    object orderMaximumQuantity, 
                    object orderWarningMarketValue, 
                    object orderWarningQuantity, 
                    object phone, 
                    object reviewWindow, 
                    object scraperConfigurationString, 
                    object startTimeDefault, 
                    object stopTimeDefault, 
                    object submissionTypeCode, 
                    object tagId, 
                    object typeCode)
        {
            // Accessor for the Trader Table.
            ServerMarketData.TraderDataTable traderTable = ServerMarketData.Trader;
            // Apply Defaults
            if ((accountIdDefault == null))
            {
                accountIdDefault = System.DBNull.Value;
            }
            if ((address1 == null))
            {
                address1 = System.DBNull.Value;
            }
            if ((address2 == null))
            {
                address2 = System.DBNull.Value;
            }
            if ((address3 == null))
            {
                address3 = System.DBNull.Value;
            }
            if ((blotterIdDefault == null))
            {
                blotterIdDefault = System.DBNull.Value;
            }
            if ((commissionMaximum == null))
            {
                commissionMaximum = System.DBNull.Value;
            }
            if ((commissionMinimum == null))
            {
                commissionMinimum = System.DBNull.Value;
            }
            if ((commissionRate == null))
            {
                commissionRate = System.DBNull.Value;
            }
            if ((commissionRateTypeCode == null))
            {
                commissionRateTypeCode = System.DBNull.Value;
            }
            if ((emailAddress == null))
            {
                emailAddress = System.DBNull.Value;
            }
            if ((fixAccountId == null))
            {
                fixAccountId = System.DBNull.Value;
            }
            if ((isAgencyMatch == null))
            {
                isAgencyMatch = false;
            }
            if ((isBrokerMatch == null))
            {
                isBrokerMatch = false;
            }
            if ((isCommissionChangeAllowed == null))
            {
                isCommissionChangeAllowed = false;
            }
            if ((isEditExecutionsAllowed == null))
            {
                isEditExecutionsAllowed = false;
            }
            if ((isHedgeMatch == null))
            {
                isHedgeMatch = false;
            }
            if ((isHeld == null))
            {
                isHeld = false;
            }
            if ((isInstitutionMatch == null))
            {
                isInstitutionMatch = true;
            }
            if ((lastDeletedOrder == null))
            {
                lastDeletedOrder = System.DBNull.Value;
            }
            if ((lastFilledOrder == null))
            {
                lastFilledOrder = System.DBNull.Value;
            }
            if ((lastFilledSourceOrder == null))
            {
                lastFilledSourceOrder = System.DBNull.Value;
            }
            if ((lastTrade == null))
            {
                lastTrade = System.DBNull.Value;
            }
            if ((lotSizeDefault == null))
            {
                lotSizeDefault = 100;
            }
            if ((marketSleep == null))
            {
                marketSleep = 900;
            }
            if ((maximumVolatilityDefault == null))
            {
                maximumVolatilityDefault = System.DBNull.Value;
            }
            if ((newsFreeTimeDefault == null))
            {
                newsFreeTimeDefault = System.DBNull.Value;
            }
            if ((oatsAccountType == null))
            {
                oatsAccountType = System.DBNull.Value;
            }
            if ((oatsOrigDeptId == null))
            {
                oatsOrigDeptId = System.DBNull.Value;
            }
            if ((orderMaximumLimitDelta == null))
            {
                orderMaximumLimitDelta = System.DBNull.Value;
            }
            if ((orderMaximumMarketValue == null))
            {
                orderMaximumMarketValue = System.DBNull.Value;
            }
            if ((orderMaximumQuantity == null))
            {
                orderMaximumQuantity = System.DBNull.Value;
            }
            if ((orderWarningMarketValue == null))
            {
                orderWarningMarketValue = System.DBNull.Value;
            }
            if ((orderWarningQuantity == null))
            {
                orderWarningQuantity = System.DBNull.Value;
            }
            if ((phone == null))
            {
                phone = System.DBNull.Value;
            }
            if ((reviewWindow == null))
            {
                reviewWindow = 900;
            }
            if ((scraperConfigurationString == null))
            {
                scraperConfigurationString = System.DBNull.Value;
            }
            if ((startTimeDefault == null))
            {
                startTimeDefault = System.DBNull.Value;
            }
            if ((stopTimeDefault == null))
            {
                stopTimeDefault = System.DBNull.Value;
            }
            if ((submissionTypeCode == null))
            {
                submissionTypeCode = 2;
            }
            if ((tagId == null))
            {
                tagId = System.DBNull.Value;
            }
            if ((typeCode == null))
            {
                typeCode = "Trader";
            }
            // Insert the base members using the base class.
            int traderId = User.Insert(adoTransaction, sqlTransaction, ref rowVersion, description, externalId0, externalId1, externalId2, externalId3, externalId4, externalId5, externalId6, externalId7, groupPermission, hidden, name, owner, ownerPermission, readOnly, worldPermission, preferences, systemFolderId, typeCode, userName);
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Insert the record into the ADO database.
            ServerMarketData.TraderRow traderRow = traderTable.NewTraderRow();
            traderRow[traderTable.RowVersionColumn] = rowVersion;
            traderRow[traderTable.AccountIdDefaultColumn] = accountIdDefault;
            traderRow[traderTable.Address1Column] = address1;
            traderRow[traderTable.Address2Column] = address2;
            traderRow[traderTable.Address3Column] = address3;
            traderRow[traderTable.BlotterIdDefaultColumn] = blotterIdDefault;
            traderRow[traderTable.CommissionMaximumColumn] = commissionMaximum;
            traderRow[traderTable.CommissionMinimumColumn] = commissionMinimum;
            traderRow[traderTable.CommissionRateColumn] = commissionRate;
            traderRow[traderTable.CommissionRateTypeCodeColumn] = commissionRateTypeCode;
            traderRow[traderTable.EmailAddressColumn] = emailAddress;
            traderRow[traderTable.FixAccountIdColumn] = fixAccountId;
            traderRow[traderTable.IsAgencyMatchColumn] = isAgencyMatch;
            traderRow[traderTable.IsBrokerMatchColumn] = isBrokerMatch;
            traderRow[traderTable.IsCommissionChangeAllowedColumn] = isCommissionChangeAllowed;
            traderRow[traderTable.IsEditExecutionsAllowedColumn] = isEditExecutionsAllowed;
            traderRow[traderTable.IsHedgeMatchColumn] = isHedgeMatch;
            traderRow[traderTable.IsHeldColumn] = isHeld;
            traderRow[traderTable.IsInstitutionMatchColumn] = isInstitutionMatch;
            traderRow[traderTable.LastDeletedOrderColumn] = lastDeletedOrder;
            traderRow[traderTable.LastFilledOrderColumn] = lastFilledOrder;
            traderRow[traderTable.LastFilledSourceOrderColumn] = lastFilledSourceOrder;
            traderRow[traderTable.LastTradeColumn] = lastTrade;
            traderRow[traderTable.LotSizeDefaultColumn] = lotSizeDefault;
            traderRow[traderTable.MarketSleepColumn] = marketSleep;
            traderRow[traderTable.MaximumVolatilityDefaultColumn] = maximumVolatilityDefault;
            traderRow[traderTable.NewsFreeTimeDefaultColumn] = newsFreeTimeDefault;
            traderRow[traderTable.OatsAccountTypeColumn] = oatsAccountType;
            traderRow[traderTable.OatsOrigDeptIdColumn] = oatsOrigDeptId;
            traderRow[traderTable.OrderMaximumLimitDeltaColumn] = orderMaximumLimitDelta;
            traderRow[traderTable.OrderMaximumMarketValueColumn] = orderMaximumMarketValue;
            traderRow[traderTable.OrderMaximumQuantityColumn] = orderMaximumQuantity;
            traderRow[traderTable.OrderWarningMarketValueColumn] = orderWarningMarketValue;
            traderRow[traderTable.OrderWarningQuantityColumn] = orderWarningQuantity;
            traderRow[traderTable.PhoneColumn] = phone;
            traderRow[traderTable.ReviewWindowColumn] = reviewWindow;
            traderRow[traderTable.ScraperConfigurationStringColumn] = scraperConfigurationString;
            traderRow[traderTable.StartTimeDefaultColumn] = startTimeDefault;
            traderRow[traderTable.StopTimeDefaultColumn] = stopTimeDefault;
            traderRow[traderTable.SubmissionTypeCodeColumn] = submissionTypeCode;
            traderRow[traderTable.TagIdColumn] = tagId;
            traderRow[traderTable.TraderIdColumn] = traderId;
            traderTable.AddTraderRow(traderRow);
            adoTransaction.DataRows.Add(traderRow);
            // Insert the record into the SQL database.
            SqlCommand sqlCommand = new SqlCommand(@"insert ""Trader"" (""rowVersion"",AccountIdDefault,Address1,Address2,Address3,BlotterIdDefault,CommissionMaximum,CommissionMinimum,CommissionRate,CommissionRateTypeCode,EmailAddress,FixAccountId,IsAgencyMatch,IsBrokerMatch,IsCommissionChangeAllowed,IsEditExecutionsAllowed,IsHedgeMatch,IsHeld,IsInstitutionMatch,LastDeletedOrder,LastFilledOrder,LastFilledSourceOrder,LastTrade,LotSizeDefault,MarketSleep,MaximumVolatilityDefault,NewsFreeTimeDefault,OatsAccountType,OatsOrigDeptId,OrderMaximumLimitDelta,OrderMaximumMarketValue,OrderMaximumQuantity,OrderWarningMarketValue,OrderWarningQuantity,Phone,ReviewWindow,ScraperConfigurationString,StartTimeDefault,StopTimeDefault,SubmissionTypeCode,TagId,TraderId) values (@rowVersion,@accountIdDefault,@address1,@address2,@address3,@blotterIdDefault,@commissionMaximum,@commissionMinimum,@commissionRate,@commissionRateTypeCode,@emailAddress,@fixAccountId,@isAgencyMatch,@isBrokerMatch,@isCommissionChangeAllowed,@isEditExecutionsAllowed,@isHedgeMatch,@isHeld,@isInstitutionMatch,@lastDeletedOrder,@lastFilledOrder,@lastFilledSourceOrder,@lastTrade,@lotSizeDefault,@marketSleep,@maximumVolatilityDefault,@newsFreeTimeDefault,@oatsAccountType,@oatsOrigDeptId,@orderMaximumLimitDelta,@orderMaximumMarketValue,@orderMaximumQuantity,@orderWarningMarketValue,@orderWarningQuantity,@phone,@reviewWindow,@scraperConfigurationString,@startTimeDefault,@stopTimeDefault,@submissionTypeCode,@tagId,@traderId)");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@accountIdDefault", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, accountIdDefault));
            sqlCommand.Parameters.Add(new SqlParameter("@address1", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, address1));
            sqlCommand.Parameters.Add(new SqlParameter("@address2", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, address2));
            sqlCommand.Parameters.Add(new SqlParameter("@address3", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, address3));
            sqlCommand.Parameters.Add(new SqlParameter("@blotterIdDefault", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, blotterIdDefault));
            sqlCommand.Parameters.Add(new SqlParameter("@commissionMaximum", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, commissionMaximum));
            sqlCommand.Parameters.Add(new SqlParameter("@commissionMinimum", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, commissionMinimum));
            sqlCommand.Parameters.Add(new SqlParameter("@commissionRate", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, commissionRate));
            sqlCommand.Parameters.Add(new SqlParameter("@commissionRateTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, commissionRateTypeCode));
            sqlCommand.Parameters.Add(new SqlParameter("@emailAddress", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, emailAddress));
            sqlCommand.Parameters.Add(new SqlParameter("@fixAccountId", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixAccountId));
            sqlCommand.Parameters.Add(new SqlParameter("@isAgencyMatch", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isAgencyMatch));
            sqlCommand.Parameters.Add(new SqlParameter("@isBrokerMatch", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isBrokerMatch));
            sqlCommand.Parameters.Add(new SqlParameter("@isCommissionChangeAllowed", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isCommissionChangeAllowed));
            sqlCommand.Parameters.Add(new SqlParameter("@isEditExecutionsAllowed", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isEditExecutionsAllowed));
            sqlCommand.Parameters.Add(new SqlParameter("@isHedgeMatch", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isHedgeMatch));
            sqlCommand.Parameters.Add(new SqlParameter("@isHeld", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isHeld));
            sqlCommand.Parameters.Add(new SqlParameter("@isInstitutionMatch", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isInstitutionMatch));
            sqlCommand.Parameters.Add(new SqlParameter("@lastDeletedOrder", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, lastDeletedOrder));
            sqlCommand.Parameters.Add(new SqlParameter("@lastFilledOrder", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, lastFilledOrder));
            sqlCommand.Parameters.Add(new SqlParameter("@lastFilledSourceOrder", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, lastFilledSourceOrder));
            sqlCommand.Parameters.Add(new SqlParameter("@lastTrade", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, lastTrade));
            sqlCommand.Parameters.Add(new SqlParameter("@lotSizeDefault", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, lotSizeDefault));
            sqlCommand.Parameters.Add(new SqlParameter("@marketSleep", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, marketSleep));
            sqlCommand.Parameters.Add(new SqlParameter("@maximumVolatilityDefault", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, maximumVolatilityDefault));
            sqlCommand.Parameters.Add(new SqlParameter("@newsFreeTimeDefault", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, newsFreeTimeDefault));
            sqlCommand.Parameters.Add(new SqlParameter("@oatsAccountType", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, oatsAccountType));
            sqlCommand.Parameters.Add(new SqlParameter("@oatsOrigDeptId", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, oatsOrigDeptId));
            sqlCommand.Parameters.Add(new SqlParameter("@orderMaximumLimitDelta", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, orderMaximumLimitDelta));
            sqlCommand.Parameters.Add(new SqlParameter("@orderMaximumMarketValue", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, orderMaximumMarketValue));
            sqlCommand.Parameters.Add(new SqlParameter("@orderMaximumQuantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, orderMaximumQuantity));
            sqlCommand.Parameters.Add(new SqlParameter("@orderWarningMarketValue", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, orderWarningMarketValue));
            sqlCommand.Parameters.Add(new SqlParameter("@orderWarningQuantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, orderWarningQuantity));
            sqlCommand.Parameters.Add(new SqlParameter("@phone", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, phone));
            sqlCommand.Parameters.Add(new SqlParameter("@reviewWindow", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, reviewWindow));
            sqlCommand.Parameters.Add(new SqlParameter("@scraperConfigurationString", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, scraperConfigurationString));
            sqlCommand.Parameters.Add(new SqlParameter("@startTimeDefault", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, startTimeDefault));
            sqlCommand.Parameters.Add(new SqlParameter("@stopTimeDefault", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, stopTimeDefault));
            sqlCommand.Parameters.Add(new SqlParameter("@submissionTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, submissionTypeCode));
            sqlCommand.Parameters.Add(new SqlParameter("@tagId", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, tagId));
            sqlCommand.Parameters.Add(new SqlParameter("@traderId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, traderId));
            sqlCommand.ExecuteNonQuery();
            // Return Statements
            return traderRow.TraderId;
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public new static void Update(AdoTransaction adoTransaction)
        {
            // Lock the tables at the base level of the object hierarchy.
            User.Update(adoTransaction);
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        internal new static void UpdateChildren(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Update' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.TraderLock);
            BrokerAccount.Update(adoTransaction);
            DestinationOrder.Update(adoTransaction);
            TraderVolumeSetting.Update(adoTransaction);
        }
        
        /// <summary>Inserts a Trader record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public new static void Update(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            object description = parameters["description"].Value;
            object externalId0 = parameters["externalId0"].Value;
            object externalId1 = parameters["externalId1"].Value;
            object externalId2 = parameters["externalId2"].Value;
            object externalId3 = parameters["externalId3"].Value;
            object externalId4 = parameters["externalId4"].Value;
            object externalId5 = parameters["externalId5"].Value;
            object externalId6 = parameters["externalId6"].Value;
            object externalId7 = parameters["externalId7"].Value;
            object groupPermission = parameters["groupPermission"].Value;
            object hidden = parameters["hidden"].Value;
            object name = parameters["name"].Value;
            object owner = parameters["owner"].Value;
            object ownerPermission = parameters["ownerPermission"].Value;
            object readOnly = parameters["readOnly"].Value;
            object worldPermission = parameters["worldPermission"].Value;
            object preferences = parameters["preferences"].Value;
            object systemFolderId = parameters["systemFolderId"].Value;
            object userName = parameters["userName"].Value;
            object accountIdDefault = parameters["accountIdDefault"].Value;
            object address1 = parameters["address1"].Value;
            object address2 = parameters["address2"].Value;
            object address3 = parameters["address3"].Value;
            object blotterIdDefault = parameters["blotterIdDefault"].Value;
            object commissionMaximum = parameters["commissionMaximum"].Value;
            object commissionMinimum = parameters["commissionMinimum"].Value;
            object commissionRate = parameters["commissionRate"].Value;
            object commissionRateTypeCode = parameters["commissionRateTypeCode"].Value;
            object emailAddress = parameters["emailAddress"].Value;
            object fixAccountId = parameters["fixAccountId"].Value;
            object isAgencyMatch = parameters["isAgencyMatch"].Value;
            object isBrokerMatch = parameters["isBrokerMatch"].Value;
            object isCommissionChangeAllowed = parameters["isCommissionChangeAllowed"].Value;
            object isEditExecutionsAllowed = parameters["isEditExecutionsAllowed"].Value;
            object isHedgeMatch = parameters["isHedgeMatch"].Value;
            object isHeld = parameters["isHeld"].Value;
            object isInstitutionMatch = parameters["isInstitutionMatch"].Value;
            object lastDeletedOrder = parameters["lastDeletedOrder"].Value;
            object lastFilledOrder = parameters["lastFilledOrder"].Value;
            object lastFilledSourceOrder = parameters["lastFilledSourceOrder"].Value;
            object lastTrade = parameters["lastTrade"].Value;
            object lotSizeDefault = parameters["lotSizeDefault"].Value;
            object marketSleep = parameters["marketSleep"].Value;
            object maximumVolatilityDefault = parameters["maximumVolatilityDefault"].Value;
            object newsFreeTimeDefault = parameters["newsFreeTimeDefault"].Value;
            object oatsAccountType = parameters["oatsAccountType"].Value;
            object oatsOrigDeptId = parameters["oatsOrigDeptId"].Value;
            object orderMaximumLimitDelta = parameters["orderMaximumLimitDelta"].Value;
            object orderMaximumMarketValue = parameters["orderMaximumMarketValue"].Value;
            object orderMaximumQuantity = parameters["orderMaximumQuantity"].Value;
            object orderWarningMarketValue = parameters["orderWarningMarketValue"].Value;
            object orderWarningQuantity = parameters["orderWarningQuantity"].Value;
            object phone = parameters["phone"].Value;
            object reviewWindow = parameters["reviewWindow"].Value;
            object scraperConfigurationString = parameters["scraperConfigurationString"].Value;
            object startTimeDefault = parameters["startTimeDefault"].Value;
            object stopTimeDefault = parameters["stopTimeDefault"].Value;
            object submissionTypeCode = parameters["submissionTypeCode"].Value;
            object tagId = parameters["tagId"].Value;
            int traderId = parameters["traderId"];
            object typeCode = parameters["typeCode"].Value;
            // Call the internal method to complete the operation.
            Trader.Update(adoTransaction, sqlTransaction, ref rowVersion, description, externalId0, externalId1, externalId2, externalId3, externalId4, externalId5, externalId6, externalId7, groupPermission, hidden, name, owner, ownerPermission, readOnly, worldPermission, preferences, systemFolderId, userName, accountIdDefault, address1, address2, address3, blotterIdDefault, commissionMaximum, commissionMinimum, commissionRate, commissionRateTypeCode, emailAddress, fixAccountId, isAgencyMatch, isBrokerMatch, isCommissionChangeAllowed, isEditExecutionsAllowed, isHedgeMatch, isHeld, isInstitutionMatch, lastDeletedOrder, lastFilledOrder, lastFilledSourceOrder, lastTrade, lotSizeDefault, marketSleep, maximumVolatilityDefault, newsFreeTimeDefault, oatsAccountType, oatsOrigDeptId, orderMaximumLimitDelta, orderMaximumMarketValue, orderMaximumQuantity, orderWarningMarketValue, orderWarningQuantity, phone, reviewWindow, scraperConfigurationString, startTimeDefault, stopTimeDefault, submissionTypeCode, tagId, traderId, typeCode);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Updates a Trader record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="rowVersion">The version number of the row</param>
        /// <param name="description">The value for the Description column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="externalId1">The value for the ExternalId1 column.</param>
        /// <param name="externalId2">The value for the ExternalId2 column.</param>
        /// <param name="externalId3">The value for the ExternalId3 column.</param>
        /// <param name="externalId4">The value for the ExternalId4 column.</param>
        /// <param name="externalId5">The value for the ExternalId5 column.</param>
        /// <param name="externalId6">The value for the ExternalId6 column.</param>
        /// <param name="externalId7">The value for the ExternalId7 column.</param>
        /// <param name="groupPermission">The value for the GroupPermission column.</param>
        /// <param name="hidden">The value for the Hidden column.</param>
        /// <param name="name">The value for the Name column.</param>
        /// <param name="owner">The value for the Owner column.</param>
        /// <param name="ownerPermission">The value for the OwnerPermission column.</param>
        /// <param name="readOnly">The value for the ReadOnly column.</param>
        /// <param name="worldPermission">The value for the WorldPermission column.</param>
        /// <param name="preferences">The value for the Preferences column.</param>
        /// <param name="systemFolderId">The value for the SystemFolderId column.</param>
        /// <param name="userName">The value for the UserName column.</param>
        /// <param name="accountIdDefault">The value for the AccountIdDefault column.</param>
        /// <param name="address1">The value for the Address1 column.</param>
        /// <param name="address2">The value for the Address2 column.</param>
        /// <param name="address3">The value for the Address3 column.</param>
        /// <param name="blotterIdDefault">The value for the BlotterIdDefault column.</param>
        /// <param name="commissionMaximum">The value for the CommissionMaximum column.</param>
        /// <param name="commissionMinimum">The value for the CommissionMinimum column.</param>
        /// <param name="commissionRate">The value for the CommissionRate column.</param>
        /// <param name="commissionRateTypeCode">The value for the CommissionRateTypeCode column.</param>
        /// <param name="emailAddress">The value for the EmailAddress column.</param>
        /// <param name="fixAccountId">The value for the FixAccountId column.</param>
        /// <param name="isAgencyMatch">The value for the IsAgencyMatch column.</param>
        /// <param name="isBrokerMatch">The value for the IsBrokerMatch column.</param>
        /// <param name="isCommissionChangeAllowed">The value for the IsCommissionChangeAllowed column.</param>
        /// <param name="isEditExecutionsAllowed">The value for the IsEditExecutionsAllowed column.</param>
        /// <param name="isHedgeMatch">The value for the IsHedgeMatch column.</param>
        /// <param name="isHeld">The value for the IsHeld column.</param>
        /// <param name="isInstitutionMatch">The value for the IsInstitutionMatch column.</param>
        /// <param name="lastDeletedOrder">The value for the LastDeletedOrder column.</param>
        /// <param name="lastFilledOrder">The value for the LastFilledOrder column.</param>
        /// <param name="lastFilledSourceOrder">The value for the LastFilledSourceOrder column.</param>
        /// <param name="lastTrade">The value for the LastTrade column.</param>
        /// <param name="lotSizeDefault">The value for the LotSizeDefault column.</param>
        /// <param name="marketSleep">The value for the MarketSleep column.</param>
        /// <param name="maximumVolatilityDefault">The value for the MaximumVolatilityDefault column.</param>
        /// <param name="newsFreeTimeDefault">The value for the NewsFreeTimeDefault column.</param>
        /// <param name="oatsAccountType">The value for the OatsAccountType column.</param>
        /// <param name="oatsOrigDeptId">The value for the OatsOrigDeptId column.</param>
        /// <param name="orderMaximumLimitDelta">The value for the OrderMaximumLimitDelta column.</param>
        /// <param name="orderMaximumMarketValue">The value for the OrderMaximumMarketValue column.</param>
        /// <param name="orderMaximumQuantity">The value for the OrderMaximumQuantity column.</param>
        /// <param name="orderWarningMarketValue">The value for the OrderWarningMarketValue column.</param>
        /// <param name="orderWarningQuantity">The value for the OrderWarningQuantity column.</param>
        /// <param name="phone">The value for the Phone column.</param>
        /// <param name="reviewWindow">The value for the ReviewWindow column.</param>
        /// <param name="scraperConfigurationString">The value for the ScraperConfigurationString column.</param>
        /// <param name="startTimeDefault">The value for the StartTimeDefault column.</param>
        /// <param name="stopTimeDefault">The value for the StopTimeDefault column.</param>
        /// <param name="submissionTypeCode">The value for the SubmissionTypeCode column.</param>
        /// <param name="tagId">The value for the TagId column.</param>
        /// <param name="traderId">The value for the TraderId column.</param>
        /// <param name="typeCode">The value for the TypeCode column.</param>
        public static void Update(
                    AdoTransaction adoTransaction, 
                    SqlTransaction sqlTransaction, 
                    ref long rowVersion, 
                    object description, 
                    object externalId0, 
                    object externalId1, 
                    object externalId2, 
                    object externalId3, 
                    object externalId4, 
                    object externalId5, 
                    object externalId6, 
                    object externalId7, 
                    object groupPermission, 
                    object hidden, 
                    object name, 
                    object owner, 
                    object ownerPermission, 
                    object readOnly, 
                    object worldPermission, 
                    object preferences, 
                    object systemFolderId, 
                    object userName, 
                    object accountIdDefault, 
                    object address1, 
                    object address2, 
                    object address3, 
                    object blotterIdDefault, 
                    object commissionMaximum, 
                    object commissionMinimum, 
                    object commissionRate, 
                    object commissionRateTypeCode, 
                    object emailAddress, 
                    object fixAccountId, 
                    object isAgencyMatch, 
                    object isBrokerMatch, 
                    object isCommissionChangeAllowed, 
                    object isEditExecutionsAllowed, 
                    object isHedgeMatch, 
                    object isHeld, 
                    object isInstitutionMatch, 
                    object lastDeletedOrder, 
                    object lastFilledOrder, 
                    object lastFilledSourceOrder, 
                    object lastTrade, 
                    object lotSizeDefault, 
                    object marketSleep, 
                    object maximumVolatilityDefault, 
                    object newsFreeTimeDefault, 
                    object oatsAccountType, 
                    object oatsOrigDeptId, 
                    object orderMaximumLimitDelta, 
                    object orderMaximumMarketValue, 
                    object orderMaximumQuantity, 
                    object orderWarningMarketValue, 
                    object orderWarningQuantity, 
                    object phone, 
                    object reviewWindow, 
                    object scraperConfigurationString, 
                    object startTimeDefault, 
                    object stopTimeDefault, 
                    object submissionTypeCode, 
                    object tagId, 
                    int traderId, 
                    object typeCode)
        {
            // Accessor for the Trader Table.
            ServerMarketData.TraderDataTable traderTable = ServerMarketData.Trader;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.TraderRow traderRow = traderTable.FindByTraderId(traderId);
            if ((traderRow == null))
            {
                throw new Exception(string.Format("The Trader table does not have an element identified by {0}", traderId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((traderRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Apply Defaults
            if ((accountIdDefault == null))
            {
                accountIdDefault = traderRow[traderTable.AccountIdDefaultColumn];
            }
            if ((address1 == null))
            {
                address1 = traderRow[traderTable.Address1Column];
            }
            if ((address2 == null))
            {
                address2 = traderRow[traderTable.Address2Column];
            }
            if ((address3 == null))
            {
                address3 = traderRow[traderTable.Address3Column];
            }
            if ((blotterIdDefault == null))
            {
                blotterIdDefault = traderRow[traderTable.BlotterIdDefaultColumn];
            }
            if ((commissionMaximum == null))
            {
                commissionMaximum = traderRow[traderTable.CommissionMaximumColumn];
            }
            if ((commissionMinimum == null))
            {
                commissionMinimum = traderRow[traderTable.CommissionMinimumColumn];
            }
            if ((commissionRate == null))
            {
                commissionRate = traderRow[traderTable.CommissionRateColumn];
            }
            if ((commissionRateTypeCode == null))
            {
                commissionRateTypeCode = traderRow[traderTable.CommissionRateTypeCodeColumn];
            }
            if ((emailAddress == null))
            {
                emailAddress = traderRow[traderTable.EmailAddressColumn];
            }
            if ((fixAccountId == null))
            {
                fixAccountId = traderRow[traderTable.FixAccountIdColumn];
            }
            if ((isAgencyMatch == null))
            {
                isAgencyMatch = traderRow[traderTable.IsAgencyMatchColumn];
            }
            if ((isBrokerMatch == null))
            {
                isBrokerMatch = traderRow[traderTable.IsBrokerMatchColumn];
            }
            if ((isCommissionChangeAllowed == null))
            {
                isCommissionChangeAllowed = traderRow[traderTable.IsCommissionChangeAllowedColumn];
            }
            if ((isEditExecutionsAllowed == null))
            {
                isEditExecutionsAllowed = traderRow[traderTable.IsEditExecutionsAllowedColumn];
            }
            if ((isHedgeMatch == null))
            {
                isHedgeMatch = traderRow[traderTable.IsHedgeMatchColumn];
            }
            if ((isHeld == null))
            {
                isHeld = traderRow[traderTable.IsHeldColumn];
            }
            if ((isInstitutionMatch == null))
            {
                isInstitutionMatch = traderRow[traderTable.IsInstitutionMatchColumn];
            }
            if ((lastDeletedOrder == null))
            {
                lastDeletedOrder = traderRow[traderTable.LastDeletedOrderColumn];
            }
            if ((lastFilledOrder == null))
            {
                lastFilledOrder = traderRow[traderTable.LastFilledOrderColumn];
            }
            if ((lastFilledSourceOrder == null))
            {
                lastFilledSourceOrder = traderRow[traderTable.LastFilledSourceOrderColumn];
            }
            if ((lastTrade == null))
            {
                lastTrade = traderRow[traderTable.LastTradeColumn];
            }
            if ((lotSizeDefault == null))
            {
                lotSizeDefault = traderRow[traderTable.LotSizeDefaultColumn];
            }
            if ((marketSleep == null))
            {
                marketSleep = traderRow[traderTable.MarketSleepColumn];
            }
            if ((maximumVolatilityDefault == null))
            {
                maximumVolatilityDefault = traderRow[traderTable.MaximumVolatilityDefaultColumn];
            }
            if ((newsFreeTimeDefault == null))
            {
                newsFreeTimeDefault = traderRow[traderTable.NewsFreeTimeDefaultColumn];
            }
            if ((oatsAccountType == null))
            {
                oatsAccountType = traderRow[traderTable.OatsAccountTypeColumn];
            }
            if ((oatsOrigDeptId == null))
            {
                oatsOrigDeptId = traderRow[traderTable.OatsOrigDeptIdColumn];
            }
            if ((orderMaximumLimitDelta == null))
            {
                orderMaximumLimitDelta = traderRow[traderTable.OrderMaximumLimitDeltaColumn];
            }
            if ((orderMaximumMarketValue == null))
            {
                orderMaximumMarketValue = traderRow[traderTable.OrderMaximumMarketValueColumn];
            }
            if ((orderMaximumQuantity == null))
            {
                orderMaximumQuantity = traderRow[traderTable.OrderMaximumQuantityColumn];
            }
            if ((orderWarningMarketValue == null))
            {
                orderWarningMarketValue = traderRow[traderTable.OrderWarningMarketValueColumn];
            }
            if ((orderWarningQuantity == null))
            {
                orderWarningQuantity = traderRow[traderTable.OrderWarningQuantityColumn];
            }
            if ((phone == null))
            {
                phone = traderRow[traderTable.PhoneColumn];
            }
            if ((reviewWindow == null))
            {
                reviewWindow = traderRow[traderTable.ReviewWindowColumn];
            }
            if ((scraperConfigurationString == null))
            {
                scraperConfigurationString = traderRow[traderTable.ScraperConfigurationStringColumn];
            }
            if ((startTimeDefault == null))
            {
                startTimeDefault = traderRow[traderTable.StartTimeDefaultColumn];
            }
            if ((stopTimeDefault == null))
            {
                stopTimeDefault = traderRow[traderTable.StopTimeDefaultColumn];
            }
            if ((submissionTypeCode == null))
            {
                submissionTypeCode = traderRow[traderTable.SubmissionTypeCodeColumn];
            }
            if ((tagId == null))
            {
                tagId = traderRow[traderTable.TagIdColumn];
            }
            // Insert the base members using the base class.  Note that optimistic concurrency is only used
            // by the top level type in the hierarchy, it is bypassed after you pass the first test.
            long baseRowVersion = traderRow.UserRow.RowVersion;
            User.Update(adoTransaction, sqlTransaction, ref baseRowVersion, description, externalId0, externalId1, externalId2, externalId3, externalId4, externalId5, externalId6, externalId7, groupPermission, hidden, name, owner, ownerPermission, readOnly, worldPermission, preferences, systemFolderId, typeCode, traderId, userName);
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Update the record in the ADO database.
            traderRow[traderTable.RowVersionColumn] = rowVersion;
            traderRow[traderTable.AccountIdDefaultColumn] = accountIdDefault;
            traderRow[traderTable.Address1Column] = address1;
            traderRow[traderTable.Address2Column] = address2;
            traderRow[traderTable.Address3Column] = address3;
            traderRow[traderTable.BlotterIdDefaultColumn] = blotterIdDefault;
            traderRow[traderTable.CommissionMaximumColumn] = commissionMaximum;
            traderRow[traderTable.CommissionMinimumColumn] = commissionMinimum;
            traderRow[traderTable.CommissionRateColumn] = commissionRate;
            traderRow[traderTable.CommissionRateTypeCodeColumn] = commissionRateTypeCode;
            traderRow[traderTable.EmailAddressColumn] = emailAddress;
            traderRow[traderTable.FixAccountIdColumn] = fixAccountId;
            traderRow[traderTable.IsAgencyMatchColumn] = isAgencyMatch;
            traderRow[traderTable.IsBrokerMatchColumn] = isBrokerMatch;
            traderRow[traderTable.IsCommissionChangeAllowedColumn] = isCommissionChangeAllowed;
            traderRow[traderTable.IsEditExecutionsAllowedColumn] = isEditExecutionsAllowed;
            traderRow[traderTable.IsHedgeMatchColumn] = isHedgeMatch;
            traderRow[traderTable.IsHeldColumn] = isHeld;
            traderRow[traderTable.IsInstitutionMatchColumn] = isInstitutionMatch;
            traderRow[traderTable.LastDeletedOrderColumn] = lastDeletedOrder;
            traderRow[traderTable.LastFilledOrderColumn] = lastFilledOrder;
            traderRow[traderTable.LastFilledSourceOrderColumn] = lastFilledSourceOrder;
            traderRow[traderTable.LastTradeColumn] = lastTrade;
            traderRow[traderTable.LotSizeDefaultColumn] = lotSizeDefault;
            traderRow[traderTable.MarketSleepColumn] = marketSleep;
            traderRow[traderTable.MaximumVolatilityDefaultColumn] = maximumVolatilityDefault;
            traderRow[traderTable.NewsFreeTimeDefaultColumn] = newsFreeTimeDefault;
            traderRow[traderTable.OatsAccountTypeColumn] = oatsAccountType;
            traderRow[traderTable.OatsOrigDeptIdColumn] = oatsOrigDeptId;
            traderRow[traderTable.OrderMaximumLimitDeltaColumn] = orderMaximumLimitDelta;
            traderRow[traderTable.OrderMaximumMarketValueColumn] = orderMaximumMarketValue;
            traderRow[traderTable.OrderMaximumQuantityColumn] = orderMaximumQuantity;
            traderRow[traderTable.OrderWarningMarketValueColumn] = orderWarningMarketValue;
            traderRow[traderTable.OrderWarningQuantityColumn] = orderWarningQuantity;
            traderRow[traderTable.PhoneColumn] = phone;
            traderRow[traderTable.ReviewWindowColumn] = reviewWindow;
            traderRow[traderTable.ScraperConfigurationStringColumn] = scraperConfigurationString;
            traderRow[traderTable.StartTimeDefaultColumn] = startTimeDefault;
            traderRow[traderTable.StopTimeDefaultColumn] = stopTimeDefault;
            traderRow[traderTable.SubmissionTypeCodeColumn] = submissionTypeCode;
            traderRow[traderTable.TagIdColumn] = tagId;
            adoTransaction.DataRows.Add(traderRow);
            // Update the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Trader\" set \"RowVersion\"=@rowVersion,\"AccountIdDefault\"=@accountIdDefault" +
                    ",\"Address1\"=@address1,\"Address2\"=@address2,\"Address3\"=@address3,\"BlotterIdDefaul" +
                    "t\"=@blotterIdDefault,\"CommissionMaximum\"=@commissionMaximum,\"CommissionMinimum\"=" +
                    "@commissionMinimum,\"CommissionRate\"=@commissionRate,\"CommissionRateTypeCode\"=@co" +
                    "mmissionRateTypeCode,\"EmailAddress\"=@emailAddress,\"FixAccountId\"=@fixAccountId,\"" +
                    "IsAgencyMatch\"=@isAgencyMatch,\"IsBrokerMatch\"=@isBrokerMatch,\"IsCommissionChange" +
                    "Allowed\"=@isCommissionChangeAllowed,\"IsEditExecutionsAllowed\"=@isEditExecutionsA" +
                    "llowed,\"IsHedgeMatch\"=@isHedgeMatch,\"IsHeld\"=@isHeld,\"IsInstitutionMatch\"=@isIns" +
                    "titutionMatch,\"LastDeletedOrder\"=@lastDeletedOrder,\"LastFilledOrder\"=@lastFilled" +
                    "Order,\"LastFilledSourceOrder\"=@lastFilledSourceOrder,\"LastTrade\"=@lastTrade,\"Lot" +
                    "SizeDefault\"=@lotSizeDefault,\"MarketSleep\"=@marketSleep,\"MaximumVolatilityDefaul" +
                    "t\"=@maximumVolatilityDefault,\"NewsFreeTimeDefault\"=@newsFreeTimeDefault,\"OatsAcc" +
                    "ountType\"=@oatsAccountType,\"OatsOrigDeptId\"=@oatsOrigDeptId,\"OrderMaximumLimitDe" +
                    "lta\"=@orderMaximumLimitDelta,\"OrderMaximumMarketValue\"=@orderMaximumMarketValue," +
                    "\"OrderMaximumQuantity\"=@orderMaximumQuantity,\"OrderWarningMarketValue\"=@orderWar" +
                    "ningMarketValue,\"OrderWarningQuantity\"=@orderWarningQuantity,\"Phone\"=@phone,\"Rev" +
                    "iewWindow\"=@reviewWindow,\"ScraperConfigurationString\"=@scraperConfigurationStrin" +
                    "g,\"StartTimeDefault\"=@startTimeDefault,\"StopTimeDefault\"=@stopTimeDefault,\"Submi" +
                    "ssionTypeCode\"=@submissionTypeCode,\"TagId\"=@tagId where \"TraderId\"=@traderId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@accountIdDefault", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, accountIdDefault));
            sqlCommand.Parameters.Add(new SqlParameter("@address1", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, address1));
            sqlCommand.Parameters.Add(new SqlParameter("@address2", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, address2));
            sqlCommand.Parameters.Add(new SqlParameter("@address3", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, address3));
            sqlCommand.Parameters.Add(new SqlParameter("@blotterIdDefault", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, blotterIdDefault));
            sqlCommand.Parameters.Add(new SqlParameter("@commissionMaximum", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, commissionMaximum));
            sqlCommand.Parameters.Add(new SqlParameter("@commissionMinimum", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, commissionMinimum));
            sqlCommand.Parameters.Add(new SqlParameter("@commissionRate", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, commissionRate));
            sqlCommand.Parameters.Add(new SqlParameter("@commissionRateTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, commissionRateTypeCode));
            sqlCommand.Parameters.Add(new SqlParameter("@emailAddress", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, emailAddress));
            sqlCommand.Parameters.Add(new SqlParameter("@fixAccountId", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, fixAccountId));
            sqlCommand.Parameters.Add(new SqlParameter("@isAgencyMatch", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isAgencyMatch));
            sqlCommand.Parameters.Add(new SqlParameter("@isBrokerMatch", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isBrokerMatch));
            sqlCommand.Parameters.Add(new SqlParameter("@isCommissionChangeAllowed", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isCommissionChangeAllowed));
            sqlCommand.Parameters.Add(new SqlParameter("@isEditExecutionsAllowed", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isEditExecutionsAllowed));
            sqlCommand.Parameters.Add(new SqlParameter("@isHedgeMatch", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isHedgeMatch));
            sqlCommand.Parameters.Add(new SqlParameter("@isHeld", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isHeld));
            sqlCommand.Parameters.Add(new SqlParameter("@isInstitutionMatch", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isInstitutionMatch));
            sqlCommand.Parameters.Add(new SqlParameter("@lastDeletedOrder", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, lastDeletedOrder));
            sqlCommand.Parameters.Add(new SqlParameter("@lastFilledOrder", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, lastFilledOrder));
            sqlCommand.Parameters.Add(new SqlParameter("@lastFilledSourceOrder", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, lastFilledSourceOrder));
            sqlCommand.Parameters.Add(new SqlParameter("@lastTrade", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, lastTrade));
            sqlCommand.Parameters.Add(new SqlParameter("@lotSizeDefault", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, lotSizeDefault));
            sqlCommand.Parameters.Add(new SqlParameter("@marketSleep", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, marketSleep));
            sqlCommand.Parameters.Add(new SqlParameter("@maximumVolatilityDefault", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, maximumVolatilityDefault));
            sqlCommand.Parameters.Add(new SqlParameter("@newsFreeTimeDefault", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, newsFreeTimeDefault));
            sqlCommand.Parameters.Add(new SqlParameter("@oatsAccountType", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, oatsAccountType));
            sqlCommand.Parameters.Add(new SqlParameter("@oatsOrigDeptId", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, oatsOrigDeptId));
            sqlCommand.Parameters.Add(new SqlParameter("@orderMaximumLimitDelta", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, orderMaximumLimitDelta));
            sqlCommand.Parameters.Add(new SqlParameter("@orderMaximumMarketValue", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, orderMaximumMarketValue));
            sqlCommand.Parameters.Add(new SqlParameter("@orderMaximumQuantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, orderMaximumQuantity));
            sqlCommand.Parameters.Add(new SqlParameter("@orderWarningMarketValue", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, orderWarningMarketValue));
            sqlCommand.Parameters.Add(new SqlParameter("@orderWarningQuantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, orderWarningQuantity));
            sqlCommand.Parameters.Add(new SqlParameter("@phone", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, phone));
            sqlCommand.Parameters.Add(new SqlParameter("@reviewWindow", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, reviewWindow));
            sqlCommand.Parameters.Add(new SqlParameter("@scraperConfigurationString", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, scraperConfigurationString));
            sqlCommand.Parameters.Add(new SqlParameter("@startTimeDefault", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, startTimeDefault));
            sqlCommand.Parameters.Add(new SqlParameter("@stopTimeDefault", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, stopTimeDefault));
            sqlCommand.Parameters.Add(new SqlParameter("@submissionTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, submissionTypeCode));
            sqlCommand.Parameters.Add(new SqlParameter("@tagId", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, tagId));
            sqlCommand.Parameters.Add(new SqlParameter("@traderId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, traderId));
            // Update the record in the SQL database.
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public new static void Delete(AdoTransaction adoTransaction)
        {
            // Lock the tables at the base level of the object hierarchy.
            User.Delete(adoTransaction);
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        internal new static void DeleteChildren(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Delete' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.TraderLock);
            BrokerAccount.Delete(adoTransaction);
            DestinationOrder.Delete(adoTransaction);
            TraderVolumeSetting.Delete(adoTransaction);
        }
        
        /// <summary>Inserts a Trader record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public new static void Delete(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int traderId = parameters["traderId"];
            // Call the internal method to complete the operation.
            Trader.Delete(adoTransaction, sqlTransaction, rowVersion, traderId);
        }
        
        /// <summary>Deletes a Trader record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="rowVersion">The version number of this row.</param>
        /// <param name="traderId">The value for the TraderId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public new static void Delete(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int traderId)
        {
            // Accessor for the Trader Table.
            ServerMarketData.TraderDataTable traderTable = ServerMarketData.Trader;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.TraderRow traderRow = traderTable.FindByTraderId(traderId);
            if ((traderRow == null))
            {
                throw new Exception(string.Format("The Trader table does not have an element identified by {0}", traderId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((traderRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Delete the base class record.  Note that optimistic concurrency is only used
            // by the top level type in the hierarchy, it is bypassed after you pass the first test.
            long baseRowVersion = traderRow.UserRow.RowVersion;
            User.Delete(adoTransaction, sqlTransaction, baseRowVersion, traderId);
        }
        
        /// <summary>DeleteChildrens a Trader record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="rowVersion">the version number of this row.</param>
        /// <param name="traderId">The value for the TraderId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        internal new static void DeleteChildren(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int traderId)
        {
            // Accessor for the Trader Table.
            ServerMarketData.TraderDataTable traderTable = ServerMarketData.Trader;
            // This record can be used to iterate through all the children.
            ServerMarketData.TraderRow traderRow = traderTable.FindByTraderId(traderId);
            // Delete the child records.
            for (int index = 0; (index < traderRow.GetBrokerAccountRows().Length); index = (index + 1))
            {
                ServerMarketData.BrokerAccountRow childBrokerAccountRow = traderRow.GetBrokerAccountRows()[index];
                BrokerAccount.Delete(adoTransaction, sqlTransaction, childBrokerAccountRow.RowVersion, childBrokerAccountRow.BrokerAccountId);
            }
            for (int index = 0; (index < traderRow.GetDestinationOrderRows().Length); index = (index + 1))
            {
                ServerMarketData.DestinationOrderRow childDestinationOrderRow = traderRow.GetDestinationOrderRows()[index];
                DestinationOrder.Delete(adoTransaction, sqlTransaction, childDestinationOrderRow.RowVersion, childDestinationOrderRow.DestinationOrderId);
            }
            for (int index = 0; (index < traderRow.GetTraderVolumeSettingRows().Length); index = (index + 1))
            {
                ServerMarketData.TraderVolumeSettingRow childTraderVolumeSettingRow = traderRow.GetTraderVolumeSettingRows()[index];
                TraderVolumeSetting.Delete(adoTransaction, sqlTransaction, childTraderVolumeSettingRow.RowVersion, childTraderVolumeSettingRow.TraderVolumeSettingId);
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Delete the record in the ADO database.
            traderRow[traderTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(traderRow);
            traderRow.Delete();
            // Delete the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Trader\" set \"IsDeleted\" = 1 where \"TraderId\"=@traderId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@traderId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, traderId));
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public new static void Archive(AdoTransaction adoTransaction)
        {
            // Lock the tables at the base level of the object hierarchy.
            User.Archive(adoTransaction);
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        internal new static void ArchiveChildren(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Archive' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.TraderLock);
            BrokerAccount.Archive(adoTransaction);
            DestinationOrder.Archive(adoTransaction);
            TraderVolumeSetting.Archive(adoTransaction);
        }
        
        /// <summary>Inserts a Trader record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public new static void Archive(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int traderId = parameters["traderId"];
            // Call the internal method to complete the operation.
            Trader.Archive(adoTransaction, sqlTransaction, rowVersion, traderId);
        }
        
        /// <summary>Archives a Trader record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="rowVersion">The version number of this row.</param>
        /// <param name="traderId">The value for the TraderId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public new static void Archive(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int traderId)
        {
            // Accessor for the Trader Table.
            ServerMarketData.TraderDataTable traderTable = ServerMarketData.Trader;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.TraderRow traderRow = traderTable.FindByTraderId(traderId);
            if ((traderRow == null))
            {
                throw new Exception(string.Format("The Trader table does not have an element identified by {0}", traderId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((traderRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Delete the base class record.  Note that optimistic concurrency is only used
            // by the top level type in the hierarchy, it is bypassed after you pass the first test.
            long baseRowVersion = traderRow.UserRow.RowVersion;
            User.Archive(adoTransaction, sqlTransaction, baseRowVersion, traderId);
        }
        
        /// <summary>ArchiveChildrens a Trader record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="rowVersion">the version number of this row.</param>
        /// <param name="traderId">The value for the TraderId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        internal new static void ArchiveChildren(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int traderId)
        {
            // Accessor for the Trader Table.
            ServerMarketData.TraderDataTable traderTable = ServerMarketData.Trader;
            // This record can be used to iterate through all the children.
            ServerMarketData.TraderRow traderRow = traderTable.FindByTraderId(traderId);
            // Archive the child records.
            for (int index = 0; (index < traderRow.GetBrokerAccountRows().Length); index = (index + 1))
            {
                ServerMarketData.BrokerAccountRow childBrokerAccountRow = traderRow.GetBrokerAccountRows()[index];
                BrokerAccount.Archive(adoTransaction, sqlTransaction, childBrokerAccountRow.RowVersion, childBrokerAccountRow.BrokerAccountId);
            }
            for (int index = 0; (index < traderRow.GetDestinationOrderRows().Length); index = (index + 1))
            {
                ServerMarketData.DestinationOrderRow childDestinationOrderRow = traderRow.GetDestinationOrderRows()[index];
                DestinationOrder.Archive(adoTransaction, sqlTransaction, childDestinationOrderRow.RowVersion, childDestinationOrderRow.DestinationOrderId);
            }
            for (int index = 0; (index < traderRow.GetTraderVolumeSettingRows().Length); index = (index + 1))
            {
                ServerMarketData.TraderVolumeSettingRow childTraderVolumeSettingRow = traderRow.GetTraderVolumeSettingRows()[index];
                TraderVolumeSetting.Archive(adoTransaction, sqlTransaction, childTraderVolumeSettingRow.RowVersion, childTraderVolumeSettingRow.TraderVolumeSettingId);
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Delete the record in the ADO database.
            traderRow[traderTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(traderRow);
            traderRow.Delete();
            // Archive the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Trader\" set \"IsArchived\" = 1 where \"TraderId\"=@traderId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@traderId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, traderId));
            sqlCommand.ExecuteNonQuery();
        }
    }
}
