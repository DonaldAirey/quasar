namespace MarkThree.Forms
{

	using System;
	using System.CodeDom;
	using System.CodeDom.Compiler;
	using System.Collections.Generic;
	using System.Drawing;
	using System.Text;
	using System.Xml;

	/// <summary>
	/// Creates the namespace that contains all the types used to create C# source code form an XML specification.
	/// </summary>
	public class DataTransformNamespace : System.CodeDom.CodeNamespace
	{

		/// <summary>
		/// This will create the namespace that contains the all the types used to generate the C# code.
		/// </summary>
		/// <param name="dataTransform">A data structure containing the description of the view.</param>
		public DataTransformNamespace(DataTransform dataTransform)
		{

			//namespace MarkThree.UnitTest
			//{
			//    using MarkThree.Forms;
			//    using System;
			//    using System.Collections.Generic;
			//    using System.Data;
			//    using System.Drawing;
			//    using System.Text;
			//    using System.Windows.Forms;
			//
			this.Name = dataTransform.TargetNamespace;
			this.Imports.Add(new CodeNamespaceImport("MarkThree.Forms"));
			this.Imports.Add(new CodeNamespaceImport("System"));
			this.Imports.Add(new CodeNamespaceImport("System.Collections.Generic"));
			this.Imports.Add(new CodeNamespaceImport("System.Data"));
			this.Imports.Add(new CodeNamespaceImport("System.Drawing"));
			this.Imports.Add(new CodeNamespaceImport("System.IO"));
			this.Imports.Add(new CodeNamespaceImport("System.Text"));
			this.Imports.Add(new CodeNamespaceImport("System.Windows.Forms"));

			// This will create a class that will transform a data model into a human readable report.
			this.Types.Add(new DataTransformClass(dataTransform));

			// These classes are used to sort the various rows generated by the transform.
			foreach (DataTransform.TemplateNode templateNode in dataTransform.Templates)
				foreach (DataTransform.RowNode rowNode in templateNode.Rows)
					foreach (DataTransform.ApplyTemplateNode applyTemplateNode in rowNode.ApplyTemplates)
						if (applyTemplateNode.Sorts.Count != 0)
							this.Types.Add(new SortClass(applyTemplateNode));

		}

	}

}
