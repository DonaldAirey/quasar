//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Guardian.Core
{
    using MarkThree.Guardian;
    using MarkThree.Guardian.Server;
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Data.SqlClient;
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    public class Negotiation
    {
        
        /// This value is used to map the object to a persistent storage device.  The parameters for the storage
        /// are found in the configuration file for this service.
        public static string PersistentStore = "Guardian";
        
        /// This member provides access to the in-memory database.
        private static ServerMarketData serverMarketData = new ServerMarketData();
        
        /// <summary>Collects the table lock request(s) for an Insert operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Insert(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for this operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.NegotiationLock);
        }
        
        /// <summary>Inserts a Negotiation record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Insert(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object executionId = parameters["executionId"].Value;
            int matchId = parameters["matchId"];
            decimal quantity = parameters["quantity"];
            int statusCode = parameters["statusCode"];
            // The rowVersion is passed back to the caller in the event it's needed for additional commands in the batch.
            long rowVersion = long.MinValue;
            // Call the internal method to complete the operation.
            int negotiationId = Negotiation.Insert(adoTransaction, sqlTransaction, ref rowVersion, executionId, matchId, quantity, statusCode);
            // Return values.
            parameters["rowVersion"] = rowVersion;
            parameters.Return = negotiationId;
        }
        
        /// <summary>Inserts a Negotiation record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="executionId">The value for the ExecutionId column.</param>
        /// <param name="matchId">The value for the MatchId column.</param>
        /// <param name="quantity">The value for the Quantity column.</param>
        /// <param name="statusCode">The value for the StatusCode column.</param>
        public static int Insert(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, ref long rowVersion, object executionId, int matchId, decimal quantity, int statusCode)
        {
            // Accessor for the Negotiation Table.
            ServerMarketData.NegotiationDataTable negotiationTable = ServerMarketData.Negotiation;
            // Apply Defaults
            if ((executionId == null))
            {
                executionId = System.DBNull.Value;
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Insert the record into the ADO database.
            ServerMarketData.NegotiationRow negotiationRow = negotiationTable.NewNegotiationRow();
            negotiationRow[negotiationTable.RowVersionColumn] = rowVersion;
            negotiationRow[negotiationTable.ExecutionIdColumn] = executionId;
            negotiationRow[negotiationTable.MatchIdColumn] = matchId;
            negotiationRow[negotiationTable.QuantityColumn] = quantity;
            negotiationRow[negotiationTable.StatusCodeColumn] = statusCode;
            negotiationTable.AddNegotiationRow(negotiationRow);
            adoTransaction.DataRows.Add(negotiationRow);
            // Insert the record into the SQL database.
            SqlCommand sqlCommand = new SqlCommand("insert \"Negotiation\" (\"rowVersion\",\"ExecutionId\",\"MatchId\",\"NegotiationId\",\"Quant" +
                    "ity\",\"StatusCode\") values (@rowVersion,@executionId,@matchId,@negotiationId,@qua" +
                    "ntity,@statusCode)");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@executionId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, executionId));
            sqlCommand.Parameters.Add(new SqlParameter("@matchId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, matchId));
            sqlCommand.Parameters.Add(new SqlParameter("@negotiationId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, negotiationRow[negotiationTable.NegotiationIdColumn]));
            sqlCommand.Parameters.Add(new SqlParameter("@quantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, quantity));
            sqlCommand.Parameters.Add(new SqlParameter("@statusCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, statusCode));
            sqlCommand.ExecuteNonQuery();
            // Return Statements
            return negotiationRow.NegotiationId;
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Update(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Update' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.NegotiationLock);
        }
        
        /// <summary>Inserts a Negotiation record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Update(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            object executionId = parameters["executionId"].Value;
            object matchId = parameters["matchId"].Value;
            int negotiationId = parameters["negotiationId"];
            object quantity = parameters["quantity"].Value;
            object statusCode = parameters["statusCode"].Value;
            // Call the internal method to complete the operation.
            Negotiation.Update(adoTransaction, sqlTransaction, ref rowVersion, executionId, matchId, negotiationId, quantity, statusCode);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Updates a Negotiation record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="rowVersion">The version number of the row</param>
        /// <param name="executionId">The value for the ExecutionId column.</param>
        /// <param name="matchId">The value for the MatchId column.</param>
        /// <param name="negotiationId">The value for the NegotiationId column.</param>
        /// <param name="quantity">The value for the Quantity column.</param>
        /// <param name="statusCode">The value for the StatusCode column.</param>
        public static void Update(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, ref long rowVersion, object executionId, object matchId, int negotiationId, object quantity, object statusCode)
        {
            // Accessor for the Negotiation Table.
            ServerMarketData.NegotiationDataTable negotiationTable = ServerMarketData.Negotiation;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.NegotiationRow negotiationRow = negotiationTable.FindByNegotiationId(negotiationId);
            if ((negotiationRow == null))
            {
                throw new Exception(string.Format("The Negotiation table does not have an element identified by {0}", negotiationId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((negotiationRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Apply Defaults
            if ((executionId == null))
            {
                executionId = negotiationRow[negotiationTable.ExecutionIdColumn];
            }
            if ((matchId == null))
            {
                matchId = negotiationRow[negotiationTable.MatchIdColumn];
            }
            if ((quantity == null))
            {
                quantity = negotiationRow[negotiationTable.QuantityColumn];
            }
            if ((statusCode == null))
            {
                statusCode = negotiationRow[negotiationTable.StatusCodeColumn];
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Update the record in the ADO database.
            negotiationRow[negotiationTable.RowVersionColumn] = rowVersion;
            negotiationRow[negotiationTable.ExecutionIdColumn] = executionId;
            negotiationRow[negotiationTable.MatchIdColumn] = matchId;
            negotiationRow[negotiationTable.QuantityColumn] = quantity;
            negotiationRow[negotiationTable.StatusCodeColumn] = statusCode;
            adoTransaction.DataRows.Add(negotiationRow);
            // Update the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Negotiation\" set \"RowVersion\"=@rowVersion,\"ExecutionId\"=@executionId,\"Mat" +
                    "chId\"=@matchId,\"Quantity\"=@quantity,\"StatusCode\"=@statusCode where \"NegotiationI" +
                    "d\"=@negotiationId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@executionId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, executionId));
            sqlCommand.Parameters.Add(new SqlParameter("@matchId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, matchId));
            sqlCommand.Parameters.Add(new SqlParameter("@negotiationId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, negotiationId));
            sqlCommand.Parameters.Add(new SqlParameter("@quantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, quantity));
            sqlCommand.Parameters.Add(new SqlParameter("@statusCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, statusCode));
            // Update the record in the SQL database.
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Delete(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Delete' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.NegotiationLock);
        }
        
        /// <summary>Inserts a Negotiation record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Delete(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int negotiationId = parameters["negotiationId"];
            // Call the internal method to complete the operation.
            Negotiation.Delete(adoTransaction, sqlTransaction, rowVersion, negotiationId);
        }
        
        /// <summary>Deletes a Negotiation record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="negotiationId">The value for the NegotiationId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Delete(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int negotiationId)
        {
            // Accessor for the Negotiation Table.
            ServerMarketData.NegotiationDataTable negotiationTable = ServerMarketData.Negotiation;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.NegotiationRow negotiationRow = negotiationTable.FindByNegotiationId(negotiationId);
            if ((negotiationRow == null))
            {
                throw new Exception(string.Format("The Negotiation table does not have an element identified by {0}", negotiationId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((negotiationRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Delete the child records.
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Delete the record in the ADO database.
            negotiationRow[negotiationTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(negotiationRow);
            negotiationRow.Delete();
            // Delete the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Negotiation\" set \"IsDeleted\" = 1 where \"NegotiationId\"=@negotiationId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@negotiationId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, negotiationId));
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Archive(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Archive' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.NegotiationLock);
        }
        
        /// <summary>Inserts a Negotiation record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Archive(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int negotiationId = parameters["negotiationId"];
            // Call the internal method to complete the operation.
            Negotiation.Archive(adoTransaction, sqlTransaction, rowVersion, negotiationId);
        }
        
        /// <summary>Archives a Negotiation record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="negotiationId">The value for the NegotiationId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Archive(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int negotiationId)
        {
            // Accessor for the Negotiation Table.
            ServerMarketData.NegotiationDataTable negotiationTable = ServerMarketData.Negotiation;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.NegotiationRow negotiationRow = negotiationTable.FindByNegotiationId(negotiationId);
            if ((negotiationRow == null))
            {
                throw new Exception(string.Format("The Negotiation table does not have an element identified by {0}", negotiationId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((negotiationRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Archive the child records.
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Delete the record in the ADO database.
            negotiationRow[negotiationTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(negotiationRow);
            negotiationRow.Delete();
            // Archive the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Negotiation\" set \"IsArchived\" = 1 where \"NegotiationId\"=@negotiationId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@negotiationId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, negotiationId));
            sqlCommand.ExecuteNonQuery();
        }
    }
}
