//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Guardian.Core
{
    using MarkThree.Guardian;
    using MarkThree.Guardian.Server;
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Data.SqlClient;
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    public class ObjectTree
    {
        
        /// This value is used to map the object to a persistent storage device.  The parameters for the storage
        /// are found in the configuration file for this service.
        public static string PersistentStore = "Guardian";
        
        /// This member provides access to the in-memory database.
        private static ServerMarketData serverMarketData = new ServerMarketData();
        
        /// <summary>Collects the table lock request(s) for an Insert operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Insert(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for this operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.ObjectTreeLock);
        }
        
        /// <summary>Inserts a ObjectTree record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Insert(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            int childId = parameters["childId"];
            int parentId = parameters["parentId"];
            object externalId0 = parameters["externalId0"].Value;
            // The rowVersion is passed back to the caller in the event it's needed for additional commands in the batch.
            long rowVersion = long.MinValue;
            // Call the internal method to complete the operation.
            int objectTreeId = ObjectTree.Insert(adoTransaction, sqlTransaction, ref rowVersion, childId, parentId, externalId0);
            // Return values.
            parameters["rowVersion"] = rowVersion;
            parameters.Return = objectTreeId;
        }
        
        /// <summary>Inserts a ObjectTree record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="childId">The value for the ChildId column.</param>
        /// <param name="parentId">The value for the ParentId column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        public static int Insert(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, ref long rowVersion, int childId, int parentId, object externalId0)
        {
            // Accessor for the ObjectTree Table.
            ServerMarketData.ObjectTreeDataTable objectTreeTable = ServerMarketData.ObjectTree;
            // Apply Defaults
            if ((externalId0 == null))
            {
                externalId0 = System.DBNull.Value;
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Insert the record into the ADO database.
            ServerMarketData.ObjectTreeRow objectTreeRow = objectTreeTable.NewObjectTreeRow();
            objectTreeRow[objectTreeTable.RowVersionColumn] = rowVersion;
            objectTreeRow[objectTreeTable.ChildIdColumn] = childId;
            objectTreeRow[objectTreeTable.ParentIdColumn] = parentId;
            objectTreeRow[objectTreeTable.ExternalId0Column] = externalId0;
            objectTreeTable.AddObjectTreeRow(objectTreeRow);
            adoTransaction.DataRows.Add(objectTreeRow);
            // Insert the record into the SQL database.
            SqlCommand sqlCommand = new SqlCommand("insert \"ObjectTree\" (\"rowVersion\",\"ObjectTreeId\",\"ChildId\",\"ParentId\",\"ExternalId" +
                    "0\") values (@rowVersion,@objectTreeId,@childId,@parentId,@externalId0)");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@objectTreeId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, objectTreeRow[objectTreeTable.ObjectTreeIdColumn]));
            sqlCommand.Parameters.Add(new SqlParameter("@childId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, childId));
            sqlCommand.Parameters.Add(new SqlParameter("@parentId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, parentId));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.ExecuteNonQuery();
            // Return Statements
            return objectTreeRow.ObjectTreeId;
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Update(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Update' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.ObjectTreeLock);
        }
        
        /// <summary>Inserts a ObjectTree record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Update(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int objectTreeId = parameters["objectTreeId"];
            object childId = parameters["childId"].Value;
            object parentId = parameters["parentId"].Value;
            object externalId0 = parameters["externalId0"].Value;
            // Call the internal method to complete the operation.
            ObjectTree.Update(adoTransaction, sqlTransaction, ref rowVersion, objectTreeId, childId, parentId, externalId0);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Updates a ObjectTree record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="rowVersion">The version number of the row</param>
        /// <param name="objectTreeId">The value for the ObjectTreeId column.</param>
        /// <param name="childId">The value for the ChildId column.</param>
        /// <param name="parentId">The value for the ParentId column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        public static void Update(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, ref long rowVersion, int objectTreeId, object childId, object parentId, object externalId0)
        {
            // Accessor for the ObjectTree Table.
            ServerMarketData.ObjectTreeDataTable objectTreeTable = ServerMarketData.ObjectTree;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.ObjectTreeRow objectTreeRow = objectTreeTable.FindByObjectTreeId(objectTreeId);
            if ((objectTreeRow == null))
            {
                throw new Exception(string.Format("The ObjectTree table does not have an element identified by {0}", objectTreeId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((objectTreeRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Apply Defaults
            if ((childId == null))
            {
                childId = objectTreeRow[objectTreeTable.ChildIdColumn];
            }
            if ((parentId == null))
            {
                parentId = objectTreeRow[objectTreeTable.ParentIdColumn];
            }
            if ((externalId0 == null))
            {
                externalId0 = objectTreeRow[objectTreeTable.ExternalId0Column];
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Update the record in the ADO database.
            objectTreeRow[objectTreeTable.RowVersionColumn] = rowVersion;
            objectTreeRow[objectTreeTable.ChildIdColumn] = childId;
            objectTreeRow[objectTreeTable.ParentIdColumn] = parentId;
            objectTreeRow[objectTreeTable.ExternalId0Column] = externalId0;
            adoTransaction.DataRows.Add(objectTreeRow);
            // Update the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"ObjectTree\" set \"RowVersion\"=@rowVersion,\"ChildId\"=@childId,\"ParentId\"=@p" +
                    "arentId,\"ExternalId0\"=@externalId0 where \"ObjectTreeId\"=@objectTreeId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@objectTreeId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, objectTreeId));
            sqlCommand.Parameters.Add(new SqlParameter("@childId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, childId));
            sqlCommand.Parameters.Add(new SqlParameter("@parentId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, parentId));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            // Update the record in the SQL database.
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Delete(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Delete' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.ObjectTreeLock);
        }
        
        /// <summary>Inserts a ObjectTree record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Delete(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int objectTreeId = parameters["objectTreeId"];
            // Call the internal method to complete the operation.
            ObjectTree.Delete(adoTransaction, sqlTransaction, rowVersion, objectTreeId);
        }
        
        /// <summary>Deletes a ObjectTree record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="objectTreeId">The value for the ObjectTreeId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Delete(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int objectTreeId)
        {
            // Accessor for the ObjectTree Table.
            ServerMarketData.ObjectTreeDataTable objectTreeTable = ServerMarketData.ObjectTree;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.ObjectTreeRow objectTreeRow = objectTreeTable.FindByObjectTreeId(objectTreeId);
            if ((objectTreeRow == null))
            {
                throw new Exception(string.Format("The ObjectTree table does not have an element identified by {0}", objectTreeId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((objectTreeRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Delete the child records.
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Delete the record in the ADO database.
            objectTreeRow[objectTreeTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(objectTreeRow);
            objectTreeRow.Delete();
            // Delete the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"ObjectTree\" set \"IsDeleted\" = 1 where \"ObjectTreeId\"=@objectTreeId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@objectTreeId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, objectTreeId));
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Archive(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Archive' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.ObjectTreeLock);
        }
        
        /// <summary>Inserts a ObjectTree record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Archive(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int objectTreeId = parameters["objectTreeId"];
            // Call the internal method to complete the operation.
            ObjectTree.Archive(adoTransaction, sqlTransaction, rowVersion, objectTreeId);
        }
        
        /// <summary>Archives a ObjectTree record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="objectTreeId">The value for the ObjectTreeId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Archive(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int objectTreeId)
        {
            // Accessor for the ObjectTree Table.
            ServerMarketData.ObjectTreeDataTable objectTreeTable = ServerMarketData.ObjectTree;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.ObjectTreeRow objectTreeRow = objectTreeTable.FindByObjectTreeId(objectTreeId);
            if ((objectTreeRow == null))
            {
                throw new Exception(string.Format("The ObjectTree table does not have an element identified by {0}", objectTreeId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((objectTreeRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Archive the child records.
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Delete the record in the ADO database.
            objectTreeRow[objectTreeTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(objectTreeRow);
            objectTreeRow.Delete();
            // Archive the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"ObjectTree\" set \"IsArchived\" = 1 where \"ObjectTreeId\"=@objectTreeId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@objectTreeId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, objectTreeId));
            sqlCommand.ExecuteNonQuery();
        }
    }
}
