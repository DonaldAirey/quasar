//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Guardian.Core
{
    using MarkThree.Guardian;
    using MarkThree.Guardian.Server;
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Data.SqlClient;
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    public class Timer
    {
        
        /// This value is used to map the object to a persistent storage device.  The parameters for the storage
        /// are found in the configuration file for this service.
        public static string PersistentStore = "Guardian";
        
        /// This member provides access to the in-memory database.
        private static ServerMarketData serverMarketData = new ServerMarketData();
        
        /// <summary>Collects the table lock request(s) for an Insert operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Insert(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for this operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.TimerLock);
        }
        
        /// <summary>Inserts a Timer record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Insert(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            System.DateTime currentTime = parameters["currentTime"];
            object externalId0 = parameters["externalId0"].Value;
            bool isActive = parameters["isActive"];
            System.DateTime stopTime = parameters["stopTime"];
            int updateTime = parameters["updateTime"];
            // The rowVersion is passed back to the caller in the event it's needed for additional commands in the batch.
            long rowVersion = long.MinValue;
            // Call the internal method to complete the operation.
            int timerId = Timer.Insert(adoTransaction, sqlTransaction, ref rowVersion, currentTime, externalId0, isActive, stopTime, updateTime);
            // Return values.
            parameters["rowVersion"] = rowVersion;
            parameters.Return = timerId;
        }
        
        /// <summary>Inserts a Timer record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="currentTime">The value for the CurrentTime column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="isActive">The value for the IsActive column.</param>
        /// <param name="stopTime">The value for the StopTime column.</param>
        /// <param name="updateTime">The value for the UpdateTime column.</param>
        public static int Insert(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, ref long rowVersion, System.DateTime currentTime, object externalId0, bool isActive, System.DateTime stopTime, int updateTime)
        {
            // Accessor for the Timer Table.
            ServerMarketData.TimerDataTable timerTable = ServerMarketData.Timer;
            // Apply Defaults
            if ((externalId0 == null))
            {
                externalId0 = System.DBNull.Value;
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Insert the record into the ADO database.
            ServerMarketData.TimerRow timerRow = timerTable.NewTimerRow();
            timerRow[timerTable.RowVersionColumn] = rowVersion;
            timerRow[timerTable.CurrentTimeColumn] = currentTime;
            timerRow[timerTable.ExternalId0Column] = externalId0;
            timerRow[timerTable.IsActiveColumn] = isActive;
            timerRow[timerTable.StopTimeColumn] = stopTime;
            timerRow[timerTable.UpdateTimeColumn] = updateTime;
            timerTable.AddTimerRow(timerRow);
            adoTransaction.DataRows.Add(timerRow);
            // Insert the record into the SQL database.
            SqlCommand sqlCommand = new SqlCommand("insert \"Timer\" (\"rowVersion\",\"CurrentTime\",\"ExternalId0\",\"IsActive\",\"StopTime\",\"T" +
                    "imerId\",\"UpdateTime\") values (@rowVersion,@currentTime,@externalId0,@isActive,@s" +
                    "topTime,@timerId,@updateTime)");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@currentTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, currentTime));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@isActive", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isActive));
            sqlCommand.Parameters.Add(new SqlParameter("@stopTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, stopTime));
            sqlCommand.Parameters.Add(new SqlParameter("@timerId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, timerRow[timerTable.TimerIdColumn]));
            sqlCommand.Parameters.Add(new SqlParameter("@updateTime", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, updateTime));
            sqlCommand.ExecuteNonQuery();
            // Return Statements
            return timerRow.TimerId;
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Update(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Update' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.TimerLock);
            Match.Archive(adoTransaction);
            WorkingOrder.Archive(adoTransaction);
        }
        
        /// <summary>Inserts a Timer record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Update(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            object currentTime = parameters["currentTime"].Value;
            object externalId0 = parameters["externalId0"].Value;
            object isActive = parameters["isActive"].Value;
            object stopTime = parameters["stopTime"].Value;
            int timerId = parameters["timerId"];
            object updateTime = parameters["updateTime"].Value;
            // Call the internal method to complete the operation.
            Timer.Update(adoTransaction, sqlTransaction, ref rowVersion, currentTime, externalId0, isActive, stopTime, timerId, updateTime);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Updates a Timer record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="rowVersion">The version number of the row</param>
        /// <param name="currentTime">The value for the CurrentTime column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="isActive">The value for the IsActive column.</param>
        /// <param name="stopTime">The value for the StopTime column.</param>
        /// <param name="timerId">The value for the TimerId column.</param>
        /// <param name="updateTime">The value for the UpdateTime column.</param>
        public static void Update(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, ref long rowVersion, object currentTime, object externalId0, object isActive, object stopTime, int timerId, object updateTime)
        {
            // Accessor for the Timer Table.
            ServerMarketData.TimerDataTable timerTable = ServerMarketData.Timer;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.TimerRow timerRow = timerTable.FindByTimerId(timerId);
            if ((timerRow == null))
            {
                throw new Exception(string.Format("The Timer table does not have an element identified by {0}", timerId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((timerRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Apply Defaults
            if ((currentTime == null))
            {
                currentTime = timerRow[timerTable.CurrentTimeColumn];
            }
            if ((externalId0 == null))
            {
                externalId0 = timerRow[timerTable.ExternalId0Column];
            }
            if ((isActive == null))
            {
                isActive = timerRow[timerTable.IsActiveColumn];
            }
            if ((stopTime == null))
            {
                stopTime = timerRow[timerTable.StopTimeColumn];
            }
            if ((updateTime == null))
            {
                updateTime = timerRow[timerTable.UpdateTimeColumn];
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Update the record in the ADO database.
            timerRow[timerTable.RowVersionColumn] = rowVersion;
            timerRow[timerTable.CurrentTimeColumn] = currentTime;
            timerRow[timerTable.ExternalId0Column] = externalId0;
            timerRow[timerTable.IsActiveColumn] = isActive;
            timerRow[timerTable.StopTimeColumn] = stopTime;
            timerRow[timerTable.UpdateTimeColumn] = updateTime;
            adoTransaction.DataRows.Add(timerRow);
            // Update the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Timer\" set \"RowVersion\"=@rowVersion,\"CurrentTime\"=@currentTime,\"ExternalI" +
                    "d0\"=@externalId0,\"IsActive\"=@isActive,\"StopTime\"=@stopTime,\"UpdateTime\"=@updateT" +
                    "ime where \"TimerId\"=@timerId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@currentTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, currentTime));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@isActive", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isActive));
            sqlCommand.Parameters.Add(new SqlParameter("@stopTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, stopTime));
            sqlCommand.Parameters.Add(new SqlParameter("@timerId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, timerId));
            sqlCommand.Parameters.Add(new SqlParameter("@updateTime", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, updateTime));
            // Update the record in the SQL database.
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Delete(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Delete' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.TimerLock);
            Match.Archive(adoTransaction);
            WorkingOrder.Archive(adoTransaction);
        }
        
        /// <summary>Inserts a Timer record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Delete(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int timerId = parameters["timerId"];
            // Call the internal method to complete the operation.
            Timer.Delete(adoTransaction, sqlTransaction, rowVersion, timerId);
        }
        
        /// <summary>Deletes a Timer record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="timerId">The value for the TimerId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Delete(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int timerId)
        {
            // Accessor for the Timer Table.
            ServerMarketData.TimerDataTable timerTable = ServerMarketData.Timer;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.TimerRow timerRow = timerTable.FindByTimerId(timerId);
            if ((timerRow == null))
            {
                throw new Exception(string.Format("The Timer table does not have an element identified by {0}", timerId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((timerRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Delete the child records.
            for (int index = 0; (index < timerRow.GetMatchRows().Length); index = (index + 1))
            {
                ServerMarketData.MatchRow childMatchRow = timerRow.GetMatchRows()[index];
                Match.Delete(adoTransaction, sqlTransaction, childMatchRow.RowVersion, childMatchRow.MatchId);
            }
            for (int index = 0; (index < timerRow.GetWorkingOrderRows().Length); index = (index + 1))
            {
                ServerMarketData.WorkingOrderRow childWorkingOrderRow = timerRow.GetWorkingOrderRows()[index];
                WorkingOrder.Delete(adoTransaction, sqlTransaction, childWorkingOrderRow.RowVersion, childWorkingOrderRow.WorkingOrderId);
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Delete the record in the ADO database.
            timerRow[timerTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(timerRow);
            timerRow.Delete();
            // Delete the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Timer\" set \"IsDeleted\" = 1 where \"TimerId\"=@timerId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@timerId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, timerId));
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Archive(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Archive' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.TimerLock);
            Match.Archive(adoTransaction);
            WorkingOrder.Archive(adoTransaction);
        }
        
        /// <summary>Inserts a Timer record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Archive(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int timerId = parameters["timerId"];
            // Call the internal method to complete the operation.
            Timer.Archive(adoTransaction, sqlTransaction, rowVersion, timerId);
        }
        
        /// <summary>Archives a Timer record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="timerId">The value for the TimerId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Archive(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int timerId)
        {
            // Accessor for the Timer Table.
            ServerMarketData.TimerDataTable timerTable = ServerMarketData.Timer;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.TimerRow timerRow = timerTable.FindByTimerId(timerId);
            if ((timerRow == null))
            {
                throw new Exception(string.Format("The Timer table does not have an element identified by {0}", timerId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((timerRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Archive the child records.
            for (int index = 0; (index < timerRow.GetMatchRows().Length); index = (index + 1))
            {
                ServerMarketData.MatchRow childMatchRow = timerRow.GetMatchRows()[index];
                Match.Archive(adoTransaction, sqlTransaction, childMatchRow.RowVersion, childMatchRow.MatchId);
            }
            for (int index = 0; (index < timerRow.GetWorkingOrderRows().Length); index = (index + 1))
            {
                ServerMarketData.WorkingOrderRow childWorkingOrderRow = timerRow.GetWorkingOrderRows()[index];
                WorkingOrder.Archive(adoTransaction, sqlTransaction, childWorkingOrderRow.RowVersion, childWorkingOrderRow.WorkingOrderId);
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Delete the record in the ADO database.
            timerRow[timerTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(timerRow);
            timerRow.Delete();
            // Archive the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Timer\" set \"IsArchived\" = 1 where \"TimerId\"=@timerId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@timerId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, timerId));
            sqlCommand.ExecuteNonQuery();
        }
    }
}
