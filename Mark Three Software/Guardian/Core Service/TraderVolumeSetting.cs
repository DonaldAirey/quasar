//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Guardian.Core
{
    using MarkThree.Guardian;
    using MarkThree.Guardian.Server;
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Data.SqlClient;
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    public class TraderVolumeSetting
    {
        
        /// This value is used to map the object to a persistent storage device.  The parameters for the storage
        /// are found in the configuration file for this service.
        public static string PersistentStore = "Guardian";
        
        /// This member provides access to the in-memory database.
        private static ServerMarketData serverMarketData = new ServerMarketData();
        
        /// <summary>Collects the table lock request(s) for an Insert operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Insert(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for this operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.TraderVolumeSettingLock);
        }
        
        /// <summary>Inserts a TraderVolumeSetting record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Insert(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object externalId0 = parameters["externalId0"].Value;
            decimal autoExecuteQuantity = parameters["autoExecuteQuantity"];
            decimal thresholdQuantity = parameters["thresholdQuantity"];
            int traderId = parameters["traderId"];
            int volumeCategoryId = parameters["volumeCategoryId"];
            // The rowVersion is passed back to the caller in the event it's needed for additional commands in the batch.
            long rowVersion = long.MinValue;
            // Call the internal method to complete the operation.
            int traderVolumeSettingId = TraderVolumeSetting.Insert(adoTransaction, sqlTransaction, ref rowVersion, externalId0, autoExecuteQuantity, thresholdQuantity, traderId, volumeCategoryId);
            // Return values.
            parameters["rowVersion"] = rowVersion;
            parameters.Return = traderVolumeSettingId;
        }
        
        /// <summary>Inserts a TraderVolumeSetting record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="autoExecuteQuantity">The value for the AutoExecuteQuantity column.</param>
        /// <param name="thresholdQuantity">The value for the ThresholdQuantity column.</param>
        /// <param name="traderId">The value for the TraderId column.</param>
        /// <param name="volumeCategoryId">The value for the VolumeCategoryId column.</param>
        public static int Insert(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, ref long rowVersion, object externalId0, decimal autoExecuteQuantity, decimal thresholdQuantity, int traderId, int volumeCategoryId)
        {
            // Accessor for the TraderVolumeSetting Table.
            ServerMarketData.TraderVolumeSettingDataTable traderVolumeSettingTable = ServerMarketData.TraderVolumeSetting;
            // Apply Defaults
            if ((externalId0 == null))
            {
                externalId0 = System.DBNull.Value;
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Insert the record into the ADO database.
            ServerMarketData.TraderVolumeSettingRow traderVolumeSettingRow = traderVolumeSettingTable.NewTraderVolumeSettingRow();
            traderVolumeSettingRow[traderVolumeSettingTable.RowVersionColumn] = rowVersion;
            traderVolumeSettingRow[traderVolumeSettingTable.ExternalId0Column] = externalId0;
            traderVolumeSettingRow[traderVolumeSettingTable.AutoExecuteQuantityColumn] = autoExecuteQuantity;
            traderVolumeSettingRow[traderVolumeSettingTable.ThresholdQuantityColumn] = thresholdQuantity;
            traderVolumeSettingRow[traderVolumeSettingTable.TraderIdColumn] = traderId;
            traderVolumeSettingRow[traderVolumeSettingTable.VolumeCategoryIdColumn] = volumeCategoryId;
            traderVolumeSettingTable.AddTraderVolumeSettingRow(traderVolumeSettingRow);
            adoTransaction.DataRows.Add(traderVolumeSettingRow);
            // Insert the record into the SQL database.
            SqlCommand sqlCommand = new SqlCommand(@"insert ""TraderVolumeSetting"" (""rowVersion"",""ExternalId0"",""AutoExecuteQuantity"",""ThresholdQuantity"",""TraderVolumeSettingId"",""TraderId"",""VolumeCategoryId"") values (@rowVersion,@externalId0,@autoExecuteQuantity,@thresholdQuantity,@traderVolumeSettingId,@traderId,@volumeCategoryId)");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@autoExecuteQuantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, autoExecuteQuantity));
            sqlCommand.Parameters.Add(new SqlParameter("@thresholdQuantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, thresholdQuantity));
            sqlCommand.Parameters.Add(new SqlParameter("@traderVolumeSettingId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, traderVolumeSettingRow[traderVolumeSettingTable.TraderVolumeSettingIdColumn]));
            sqlCommand.Parameters.Add(new SqlParameter("@traderId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, traderId));
            sqlCommand.Parameters.Add(new SqlParameter("@volumeCategoryId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, volumeCategoryId));
            sqlCommand.ExecuteNonQuery();
            // Return Statements
            return traderVolumeSettingRow.TraderVolumeSettingId;
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Update(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Update' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.TraderVolumeSettingLock);
        }
        
        /// <summary>Inserts a TraderVolumeSetting record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Update(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            object externalId0 = parameters["externalId0"].Value;
            object autoExecuteQuantity = parameters["autoExecuteQuantity"].Value;
            object thresholdQuantity = parameters["thresholdQuantity"].Value;
            int traderVolumeSettingId = parameters["traderVolumeSettingId"];
            object traderId = parameters["traderId"].Value;
            object volumeCategoryId = parameters["volumeCategoryId"].Value;
            // Call the internal method to complete the operation.
            TraderVolumeSetting.Update(adoTransaction, sqlTransaction, ref rowVersion, externalId0, autoExecuteQuantity, thresholdQuantity, traderVolumeSettingId, traderId, volumeCategoryId);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Updates a TraderVolumeSetting record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="rowVersion">The version number of the row</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="autoExecuteQuantity">The value for the AutoExecuteQuantity column.</param>
        /// <param name="thresholdQuantity">The value for the ThresholdQuantity column.</param>
        /// <param name="traderVolumeSettingId">The value for the TraderVolumeSettingId column.</param>
        /// <param name="traderId">The value for the TraderId column.</param>
        /// <param name="volumeCategoryId">The value for the VolumeCategoryId column.</param>
        public static void Update(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, ref long rowVersion, object externalId0, object autoExecuteQuantity, object thresholdQuantity, int traderVolumeSettingId, object traderId, object volumeCategoryId)
        {
            // Accessor for the TraderVolumeSetting Table.
            ServerMarketData.TraderVolumeSettingDataTable traderVolumeSettingTable = ServerMarketData.TraderVolumeSetting;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.TraderVolumeSettingRow traderVolumeSettingRow = traderVolumeSettingTable.FindByTraderVolumeSettingId(traderVolumeSettingId);
            if ((traderVolumeSettingRow == null))
            {
                throw new Exception(string.Format("The TraderVolumeSetting table does not have an element identified by {0}", traderVolumeSettingId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((traderVolumeSettingRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Apply Defaults
            if ((externalId0 == null))
            {
                externalId0 = traderVolumeSettingRow[traderVolumeSettingTable.ExternalId0Column];
            }
            if ((autoExecuteQuantity == null))
            {
                autoExecuteQuantity = traderVolumeSettingRow[traderVolumeSettingTable.AutoExecuteQuantityColumn];
            }
            if ((thresholdQuantity == null))
            {
                thresholdQuantity = traderVolumeSettingRow[traderVolumeSettingTable.ThresholdQuantityColumn];
            }
            if ((traderId == null))
            {
                traderId = traderVolumeSettingRow[traderVolumeSettingTable.TraderIdColumn];
            }
            if ((volumeCategoryId == null))
            {
                volumeCategoryId = traderVolumeSettingRow[traderVolumeSettingTable.VolumeCategoryIdColumn];
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Update the record in the ADO database.
            traderVolumeSettingRow[traderVolumeSettingTable.RowVersionColumn] = rowVersion;
            traderVolumeSettingRow[traderVolumeSettingTable.ExternalId0Column] = externalId0;
            traderVolumeSettingRow[traderVolumeSettingTable.AutoExecuteQuantityColumn] = autoExecuteQuantity;
            traderVolumeSettingRow[traderVolumeSettingTable.ThresholdQuantityColumn] = thresholdQuantity;
            traderVolumeSettingRow[traderVolumeSettingTable.TraderIdColumn] = traderId;
            traderVolumeSettingRow[traderVolumeSettingTable.VolumeCategoryIdColumn] = volumeCategoryId;
            adoTransaction.DataRows.Add(traderVolumeSettingRow);
            // Update the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand(@"update ""TraderVolumeSetting"" set ""RowVersion""=@rowVersion,""ExternalId0""=@externalId0,""AutoExecuteQuantity""=@autoExecuteQuantity,""ThresholdQuantity""=@thresholdQuantity,""TraderId""=@traderId,""VolumeCategoryId""=@volumeCategoryId where ""TraderVolumeSettingId""=@traderVolumeSettingId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@autoExecuteQuantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, autoExecuteQuantity));
            sqlCommand.Parameters.Add(new SqlParameter("@thresholdQuantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, thresholdQuantity));
            sqlCommand.Parameters.Add(new SqlParameter("@traderVolumeSettingId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, traderVolumeSettingId));
            sqlCommand.Parameters.Add(new SqlParameter("@traderId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, traderId));
            sqlCommand.Parameters.Add(new SqlParameter("@volumeCategoryId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, volumeCategoryId));
            // Update the record in the SQL database.
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Delete(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Delete' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.TraderVolumeSettingLock);
        }
        
        /// <summary>Inserts a TraderVolumeSetting record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Delete(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int traderVolumeSettingId = parameters["traderVolumeSettingId"];
            // Call the internal method to complete the operation.
            TraderVolumeSetting.Delete(adoTransaction, sqlTransaction, rowVersion, traderVolumeSettingId);
        }
        
        /// <summary>Deletes a TraderVolumeSetting record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="traderVolumeSettingId">The value for the TraderVolumeSettingId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Delete(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int traderVolumeSettingId)
        {
            // Accessor for the TraderVolumeSetting Table.
            ServerMarketData.TraderVolumeSettingDataTable traderVolumeSettingTable = ServerMarketData.TraderVolumeSetting;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.TraderVolumeSettingRow traderVolumeSettingRow = traderVolumeSettingTable.FindByTraderVolumeSettingId(traderVolumeSettingId);
            if ((traderVolumeSettingRow == null))
            {
                throw new Exception(string.Format("The TraderVolumeSetting table does not have an element identified by {0}", traderVolumeSettingId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((traderVolumeSettingRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Delete the child records.
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Delete the record in the ADO database.
            traderVolumeSettingRow[traderVolumeSettingTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(traderVolumeSettingRow);
            traderVolumeSettingRow.Delete();
            // Delete the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"TraderVolumeSetting\" set \"IsDeleted\" = 1 where \"TraderVolumeSettingId\"=@t" +
                    "raderVolumeSettingId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@traderVolumeSettingId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, traderVolumeSettingId));
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Archive(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Archive' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.TraderVolumeSettingLock);
        }
        
        /// <summary>Inserts a TraderVolumeSetting record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Archive(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int traderVolumeSettingId = parameters["traderVolumeSettingId"];
            // Call the internal method to complete the operation.
            TraderVolumeSetting.Archive(adoTransaction, sqlTransaction, rowVersion, traderVolumeSettingId);
        }
        
        /// <summary>Archives a TraderVolumeSetting record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="traderVolumeSettingId">The value for the TraderVolumeSettingId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Archive(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int traderVolumeSettingId)
        {
            // Accessor for the TraderVolumeSetting Table.
            ServerMarketData.TraderVolumeSettingDataTable traderVolumeSettingTable = ServerMarketData.TraderVolumeSetting;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.TraderVolumeSettingRow traderVolumeSettingRow = traderVolumeSettingTable.FindByTraderVolumeSettingId(traderVolumeSettingId);
            if ((traderVolumeSettingRow == null))
            {
                throw new Exception(string.Format("The TraderVolumeSetting table does not have an element identified by {0}", traderVolumeSettingId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((traderVolumeSettingRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Archive the child records.
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Delete the record in the ADO database.
            traderVolumeSettingRow[traderVolumeSettingTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(traderVolumeSettingRow);
            traderVolumeSettingRow.Delete();
            // Archive the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"TraderVolumeSetting\" set \"IsArchived\" = 1 where \"TraderVolumeSettingId\"=@" +
                    "traderVolumeSettingId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@traderVolumeSettingId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, traderVolumeSettingId));
            sqlCommand.ExecuteNonQuery();
        }
    }
}
