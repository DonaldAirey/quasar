//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Guardian.Core
{
    using MarkThree.Guardian;
    using MarkThree.Guardian.Server;
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Data.SqlClient;
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    public class WorkingOrder
    {
        
        /// This value is used to map the object to a persistent storage device.  The parameters for the storage
        /// are found in the configuration file for this service.
        public static string PersistentStore = "Guardian";
        
        /// This member provides access to the in-memory database.
        private static ServerMarketData serverMarketData = new ServerMarketData();
        
        /// <summary>Collects the table lock request(s) for an Insert operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Insert(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for this operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.WorkingOrderLock);
        }
        
        /// <summary>Inserts a WorkingOrder record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Insert(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object automaticQuantity = parameters["automaticQuantity"].Value;
            int blotterId = parameters["blotterId"];
            System.DateTime createdTime = parameters["createdTime"];
            int createdUserId = parameters["createdUserId"];
            object destinationId = parameters["destinationId"].Value;
            object externalId0 = parameters["externalId0"].Value;
            object isAgencyMatch = parameters["isAgencyMatch"].Value;
            object isAutomatic = parameters["isAutomatic"].Value;
            object isAwake = parameters["isAwake"].Value;
            object isBrokerMatch = parameters["isBrokerMatch"].Value;
            object isHedgeMatch = parameters["isHedgeMatch"].Value;
            object isInstitutionMatch = parameters["isInstitutionMatch"].Value;
            object limitPrice = parameters["limitPrice"].Value;
            object maximumVolatility = parameters["maximumVolatility"].Value;
            System.DateTime modifiedTime = parameters["modifiedTime"];
            int modifiedUserId = parameters["modifiedUserId"];
            object newsFreeTime = parameters["newsFreeTime"].Value;
            int orderTypeCode = parameters["orderTypeCode"];
            int priceTypeCode = parameters["priceTypeCode"];
            int securityId = parameters["securityId"];
            object settlementId = parameters["settlementId"].Value;
            object startTime = parameters["startTime"].Value;
            int statusCode = parameters["statusCode"];
            object stopPrice = parameters["stopPrice"].Value;
            object stopTime = parameters["stopTime"].Value;
            int submissionTypeCode = parameters["submissionTypeCode"];
            object submittedQuantity = parameters["submittedQuantity"].Value;
            object submittedTime = parameters["submittedTime"].Value;
            int timeInForceCode = parameters["timeInForceCode"];
            object timerId = parameters["timerId"].Value;
            object uploadedTime = parameters["uploadedTime"].Value;
            // The rowVersion is passed back to the caller in the event it's needed for additional commands in the batch.
            long rowVersion = long.MinValue;
            // Call the internal method to complete the operation.
            int workingOrderId = WorkingOrder.Insert(adoTransaction, sqlTransaction, ref rowVersion, automaticQuantity, blotterId, createdTime, createdUserId, destinationId, externalId0, isAgencyMatch, isAutomatic, isAwake, isBrokerMatch, isHedgeMatch, isInstitutionMatch, limitPrice, maximumVolatility, modifiedTime, modifiedUserId, newsFreeTime, orderTypeCode, priceTypeCode, securityId, settlementId, startTime, statusCode, stopPrice, stopTime, submissionTypeCode, submittedQuantity, submittedTime, timeInForceCode, timerId, uploadedTime);
            // Return values.
            parameters["rowVersion"] = rowVersion;
            parameters.Return = workingOrderId;
        }
        
        /// <summary>Inserts a WorkingOrder record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="automaticQuantity">The value for the AutomaticQuantity column.</param>
        /// <param name="blotterId">The value for the BlotterId column.</param>
        /// <param name="createdTime">The value for the CreatedTime column.</param>
        /// <param name="createdUserId">The value for the CreatedUserId column.</param>
        /// <param name="destinationId">The value for the DestinationId column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="isAgencyMatch">The value for the IsAgencyMatch column.</param>
        /// <param name="isAutomatic">The value for the IsAutomatic column.</param>
        /// <param name="isAwake">The value for the IsAwake column.</param>
        /// <param name="isBrokerMatch">The value for the IsBrokerMatch column.</param>
        /// <param name="isHedgeMatch">The value for the IsHedgeMatch column.</param>
        /// <param name="isInstitutionMatch">The value for the IsInstitutionMatch column.</param>
        /// <param name="limitPrice">The value for the LimitPrice column.</param>
        /// <param name="maximumVolatility">The value for the MaximumVolatility column.</param>
        /// <param name="modifiedTime">The value for the ModifiedTime column.</param>
        /// <param name="modifiedUserId">The value for the ModifiedUserId column.</param>
        /// <param name="newsFreeTime">The value for the NewsFreeTime column.</param>
        /// <param name="orderTypeCode">The value for the OrderTypeCode column.</param>
        /// <param name="priceTypeCode">The value for the PriceTypeCode column.</param>
        /// <param name="securityId">The value for the SecurityId column.</param>
        /// <param name="settlementId">The value for the SettlementId column.</param>
        /// <param name="startTime">The value for the StartTime column.</param>
        /// <param name="statusCode">The value for the StatusCode column.</param>
        /// <param name="stopPrice">The value for the StopPrice column.</param>
        /// <param name="stopTime">The value for the StopTime column.</param>
        /// <param name="submissionTypeCode">The value for the SubmissionTypeCode column.</param>
        /// <param name="submittedQuantity">The value for the SubmittedQuantity column.</param>
        /// <param name="submittedTime">The value for the SubmittedTime column.</param>
        /// <param name="timeInForceCode">The value for the TimeInForceCode column.</param>
        /// <param name="timerId">The value for the TimerId column.</param>
        /// <param name="uploadedTime">The value for the UploadedTime column.</param>
        public static int Insert(
                    AdoTransaction adoTransaction, 
                    SqlTransaction sqlTransaction, 
                    ref long rowVersion, 
                    object automaticQuantity, 
                    int blotterId, 
                    System.DateTime createdTime, 
                    int createdUserId, 
                    object destinationId, 
                    object externalId0, 
                    object isAgencyMatch, 
                    object isAutomatic, 
                    object isAwake, 
                    object isBrokerMatch, 
                    object isHedgeMatch, 
                    object isInstitutionMatch, 
                    object limitPrice, 
                    object maximumVolatility, 
                    System.DateTime modifiedTime, 
                    int modifiedUserId, 
                    object newsFreeTime, 
                    int orderTypeCode, 
                    int priceTypeCode, 
                    int securityId, 
                    object settlementId, 
                    object startTime, 
                    int statusCode, 
                    object stopPrice, 
                    object stopTime, 
                    int submissionTypeCode, 
                    object submittedQuantity, 
                    object submittedTime, 
                    int timeInForceCode, 
                    object timerId, 
                    object uploadedTime)
        {
            // Accessor for the WorkingOrder Table.
            ServerMarketData.WorkingOrderDataTable workingOrderTable = ServerMarketData.WorkingOrder;
            // Apply Defaults
            if ((automaticQuantity == null))
            {
                automaticQuantity = System.DBNull.Value;
            }
            if ((destinationId == null))
            {
                destinationId = System.DBNull.Value;
            }
            if ((externalId0 == null))
            {
                externalId0 = System.DBNull.Value;
            }
            if ((isAgencyMatch == null))
            {
                isAgencyMatch = false;
            }
            if ((isAutomatic == null))
            {
                isAutomatic = false;
            }
            if ((isAwake == null))
            {
                isAwake = true;
            }
            if ((isBrokerMatch == null))
            {
                isBrokerMatch = false;
            }
            if ((isHedgeMatch == null))
            {
                isHedgeMatch = false;
            }
            if ((isInstitutionMatch == null))
            {
                isInstitutionMatch = false;
            }
            if ((limitPrice == null))
            {
                limitPrice = System.DBNull.Value;
            }
            if ((maximumVolatility == null))
            {
                maximumVolatility = System.DBNull.Value;
            }
            if ((newsFreeTime == null))
            {
                newsFreeTime = System.DBNull.Value;
            }
            if ((settlementId == null))
            {
                settlementId = System.DBNull.Value;
            }
            if ((startTime == null))
            {
                startTime = System.DBNull.Value;
            }
            if ((stopPrice == null))
            {
                stopPrice = System.DBNull.Value;
            }
            if ((stopTime == null))
            {
                stopTime = System.DBNull.Value;
            }
            if ((submittedQuantity == null))
            {
                submittedQuantity = 0.0m;
            }
            if ((submittedTime == null))
            {
                submittedTime = System.DBNull.Value;
            }
            if ((timerId == null))
            {
                timerId = System.DBNull.Value;
            }
            if ((uploadedTime == null))
            {
                uploadedTime = System.DBNull.Value;
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Insert the record into the ADO database.
            ServerMarketData.WorkingOrderRow workingOrderRow = workingOrderTable.NewWorkingOrderRow();
            workingOrderRow[workingOrderTable.RowVersionColumn] = rowVersion;
            workingOrderRow[workingOrderTable.AutomaticQuantityColumn] = automaticQuantity;
            workingOrderRow[workingOrderTable.BlotterIdColumn] = blotterId;
            workingOrderRow[workingOrderTable.CreatedTimeColumn] = createdTime;
            workingOrderRow[workingOrderTable.CreatedUserIdColumn] = createdUserId;
            workingOrderRow[workingOrderTable.DestinationIdColumn] = destinationId;
            workingOrderRow[workingOrderTable.ExternalId0Column] = externalId0;
            workingOrderRow[workingOrderTable.IsAgencyMatchColumn] = isAgencyMatch;
            workingOrderRow[workingOrderTable.IsAutomaticColumn] = isAutomatic;
            workingOrderRow[workingOrderTable.IsAwakeColumn] = isAwake;
            workingOrderRow[workingOrderTable.IsBrokerMatchColumn] = isBrokerMatch;
            workingOrderRow[workingOrderTable.IsHedgeMatchColumn] = isHedgeMatch;
            workingOrderRow[workingOrderTable.IsInstitutionMatchColumn] = isInstitutionMatch;
            workingOrderRow[workingOrderTable.LimitPriceColumn] = limitPrice;
            workingOrderRow[workingOrderTable.MaximumVolatilityColumn] = maximumVolatility;
            workingOrderRow[workingOrderTable.ModifiedTimeColumn] = modifiedTime;
            workingOrderRow[workingOrderTable.ModifiedUserIdColumn] = modifiedUserId;
            workingOrderRow[workingOrderTable.NewsFreeTimeColumn] = newsFreeTime;
            workingOrderRow[workingOrderTable.OrderTypeCodeColumn] = orderTypeCode;
            workingOrderRow[workingOrderTable.PriceTypeCodeColumn] = priceTypeCode;
            workingOrderRow[workingOrderTable.SecurityIdColumn] = securityId;
            workingOrderRow[workingOrderTable.SettlementIdColumn] = settlementId;
            workingOrderRow[workingOrderTable.StartTimeColumn] = startTime;
            workingOrderRow[workingOrderTable.StatusCodeColumn] = statusCode;
            workingOrderRow[workingOrderTable.StopPriceColumn] = stopPrice;
            workingOrderRow[workingOrderTable.StopTimeColumn] = stopTime;
            workingOrderRow[workingOrderTable.SubmissionTypeCodeColumn] = submissionTypeCode;
            workingOrderRow[workingOrderTable.SubmittedQuantityColumn] = submittedQuantity;
            workingOrderRow[workingOrderTable.SubmittedTimeColumn] = submittedTime;
            workingOrderRow[workingOrderTable.TimeInForceCodeColumn] = timeInForceCode;
            workingOrderRow[workingOrderTable.TimerIdColumn] = timerId;
            workingOrderRow[workingOrderTable.UploadedTimeColumn] = uploadedTime;
            workingOrderTable.AddWorkingOrderRow(workingOrderRow);
            adoTransaction.DataRows.Add(workingOrderRow);
            // Insert the record into the SQL database.
            SqlCommand sqlCommand = new SqlCommand(@"insert ""WorkingOrder"" (""rowVersion"",""AutomaticQuantity"",""BlotterId"",""CreatedTime"",""CreatedUserId"",""DestinationId"",""ExternalId0"",""IsAgencyMatch"",""IsAutomatic"",""IsAwake"",""IsBrokerMatch"",""IsHedgeMatch"",""IsInstitutionMatch"",""LimitPrice"",""MaximumVolatility"",""ModifiedTime"",""ModifiedUserId"",""NewsFreeTime"",""OrderTypeCode"",""PriceTypeCode"",""SecurityId"",""SettlementId"",""StartTime"",""StatusCode"",""StopPrice"",""StopTime"",""SubmissionTypeCode"",""SubmittedQuantity"",""SubmittedTime"",""TimeInForceCode"",""TimerId"",""UploadedTime"",""WorkingOrderId"") values (@rowVersion,@automaticQuantity,@blotterId,@createdTime,@createdUserId,@destinationId,@externalId0,@isAgencyMatch,@isAutomatic,@isAwake,@isBrokerMatch,@isHedgeMatch,@isInstitutionMatch,@limitPrice,@maximumVolatility,@modifiedTime,@modifiedUserId,@newsFreeTime,@orderTypeCode,@priceTypeCode,@securityId,@settlementId,@startTime,@statusCode,@stopPrice,@stopTime,@submissionTypeCode,@submittedQuantity,@submittedTime,@timeInForceCode,@timerId,@uploadedTime,@workingOrderId)");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@automaticQuantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, automaticQuantity));
            sqlCommand.Parameters.Add(new SqlParameter("@blotterId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, blotterId));
            sqlCommand.Parameters.Add(new SqlParameter("@createdTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, createdTime));
            sqlCommand.Parameters.Add(new SqlParameter("@createdUserId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, createdUserId));
            sqlCommand.Parameters.Add(new SqlParameter("@destinationId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, destinationId));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@isAgencyMatch", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isAgencyMatch));
            sqlCommand.Parameters.Add(new SqlParameter("@isAutomatic", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isAutomatic));
            sqlCommand.Parameters.Add(new SqlParameter("@isAwake", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isAwake));
            sqlCommand.Parameters.Add(new SqlParameter("@isBrokerMatch", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isBrokerMatch));
            sqlCommand.Parameters.Add(new SqlParameter("@isHedgeMatch", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isHedgeMatch));
            sqlCommand.Parameters.Add(new SqlParameter("@isInstitutionMatch", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isInstitutionMatch));
            sqlCommand.Parameters.Add(new SqlParameter("@limitPrice", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, limitPrice));
            sqlCommand.Parameters.Add(new SqlParameter("@maximumVolatility", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, maximumVolatility));
            sqlCommand.Parameters.Add(new SqlParameter("@modifiedTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, modifiedTime));
            sqlCommand.Parameters.Add(new SqlParameter("@modifiedUserId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, modifiedUserId));
            sqlCommand.Parameters.Add(new SqlParameter("@newsFreeTime", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, newsFreeTime));
            sqlCommand.Parameters.Add(new SqlParameter("@orderTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, orderTypeCode));
            sqlCommand.Parameters.Add(new SqlParameter("@priceTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, priceTypeCode));
            sqlCommand.Parameters.Add(new SqlParameter("@securityId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, securityId));
            sqlCommand.Parameters.Add(new SqlParameter("@settlementId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, settlementId));
            sqlCommand.Parameters.Add(new SqlParameter("@startTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, startTime));
            sqlCommand.Parameters.Add(new SqlParameter("@statusCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, statusCode));
            sqlCommand.Parameters.Add(new SqlParameter("@stopPrice", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, stopPrice));
            sqlCommand.Parameters.Add(new SqlParameter("@stopTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, stopTime));
            sqlCommand.Parameters.Add(new SqlParameter("@submissionTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, submissionTypeCode));
            sqlCommand.Parameters.Add(new SqlParameter("@submittedQuantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, submittedQuantity));
            sqlCommand.Parameters.Add(new SqlParameter("@submittedTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, submittedTime));
            sqlCommand.Parameters.Add(new SqlParameter("@timeInForceCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, timeInForceCode));
            sqlCommand.Parameters.Add(new SqlParameter("@timerId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, timerId));
            sqlCommand.Parameters.Add(new SqlParameter("@uploadedTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, uploadedTime));
            sqlCommand.Parameters.Add(new SqlParameter("@workingOrderId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, workingOrderRow[workingOrderTable.WorkingOrderIdColumn]));
            sqlCommand.ExecuteNonQuery();
            // Return Statements
            return workingOrderRow.WorkingOrderId;
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Update(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Update' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.WorkingOrderLock);
            Allocation.Archive(adoTransaction);
            DestinationOrder.Archive(adoTransaction);
            Match.Archive(adoTransaction);
            SourceOrder.Archive(adoTransaction);
        }
        
        /// <summary>Inserts a WorkingOrder record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Update(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            object automaticQuantity = parameters["automaticQuantity"].Value;
            object blotterId = parameters["blotterId"].Value;
            object createdTime = parameters["createdTime"].Value;
            object createdUserId = parameters["createdUserId"].Value;
            object destinationId = parameters["destinationId"].Value;
            object externalId0 = parameters["externalId0"].Value;
            object isAgencyMatch = parameters["isAgencyMatch"].Value;
            object isAutomatic = parameters["isAutomatic"].Value;
            object isAwake = parameters["isAwake"].Value;
            object isBrokerMatch = parameters["isBrokerMatch"].Value;
            object isHedgeMatch = parameters["isHedgeMatch"].Value;
            object isInstitutionMatch = parameters["isInstitutionMatch"].Value;
            object limitPrice = parameters["limitPrice"].Value;
            object maximumVolatility = parameters["maximumVolatility"].Value;
            object modifiedTime = parameters["modifiedTime"].Value;
            object modifiedUserId = parameters["modifiedUserId"].Value;
            object newsFreeTime = parameters["newsFreeTime"].Value;
            object orderTypeCode = parameters["orderTypeCode"].Value;
            object priceTypeCode = parameters["priceTypeCode"].Value;
            object securityId = parameters["securityId"].Value;
            object settlementId = parameters["settlementId"].Value;
            object startTime = parameters["startTime"].Value;
            object statusCode = parameters["statusCode"].Value;
            object stopPrice = parameters["stopPrice"].Value;
            object stopTime = parameters["stopTime"].Value;
            object submissionTypeCode = parameters["submissionTypeCode"].Value;
            object submittedQuantity = parameters["submittedQuantity"].Value;
            object submittedTime = parameters["submittedTime"].Value;
            object timeInForceCode = parameters["timeInForceCode"].Value;
            object timerId = parameters["timerId"].Value;
            object uploadedTime = parameters["uploadedTime"].Value;
            int workingOrderId = parameters["workingOrderId"];
            // Call the internal method to complete the operation.
            WorkingOrder.Update(adoTransaction, sqlTransaction, ref rowVersion, automaticQuantity, blotterId, createdTime, createdUserId, destinationId, externalId0, isAgencyMatch, isAutomatic, isAwake, isBrokerMatch, isHedgeMatch, isInstitutionMatch, limitPrice, maximumVolatility, modifiedTime, modifiedUserId, newsFreeTime, orderTypeCode, priceTypeCode, securityId, settlementId, startTime, statusCode, stopPrice, stopTime, submissionTypeCode, submittedQuantity, submittedTime, timeInForceCode, timerId, uploadedTime, workingOrderId);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Updates a WorkingOrder record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="rowVersion">The version number of the row</param>
        /// <param name="automaticQuantity">The value for the AutomaticQuantity column.</param>
        /// <param name="blotterId">The value for the BlotterId column.</param>
        /// <param name="createdTime">The value for the CreatedTime column.</param>
        /// <param name="createdUserId">The value for the CreatedUserId column.</param>
        /// <param name="destinationId">The value for the DestinationId column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="isAgencyMatch">The value for the IsAgencyMatch column.</param>
        /// <param name="isAutomatic">The value for the IsAutomatic column.</param>
        /// <param name="isAwake">The value for the IsAwake column.</param>
        /// <param name="isBrokerMatch">The value for the IsBrokerMatch column.</param>
        /// <param name="isHedgeMatch">The value for the IsHedgeMatch column.</param>
        /// <param name="isInstitutionMatch">The value for the IsInstitutionMatch column.</param>
        /// <param name="limitPrice">The value for the LimitPrice column.</param>
        /// <param name="maximumVolatility">The value for the MaximumVolatility column.</param>
        /// <param name="modifiedTime">The value for the ModifiedTime column.</param>
        /// <param name="modifiedUserId">The value for the ModifiedUserId column.</param>
        /// <param name="newsFreeTime">The value for the NewsFreeTime column.</param>
        /// <param name="orderTypeCode">The value for the OrderTypeCode column.</param>
        /// <param name="priceTypeCode">The value for the PriceTypeCode column.</param>
        /// <param name="securityId">The value for the SecurityId column.</param>
        /// <param name="settlementId">The value for the SettlementId column.</param>
        /// <param name="startTime">The value for the StartTime column.</param>
        /// <param name="statusCode">The value for the StatusCode column.</param>
        /// <param name="stopPrice">The value for the StopPrice column.</param>
        /// <param name="stopTime">The value for the StopTime column.</param>
        /// <param name="submissionTypeCode">The value for the SubmissionTypeCode column.</param>
        /// <param name="submittedQuantity">The value for the SubmittedQuantity column.</param>
        /// <param name="submittedTime">The value for the SubmittedTime column.</param>
        /// <param name="timeInForceCode">The value for the TimeInForceCode column.</param>
        /// <param name="timerId">The value for the TimerId column.</param>
        /// <param name="uploadedTime">The value for the UploadedTime column.</param>
        /// <param name="workingOrderId">The value for the WorkingOrderId column.</param>
        public static void Update(
                    AdoTransaction adoTransaction, 
                    SqlTransaction sqlTransaction, 
                    ref long rowVersion, 
                    object automaticQuantity, 
                    object blotterId, 
                    object createdTime, 
                    object createdUserId, 
                    object destinationId, 
                    object externalId0, 
                    object isAgencyMatch, 
                    object isAutomatic, 
                    object isAwake, 
                    object isBrokerMatch, 
                    object isHedgeMatch, 
                    object isInstitutionMatch, 
                    object limitPrice, 
                    object maximumVolatility, 
                    object modifiedTime, 
                    object modifiedUserId, 
                    object newsFreeTime, 
                    object orderTypeCode, 
                    object priceTypeCode, 
                    object securityId, 
                    object settlementId, 
                    object startTime, 
                    object statusCode, 
                    object stopPrice, 
                    object stopTime, 
                    object submissionTypeCode, 
                    object submittedQuantity, 
                    object submittedTime, 
                    object timeInForceCode, 
                    object timerId, 
                    object uploadedTime, 
                    int workingOrderId)
        {
            // Accessor for the WorkingOrder Table.
            ServerMarketData.WorkingOrderDataTable workingOrderTable = ServerMarketData.WorkingOrder;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.WorkingOrderRow workingOrderRow = workingOrderTable.FindByWorkingOrderId(workingOrderId);
            if ((workingOrderRow == null))
            {
                throw new Exception(string.Format("The WorkingOrder table does not have an element identified by {0}", workingOrderId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((workingOrderRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Apply Defaults
            if ((automaticQuantity == null))
            {
                automaticQuantity = workingOrderRow[workingOrderTable.AutomaticQuantityColumn];
            }
            if ((blotterId == null))
            {
                blotterId = workingOrderRow[workingOrderTable.BlotterIdColumn];
            }
            if ((createdTime == null))
            {
                createdTime = workingOrderRow[workingOrderTable.CreatedTimeColumn];
            }
            if ((createdUserId == null))
            {
                createdUserId = workingOrderRow[workingOrderTable.CreatedUserIdColumn];
            }
            if ((destinationId == null))
            {
                destinationId = workingOrderRow[workingOrderTable.DestinationIdColumn];
            }
            if ((externalId0 == null))
            {
                externalId0 = workingOrderRow[workingOrderTable.ExternalId0Column];
            }
            if ((isAgencyMatch == null))
            {
                isAgencyMatch = workingOrderRow[workingOrderTable.IsAgencyMatchColumn];
            }
            if ((isAutomatic == null))
            {
                isAutomatic = workingOrderRow[workingOrderTable.IsAutomaticColumn];
            }
            if ((isAwake == null))
            {
                isAwake = workingOrderRow[workingOrderTable.IsAwakeColumn];
            }
            if ((isBrokerMatch == null))
            {
                isBrokerMatch = workingOrderRow[workingOrderTable.IsBrokerMatchColumn];
            }
            if ((isHedgeMatch == null))
            {
                isHedgeMatch = workingOrderRow[workingOrderTable.IsHedgeMatchColumn];
            }
            if ((isInstitutionMatch == null))
            {
                isInstitutionMatch = workingOrderRow[workingOrderTable.IsInstitutionMatchColumn];
            }
            if ((limitPrice == null))
            {
                limitPrice = workingOrderRow[workingOrderTable.LimitPriceColumn];
            }
            if ((maximumVolatility == null))
            {
                maximumVolatility = workingOrderRow[workingOrderTable.MaximumVolatilityColumn];
            }
            if ((modifiedTime == null))
            {
                modifiedTime = workingOrderRow[workingOrderTable.ModifiedTimeColumn];
            }
            if ((modifiedUserId == null))
            {
                modifiedUserId = workingOrderRow[workingOrderTable.ModifiedUserIdColumn];
            }
            if ((newsFreeTime == null))
            {
                newsFreeTime = workingOrderRow[workingOrderTable.NewsFreeTimeColumn];
            }
            if ((orderTypeCode == null))
            {
                orderTypeCode = workingOrderRow[workingOrderTable.OrderTypeCodeColumn];
            }
            if ((priceTypeCode == null))
            {
                priceTypeCode = workingOrderRow[workingOrderTable.PriceTypeCodeColumn];
            }
            if ((securityId == null))
            {
                securityId = workingOrderRow[workingOrderTable.SecurityIdColumn];
            }
            if ((settlementId == null))
            {
                settlementId = workingOrderRow[workingOrderTable.SettlementIdColumn];
            }
            if ((startTime == null))
            {
                startTime = workingOrderRow[workingOrderTable.StartTimeColumn];
            }
            if ((statusCode == null))
            {
                statusCode = workingOrderRow[workingOrderTable.StatusCodeColumn];
            }
            if ((stopPrice == null))
            {
                stopPrice = workingOrderRow[workingOrderTable.StopPriceColumn];
            }
            if ((stopTime == null))
            {
                stopTime = workingOrderRow[workingOrderTable.StopTimeColumn];
            }
            if ((submissionTypeCode == null))
            {
                submissionTypeCode = workingOrderRow[workingOrderTable.SubmissionTypeCodeColumn];
            }
            if ((submittedQuantity == null))
            {
                submittedQuantity = workingOrderRow[workingOrderTable.SubmittedQuantityColumn];
            }
            if ((submittedTime == null))
            {
                submittedTime = workingOrderRow[workingOrderTable.SubmittedTimeColumn];
            }
            if ((timeInForceCode == null))
            {
                timeInForceCode = workingOrderRow[workingOrderTable.TimeInForceCodeColumn];
            }
            if ((timerId == null))
            {
                timerId = workingOrderRow[workingOrderTable.TimerIdColumn];
            }
            if ((uploadedTime == null))
            {
                uploadedTime = workingOrderRow[workingOrderTable.UploadedTimeColumn];
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Update the record in the ADO database.
            workingOrderRow[workingOrderTable.RowVersionColumn] = rowVersion;
            workingOrderRow[workingOrderTable.AutomaticQuantityColumn] = automaticQuantity;
            workingOrderRow[workingOrderTable.BlotterIdColumn] = blotterId;
            workingOrderRow[workingOrderTable.CreatedTimeColumn] = createdTime;
            workingOrderRow[workingOrderTable.CreatedUserIdColumn] = createdUserId;
            workingOrderRow[workingOrderTable.DestinationIdColumn] = destinationId;
            workingOrderRow[workingOrderTable.ExternalId0Column] = externalId0;
            workingOrderRow[workingOrderTable.IsAgencyMatchColumn] = isAgencyMatch;
            workingOrderRow[workingOrderTable.IsAutomaticColumn] = isAutomatic;
            workingOrderRow[workingOrderTable.IsAwakeColumn] = isAwake;
            workingOrderRow[workingOrderTable.IsBrokerMatchColumn] = isBrokerMatch;
            workingOrderRow[workingOrderTable.IsHedgeMatchColumn] = isHedgeMatch;
            workingOrderRow[workingOrderTable.IsInstitutionMatchColumn] = isInstitutionMatch;
            workingOrderRow[workingOrderTable.LimitPriceColumn] = limitPrice;
            workingOrderRow[workingOrderTable.MaximumVolatilityColumn] = maximumVolatility;
            workingOrderRow[workingOrderTable.ModifiedTimeColumn] = modifiedTime;
            workingOrderRow[workingOrderTable.ModifiedUserIdColumn] = modifiedUserId;
            workingOrderRow[workingOrderTable.NewsFreeTimeColumn] = newsFreeTime;
            workingOrderRow[workingOrderTable.OrderTypeCodeColumn] = orderTypeCode;
            workingOrderRow[workingOrderTable.PriceTypeCodeColumn] = priceTypeCode;
            workingOrderRow[workingOrderTable.SecurityIdColumn] = securityId;
            workingOrderRow[workingOrderTable.SettlementIdColumn] = settlementId;
            workingOrderRow[workingOrderTable.StartTimeColumn] = startTime;
            workingOrderRow[workingOrderTable.StatusCodeColumn] = statusCode;
            workingOrderRow[workingOrderTable.StopPriceColumn] = stopPrice;
            workingOrderRow[workingOrderTable.StopTimeColumn] = stopTime;
            workingOrderRow[workingOrderTable.SubmissionTypeCodeColumn] = submissionTypeCode;
            workingOrderRow[workingOrderTable.SubmittedQuantityColumn] = submittedQuantity;
            workingOrderRow[workingOrderTable.SubmittedTimeColumn] = submittedTime;
            workingOrderRow[workingOrderTable.TimeInForceCodeColumn] = timeInForceCode;
            workingOrderRow[workingOrderTable.TimerIdColumn] = timerId;
            workingOrderRow[workingOrderTable.UploadedTimeColumn] = uploadedTime;
            adoTransaction.DataRows.Add(workingOrderRow);
            // Update the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand(@"update ""WorkingOrder"" set ""RowVersion""=@rowVersion,""AutomaticQuantity""=@automaticQuantity,""BlotterId""=@blotterId,""CreatedTime""=@createdTime,""CreatedUserId""=@createdUserId,""DestinationId""=@destinationId,""ExternalId0""=@externalId0,""IsAgencyMatch""=@isAgencyMatch,""IsAutomatic""=@isAutomatic,""IsAwake""=@isAwake,""IsBrokerMatch""=@isBrokerMatch,""IsHedgeMatch""=@isHedgeMatch,""IsInstitutionMatch""=@isInstitutionMatch,""LimitPrice""=@limitPrice,""MaximumVolatility""=@maximumVolatility,""ModifiedTime""=@modifiedTime,""ModifiedUserId""=@modifiedUserId,""NewsFreeTime""=@newsFreeTime,""OrderTypeCode""=@orderTypeCode,""PriceTypeCode""=@priceTypeCode,""SecurityId""=@securityId,""SettlementId""=@settlementId,""StartTime""=@startTime,""StatusCode""=@statusCode,""StopPrice""=@stopPrice,""StopTime""=@stopTime,""SubmissionTypeCode""=@submissionTypeCode,""SubmittedQuantity""=@submittedQuantity,""SubmittedTime""=@submittedTime,""TimeInForceCode""=@timeInForceCode,""TimerId""=@timerId,""UploadedTime""=@uploadedTime where ""WorkingOrderId""=@workingOrderId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@automaticQuantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, automaticQuantity));
            sqlCommand.Parameters.Add(new SqlParameter("@blotterId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, blotterId));
            sqlCommand.Parameters.Add(new SqlParameter("@createdTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, createdTime));
            sqlCommand.Parameters.Add(new SqlParameter("@createdUserId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, createdUserId));
            sqlCommand.Parameters.Add(new SqlParameter("@destinationId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, destinationId));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@isAgencyMatch", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isAgencyMatch));
            sqlCommand.Parameters.Add(new SqlParameter("@isAutomatic", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isAutomatic));
            sqlCommand.Parameters.Add(new SqlParameter("@isAwake", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isAwake));
            sqlCommand.Parameters.Add(new SqlParameter("@isBrokerMatch", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isBrokerMatch));
            sqlCommand.Parameters.Add(new SqlParameter("@isHedgeMatch", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isHedgeMatch));
            sqlCommand.Parameters.Add(new SqlParameter("@isInstitutionMatch", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isInstitutionMatch));
            sqlCommand.Parameters.Add(new SqlParameter("@limitPrice", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, limitPrice));
            sqlCommand.Parameters.Add(new SqlParameter("@maximumVolatility", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, maximumVolatility));
            sqlCommand.Parameters.Add(new SqlParameter("@modifiedTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, modifiedTime));
            sqlCommand.Parameters.Add(new SqlParameter("@modifiedUserId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, modifiedUserId));
            sqlCommand.Parameters.Add(new SqlParameter("@newsFreeTime", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, newsFreeTime));
            sqlCommand.Parameters.Add(new SqlParameter("@orderTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, orderTypeCode));
            sqlCommand.Parameters.Add(new SqlParameter("@priceTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, priceTypeCode));
            sqlCommand.Parameters.Add(new SqlParameter("@securityId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, securityId));
            sqlCommand.Parameters.Add(new SqlParameter("@settlementId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, settlementId));
            sqlCommand.Parameters.Add(new SqlParameter("@startTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, startTime));
            sqlCommand.Parameters.Add(new SqlParameter("@statusCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, statusCode));
            sqlCommand.Parameters.Add(new SqlParameter("@stopPrice", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, stopPrice));
            sqlCommand.Parameters.Add(new SqlParameter("@stopTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, stopTime));
            sqlCommand.Parameters.Add(new SqlParameter("@submissionTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, submissionTypeCode));
            sqlCommand.Parameters.Add(new SqlParameter("@submittedQuantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, submittedQuantity));
            sqlCommand.Parameters.Add(new SqlParameter("@submittedTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, submittedTime));
            sqlCommand.Parameters.Add(new SqlParameter("@timeInForceCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, timeInForceCode));
            sqlCommand.Parameters.Add(new SqlParameter("@timerId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, timerId));
            sqlCommand.Parameters.Add(new SqlParameter("@uploadedTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, uploadedTime));
            sqlCommand.Parameters.Add(new SqlParameter("@workingOrderId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, workingOrderId));
            // Update the record in the SQL database.
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Delete(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Delete' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.WorkingOrderLock);
            Allocation.Archive(adoTransaction);
            DestinationOrder.Archive(adoTransaction);
            Match.Archive(adoTransaction);
            SourceOrder.Archive(adoTransaction);
        }
        
        /// <summary>Inserts a WorkingOrder record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Delete(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int workingOrderId = parameters["workingOrderId"];
            // Call the internal method to complete the operation.
            WorkingOrder.Delete(adoTransaction, sqlTransaction, rowVersion, workingOrderId);
        }
        
        /// <summary>Deletes a WorkingOrder record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="workingOrderId">The value for the WorkingOrderId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Delete(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int workingOrderId)
        {
            // Accessor for the WorkingOrder Table.
            ServerMarketData.WorkingOrderDataTable workingOrderTable = ServerMarketData.WorkingOrder;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.WorkingOrderRow workingOrderRow = workingOrderTable.FindByWorkingOrderId(workingOrderId);
            if ((workingOrderRow == null))
            {
                throw new Exception(string.Format("The WorkingOrder table does not have an element identified by {0}", workingOrderId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((workingOrderRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Delete the child records.
            for (int index = 0; (index < workingOrderRow.GetAllocationRows().Length); index = (index + 1))
            {
                ServerMarketData.AllocationRow childAllocationRow = workingOrderRow.GetAllocationRows()[index];
                Allocation.Delete(adoTransaction, sqlTransaction, childAllocationRow.RowVersion, childAllocationRow.AllocationId);
            }
            for (int index = 0; (index < workingOrderRow.GetDestinationOrderRows().Length); index = (index + 1))
            {
                ServerMarketData.DestinationOrderRow childDestinationOrderRow = workingOrderRow.GetDestinationOrderRows()[index];
                DestinationOrder.Delete(adoTransaction, sqlTransaction, childDestinationOrderRow.RowVersion, childDestinationOrderRow.DestinationOrderId);
            }
            for (int index = 0; (index < workingOrderRow.GetMatchRows().Length); index = (index + 1))
            {
                ServerMarketData.MatchRow childMatchRow = workingOrderRow.GetMatchRows()[index];
                Match.Delete(adoTransaction, sqlTransaction, childMatchRow.RowVersion, childMatchRow.MatchId);
            }
            for (int index = 0; (index < workingOrderRow.GetSourceOrderRows().Length); index = (index + 1))
            {
                ServerMarketData.SourceOrderRow childSourceOrderRow = workingOrderRow.GetSourceOrderRows()[index];
                SourceOrder.Delete(adoTransaction, sqlTransaction, childSourceOrderRow.RowVersion, childSourceOrderRow.SourceOrderId);
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Delete the record in the ADO database.
            workingOrderRow[workingOrderTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(workingOrderRow);
            workingOrderRow.Delete();
            // Delete the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"WorkingOrder\" set \"IsDeleted\" = 1 where \"WorkingOrderId\"=@workingOrderId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@workingOrderId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, workingOrderId));
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Archive(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Archive' operation.
            adoTransaction.LockRequests.AddWriterLock(ServerMarketData.WorkingOrderLock);
            Allocation.Archive(adoTransaction);
            DestinationOrder.Archive(adoTransaction);
            Match.Archive(adoTransaction);
            SourceOrder.Archive(adoTransaction);
        }
        
        /// <summary>Inserts a WorkingOrder record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Archive(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int workingOrderId = parameters["workingOrderId"];
            // Call the internal method to complete the operation.
            WorkingOrder.Archive(adoTransaction, sqlTransaction, rowVersion, workingOrderId);
        }
        
        /// <summary>Archives a WorkingOrder record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="workingOrderId">The value for the WorkingOrderId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Archive(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int workingOrderId)
        {
            // Accessor for the WorkingOrder Table.
            ServerMarketData.WorkingOrderDataTable workingOrderTable = ServerMarketData.WorkingOrder;
            // Rule #1: Make sure the record exists before updating it.
            ServerMarketData.WorkingOrderRow workingOrderRow = workingOrderTable.FindByWorkingOrderId(workingOrderId);
            if ((workingOrderRow == null))
            {
                throw new Exception(string.Format("The WorkingOrder table does not have an element identified by {0}", workingOrderId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((workingOrderRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Archive the child records.
            for (int index = 0; (index < workingOrderRow.GetAllocationRows().Length); index = (index + 1))
            {
                ServerMarketData.AllocationRow childAllocationRow = workingOrderRow.GetAllocationRows()[index];
                Allocation.Archive(adoTransaction, sqlTransaction, childAllocationRow.RowVersion, childAllocationRow.AllocationId);
            }
            for (int index = 0; (index < workingOrderRow.GetDestinationOrderRows().Length); index = (index + 1))
            {
                ServerMarketData.DestinationOrderRow childDestinationOrderRow = workingOrderRow.GetDestinationOrderRows()[index];
                DestinationOrder.Archive(adoTransaction, sqlTransaction, childDestinationOrderRow.RowVersion, childDestinationOrderRow.DestinationOrderId);
            }
            for (int index = 0; (index < workingOrderRow.GetMatchRows().Length); index = (index + 1))
            {
                ServerMarketData.MatchRow childMatchRow = workingOrderRow.GetMatchRows()[index];
                Match.Archive(adoTransaction, sqlTransaction, childMatchRow.RowVersion, childMatchRow.MatchId);
            }
            for (int index = 0; (index < workingOrderRow.GetSourceOrderRows().Length); index = (index + 1))
            {
                ServerMarketData.SourceOrderRow childSourceOrderRow = workingOrderRow.GetSourceOrderRows()[index];
                SourceOrder.Archive(adoTransaction, sqlTransaction, childSourceOrderRow.RowVersion, childSourceOrderRow.SourceOrderId);
            }
            // Increment the row version
            rowVersion = ServerMarketData.RowVersion.Increment();
            // Delete the record in the ADO database.
            workingOrderRow[workingOrderTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(workingOrderRow);
            workingOrderRow.Delete();
            // Archive the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"WorkingOrder\" set \"IsArchived\" = 1 where \"WorkingOrderId\"=@workingOrderId" +
                    "");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@workingOrderId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, workingOrderId));
            sqlCommand.ExecuteNonQuery();
        }
    }
}
