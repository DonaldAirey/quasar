//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Guardian.External
{
    using MarkThree.Guardian;
    using MarkThree.Guardian.Server;
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Data.SqlClient;
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    public class Holiday
    {
        
        /// This value is used to map the object to a persistent storage device.  The parameters for the storage
        /// are found in the configuration file for this service.
        public static string PersistentStore = "Guardian";
        
        /// This member provides access to the in-memory database.
        private static ServerMarketData serverMarketData = new ServerMarketData();
        
        /// This is an array of indices used to find a record based on an external identifier.
        public static System.Data.DataView[] externalKeyArray;
        
        /// <summary>Initializes the static elements of an Object.</summary>
        static Holiday()
        {
            // The table must be locked before the indices can be read into an accelerator array.
            ServerMarketData.HolidayLock.AcquireReaderLock(System.Threading.Timeout.Infinite);
            // Accessor for the Holiday Table.
            ServerMarketData.HolidayDataTable holidayTable = ServerMarketData.Holiday;
            // This does an indirect lookup operation using the views created for the ExternalId columns.  Take the index of the user
            // identifier column calcualted above and use it to find a record containing the external identifier.
            Holiday.externalKeyArray = new DataView[] {
                    holidayTable.KeyHolidayExternalId0,
                    holidayTable.KeyHolidayExternalId1};
            // The table must be released after the array is constructed.
            ServerMarketData.HolidayLock.ReleaseReaderLock();
        }
        
        /// <summary>Calculates which index to uses when searching for external identifiers.</summary>
        /// <param name="configurationId">Specified which mappings (user id columns) to use when looking up external identifiers.</param>
        /// <param name="parameterId">The name of the parameter as specified in the configuration table.</param>
        /// <returns>An index into the array of keys to search for an external identifier.</returns>
        public static int GetExternalKeyIndex(object configurationId, string parameterId)
        {
            // Translate the configurationId and the predefined parameter name into an index into the array of user ids.  The index
            // is where we expect to find the identifier.  That is, an index of 1 will guide the lookup logic to use the external
            // identifiers found in the 'ExternalId1' column.
            int externalKeyIndex = 0;
            if ((configurationId != null))
            {
                // Attempt to find a external column specification for the given configuration and parameter.  This record tells us
                // which column to use in the array of external columns.
                ServerMarketData.ConfigurationRow configurationRow = ServerMarketData.Configuration.FindByConfigurationIdParameterId(((string)(configurationId)), parameterId);
                if ((configurationRow != null))
                {
                    externalKeyIndex = configurationRow.ColumnIndex;
                }
            }
            // This is the index into the array of keys to be used when searching for an external identifier.
            return externalKeyIndex;
        }
        
        /// <summary>Finds a a Holiday record using a configuration and an external identifier.</summary>
        /// <param name="configurationId">Specified which mappings (user id columns) to use when looking up external identifiers.</param>
        /// <param name="parameterId">The name of the parameter as specified in the configuration table.</param>
        /// <param name="externalId">The external (user supplied) identifier for the record.</param>
        public static int FindKey(object configurationId, string parameterId, object externalId)
        {
            // A missing key will never match a column.
            if ((externalId == null))
            {
                return int.MinValue;
            }
            // Accessor for the Holiday Table.
            ServerMarketData.HolidayDataTable holidayTable = ServerMarketData.Holiday;
            // Look for the record using the external identifier.  The configuration selected the key to use, which effectively
            // selected the external id column to use for the search.  If a record is found in the view, a translation still needs
            // to be made back to the original table before an index to the record can be returned to the caller.
            int externalKeyIndex = Holiday.GetExternalKeyIndex(configurationId, parameterId);
            System.Data.DataView externalKeyView = Holiday.externalKeyArray[externalKeyIndex];
            int recordIndex = externalKeyView.Find(new object[] {
                        externalId});
            if ((recordIndex == -1))
            {
                return int.MinValue;
            }
            return ((int)(externalKeyView[recordIndex].Row[holidayTable.HolidayIdColumn]));
        }
        
        /// <summary>Finds a a Holiday record using a configuration and an external identifier.</summary>
        /// <param name="configurationId">Specified which mappings (user id columns) to use when looking up external identifiers.</param>
        /// <param name="externalId">The external identifier for the record.</param>
        public static int FindRequiredKey(object configurationId, string parameterId, string externalId)
        {
            // Look up the internal identifier using the configuration to select the ExternalId column and the external identifier to identify the record
            int internalId = Holiday.FindKey(configurationId, parameterId, externalId);
            if ((internalId == int.MinValue))
            {
                throw new Exception(string.Format("The Holiday table does not have a record identified by \'{0}\'", externalId));
            }
            // Return the internal identifier.
            return internalId;
        }
        
        /// <summary>Finds a a Holiday record using a configuration and an external identifier.</summary>
        /// <param name="configurationId">Specified which mappings (user id columns) to use when looking up external identifiers.</param>
        /// <param name="externalId">The external (user supplied) identifier for the record.</param>
        public static object FindOptionalKey(object configurationId, string parameterId, object externalId)
        {
            // Look up the internal identifier using the the configuration to specify which ExternalId column to use as an index.
            object internalId = null;
            if ((externalId != null))
            {
                internalId = Holiday.FindKey(configurationId, parameterId, ((string)(externalId)));
                if ((((int)(internalId)) == int.MinValue))
                {
                    throw new Exception(string.Format("The Holiday table does not have a record identified by \'{0}\'", externalId));
                }
            }
            // Return the internal identifier.
            return internalId;
        }
        
        /// <summary>Collects the table lock request(s) for an 'Load' operation</summary>
        /// <param name="adoTransaction">A collection of table locks required for this operation</param>
        public static void Load(AdoTransaction adoTransaction)
        {
            // Call the internal methods to lock the tables required for an insert or update operation.
            MarkThree.Guardian.Core.Holiday.Insert(adoTransaction);
            MarkThree.Guardian.Core.Holiday.Update(adoTransaction);
            // These table lock(s) are required for the 'Load' operation.
            adoTransaction.LockRequests.AddReaderLock(ServerMarketData.HolidayLock);
            adoTransaction.LockRequests.AddReaderLock(ServerMarketData.ConfigurationLock);
            adoTransaction.LockRequests.AddReaderLock(ServerMarketData.CountryLock);
            adoTransaction.LockRequests.AddReaderLock(ServerMarketData.HolidayTypeLock);
        }
        
        /// <summary>Loads a Holiday record using Metadata Parameters.</summary>
        /// <param name="transaction">Contains the parameters and exceptions for this command.</param>
        public static void Load(ParameterList parameters)
        {
            // Accessor for the Holiday Table.
            ServerMarketData.HolidayDataTable holidayTable = ServerMarketData.Holiday;
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object configurationId = parameters["configurationId"].Value;
            string externalCountryId = parameters["countryId"];
            System.DateTime date = parameters["date"];
            object externalId0 = parameters["externalId0"].Value;
            object externalId1 = parameters["externalId1"].Value;
            object externalHolidayId = parameters["holidayId"].Value;
            string externalHolidayTypeCode = parameters["holidayTypeCode"];
            // The row versioning is largely disabled for external operations.  The value is returned to the caller in the
            // event it's needed for operations within the batch.
            long rowVersion = long.MinValue;
            // Resolve External Identifiers
            int countryId = Country.FindRequiredKey(configurationId, "countryId", externalCountryId);
            int holidayId = Holiday.FindKey(configurationId, "holidayId", externalHolidayId);
            int holidayTypeCode = HolidayType.FindRequiredKey(configurationId, "holidayTypeCode", externalHolidayTypeCode);
            // The load operation will create a record if it doesn't exist, or update an existing record.  The external
            // identifier is used to determine if a record exists with the same key.
            if ((holidayId == int.MinValue))
            {
                // Populate the 'externalId' varaibles so that the external identifier can be used to find the row when an
                // external method is called with the same 'configurationId' parameter.
                int externalKeyIndex = Holiday.GetExternalKeyIndex(configurationId, "holidayId");
                object[] externalIdArray = new object[2];
                externalIdArray[externalKeyIndex] = externalHolidayId;
                externalId0 = externalIdArray[0];
                externalId1 = externalIdArray[1];
                // Call the internal method to complete the operation.
                MarkThree.Guardian.Core.Holiday.Insert(adoTransaction, sqlTransaction, ref rowVersion, countryId, date, externalId0, externalId1, holidayTypeCode);
            }
            else
            {
                // While the optimistic concurrency checking is disabled for the external methods, the internal methods
                // still need to perform the check.  This ncurrency checking logic by finding the current row version to be
                // will bypass the coused when the internal method is called.
                ServerMarketData.HolidayRow holidayRow = holidayTable.FindByHolidayId(holidayId);
                rowVersion = ((long)(holidayRow[holidayTable.RowVersionColumn]));
                // Call the internal method to complete the operation.
                MarkThree.Guardian.Core.Holiday.Update(adoTransaction, sqlTransaction, ref rowVersion, countryId, date, externalId0, externalId1, holidayId, holidayTypeCode);
            }
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Collects the table lock request(s) for an 'Update' operation</summary>
        /// <param name="adoTransaction">A collection of table locks required for this operation</param>
        public static void Update(AdoTransaction adoTransaction)
        {
            // Call the internal methods to lock the tables required for an insert or update operation.
            MarkThree.Guardian.Core.Holiday.Insert(adoTransaction);
            MarkThree.Guardian.Core.Holiday.Update(adoTransaction);
            // These table lock(s) are required for the 'Update' operation.
            adoTransaction.LockRequests.AddReaderLock(ServerMarketData.HolidayLock);
            adoTransaction.LockRequests.AddReaderLock(ServerMarketData.ConfigurationLock);
            adoTransaction.LockRequests.AddReaderLock(ServerMarketData.CountryLock);
            adoTransaction.LockRequests.AddReaderLock(ServerMarketData.HolidayTypeLock);
        }
        
        /// <summary>Updates a Holiday record using Metadata Parameters.</summary>
        /// <param name="transaction">Contains the parameters and exceptions for this command.</param>
        public static void Update(ParameterList parameters)
        {
            // Accessor for the Holiday Table.
            ServerMarketData.HolidayDataTable holidayTable = ServerMarketData.Holiday;
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object configurationId = parameters["configurationId"].Value;
            object externalCountryId = parameters["countryId"].Value;
            object date = parameters["date"].Value;
            string externalHolidayId = ((string)(parameters["holidayId"]));
            object externalHolidayTypeCode = parameters["holidayTypeCode"].Value;
            // The row versioning is largely disabled for external operations.
            long rowVersion = long.MinValue;
            // Resolve External Identifiers
            object countryId = Country.FindOptionalKey(configurationId, "countryId", externalCountryId);
            int holidayId = Holiday.FindRequiredKey(configurationId, "holidayId", externalHolidayId);
            object holidayTypeCode = HolidayType.FindOptionalKey(configurationId, "holidayTypeCode", externalHolidayTypeCode);
            // While the optimistic concurrency checking is disabled for the external methods, the internal methods
            // still need to perform the check.  This ncurrency checking logic by finding the current row version to be
            // will bypass the coused when the internal method is called.
            ServerMarketData.HolidayRow holidayRow = holidayTable.FindByHolidayId(holidayId);
            rowVersion = ((long)(holidayRow[holidayTable.RowVersionColumn]));
            // Call the internal method to complete the operation.
            MarkThree.Guardian.Core.Holiday.Update(adoTransaction, sqlTransaction, ref rowVersion, countryId, date, null, null, holidayId, holidayTypeCode);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Collects the table lock request(s) for an 'Delete' operation</summary>
        /// <param name="adoTransaction">A collection of table locks required for this operation</param>
        public static void Delete(AdoTransaction adoTransaction)
        {
            // Call the internal methods to lock the tables required for an insert or update operation.
            MarkThree.Guardian.Core.Holiday.Delete(adoTransaction);
            // These table lock(s) are required for the 'Delete' operation.
            adoTransaction.LockRequests.AddReaderLock(ServerMarketData.HolidayLock);
            adoTransaction.LockRequests.AddReaderLock(ServerMarketData.ConfigurationLock);
        }
        
        /// <summary>Deletes a Holiday record using Metadata Parameters.</summary>
        /// <param name="transaction">Contains the parameters and exceptions for this command.</param>
        public static void Delete(ParameterList parameters)
        {
            // Accessor for the Holiday Table.
            ServerMarketData.HolidayDataTable holidayTable = ServerMarketData.Holiday;
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object configurationId = parameters["configurationId"].Value;
            string externalHolidayId = parameters["holidayId"];
            // The row versioning is largely disabled for external operations.
            long rowVersion = long.MinValue;
            // Find the internal identifier using the primar key elements.
            // identifier is used to determine if a record exists with the same key.
            int holidayId = Holiday.FindRequiredKey(configurationId, "holidayId", externalHolidayId);
            // While the optimistic concurrency checking is disabled for the external methods, the internal methods
            // still need to perform the check.  This ncurrency checking logic by finding the current row version to be
            // will bypass the coused when the internal method is called.
            ServerMarketData.HolidayRow holidayRow = holidayTable.FindByHolidayId(holidayId);
            rowVersion = ((long)(holidayRow[holidayTable.RowVersionColumn]));
            // Call the internal method to complete the operation.
            MarkThree.Guardian.Core.Holiday.Delete(adoTransaction, sqlTransaction, rowVersion, holidayId);
        }
        
        /// <summary>Collects the table lock request(s) for an 'Archive' operation</summary>
        /// <param name="adoTransaction">A collection of table locks required for this operation</param>
        public static void Archive(AdoTransaction adoTransaction)
        {
            // Call the internal methods to lock the tables required for an insert or update operation.
            MarkThree.Guardian.Core.Holiday.Archive(adoTransaction);
            // These table lock(s) are required for the 'Archive' operation.
            adoTransaction.LockRequests.AddReaderLock(ServerMarketData.HolidayLock);
            adoTransaction.LockRequests.AddReaderLock(ServerMarketData.ConfigurationLock);
        }
        
        /// <summary>Archives a Holiday record using Metadata Parameters.</summary>
        /// <param name="transaction">Contains the parameters and exceptions for this command.</param>
        public static void Archive(ParameterList parameters)
        {
            // Accessor for the Holiday Table.
            ServerMarketData.HolidayDataTable holidayTable = ServerMarketData.Holiday;
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object configurationId = parameters["configurationId"].Value;
            string externalHolidayId = parameters["holidayId"];
            // The row versioning is largely disabled for external operations.
            long rowVersion = long.MinValue;
            // Find the internal identifier using the primar key elements.
            // identifier is used to determine if a record exists with the same key.
            int holidayId = Holiday.FindRequiredKey(configurationId, "holidayId", externalHolidayId);
            // While the optimistic concurrency checking is disabled for the external methods, the internal methods
            // still need to perform the check.  This ncurrency checking logic by finding the current row version to be
            // will bypass the coused when the internal method is called.
            ServerMarketData.HolidayRow holidayRow = holidayTable.FindByHolidayId(holidayId);
            rowVersion = ((long)(holidayRow[holidayTable.RowVersionColumn]));
            // Call the internal method to complete the operation.
            MarkThree.Guardian.Core.Holiday.Archive(adoTransaction, sqlTransaction, rowVersion, holidayId);
        }
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
