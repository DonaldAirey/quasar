//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Guardian
{
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Xml;
    using System.Threading;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSetMarket : System.ComponentModel.Component
    {
        
        private static DataSet dataSet;
        
        private static TableLockCollection tableLockCollection;
        
        private static AccountBaseDataTable tableAccountBase;
        
        private static TableLock lockAccountBase;
        
        private static AccountDataTable tableAccount;
        
        private static TableLock lockAccount;
        
        private static AccountGroupDataTable tableAccountGroup;
        
        private static TableLock lockAccountGroup;
        
        private static AllocationDataTable tableAllocation;
        
        private static TableLock lockAllocation;
        
        private static BlotterDataTable tableBlotter;
        
        private static TableLock lockBlotter;
        
        private static BranchDataTable tableBranch;
        
        private static TableLock lockBranch;
        
        private static BrokerDataTable tableBroker;
        
        private static TableLock lockBroker;
        
        private static BrokerAccountDataTable tableBrokerAccount;
        
        private static TableLock lockBrokerAccount;
        
        private static ClearingBrokerDataTable tableClearingBroker;
        
        private static TableLock lockClearingBroker;
        
        private static ComplianceOfficerDataTable tableComplianceOfficer;
        
        private static TableLock lockComplianceOfficer;
        
        private static ConditionDataTable tableCondition;
        
        private static TableLock lockCondition;
        
        private static ConfigurationDataTable tableConfiguration;
        
        private static TableLock lockConfiguration;
        
        private static CountryDataTable tableCountry;
        
        private static TableLock lockCountry;
        
        private static CurrencyDataTable tableCurrency;
        
        private static TableLock lockCurrency;
        
        private static DebtDataTable tableDebt;
        
        private static TableLock lockDebt;
        
        private static DestinationDataTable tableDestination;
        
        private static TableLock lockDestination;
        
        private static DestinationOrderDataTable tableDestinationOrder;
        
        private static TableLock lockDestinationOrder;
        
        private static EquityDataTable tableEquity;
        
        private static TableLock lockEquity;
        
        private static ExchangeDataTable tableExchange;
        
        private static TableLock lockExchange;
        
        private static ExecutionDataTable tableExecution;
        
        private static TableLock lockExecution;
        
        private static FixMessageDataTable tableFixMessage;
        
        private static TableLock lockFixMessage;
        
        private static FolderDataTable tableFolder;
        
        private static TableLock lockFolder;
        
        private static HolidayDataTable tableHoliday;
        
        private static TableLock lockHoliday;
        
        private static HolidayTypeDataTable tableHolidayType;
        
        private static TableLock lockHolidayType;
        
        private static ImageDataTable tableImage;
        
        private static TableLock lockImage;
        
        private static InstitutionDataTable tableInstitution;
        
        private static TableLock lockInstitution;
        
        private static IssuerDataTable tableIssuer;
        
        private static TableLock lockIssuer;
        
        private static LotHandlingDataTable tableLotHandling;
        
        private static TableLock lockLotHandling;
        
        private static MatchDataTable tableMatch;
        
        private static TableLock lockMatch;
        
        private static NegotiationDataTable tableNegotiation;
        
        private static TableLock lockNegotiation;
        
        private static ObjectDataTable tableObject;
        
        private static TableLock lockObject;
        
        private static ObjectTreeDataTable tableObjectTree;
        
        private static TableLock lockObjectTree;
        
        private static OrderTypeDataTable tableOrderType;
        
        private static TableLock lockOrderType;
        
        private static PartyTypeDataTable tablePartyType;
        
        private static TableLock lockPartyType;
        
        private static PositionDataTable tablePosition;
        
        private static TableLock lockPosition;
        
        private static PositionTypeDataTable tablePositionType;
        
        private static TableLock lockPositionType;
        
        private static PriceDataTable tablePrice;
        
        private static TableLock lockPrice;
        
        private static PriceTypeDataTable tablePriceType;
        
        private static TableLock lockPriceType;
        
        private static PropertyDataTable tableProperty;
        
        private static TableLock lockProperty;
        
        private static ProvinceDataTable tableProvince;
        
        private static TableLock lockProvince;
        
        private static SecurityDataTable tableSecurity;
        
        private static TableLock lockSecurity;
        
        private static StateDataTable tableState;
        
        private static TableLock lockState;
        
        private static SourceDataTable tableSource;
        
        private static TableLock lockSource;
        
        private static SourceOrderDataTable tableSourceOrder;
        
        private static TableLock lockSourceOrder;
        
        private static StatusDataTable tableStatus;
        
        private static TableLock lockStatus;
        
        private static StylesheetDataTable tableStylesheet;
        
        private static TableLock lockStylesheet;
        
        private static StylesheetTypeDataTable tableStylesheetType;
        
        private static TableLock lockStylesheetType;
        
        private static SubmissionTypeDataTable tableSubmissionType;
        
        private static TableLock lockSubmissionType;
        
        private static SystemFolderDataTable tableSystemFolder;
        
        private static TableLock lockSystemFolder;
        
        private static TaxLotDataTable tableTaxLot;
        
        private static TableLock lockTaxLot;
        
        private static TimeInForceDataTable tableTimeInForce;
        
        private static TableLock lockTimeInForce;
        
        private static TimerDataTable tableTimer;
        
        private static TableLock lockTimer;
        
        private static TraderDataTable tableTrader;
        
        private static TableLock lockTrader;
        
        private static TraderVolumeSettingDataTable tableTraderVolumeSetting;
        
        private static TableLock lockTraderVolumeSetting;
        
        private static TypeDataTable tableType;
        
        private static TableLock lockType;
        
        private static UserDataTable tableUser;
        
        private static TableLock lockUser;
        
        private static VolumeCategoryDataTable tableVolumeCategory;
        
        private static TableLock lockVolumeCategory;
        
        private static WorkingOrderDataTable tableWorkingOrder;
        
        private static TableLock lockWorkingOrder;
        
        private static Relation relationAccountAllocation;
        
        private static Relation relationAccountBaseAccount;
        
        private static Relation relationAccountBaseAccountGroup;
        
        private static Relation relationAccountPosition;
        
        private static Relation relationAccountTaxLot;
        
        private static Relation relationBlotterBranch;
        
        private static Relation relationBlotterSource;
        
        private static Relation relationBlotterTrader;
        
        private static Relation relationBlotterWorkingOrder;
        
        private static Relation relationBrokerAccountExecution;
        
        private static Relation relationBrokerExecution;
        
        private static Relation relationBrokerBrokerAccount;
        
        private static Relation relationBrokerClearingBroker;
        
        private static Relation relationCountryAccountBase;
        
        private static Relation relationCountryHoliday;
        
        private static Relation relationCountryProvince;
        
        private static Relation relationCountrySecurity;
        
        private static Relation relationCurrencyAccountBase;
        
        private static Relation relationCurrencyPrice;
        
        private static Relation relationDestinationDestinationOrder;
        
        private static Relation relationDestinationOrderExecution;
        
        private static Relation relationDestinationSourceOrder;
        
        private static Relation relationDestinationWorkingOrder;
        
        private static Relation relationExchangeEquity;
        
        private static Relation relationExecutionNegotiation;
        
        private static Relation relationFolderSystemFolder;
        
        private static Relation relationHolidayTypeHoliday;
        
        private static Relation relationIssuerDebt;
        
        private static Relation relationLotHandlingAccount;
        
        private static Relation relationMatchNegotiation;
        
        private static Relation relationObjectAccountBase;
        
        private static Relation relationObjectBlotter;
        
        private static Relation relationObjectFolder;
        
        private static Relation relationObjectIssuer;
        
        private static Relation relationObjectObjectTreeChildId;
        
        private static Relation relationObjectObjectTreeParentId;
        
        private static Relation relationObjectSecurity;
        
        private static Relation relationObjectUser;
        
        private static Relation relationOrderTypeAllocation;
        
        private static Relation relationOrderTypeSourceOrder;
        
        private static Relation relationOrderTypeWorkingOrder;
        
        private static Relation relationPartyTypeBlotter;
        
        private static Relation relationPositionTypePosition;
        
        private static Relation relationPositionTypeTaxLot;
        
        private static Relation relationPriceTypeDestinationOrder;
        
        private static Relation relationPriceTypeSourceOrder;
        
        private static Relation relationPriceTypeWorkingOrder;
        
        private static Relation relationPriceWorkingOrder;
        
        private static Relation relationProvinceAccountBase;
        
        private static Relation relationSecurityAccountBase;
        
        private static Relation relationSecurityAllocationSecurityId;
        
        private static Relation relationSecurityAllocationSettlementId;
        
        private static Relation relationSecurityCurrency;
        
        private static Relation relationSecurityDebtDebtId;
        
        private static Relation relationSecurityDebtSettlementId;
        
        private static Relation relationSecurityEquityEquityId;
        
        private static Relation relationSecurityEquitySettlementId;
        
        private static Relation relationSecurityPosition;
        
        private static Relation relationSecurityPrice;
        
        private static Relation relationSecuritySourceOrderSecurityId;
        
        private static Relation relationSecuritySourceOrderSettlementId;
        
        private static Relation relationSecurityTaxLot;
        
        private static Relation relationSecurityWorkingOrderSecurityId;
        
        private static Relation relationSecurityWorkingOrderSettlementId;
        
        private static Relation relationSourceBroker;
        
        private static Relation relationSourceInstitution;
        
        private static Relation relationStateDestinationOrder;
        
        private static Relation relationStatusDestinationOrder;
        
        private static Relation relationStateExecutionDestinationStateCode;
        
        private static Relation relationStateExecutionSourceStateCode;
        
        private static Relation relationStatusMatch;
        
        private static Relation relationStatusNegotiation;
        
        private static Relation relationStatusSourceOrder;
        
        private static Relation relationStatusWorkingOrder;
        
        private static Relation relationStylesheetBlotterAdvertisementStylesheetId;
        
        private static Relation relationStylesheetBlotterDestinationOrderDetailStylesheetId;
        
        private static Relation relationStylesheetBlotterDestinationOrderStylesheetId;
        
        private static Relation relationStylesheetBlotterExecutionDetailStylesheetId;
        
        private static Relation relationStylesheetBlotterExecutionStylesheetId;
        
        private static Relation relationStylesheetBlotterMatchStylesheetId;
        
        private static Relation relationStylesheetBlotterMatchHistoryStylesheetId;
        
        private static Relation relationStylesheetBlotterSourceOrderDetailStylesheetId;
        
        private static Relation relationStylesheetBlotterSourceOrderStylesheetId;
        
        private static Relation relationStylesheetBlotterWorkingOrderStylesheetId;
        
        private static Relation relationStylesheetTypeStylesheet;
        
        private static Relation relationSubmissionTypeWorkingOrder;
        
        private static Relation relationSystemFolderUser;
        
        private static Relation relationTimeInForceDestinationOrder;
        
        private static Relation relationTimeInForceSourceOrder;
        
        private static Relation relationTimeInForceWorkingOrder;
        
        private static Relation relationTimerMatch;
        
        private static Relation relationTimerWorkingOrder;
        
        private static Relation relationTraderBrokerAccount;
        
        private static Relation relationTraderDestinationOrder;
        
        private static Relation relationTraderTraderVolumeSetting;
        
        private static Relation relationTypeObject;
        
        private static Relation relationUserAccountBase;
        
        private static Relation relationUserAllocationCreatedUserId;
        
        private static Relation relationUserAllocationModifiedUserId;
        
        private static Relation relationUserComplianceOfficer;
        
        private static Relation relationUserExecutionCreatedUserId;
        
        private static Relation relationUserExecutionModifiedUserId;
        
        private static Relation relationUserSourceOrderCreatedUserId;
        
        private static Relation relationUserSourceOrderModifiedUserId;
        
        private static Relation relationUserTrader;
        
        private static Relation relationUserWorkingOrderCreatedUserId;
        
        private static Relation relationUserWorkingOrderModifiedUserId;
        
        private static Relation relationVolumeCategorySecurity;
        
        private static Relation relationVolumeCategoryTraderVolumeSetting;
        
        private static Relation relationWorkingOrderAllocation;
        
        private static Relation relationWorkingOrderDestinationOrder;
        
        private static Relation relationWorkingOrderMatch;
        
        private static Relation relationWorkingOrderSourceOrder;
        
        static DataSetMarket()
        {
            DataSetMarket.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(DataSetMarket.SchemaChanged);
            DataSetMarket.dataSet.Tables.CollectionChanged += schemaChangedHandler;
            DataSetMarket.dataSet.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static bool EnforceConstraints
        {
            get
            {
                return DataSetMarket.dataSet.EnforceConstraints;
            }
            set
            {
                DataSetMarket.dataSet.EnforceConstraints = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableCollection Tables
        {
            get
            {
                return new TableCollection(DataSetMarket.dataSet.Tables);
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static RelationCollection Relations
        {
            get
            {
                return new RelationCollection(DataSetMarket.dataSet.Relations);
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLockCollection TableLocks
        {
            get
            {
                return DataSetMarket.tableLockCollection;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static AccountBaseDataTable AccountBase
        {
            get
            {
                if ((DataSetMarket.lockAccountBase.IsReaderLockHeld || DataSetMarket.lockAccountBase.IsWriterLockHeld))
                {
                    return DataSetMarket.tableAccountBase;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "AccountBase"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock AccountBaseLock
        {
            get
            {
                return DataSetMarket.lockAccountBase;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static AccountDataTable Account
        {
            get
            {
                if ((DataSetMarket.lockAccount.IsReaderLockHeld || DataSetMarket.lockAccount.IsWriterLockHeld))
                {
                    return DataSetMarket.tableAccount;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Account"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock AccountLock
        {
            get
            {
                return DataSetMarket.lockAccount;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static AccountGroupDataTable AccountGroup
        {
            get
            {
                if ((DataSetMarket.lockAccountGroup.IsReaderLockHeld || DataSetMarket.lockAccountGroup.IsWriterLockHeld))
                {
                    return DataSetMarket.tableAccountGroup;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "AccountGroup"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock AccountGroupLock
        {
            get
            {
                return DataSetMarket.lockAccountGroup;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static AllocationDataTable Allocation
        {
            get
            {
                if ((DataSetMarket.lockAllocation.IsReaderLockHeld || DataSetMarket.lockAllocation.IsWriterLockHeld))
                {
                    return DataSetMarket.tableAllocation;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Allocation"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock AllocationLock
        {
            get
            {
                return DataSetMarket.lockAllocation;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static BlotterDataTable Blotter
        {
            get
            {
                if ((DataSetMarket.lockBlotter.IsReaderLockHeld || DataSetMarket.lockBlotter.IsWriterLockHeld))
                {
                    return DataSetMarket.tableBlotter;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Blotter"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock BlotterLock
        {
            get
            {
                return DataSetMarket.lockBlotter;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static BranchDataTable Branch
        {
            get
            {
                if ((DataSetMarket.lockBranch.IsReaderLockHeld || DataSetMarket.lockBranch.IsWriterLockHeld))
                {
                    return DataSetMarket.tableBranch;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Branch"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock BranchLock
        {
            get
            {
                return DataSetMarket.lockBranch;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static BrokerDataTable Broker
        {
            get
            {
                if ((DataSetMarket.lockBroker.IsReaderLockHeld || DataSetMarket.lockBroker.IsWriterLockHeld))
                {
                    return DataSetMarket.tableBroker;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Broker"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock BrokerLock
        {
            get
            {
                return DataSetMarket.lockBroker;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static BrokerAccountDataTable BrokerAccount
        {
            get
            {
                if ((DataSetMarket.lockBrokerAccount.IsReaderLockHeld || DataSetMarket.lockBrokerAccount.IsWriterLockHeld))
                {
                    return DataSetMarket.tableBrokerAccount;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "BrokerAccount"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock BrokerAccountLock
        {
            get
            {
                return DataSetMarket.lockBrokerAccount;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static ClearingBrokerDataTable ClearingBroker
        {
            get
            {
                if ((DataSetMarket.lockClearingBroker.IsReaderLockHeld || DataSetMarket.lockClearingBroker.IsWriterLockHeld))
                {
                    return DataSetMarket.tableClearingBroker;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "ClearingBroker"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock ClearingBrokerLock
        {
            get
            {
                return DataSetMarket.lockClearingBroker;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static ComplianceOfficerDataTable ComplianceOfficer
        {
            get
            {
                if ((DataSetMarket.lockComplianceOfficer.IsReaderLockHeld || DataSetMarket.lockComplianceOfficer.IsWriterLockHeld))
                {
                    return DataSetMarket.tableComplianceOfficer;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "ComplianceOfficer"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock ComplianceOfficerLock
        {
            get
            {
                return DataSetMarket.lockComplianceOfficer;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static ConditionDataTable Condition
        {
            get
            {
                if ((DataSetMarket.lockCondition.IsReaderLockHeld || DataSetMarket.lockCondition.IsWriterLockHeld))
                {
                    return DataSetMarket.tableCondition;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Condition"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock ConditionLock
        {
            get
            {
                return DataSetMarket.lockCondition;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static ConfigurationDataTable Configuration
        {
            get
            {
                if ((DataSetMarket.lockConfiguration.IsReaderLockHeld || DataSetMarket.lockConfiguration.IsWriterLockHeld))
                {
                    return DataSetMarket.tableConfiguration;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Configuration"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock ConfigurationLock
        {
            get
            {
                return DataSetMarket.lockConfiguration;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static CountryDataTable Country
        {
            get
            {
                if ((DataSetMarket.lockCountry.IsReaderLockHeld || DataSetMarket.lockCountry.IsWriterLockHeld))
                {
                    return DataSetMarket.tableCountry;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Country"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock CountryLock
        {
            get
            {
                return DataSetMarket.lockCountry;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static CurrencyDataTable Currency
        {
            get
            {
                if ((DataSetMarket.lockCurrency.IsReaderLockHeld || DataSetMarket.lockCurrency.IsWriterLockHeld))
                {
                    return DataSetMarket.tableCurrency;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Currency"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock CurrencyLock
        {
            get
            {
                return DataSetMarket.lockCurrency;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static DebtDataTable Debt
        {
            get
            {
                if ((DataSetMarket.lockDebt.IsReaderLockHeld || DataSetMarket.lockDebt.IsWriterLockHeld))
                {
                    return DataSetMarket.tableDebt;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Debt"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock DebtLock
        {
            get
            {
                return DataSetMarket.lockDebt;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static DestinationDataTable Destination
        {
            get
            {
                if ((DataSetMarket.lockDestination.IsReaderLockHeld || DataSetMarket.lockDestination.IsWriterLockHeld))
                {
                    return DataSetMarket.tableDestination;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Destination"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock DestinationLock
        {
            get
            {
                return DataSetMarket.lockDestination;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static DestinationOrderDataTable DestinationOrder
        {
            get
            {
                if ((DataSetMarket.lockDestinationOrder.IsReaderLockHeld || DataSetMarket.lockDestinationOrder.IsWriterLockHeld))
                {
                    return DataSetMarket.tableDestinationOrder;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "DestinationOrder"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock DestinationOrderLock
        {
            get
            {
                return DataSetMarket.lockDestinationOrder;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static EquityDataTable Equity
        {
            get
            {
                if ((DataSetMarket.lockEquity.IsReaderLockHeld || DataSetMarket.lockEquity.IsWriterLockHeld))
                {
                    return DataSetMarket.tableEquity;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Equity"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock EquityLock
        {
            get
            {
                return DataSetMarket.lockEquity;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static ExchangeDataTable Exchange
        {
            get
            {
                if ((DataSetMarket.lockExchange.IsReaderLockHeld || DataSetMarket.lockExchange.IsWriterLockHeld))
                {
                    return DataSetMarket.tableExchange;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Exchange"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock ExchangeLock
        {
            get
            {
                return DataSetMarket.lockExchange;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static ExecutionDataTable Execution
        {
            get
            {
                if ((DataSetMarket.lockExecution.IsReaderLockHeld || DataSetMarket.lockExecution.IsWriterLockHeld))
                {
                    return DataSetMarket.tableExecution;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Execution"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock ExecutionLock
        {
            get
            {
                return DataSetMarket.lockExecution;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static FixMessageDataTable FixMessage
        {
            get
            {
                if ((DataSetMarket.lockFixMessage.IsReaderLockHeld || DataSetMarket.lockFixMessage.IsWriterLockHeld))
                {
                    return DataSetMarket.tableFixMessage;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "FixMessage"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock FixMessageLock
        {
            get
            {
                return DataSetMarket.lockFixMessage;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static FolderDataTable Folder
        {
            get
            {
                if ((DataSetMarket.lockFolder.IsReaderLockHeld || DataSetMarket.lockFolder.IsWriterLockHeld))
                {
                    return DataSetMarket.tableFolder;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Folder"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock FolderLock
        {
            get
            {
                return DataSetMarket.lockFolder;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static HolidayDataTable Holiday
        {
            get
            {
                if ((DataSetMarket.lockHoliday.IsReaderLockHeld || DataSetMarket.lockHoliday.IsWriterLockHeld))
                {
                    return DataSetMarket.tableHoliday;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Holiday"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock HolidayLock
        {
            get
            {
                return DataSetMarket.lockHoliday;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static HolidayTypeDataTable HolidayType
        {
            get
            {
                if ((DataSetMarket.lockHolidayType.IsReaderLockHeld || DataSetMarket.lockHolidayType.IsWriterLockHeld))
                {
                    return DataSetMarket.tableHolidayType;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "HolidayType"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock HolidayTypeLock
        {
            get
            {
                return DataSetMarket.lockHolidayType;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static ImageDataTable Image
        {
            get
            {
                if ((DataSetMarket.lockImage.IsReaderLockHeld || DataSetMarket.lockImage.IsWriterLockHeld))
                {
                    return DataSetMarket.tableImage;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Image"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock ImageLock
        {
            get
            {
                return DataSetMarket.lockImage;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static InstitutionDataTable Institution
        {
            get
            {
                if ((DataSetMarket.lockInstitution.IsReaderLockHeld || DataSetMarket.lockInstitution.IsWriterLockHeld))
                {
                    return DataSetMarket.tableInstitution;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Institution"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock InstitutionLock
        {
            get
            {
                return DataSetMarket.lockInstitution;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static IssuerDataTable Issuer
        {
            get
            {
                if ((DataSetMarket.lockIssuer.IsReaderLockHeld || DataSetMarket.lockIssuer.IsWriterLockHeld))
                {
                    return DataSetMarket.tableIssuer;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Issuer"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock IssuerLock
        {
            get
            {
                return DataSetMarket.lockIssuer;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static LotHandlingDataTable LotHandling
        {
            get
            {
                if ((DataSetMarket.lockLotHandling.IsReaderLockHeld || DataSetMarket.lockLotHandling.IsWriterLockHeld))
                {
                    return DataSetMarket.tableLotHandling;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "LotHandling"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock LotHandlingLock
        {
            get
            {
                return DataSetMarket.lockLotHandling;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static MatchDataTable Match
        {
            get
            {
                if ((DataSetMarket.lockMatch.IsReaderLockHeld || DataSetMarket.lockMatch.IsWriterLockHeld))
                {
                    return DataSetMarket.tableMatch;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Match"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock MatchLock
        {
            get
            {
                return DataSetMarket.lockMatch;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static NegotiationDataTable Negotiation
        {
            get
            {
                if ((DataSetMarket.lockNegotiation.IsReaderLockHeld || DataSetMarket.lockNegotiation.IsWriterLockHeld))
                {
                    return DataSetMarket.tableNegotiation;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Negotiation"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock NegotiationLock
        {
            get
            {
                return DataSetMarket.lockNegotiation;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static ObjectDataTable Object
        {
            get
            {
                if ((DataSetMarket.lockObject.IsReaderLockHeld || DataSetMarket.lockObject.IsWriterLockHeld))
                {
                    return DataSetMarket.tableObject;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Object"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock ObjectLock
        {
            get
            {
                return DataSetMarket.lockObject;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static ObjectTreeDataTable ObjectTree
        {
            get
            {
                if ((DataSetMarket.lockObjectTree.IsReaderLockHeld || DataSetMarket.lockObjectTree.IsWriterLockHeld))
                {
                    return DataSetMarket.tableObjectTree;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "ObjectTree"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock ObjectTreeLock
        {
            get
            {
                return DataSetMarket.lockObjectTree;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static OrderTypeDataTable OrderType
        {
            get
            {
                if ((DataSetMarket.lockOrderType.IsReaderLockHeld || DataSetMarket.lockOrderType.IsWriterLockHeld))
                {
                    return DataSetMarket.tableOrderType;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "OrderType"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock OrderTypeLock
        {
            get
            {
                return DataSetMarket.lockOrderType;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static PartyTypeDataTable PartyType
        {
            get
            {
                if ((DataSetMarket.lockPartyType.IsReaderLockHeld || DataSetMarket.lockPartyType.IsWriterLockHeld))
                {
                    return DataSetMarket.tablePartyType;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "PartyType"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock PartyTypeLock
        {
            get
            {
                return DataSetMarket.lockPartyType;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static PositionDataTable Position
        {
            get
            {
                if ((DataSetMarket.lockPosition.IsReaderLockHeld || DataSetMarket.lockPosition.IsWriterLockHeld))
                {
                    return DataSetMarket.tablePosition;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Position"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock PositionLock
        {
            get
            {
                return DataSetMarket.lockPosition;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static PositionTypeDataTable PositionType
        {
            get
            {
                if ((DataSetMarket.lockPositionType.IsReaderLockHeld || DataSetMarket.lockPositionType.IsWriterLockHeld))
                {
                    return DataSetMarket.tablePositionType;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "PositionType"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock PositionTypeLock
        {
            get
            {
                return DataSetMarket.lockPositionType;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static PriceDataTable Price
        {
            get
            {
                if ((DataSetMarket.lockPrice.IsReaderLockHeld || DataSetMarket.lockPrice.IsWriterLockHeld))
                {
                    return DataSetMarket.tablePrice;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Price"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock PriceLock
        {
            get
            {
                return DataSetMarket.lockPrice;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static PriceTypeDataTable PriceType
        {
            get
            {
                if ((DataSetMarket.lockPriceType.IsReaderLockHeld || DataSetMarket.lockPriceType.IsWriterLockHeld))
                {
                    return DataSetMarket.tablePriceType;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "PriceType"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock PriceTypeLock
        {
            get
            {
                return DataSetMarket.lockPriceType;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static PropertyDataTable Property
        {
            get
            {
                if ((DataSetMarket.lockProperty.IsReaderLockHeld || DataSetMarket.lockProperty.IsWriterLockHeld))
                {
                    return DataSetMarket.tableProperty;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Property"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock PropertyLock
        {
            get
            {
                return DataSetMarket.lockProperty;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static ProvinceDataTable Province
        {
            get
            {
                if ((DataSetMarket.lockProvince.IsReaderLockHeld || DataSetMarket.lockProvince.IsWriterLockHeld))
                {
                    return DataSetMarket.tableProvince;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Province"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock ProvinceLock
        {
            get
            {
                return DataSetMarket.lockProvince;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static SecurityDataTable Security
        {
            get
            {
                if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                {
                    return DataSetMarket.tableSecurity;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock SecurityLock
        {
            get
            {
                return DataSetMarket.lockSecurity;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static StateDataTable State
        {
            get
            {
                if ((DataSetMarket.lockState.IsReaderLockHeld || DataSetMarket.lockState.IsWriterLockHeld))
                {
                    return DataSetMarket.tableState;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "State"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock StateLock
        {
            get
            {
                return DataSetMarket.lockState;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static SourceDataTable Source
        {
            get
            {
                if ((DataSetMarket.lockSource.IsReaderLockHeld || DataSetMarket.lockSource.IsWriterLockHeld))
                {
                    return DataSetMarket.tableSource;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Source"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock SourceLock
        {
            get
            {
                return DataSetMarket.lockSource;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static SourceOrderDataTable SourceOrder
        {
            get
            {
                if ((DataSetMarket.lockSourceOrder.IsReaderLockHeld || DataSetMarket.lockSourceOrder.IsWriterLockHeld))
                {
                    return DataSetMarket.tableSourceOrder;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "SourceOrder"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock SourceOrderLock
        {
            get
            {
                return DataSetMarket.lockSourceOrder;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static StatusDataTable Status
        {
            get
            {
                if ((DataSetMarket.lockStatus.IsReaderLockHeld || DataSetMarket.lockStatus.IsWriterLockHeld))
                {
                    return DataSetMarket.tableStatus;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Status"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock StatusLock
        {
            get
            {
                return DataSetMarket.lockStatus;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static StylesheetDataTable Stylesheet
        {
            get
            {
                if ((DataSetMarket.lockStylesheet.IsReaderLockHeld || DataSetMarket.lockStylesheet.IsWriterLockHeld))
                {
                    return DataSetMarket.tableStylesheet;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Stylesheet"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock StylesheetLock
        {
            get
            {
                return DataSetMarket.lockStylesheet;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static StylesheetTypeDataTable StylesheetType
        {
            get
            {
                if ((DataSetMarket.lockStylesheetType.IsReaderLockHeld || DataSetMarket.lockStylesheetType.IsWriterLockHeld))
                {
                    return DataSetMarket.tableStylesheetType;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "StylesheetType"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock StylesheetTypeLock
        {
            get
            {
                return DataSetMarket.lockStylesheetType;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static SubmissionTypeDataTable SubmissionType
        {
            get
            {
                if ((DataSetMarket.lockSubmissionType.IsReaderLockHeld || DataSetMarket.lockSubmissionType.IsWriterLockHeld))
                {
                    return DataSetMarket.tableSubmissionType;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "SubmissionType"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock SubmissionTypeLock
        {
            get
            {
                return DataSetMarket.lockSubmissionType;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static SystemFolderDataTable SystemFolder
        {
            get
            {
                if ((DataSetMarket.lockSystemFolder.IsReaderLockHeld || DataSetMarket.lockSystemFolder.IsWriterLockHeld))
                {
                    return DataSetMarket.tableSystemFolder;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "SystemFolder"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock SystemFolderLock
        {
            get
            {
                return DataSetMarket.lockSystemFolder;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TaxLotDataTable TaxLot
        {
            get
            {
                if ((DataSetMarket.lockTaxLot.IsReaderLockHeld || DataSetMarket.lockTaxLot.IsWriterLockHeld))
                {
                    return DataSetMarket.tableTaxLot;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "TaxLot"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock TaxLotLock
        {
            get
            {
                return DataSetMarket.lockTaxLot;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TimeInForceDataTable TimeInForce
        {
            get
            {
                if ((DataSetMarket.lockTimeInForce.IsReaderLockHeld || DataSetMarket.lockTimeInForce.IsWriterLockHeld))
                {
                    return DataSetMarket.tableTimeInForce;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "TimeInForce"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock TimeInForceLock
        {
            get
            {
                return DataSetMarket.lockTimeInForce;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TimerDataTable Timer
        {
            get
            {
                if ((DataSetMarket.lockTimer.IsReaderLockHeld || DataSetMarket.lockTimer.IsWriterLockHeld))
                {
                    return DataSetMarket.tableTimer;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Timer"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock TimerLock
        {
            get
            {
                return DataSetMarket.lockTimer;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TraderDataTable Trader
        {
            get
            {
                if ((DataSetMarket.lockTrader.IsReaderLockHeld || DataSetMarket.lockTrader.IsWriterLockHeld))
                {
                    return DataSetMarket.tableTrader;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Trader"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock TraderLock
        {
            get
            {
                return DataSetMarket.lockTrader;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TraderVolumeSettingDataTable TraderVolumeSetting
        {
            get
            {
                if ((DataSetMarket.lockTraderVolumeSetting.IsReaderLockHeld || DataSetMarket.lockTraderVolumeSetting.IsWriterLockHeld))
                {
                    return DataSetMarket.tableTraderVolumeSetting;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "TraderVolumeSetting"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock TraderVolumeSettingLock
        {
            get
            {
                return DataSetMarket.lockTraderVolumeSetting;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TypeDataTable Type
        {
            get
            {
                if ((DataSetMarket.lockType.IsReaderLockHeld || DataSetMarket.lockType.IsWriterLockHeld))
                {
                    return DataSetMarket.tableType;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Type"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock TypeLock
        {
            get
            {
                return DataSetMarket.lockType;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static UserDataTable User
        {
            get
            {
                if ((DataSetMarket.lockUser.IsReaderLockHeld || DataSetMarket.lockUser.IsWriterLockHeld))
                {
                    return DataSetMarket.tableUser;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "User"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock UserLock
        {
            get
            {
                return DataSetMarket.lockUser;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static VolumeCategoryDataTable VolumeCategory
        {
            get
            {
                if ((DataSetMarket.lockVolumeCategory.IsReaderLockHeld || DataSetMarket.lockVolumeCategory.IsWriterLockHeld))
                {
                    return DataSetMarket.tableVolumeCategory;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "VolumeCategory"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock VolumeCategoryLock
        {
            get
            {
                return DataSetMarket.lockVolumeCategory;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static WorkingOrderDataTable WorkingOrder
        {
            get
            {
                if ((DataSetMarket.lockWorkingOrder.IsReaderLockHeld || DataSetMarket.lockWorkingOrder.IsWriterLockHeld))
                {
                    return DataSetMarket.tableWorkingOrder;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "WorkingOrder"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock WorkingOrderLock
        {
            get
            {
                return DataSetMarket.lockWorkingOrder;
            }
        }
        
        public static void Merge(DataSet dataSet)
        {
            DataSetMarket.dataSet.Merge(dataSet);
        }
        
        public static void ReadXml(string fileName)
        {
            DataSetMarket.dataSet.ReadXml(fileName);
        }
        
        public static void AcceptChanges()
        {
            DataSetMarket.dataSet.AcceptChanges();
        }
        
        public static void Clear()
        {
            DataSetMarket.dataSet.Clear();
        }
        
        internal static void InitVars()
        {
            DataSetMarket.tableAccountBase = ((AccountBaseDataTable)(DataSetMarket.Tables["AccountBase"]));
            if ((DataSetMarket.tableAccountBase != null))
            {
                DataSetMarket.tableAccountBase.InitVars();
            }
            DataSetMarket.tableAccount = ((AccountDataTable)(DataSetMarket.Tables["Account"]));
            if ((DataSetMarket.tableAccount != null))
            {
                DataSetMarket.tableAccount.InitVars();
            }
            DataSetMarket.tableAccountGroup = ((AccountGroupDataTable)(DataSetMarket.Tables["AccountGroup"]));
            if ((DataSetMarket.tableAccountGroup != null))
            {
                DataSetMarket.tableAccountGroup.InitVars();
            }
            DataSetMarket.tableAllocation = ((AllocationDataTable)(DataSetMarket.Tables["Allocation"]));
            if ((DataSetMarket.tableAllocation != null))
            {
                DataSetMarket.tableAllocation.InitVars();
            }
            DataSetMarket.tableBlotter = ((BlotterDataTable)(DataSetMarket.Tables["Blotter"]));
            if ((DataSetMarket.tableBlotter != null))
            {
                DataSetMarket.tableBlotter.InitVars();
            }
            DataSetMarket.tableBranch = ((BranchDataTable)(DataSetMarket.Tables["Branch"]));
            if ((DataSetMarket.tableBranch != null))
            {
                DataSetMarket.tableBranch.InitVars();
            }
            DataSetMarket.tableBroker = ((BrokerDataTable)(DataSetMarket.Tables["Broker"]));
            if ((DataSetMarket.tableBroker != null))
            {
                DataSetMarket.tableBroker.InitVars();
            }
            DataSetMarket.tableBrokerAccount = ((BrokerAccountDataTable)(DataSetMarket.Tables["BrokerAccount"]));
            if ((DataSetMarket.tableBrokerAccount != null))
            {
                DataSetMarket.tableBrokerAccount.InitVars();
            }
            DataSetMarket.tableClearingBroker = ((ClearingBrokerDataTable)(DataSetMarket.Tables["ClearingBroker"]));
            if ((DataSetMarket.tableClearingBroker != null))
            {
                DataSetMarket.tableClearingBroker.InitVars();
            }
            DataSetMarket.tableComplianceOfficer = ((ComplianceOfficerDataTable)(DataSetMarket.Tables["ComplianceOfficer"]));
            if ((DataSetMarket.tableComplianceOfficer != null))
            {
                DataSetMarket.tableComplianceOfficer.InitVars();
            }
            DataSetMarket.tableCondition = ((ConditionDataTable)(DataSetMarket.Tables["Condition"]));
            if ((DataSetMarket.tableCondition != null))
            {
                DataSetMarket.tableCondition.InitVars();
            }
            DataSetMarket.tableConfiguration = ((ConfigurationDataTable)(DataSetMarket.Tables["Configuration"]));
            if ((DataSetMarket.tableConfiguration != null))
            {
                DataSetMarket.tableConfiguration.InitVars();
            }
            DataSetMarket.tableCountry = ((CountryDataTable)(DataSetMarket.Tables["Country"]));
            if ((DataSetMarket.tableCountry != null))
            {
                DataSetMarket.tableCountry.InitVars();
            }
            DataSetMarket.tableCurrency = ((CurrencyDataTable)(DataSetMarket.Tables["Currency"]));
            if ((DataSetMarket.tableCurrency != null))
            {
                DataSetMarket.tableCurrency.InitVars();
            }
            DataSetMarket.tableDebt = ((DebtDataTable)(DataSetMarket.Tables["Debt"]));
            if ((DataSetMarket.tableDebt != null))
            {
                DataSetMarket.tableDebt.InitVars();
            }
            DataSetMarket.tableDestination = ((DestinationDataTable)(DataSetMarket.Tables["Destination"]));
            if ((DataSetMarket.tableDestination != null))
            {
                DataSetMarket.tableDestination.InitVars();
            }
            DataSetMarket.tableDestinationOrder = ((DestinationOrderDataTable)(DataSetMarket.Tables["DestinationOrder"]));
            if ((DataSetMarket.tableDestinationOrder != null))
            {
                DataSetMarket.tableDestinationOrder.InitVars();
            }
            DataSetMarket.tableEquity = ((EquityDataTable)(DataSetMarket.Tables["Equity"]));
            if ((DataSetMarket.tableEquity != null))
            {
                DataSetMarket.tableEquity.InitVars();
            }
            DataSetMarket.tableExchange = ((ExchangeDataTable)(DataSetMarket.Tables["Exchange"]));
            if ((DataSetMarket.tableExchange != null))
            {
                DataSetMarket.tableExchange.InitVars();
            }
            DataSetMarket.tableExecution = ((ExecutionDataTable)(DataSetMarket.Tables["Execution"]));
            if ((DataSetMarket.tableExecution != null))
            {
                DataSetMarket.tableExecution.InitVars();
            }
            DataSetMarket.tableFixMessage = ((FixMessageDataTable)(DataSetMarket.Tables["FixMessage"]));
            if ((DataSetMarket.tableFixMessage != null))
            {
                DataSetMarket.tableFixMessage.InitVars();
            }
            DataSetMarket.tableFolder = ((FolderDataTable)(DataSetMarket.Tables["Folder"]));
            if ((DataSetMarket.tableFolder != null))
            {
                DataSetMarket.tableFolder.InitVars();
            }
            DataSetMarket.tableHoliday = ((HolidayDataTable)(DataSetMarket.Tables["Holiday"]));
            if ((DataSetMarket.tableHoliday != null))
            {
                DataSetMarket.tableHoliday.InitVars();
            }
            DataSetMarket.tableHolidayType = ((HolidayTypeDataTable)(DataSetMarket.Tables["HolidayType"]));
            if ((DataSetMarket.tableHolidayType != null))
            {
                DataSetMarket.tableHolidayType.InitVars();
            }
            DataSetMarket.tableImage = ((ImageDataTable)(DataSetMarket.Tables["Image"]));
            if ((DataSetMarket.tableImage != null))
            {
                DataSetMarket.tableImage.InitVars();
            }
            DataSetMarket.tableInstitution = ((InstitutionDataTable)(DataSetMarket.Tables["Institution"]));
            if ((DataSetMarket.tableInstitution != null))
            {
                DataSetMarket.tableInstitution.InitVars();
            }
            DataSetMarket.tableIssuer = ((IssuerDataTable)(DataSetMarket.Tables["Issuer"]));
            if ((DataSetMarket.tableIssuer != null))
            {
                DataSetMarket.tableIssuer.InitVars();
            }
            DataSetMarket.tableLotHandling = ((LotHandlingDataTable)(DataSetMarket.Tables["LotHandling"]));
            if ((DataSetMarket.tableLotHandling != null))
            {
                DataSetMarket.tableLotHandling.InitVars();
            }
            DataSetMarket.tableMatch = ((MatchDataTable)(DataSetMarket.Tables["Match"]));
            if ((DataSetMarket.tableMatch != null))
            {
                DataSetMarket.tableMatch.InitVars();
            }
            DataSetMarket.tableNegotiation = ((NegotiationDataTable)(DataSetMarket.Tables["Negotiation"]));
            if ((DataSetMarket.tableNegotiation != null))
            {
                DataSetMarket.tableNegotiation.InitVars();
            }
            DataSetMarket.tableObject = ((ObjectDataTable)(DataSetMarket.Tables["Object"]));
            if ((DataSetMarket.tableObject != null))
            {
                DataSetMarket.tableObject.InitVars();
            }
            DataSetMarket.tableObjectTree = ((ObjectTreeDataTable)(DataSetMarket.Tables["ObjectTree"]));
            if ((DataSetMarket.tableObjectTree != null))
            {
                DataSetMarket.tableObjectTree.InitVars();
            }
            DataSetMarket.tableOrderType = ((OrderTypeDataTable)(DataSetMarket.Tables["OrderType"]));
            if ((DataSetMarket.tableOrderType != null))
            {
                DataSetMarket.tableOrderType.InitVars();
            }
            DataSetMarket.tablePartyType = ((PartyTypeDataTable)(DataSetMarket.Tables["PartyType"]));
            if ((DataSetMarket.tablePartyType != null))
            {
                DataSetMarket.tablePartyType.InitVars();
            }
            DataSetMarket.tablePosition = ((PositionDataTable)(DataSetMarket.Tables["Position"]));
            if ((DataSetMarket.tablePosition != null))
            {
                DataSetMarket.tablePosition.InitVars();
            }
            DataSetMarket.tablePositionType = ((PositionTypeDataTable)(DataSetMarket.Tables["PositionType"]));
            if ((DataSetMarket.tablePositionType != null))
            {
                DataSetMarket.tablePositionType.InitVars();
            }
            DataSetMarket.tablePrice = ((PriceDataTable)(DataSetMarket.Tables["Price"]));
            if ((DataSetMarket.tablePrice != null))
            {
                DataSetMarket.tablePrice.InitVars();
            }
            DataSetMarket.tablePriceType = ((PriceTypeDataTable)(DataSetMarket.Tables["PriceType"]));
            if ((DataSetMarket.tablePriceType != null))
            {
                DataSetMarket.tablePriceType.InitVars();
            }
            DataSetMarket.tableProperty = ((PropertyDataTable)(DataSetMarket.Tables["Property"]));
            if ((DataSetMarket.tableProperty != null))
            {
                DataSetMarket.tableProperty.InitVars();
            }
            DataSetMarket.tableProvince = ((ProvinceDataTable)(DataSetMarket.Tables["Province"]));
            if ((DataSetMarket.tableProvince != null))
            {
                DataSetMarket.tableProvince.InitVars();
            }
            DataSetMarket.tableSecurity = ((SecurityDataTable)(DataSetMarket.Tables["Security"]));
            if ((DataSetMarket.tableSecurity != null))
            {
                DataSetMarket.tableSecurity.InitVars();
            }
            DataSetMarket.tableState = ((StateDataTable)(DataSetMarket.Tables["State"]));
            if ((DataSetMarket.tableState != null))
            {
                DataSetMarket.tableState.InitVars();
            }
            DataSetMarket.tableSource = ((SourceDataTable)(DataSetMarket.Tables["Source"]));
            if ((DataSetMarket.tableSource != null))
            {
                DataSetMarket.tableSource.InitVars();
            }
            DataSetMarket.tableSourceOrder = ((SourceOrderDataTable)(DataSetMarket.Tables["SourceOrder"]));
            if ((DataSetMarket.tableSourceOrder != null))
            {
                DataSetMarket.tableSourceOrder.InitVars();
            }
            DataSetMarket.tableStatus = ((StatusDataTable)(DataSetMarket.Tables["Status"]));
            if ((DataSetMarket.tableStatus != null))
            {
                DataSetMarket.tableStatus.InitVars();
            }
            DataSetMarket.tableStylesheet = ((StylesheetDataTable)(DataSetMarket.Tables["Stylesheet"]));
            if ((DataSetMarket.tableStylesheet != null))
            {
                DataSetMarket.tableStylesheet.InitVars();
            }
            DataSetMarket.tableStylesheetType = ((StylesheetTypeDataTable)(DataSetMarket.Tables["StylesheetType"]));
            if ((DataSetMarket.tableStylesheetType != null))
            {
                DataSetMarket.tableStylesheetType.InitVars();
            }
            DataSetMarket.tableSubmissionType = ((SubmissionTypeDataTable)(DataSetMarket.Tables["SubmissionType"]));
            if ((DataSetMarket.tableSubmissionType != null))
            {
                DataSetMarket.tableSubmissionType.InitVars();
            }
            DataSetMarket.tableSystemFolder = ((SystemFolderDataTable)(DataSetMarket.Tables["SystemFolder"]));
            if ((DataSetMarket.tableSystemFolder != null))
            {
                DataSetMarket.tableSystemFolder.InitVars();
            }
            DataSetMarket.tableTaxLot = ((TaxLotDataTable)(DataSetMarket.Tables["TaxLot"]));
            if ((DataSetMarket.tableTaxLot != null))
            {
                DataSetMarket.tableTaxLot.InitVars();
            }
            DataSetMarket.tableTimeInForce = ((TimeInForceDataTable)(DataSetMarket.Tables["TimeInForce"]));
            if ((DataSetMarket.tableTimeInForce != null))
            {
                DataSetMarket.tableTimeInForce.InitVars();
            }
            DataSetMarket.tableTimer = ((TimerDataTable)(DataSetMarket.Tables["Timer"]));
            if ((DataSetMarket.tableTimer != null))
            {
                DataSetMarket.tableTimer.InitVars();
            }
            DataSetMarket.tableTrader = ((TraderDataTable)(DataSetMarket.Tables["Trader"]));
            if ((DataSetMarket.tableTrader != null))
            {
                DataSetMarket.tableTrader.InitVars();
            }
            DataSetMarket.tableTraderVolumeSetting = ((TraderVolumeSettingDataTable)(DataSetMarket.Tables["TraderVolumeSetting"]));
            if ((DataSetMarket.tableTraderVolumeSetting != null))
            {
                DataSetMarket.tableTraderVolumeSetting.InitVars();
            }
            DataSetMarket.tableType = ((TypeDataTable)(DataSetMarket.Tables["Type"]));
            if ((DataSetMarket.tableType != null))
            {
                DataSetMarket.tableType.InitVars();
            }
            DataSetMarket.tableUser = ((UserDataTable)(DataSetMarket.Tables["User"]));
            if ((DataSetMarket.tableUser != null))
            {
                DataSetMarket.tableUser.InitVars();
            }
            DataSetMarket.tableVolumeCategory = ((VolumeCategoryDataTable)(DataSetMarket.Tables["VolumeCategory"]));
            if ((DataSetMarket.tableVolumeCategory != null))
            {
                DataSetMarket.tableVolumeCategory.InitVars();
            }
            DataSetMarket.tableWorkingOrder = ((WorkingOrderDataTable)(DataSetMarket.Tables["WorkingOrder"]));
            if ((DataSetMarket.tableWorkingOrder != null))
            {
                DataSetMarket.tableWorkingOrder.InitVars();
            }
            DataSetMarket.relationAccountAllocation = DataSetMarket.Relations["AccountAllocation"];
            DataSetMarket.relationAccountBaseAccount = DataSetMarket.Relations["AccountBaseAccount"];
            DataSetMarket.relationAccountBaseAccountGroup = DataSetMarket.Relations["AccountBaseAccountGroup"];
            DataSetMarket.relationAccountPosition = DataSetMarket.Relations["AccountPosition"];
            DataSetMarket.relationAccountTaxLot = DataSetMarket.Relations["AccountTaxLot"];
            DataSetMarket.relationBlotterBranch = DataSetMarket.Relations["BlotterBranch"];
            DataSetMarket.relationBlotterSource = DataSetMarket.Relations["BlotterSource"];
            DataSetMarket.relationBlotterTrader = DataSetMarket.Relations["BlotterTrader"];
            DataSetMarket.relationBlotterWorkingOrder = DataSetMarket.Relations["BlotterWorkingOrder"];
            DataSetMarket.relationBrokerAccountExecution = DataSetMarket.Relations["BrokerAccountExecution"];
            DataSetMarket.relationBrokerExecution = DataSetMarket.Relations["BrokerExecution"];
            DataSetMarket.relationBrokerBrokerAccount = DataSetMarket.Relations["BrokerBrokerAccount"];
            DataSetMarket.relationBrokerClearingBroker = DataSetMarket.Relations["BrokerClearingBroker"];
            DataSetMarket.relationCountryAccountBase = DataSetMarket.Relations["CountryAccountBase"];
            DataSetMarket.relationCountryHoliday = DataSetMarket.Relations["CountryHoliday"];
            DataSetMarket.relationCountryProvince = DataSetMarket.Relations["CountryProvince"];
            DataSetMarket.relationCountrySecurity = DataSetMarket.Relations["CountrySecurity"];
            DataSetMarket.relationCurrencyAccountBase = DataSetMarket.Relations["CurrencyAccountBase"];
            DataSetMarket.relationCurrencyPrice = DataSetMarket.Relations["CurrencyPrice"];
            DataSetMarket.relationDestinationDestinationOrder = DataSetMarket.Relations["DestinationDestinationOrder"];
            DataSetMarket.relationDestinationOrderExecution = DataSetMarket.Relations["DestinationOrderExecution"];
            DataSetMarket.relationDestinationSourceOrder = DataSetMarket.Relations["DestinationSourceOrder"];
            DataSetMarket.relationDestinationWorkingOrder = DataSetMarket.Relations["DestinationWorkingOrder"];
            DataSetMarket.relationExchangeEquity = DataSetMarket.Relations["ExchangeEquity"];
            DataSetMarket.relationExecutionNegotiation = DataSetMarket.Relations["ExecutionNegotiation"];
            DataSetMarket.relationFolderSystemFolder = DataSetMarket.Relations["FolderSystemFolder"];
            DataSetMarket.relationHolidayTypeHoliday = DataSetMarket.Relations["HolidayTypeHoliday"];
            DataSetMarket.relationIssuerDebt = DataSetMarket.Relations["IssuerDebt"];
            DataSetMarket.relationLotHandlingAccount = DataSetMarket.Relations["LotHandlingAccount"];
            DataSetMarket.relationMatchNegotiation = DataSetMarket.Relations["MatchNegotiation"];
            DataSetMarket.relationObjectAccountBase = DataSetMarket.Relations["ObjectAccountBase"];
            DataSetMarket.relationObjectBlotter = DataSetMarket.Relations["ObjectBlotter"];
            DataSetMarket.relationObjectFolder = DataSetMarket.Relations["ObjectFolder"];
            DataSetMarket.relationObjectIssuer = DataSetMarket.Relations["ObjectIssuer"];
            DataSetMarket.relationObjectObjectTreeChildId = DataSetMarket.Relations["ObjectObjectTreeChildId"];
            DataSetMarket.relationObjectObjectTreeParentId = DataSetMarket.Relations["ObjectObjectTreeParentId"];
            DataSetMarket.relationObjectSecurity = DataSetMarket.Relations["ObjectSecurity"];
            DataSetMarket.relationObjectUser = DataSetMarket.Relations["ObjectUser"];
            DataSetMarket.relationOrderTypeAllocation = DataSetMarket.Relations["OrderTypeAllocation"];
            DataSetMarket.relationOrderTypeSourceOrder = DataSetMarket.Relations["OrderTypeSourceOrder"];
            DataSetMarket.relationOrderTypeWorkingOrder = DataSetMarket.Relations["OrderTypeWorkingOrder"];
            DataSetMarket.relationPartyTypeBlotter = DataSetMarket.Relations["PartyTypeBlotter"];
            DataSetMarket.relationPositionTypePosition = DataSetMarket.Relations["PositionTypePosition"];
            DataSetMarket.relationPositionTypeTaxLot = DataSetMarket.Relations["PositionTypeTaxLot"];
            DataSetMarket.relationPriceTypeDestinationOrder = DataSetMarket.Relations["PriceTypeDestinationOrder"];
            DataSetMarket.relationPriceTypeSourceOrder = DataSetMarket.Relations["PriceTypeSourceOrder"];
            DataSetMarket.relationPriceTypeWorkingOrder = DataSetMarket.Relations["PriceTypeWorkingOrder"];
            DataSetMarket.relationPriceWorkingOrder = DataSetMarket.Relations["PriceWorkingOrder"];
            DataSetMarket.relationProvinceAccountBase = DataSetMarket.Relations["ProvinceAccountBase"];
            DataSetMarket.relationSecurityAccountBase = DataSetMarket.Relations["SecurityAccountBase"];
            DataSetMarket.relationSecurityAllocationSecurityId = DataSetMarket.Relations["SecurityAllocationSecurityId"];
            DataSetMarket.relationSecurityAllocationSettlementId = DataSetMarket.Relations["SecurityAllocationSettlementId"];
            DataSetMarket.relationSecurityCurrency = DataSetMarket.Relations["SecurityCurrency"];
            DataSetMarket.relationSecurityDebtDebtId = DataSetMarket.Relations["SecurityDebtDebtId"];
            DataSetMarket.relationSecurityDebtSettlementId = DataSetMarket.Relations["SecurityDebtSettlementId"];
            DataSetMarket.relationSecurityEquityEquityId = DataSetMarket.Relations["SecurityEquityEquityId"];
            DataSetMarket.relationSecurityEquitySettlementId = DataSetMarket.Relations["SecurityEquitySettlementId"];
            DataSetMarket.relationSecurityPosition = DataSetMarket.Relations["SecurityPosition"];
            DataSetMarket.relationSecurityPrice = DataSetMarket.Relations["SecurityPrice"];
            DataSetMarket.relationSecuritySourceOrderSecurityId = DataSetMarket.Relations["SecuritySourceOrderSecurityId"];
            DataSetMarket.relationSecuritySourceOrderSettlementId = DataSetMarket.Relations["SecuritySourceOrderSettlementId"];
            DataSetMarket.relationSecurityTaxLot = DataSetMarket.Relations["SecurityTaxLot"];
            DataSetMarket.relationSecurityWorkingOrderSecurityId = DataSetMarket.Relations["SecurityWorkingOrderSecurityId"];
            DataSetMarket.relationSecurityWorkingOrderSettlementId = DataSetMarket.Relations["SecurityWorkingOrderSettlementId"];
            DataSetMarket.relationSourceBroker = DataSetMarket.Relations["SourceBroker"];
            DataSetMarket.relationSourceInstitution = DataSetMarket.Relations["SourceInstitution"];
            DataSetMarket.relationStateDestinationOrder = DataSetMarket.Relations["StateDestinationOrder"];
            DataSetMarket.relationStatusDestinationOrder = DataSetMarket.Relations["StatusDestinationOrder"];
            DataSetMarket.relationStateExecutionDestinationStateCode = DataSetMarket.Relations["StateExecutionDestinationStateCode"];
            DataSetMarket.relationStateExecutionSourceStateCode = DataSetMarket.Relations["StateExecutionSourceStateCode"];
            DataSetMarket.relationStatusMatch = DataSetMarket.Relations["StatusMatch"];
            DataSetMarket.relationStatusNegotiation = DataSetMarket.Relations["StatusNegotiation"];
            DataSetMarket.relationStatusSourceOrder = DataSetMarket.Relations["StatusSourceOrder"];
            DataSetMarket.relationStatusWorkingOrder = DataSetMarket.Relations["StatusWorkingOrder"];
            DataSetMarket.relationStylesheetBlotterAdvertisementStylesheetId = DataSetMarket.Relations["StylesheetBlotterAdvertisementStylesheetId"];
            DataSetMarket.relationStylesheetBlotterDestinationOrderDetailStylesheetId = DataSetMarket.Relations["StylesheetBlotterDestinationOrderDetailStylesheetId"];
            DataSetMarket.relationStylesheetBlotterDestinationOrderStylesheetId = DataSetMarket.Relations["StylesheetBlotterDestinationOrderStylesheetId"];
            DataSetMarket.relationStylesheetBlotterExecutionDetailStylesheetId = DataSetMarket.Relations["StylesheetBlotterExecutionDetailStylesheetId"];
            DataSetMarket.relationStylesheetBlotterExecutionStylesheetId = DataSetMarket.Relations["StylesheetBlotterExecutionStylesheetId"];
            DataSetMarket.relationStylesheetBlotterMatchStylesheetId = DataSetMarket.Relations["StylesheetBlotterMatchStylesheetId"];
            DataSetMarket.relationStylesheetBlotterMatchHistoryStylesheetId = DataSetMarket.Relations["StylesheetBlotterMatchHistoryStylesheetId"];
            DataSetMarket.relationStylesheetBlotterSourceOrderDetailStylesheetId = DataSetMarket.Relations["StylesheetBlotterSourceOrderDetailStylesheetId"];
            DataSetMarket.relationStylesheetBlotterSourceOrderStylesheetId = DataSetMarket.Relations["StylesheetBlotterSourceOrderStylesheetId"];
            DataSetMarket.relationStylesheetBlotterWorkingOrderStylesheetId = DataSetMarket.Relations["StylesheetBlotterWorkingOrderStylesheetId"];
            DataSetMarket.relationStylesheetTypeStylesheet = DataSetMarket.Relations["StylesheetTypeStylesheet"];
            DataSetMarket.relationSubmissionTypeWorkingOrder = DataSetMarket.Relations["SubmissionTypeWorkingOrder"];
            DataSetMarket.relationSystemFolderUser = DataSetMarket.Relations["SystemFolderUser"];
            DataSetMarket.relationTimeInForceDestinationOrder = DataSetMarket.Relations["TimeInForceDestinationOrder"];
            DataSetMarket.relationTimeInForceSourceOrder = DataSetMarket.Relations["TimeInForceSourceOrder"];
            DataSetMarket.relationTimeInForceWorkingOrder = DataSetMarket.Relations["TimeInForceWorkingOrder"];
            DataSetMarket.relationTimerMatch = DataSetMarket.Relations["TimerMatch"];
            DataSetMarket.relationTimerWorkingOrder = DataSetMarket.Relations["TimerWorkingOrder"];
            DataSetMarket.relationTraderBrokerAccount = DataSetMarket.Relations["TraderBrokerAccount"];
            DataSetMarket.relationTraderDestinationOrder = DataSetMarket.Relations["TraderDestinationOrder"];
            DataSetMarket.relationTraderTraderVolumeSetting = DataSetMarket.Relations["TraderTraderVolumeSetting"];
            DataSetMarket.relationTypeObject = DataSetMarket.Relations["TypeObject"];
            DataSetMarket.relationUserAccountBase = DataSetMarket.Relations["UserAccountBase"];
            DataSetMarket.relationUserAllocationCreatedUserId = DataSetMarket.Relations["UserAllocationCreatedUserId"];
            DataSetMarket.relationUserAllocationModifiedUserId = DataSetMarket.Relations["UserAllocationModifiedUserId"];
            DataSetMarket.relationUserComplianceOfficer = DataSetMarket.Relations["UserComplianceOfficer"];
            DataSetMarket.relationUserExecutionCreatedUserId = DataSetMarket.Relations["UserExecutionCreatedUserId"];
            DataSetMarket.relationUserExecutionModifiedUserId = DataSetMarket.Relations["UserExecutionModifiedUserId"];
            DataSetMarket.relationUserSourceOrderCreatedUserId = DataSetMarket.Relations["UserSourceOrderCreatedUserId"];
            DataSetMarket.relationUserSourceOrderModifiedUserId = DataSetMarket.Relations["UserSourceOrderModifiedUserId"];
            DataSetMarket.relationUserTrader = DataSetMarket.Relations["UserTrader"];
            DataSetMarket.relationUserWorkingOrderCreatedUserId = DataSetMarket.Relations["UserWorkingOrderCreatedUserId"];
            DataSetMarket.relationUserWorkingOrderModifiedUserId = DataSetMarket.Relations["UserWorkingOrderModifiedUserId"];
            DataSetMarket.relationVolumeCategorySecurity = DataSetMarket.Relations["VolumeCategorySecurity"];
            DataSetMarket.relationVolumeCategoryTraderVolumeSetting = DataSetMarket.Relations["VolumeCategoryTraderVolumeSetting"];
            DataSetMarket.relationWorkingOrderAllocation = DataSetMarket.Relations["WorkingOrderAllocation"];
            DataSetMarket.relationWorkingOrderDestinationOrder = DataSetMarket.Relations["WorkingOrderDestinationOrder"];
            DataSetMarket.relationWorkingOrderMatch = DataSetMarket.Relations["WorkingOrderMatch"];
            DataSetMarket.relationWorkingOrderSourceOrder = DataSetMarket.Relations["WorkingOrderSourceOrder"];
        }
        
        private static void InitClass()
        {
            DataSetMarket.dataSet = new DataSet();
            DataSetMarket.tableLockCollection = new TableLockCollection();
            DataSetMarket.dataSet.DataSetName = "DataSetMarket";
            DataSetMarket.dataSet.Prefix = "";
            DataSetMarket.dataSet.Namespace = "";
            DataSetMarket.dataSet.Locale = new System.Globalization.CultureInfo("en-US");
            DataSetMarket.dataSet.CaseSensitive = false;
            DataSetMarket.dataSet.EnforceConstraints = true;
            DataSetMarket.tableAccountBase = new AccountBaseDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableAccountBase);
            DataSetMarket.lockAccountBase = new TableLock("AccountBase");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockAccountBase);
            DataSetMarket.tableAccount = new AccountDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableAccount);
            DataSetMarket.lockAccount = new TableLock("Account");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockAccount);
            DataSetMarket.tableAccountGroup = new AccountGroupDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableAccountGroup);
            DataSetMarket.lockAccountGroup = new TableLock("AccountGroup");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockAccountGroup);
            DataSetMarket.tableAllocation = new AllocationDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableAllocation);
            DataSetMarket.lockAllocation = new TableLock("Allocation");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockAllocation);
            DataSetMarket.tableBlotter = new BlotterDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableBlotter);
            DataSetMarket.lockBlotter = new TableLock("Blotter");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockBlotter);
            DataSetMarket.tableBranch = new BranchDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableBranch);
            DataSetMarket.lockBranch = new TableLock("Branch");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockBranch);
            DataSetMarket.tableBroker = new BrokerDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableBroker);
            DataSetMarket.lockBroker = new TableLock("Broker");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockBroker);
            DataSetMarket.tableBrokerAccount = new BrokerAccountDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableBrokerAccount);
            DataSetMarket.lockBrokerAccount = new TableLock("BrokerAccount");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockBrokerAccount);
            DataSetMarket.tableClearingBroker = new ClearingBrokerDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableClearingBroker);
            DataSetMarket.lockClearingBroker = new TableLock("ClearingBroker");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockClearingBroker);
            DataSetMarket.tableComplianceOfficer = new ComplianceOfficerDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableComplianceOfficer);
            DataSetMarket.lockComplianceOfficer = new TableLock("ComplianceOfficer");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockComplianceOfficer);
            DataSetMarket.tableCondition = new ConditionDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableCondition);
            DataSetMarket.lockCondition = new TableLock("Condition");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockCondition);
            DataSetMarket.tableConfiguration = new ConfigurationDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableConfiguration);
            DataSetMarket.lockConfiguration = new TableLock("Configuration");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockConfiguration);
            DataSetMarket.tableCountry = new CountryDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableCountry);
            DataSetMarket.lockCountry = new TableLock("Country");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockCountry);
            DataSetMarket.tableCurrency = new CurrencyDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableCurrency);
            DataSetMarket.lockCurrency = new TableLock("Currency");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockCurrency);
            DataSetMarket.tableDebt = new DebtDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableDebt);
            DataSetMarket.lockDebt = new TableLock("Debt");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockDebt);
            DataSetMarket.tableDestination = new DestinationDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableDestination);
            DataSetMarket.lockDestination = new TableLock("Destination");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockDestination);
            DataSetMarket.tableDestinationOrder = new DestinationOrderDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableDestinationOrder);
            DataSetMarket.lockDestinationOrder = new TableLock("DestinationOrder");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockDestinationOrder);
            DataSetMarket.tableEquity = new EquityDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableEquity);
            DataSetMarket.lockEquity = new TableLock("Equity");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockEquity);
            DataSetMarket.tableExchange = new ExchangeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableExchange);
            DataSetMarket.lockExchange = new TableLock("Exchange");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockExchange);
            DataSetMarket.tableExecution = new ExecutionDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableExecution);
            DataSetMarket.lockExecution = new TableLock("Execution");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockExecution);
            DataSetMarket.tableFixMessage = new FixMessageDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableFixMessage);
            DataSetMarket.lockFixMessage = new TableLock("FixMessage");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockFixMessage);
            DataSetMarket.tableFolder = new FolderDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableFolder);
            DataSetMarket.lockFolder = new TableLock("Folder");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockFolder);
            DataSetMarket.tableHoliday = new HolidayDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableHoliday);
            DataSetMarket.lockHoliday = new TableLock("Holiday");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockHoliday);
            DataSetMarket.tableHolidayType = new HolidayTypeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableHolidayType);
            DataSetMarket.lockHolidayType = new TableLock("HolidayType");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockHolidayType);
            DataSetMarket.tableImage = new ImageDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableImage);
            DataSetMarket.lockImage = new TableLock("Image");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockImage);
            DataSetMarket.tableInstitution = new InstitutionDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableInstitution);
            DataSetMarket.lockInstitution = new TableLock("Institution");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockInstitution);
            DataSetMarket.tableIssuer = new IssuerDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableIssuer);
            DataSetMarket.lockIssuer = new TableLock("Issuer");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockIssuer);
            DataSetMarket.tableLotHandling = new LotHandlingDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableLotHandling);
            DataSetMarket.lockLotHandling = new TableLock("LotHandling");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockLotHandling);
            DataSetMarket.tableMatch = new MatchDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableMatch);
            DataSetMarket.lockMatch = new TableLock("Match");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockMatch);
            DataSetMarket.tableNegotiation = new NegotiationDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableNegotiation);
            DataSetMarket.lockNegotiation = new TableLock("Negotiation");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockNegotiation);
            DataSetMarket.tableObject = new ObjectDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableObject);
            DataSetMarket.lockObject = new TableLock("Object");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockObject);
            DataSetMarket.tableObjectTree = new ObjectTreeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableObjectTree);
            DataSetMarket.lockObjectTree = new TableLock("ObjectTree");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockObjectTree);
            DataSetMarket.tableOrderType = new OrderTypeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableOrderType);
            DataSetMarket.lockOrderType = new TableLock("OrderType");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockOrderType);
            DataSetMarket.tablePartyType = new PartyTypeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tablePartyType);
            DataSetMarket.lockPartyType = new TableLock("PartyType");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockPartyType);
            DataSetMarket.tablePosition = new PositionDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tablePosition);
            DataSetMarket.lockPosition = new TableLock("Position");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockPosition);
            DataSetMarket.tablePositionType = new PositionTypeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tablePositionType);
            DataSetMarket.lockPositionType = new TableLock("PositionType");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockPositionType);
            DataSetMarket.tablePrice = new PriceDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tablePrice);
            DataSetMarket.lockPrice = new TableLock("Price");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockPrice);
            DataSetMarket.tablePriceType = new PriceTypeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tablePriceType);
            DataSetMarket.lockPriceType = new TableLock("PriceType");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockPriceType);
            DataSetMarket.tableProperty = new PropertyDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableProperty);
            DataSetMarket.lockProperty = new TableLock("Property");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockProperty);
            DataSetMarket.tableProvince = new ProvinceDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableProvince);
            DataSetMarket.lockProvince = new TableLock("Province");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockProvince);
            DataSetMarket.tableSecurity = new SecurityDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableSecurity);
            DataSetMarket.lockSecurity = new TableLock("Security");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockSecurity);
            DataSetMarket.tableState = new StateDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableState);
            DataSetMarket.lockState = new TableLock("State");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockState);
            DataSetMarket.tableSource = new SourceDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableSource);
            DataSetMarket.lockSource = new TableLock("Source");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockSource);
            DataSetMarket.tableSourceOrder = new SourceOrderDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableSourceOrder);
            DataSetMarket.lockSourceOrder = new TableLock("SourceOrder");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockSourceOrder);
            DataSetMarket.tableStatus = new StatusDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableStatus);
            DataSetMarket.lockStatus = new TableLock("Status");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockStatus);
            DataSetMarket.tableStylesheet = new StylesheetDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableStylesheet);
            DataSetMarket.lockStylesheet = new TableLock("Stylesheet");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockStylesheet);
            DataSetMarket.tableStylesheetType = new StylesheetTypeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableStylesheetType);
            DataSetMarket.lockStylesheetType = new TableLock("StylesheetType");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockStylesheetType);
            DataSetMarket.tableSubmissionType = new SubmissionTypeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableSubmissionType);
            DataSetMarket.lockSubmissionType = new TableLock("SubmissionType");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockSubmissionType);
            DataSetMarket.tableSystemFolder = new SystemFolderDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableSystemFolder);
            DataSetMarket.lockSystemFolder = new TableLock("SystemFolder");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockSystemFolder);
            DataSetMarket.tableTaxLot = new TaxLotDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableTaxLot);
            DataSetMarket.lockTaxLot = new TableLock("TaxLot");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockTaxLot);
            DataSetMarket.tableTimeInForce = new TimeInForceDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableTimeInForce);
            DataSetMarket.lockTimeInForce = new TableLock("TimeInForce");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockTimeInForce);
            DataSetMarket.tableTimer = new TimerDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableTimer);
            DataSetMarket.lockTimer = new TableLock("Timer");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockTimer);
            DataSetMarket.tableTrader = new TraderDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableTrader);
            DataSetMarket.lockTrader = new TableLock("Trader");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockTrader);
            DataSetMarket.tableTraderVolumeSetting = new TraderVolumeSettingDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableTraderVolumeSetting);
            DataSetMarket.lockTraderVolumeSetting = new TableLock("TraderVolumeSetting");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockTraderVolumeSetting);
            DataSetMarket.tableType = new TypeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableType);
            DataSetMarket.lockType = new TableLock("Type");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockType);
            DataSetMarket.tableUser = new UserDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableUser);
            DataSetMarket.lockUser = new TableLock("User");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockUser);
            DataSetMarket.tableVolumeCategory = new VolumeCategoryDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableVolumeCategory);
            DataSetMarket.lockVolumeCategory = new TableLock("VolumeCategory");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockVolumeCategory);
            DataSetMarket.tableWorkingOrder = new WorkingOrderDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableWorkingOrder);
            DataSetMarket.lockWorkingOrder = new TableLock("WorkingOrder");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockWorkingOrder);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("CountryAccountBase", new Column[] {
                        DataSetMarket.tableCountry.CountryIdColumn}, new Column[] {
                        DataSetMarket.tableAccountBase.CountryIdColumn});
            DataSetMarket.tableAccountBase.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("CurrencyAccountBase", new Column[] {
                        DataSetMarket.tableCurrency.CurrencyIdColumn}, new Column[] {
                        DataSetMarket.tableAccountBase.CurrencyIdColumn});
            DataSetMarket.tableAccountBase.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ObjectAccountBase", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableAccountBase.AccountBaseIdColumn});
            DataSetMarket.tableAccountBase.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ProvinceAccountBase", new Column[] {
                        DataSetMarket.tableProvince.ProvinceIdColumn}, new Column[] {
                        DataSetMarket.tableAccountBase.ProvinceIdColumn});
            DataSetMarket.tableAccountBase.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SecurityAccountBase", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableAccountBase.CurrencyIdColumn});
            DataSetMarket.tableAccountBase.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("UserAccountBase", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableAccountBase.UserIdColumn});
            DataSetMarket.tableAccountBase.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("AccountBaseAccount", new Column[] {
                        DataSetMarket.tableAccountBase.AccountBaseIdColumn}, new Column[] {
                        DataSetMarket.tableAccount.AccountIdColumn});
            DataSetMarket.tableAccount.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("LotHandlingAccount", new Column[] {
                        DataSetMarket.tableLotHandling.LotHandlingCodeColumn}, new Column[] {
                        DataSetMarket.tableAccount.LotHandlingCodeColumn});
            DataSetMarket.tableAccount.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("AccountBaseAccountGroup", new Column[] {
                        DataSetMarket.tableAccountBase.AccountBaseIdColumn}, new Column[] {
                        DataSetMarket.tableAccountGroup.AccountGroupIdColumn});
            DataSetMarket.tableAccountGroup.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("AccountAllocation", new Column[] {
                        DataSetMarket.tableAccount.AccountIdColumn}, new Column[] {
                        DataSetMarket.tableAllocation.AccountIdColumn});
            DataSetMarket.tableAllocation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("OrderTypeAllocation", new Column[] {
                        DataSetMarket.tableOrderType.OrderTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableAllocation.OrderTypeCodeColumn});
            DataSetMarket.tableAllocation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SecurityAllocationSecurityId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableAllocation.SecurityIdColumn});
            DataSetMarket.tableAllocation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SecurityAllocationSettlementId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableAllocation.SettlementIdColumn});
            DataSetMarket.tableAllocation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("UserAllocationCreatedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableAllocation.CreatedUserIdColumn});
            DataSetMarket.tableAllocation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("UserAllocationModifiedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableAllocation.ModifiedUserIdColumn});
            DataSetMarket.tableAllocation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("WorkingOrderAllocation", new Column[] {
                        DataSetMarket.tableWorkingOrder.WorkingOrderIdColumn}, new Column[] {
                        DataSetMarket.tableAllocation.WorkingOrderIdColumn});
            DataSetMarket.tableAllocation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ObjectBlotter", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.BlotterIdColumn});
            DataSetMarket.tableBlotter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("PartyTypeBlotter", new Column[] {
                        DataSetMarket.tablePartyType.PartyTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableBlotter.PartyTypeCodeColumn});
            DataSetMarket.tableBlotter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("StylesheetBlotterAdvertisementStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.AdvertisementStylesheetIdColumn});
            DataSetMarket.tableBlotter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("StylesheetBlotterDestinationOrderDetailStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.DestinationOrderDetailStylesheetIdColumn});
            DataSetMarket.tableBlotter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("StylesheetBlotterDestinationOrderStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.DestinationOrderStylesheetIdColumn});
            DataSetMarket.tableBlotter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("StylesheetBlotterExecutionDetailStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.ExecutionDetailStylesheetIdColumn});
            DataSetMarket.tableBlotter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("StylesheetBlotterExecutionStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.ExecutionStylesheetIdColumn});
            DataSetMarket.tableBlotter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("StylesheetBlotterMatchStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.MatchStylesheetIdColumn});
            DataSetMarket.tableBlotter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("StylesheetBlotterMatchHistoryStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.MatchHistoryStylesheetIdColumn});
            DataSetMarket.tableBlotter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("StylesheetBlotterSourceOrderDetailStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.SourceOrderDetailStylesheetIdColumn});
            DataSetMarket.tableBlotter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("StylesheetBlotterSourceOrderStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.SourceOrderStylesheetIdColumn});
            DataSetMarket.tableBlotter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("StylesheetBlotterWorkingOrderStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.WorkingOrderStylesheetIdColumn});
            DataSetMarket.tableBlotter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("BlotterBranch", new Column[] {
                        DataSetMarket.tableBlotter.BlotterIdColumn}, new Column[] {
                        DataSetMarket.tableBranch.BranchIdColumn});
            DataSetMarket.tableBranch.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SourceBroker", new Column[] {
                        DataSetMarket.tableSource.SourceIdColumn}, new Column[] {
                        DataSetMarket.tableBroker.BrokerIdColumn});
            DataSetMarket.tableBroker.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("BrokerBrokerAccount", new Column[] {
                        DataSetMarket.tableBroker.BrokerIdColumn}, new Column[] {
                        DataSetMarket.tableBrokerAccount.BrokerIdColumn});
            DataSetMarket.tableBrokerAccount.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TraderBrokerAccount", new Column[] {
                        DataSetMarket.tableTrader.TraderIdColumn}, new Column[] {
                        DataSetMarket.tableBrokerAccount.TraderIdColumn});
            DataSetMarket.tableBrokerAccount.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("BrokerClearingBroker", new Column[] {
                        DataSetMarket.tableBroker.BrokerIdColumn}, new Column[] {
                        DataSetMarket.tableClearingBroker.ClearingBrokerIdColumn});
            DataSetMarket.tableClearingBroker.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("UserComplianceOfficer", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableComplianceOfficer.ComplianceOfficerIdColumn});
            DataSetMarket.tableComplianceOfficer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SecurityCurrency", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableCurrency.CurrencyIdColumn});
            DataSetMarket.tableCurrency.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("IssuerDebt", new Column[] {
                        DataSetMarket.tableIssuer.IssuerIdColumn}, new Column[] {
                        DataSetMarket.tableDebt.IssuerIdColumn});
            DataSetMarket.tableDebt.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SecurityDebtDebtId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableDebt.DebtIdColumn});
            DataSetMarket.tableDebt.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SecurityDebtSettlementId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableDebt.SettlementIdColumn});
            DataSetMarket.tableDebt.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("DestinationDestinationOrder", new Column[] {
                        DataSetMarket.tableDestination.DestinationIdColumn}, new Column[] {
                        DataSetMarket.tableDestinationOrder.DestinationIdColumn});
            DataSetMarket.tableDestinationOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("PriceTypeDestinationOrder", new Column[] {
                        DataSetMarket.tablePriceType.PriceTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableDestinationOrder.PriceTypeCodeColumn});
            DataSetMarket.tableDestinationOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("StateDestinationOrder", new Column[] {
                        DataSetMarket.tableState.StateCodeColumn}, new Column[] {
                        DataSetMarket.tableDestinationOrder.StateCodeColumn});
            DataSetMarket.tableDestinationOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("StatusDestinationOrder", new Column[] {
                        DataSetMarket.tableStatus.StatusCodeColumn}, new Column[] {
                        DataSetMarket.tableDestinationOrder.StatusCodeColumn});
            DataSetMarket.tableDestinationOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TimeInForceDestinationOrder", new Column[] {
                        DataSetMarket.tableTimeInForce.TimeInForceCodeColumn}, new Column[] {
                        DataSetMarket.tableDestinationOrder.TimeInForceCodeColumn});
            DataSetMarket.tableDestinationOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TraderDestinationOrder", new Column[] {
                        DataSetMarket.tableTrader.TraderIdColumn}, new Column[] {
                        DataSetMarket.tableDestinationOrder.TraderIdColumn});
            DataSetMarket.tableDestinationOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("WorkingOrderDestinationOrder", new Column[] {
                        DataSetMarket.tableWorkingOrder.WorkingOrderIdColumn}, new Column[] {
                        DataSetMarket.tableDestinationOrder.WorkingOrderIdColumn});
            DataSetMarket.tableDestinationOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ExchangeEquity", new Column[] {
                        DataSetMarket.tableExchange.ExchangeIdColumn}, new Column[] {
                        DataSetMarket.tableEquity.ExchangeIdColumn});
            DataSetMarket.tableEquity.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SecurityEquityEquityId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableEquity.EquityIdColumn});
            DataSetMarket.tableEquity.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SecurityEquitySettlementId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableEquity.SettlementIdColumn});
            DataSetMarket.tableEquity.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("BrokerAccountExecution", new Column[] {
                        DataSetMarket.tableBrokerAccount.BrokerAccountIdColumn}, new Column[] {
                        DataSetMarket.tableExecution.BrokerAccountIdColumn});
            DataSetMarket.tableExecution.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("BrokerExecution", new Column[] {
                        DataSetMarket.tableBroker.BrokerIdColumn}, new Column[] {
                        DataSetMarket.tableExecution.BrokerIdColumn});
            DataSetMarket.tableExecution.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("DestinationOrderExecution", new Column[] {
                        DataSetMarket.tableDestinationOrder.DestinationOrderIdColumn}, new Column[] {
                        DataSetMarket.tableExecution.DestinationOrderIdColumn});
            DataSetMarket.tableExecution.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("StateExecutionDestinationStateCode", new Column[] {
                        DataSetMarket.tableState.StateCodeColumn}, new Column[] {
                        DataSetMarket.tableExecution.DestinationStateCodeColumn});
            DataSetMarket.tableExecution.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("StateExecutionSourceStateCode", new Column[] {
                        DataSetMarket.tableState.StateCodeColumn}, new Column[] {
                        DataSetMarket.tableExecution.SourceStateCodeColumn});
            DataSetMarket.tableExecution.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("UserExecutionCreatedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableExecution.CreatedUserIdColumn});
            DataSetMarket.tableExecution.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("UserExecutionModifiedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableExecution.ModifiedUserIdColumn});
            DataSetMarket.tableExecution.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ObjectFolder", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableFolder.FolderIdColumn});
            DataSetMarket.tableFolder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("CountryHoliday", new Column[] {
                        DataSetMarket.tableCountry.CountryIdColumn}, new Column[] {
                        DataSetMarket.tableHoliday.CountryIdColumn});
            DataSetMarket.tableHoliday.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("HolidayTypeHoliday", new Column[] {
                        DataSetMarket.tableHolidayType.HolidayTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableHoliday.HolidayTypeCodeColumn});
            DataSetMarket.tableHoliday.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SourceInstitution", new Column[] {
                        DataSetMarket.tableSource.SourceIdColumn}, new Column[] {
                        DataSetMarket.tableInstitution.InstitutionIdColumn});
            DataSetMarket.tableInstitution.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ObjectIssuer", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableIssuer.IssuerIdColumn});
            DataSetMarket.tableIssuer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("StatusMatch", new Column[] {
                        DataSetMarket.tableStatus.StatusCodeColumn}, new Column[] {
                        DataSetMarket.tableMatch.StatusCodeColumn});
            DataSetMarket.tableMatch.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TimerMatch", new Column[] {
                        DataSetMarket.tableTimer.TimerIdColumn}, new Column[] {
                        DataSetMarket.tableMatch.TimerIdColumn});
            DataSetMarket.tableMatch.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("WorkingOrderMatch", new Column[] {
                        DataSetMarket.tableWorkingOrder.WorkingOrderIdColumn}, new Column[] {
                        DataSetMarket.tableMatch.WorkingOrderIdColumn});
            DataSetMarket.tableMatch.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ExecutionNegotiation", new Column[] {
                        DataSetMarket.tableExecution.ExecutionIdColumn}, new Column[] {
                        DataSetMarket.tableNegotiation.ExecutionIdColumn});
            DataSetMarket.tableNegotiation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("MatchNegotiation", new Column[] {
                        DataSetMarket.tableMatch.MatchIdColumn}, new Column[] {
                        DataSetMarket.tableNegotiation.MatchIdColumn});
            DataSetMarket.tableNegotiation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("StatusNegotiation", new Column[] {
                        DataSetMarket.tableStatus.StatusCodeColumn}, new Column[] {
                        DataSetMarket.tableNegotiation.StatusCodeColumn});
            DataSetMarket.tableNegotiation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TypeObject", new Column[] {
                        DataSetMarket.tableType.TypeCodeColumn}, new Column[] {
                        DataSetMarket.tableObject.TypeCodeColumn});
            DataSetMarket.tableObject.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ObjectObjectTreeChildId", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableObjectTree.ChildIdColumn});
            DataSetMarket.tableObjectTree.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ObjectObjectTreeParentId", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableObjectTree.ParentIdColumn});
            DataSetMarket.tableObjectTree.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("AccountPosition", new Column[] {
                        DataSetMarket.tableAccount.AccountIdColumn}, new Column[] {
                        DataSetMarket.tablePosition.AccountIdColumn});
            DataSetMarket.tablePosition.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("PositionTypePosition", new Column[] {
                        DataSetMarket.tablePositionType.PositionTypeCodeColumn}, new Column[] {
                        DataSetMarket.tablePosition.PositionTypeCodeColumn});
            DataSetMarket.tablePosition.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SecurityPosition", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tablePosition.SecurityIdColumn});
            DataSetMarket.tablePosition.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("CurrencyPrice", new Column[] {
                        DataSetMarket.tableCurrency.CurrencyIdColumn}, new Column[] {
                        DataSetMarket.tablePrice.CurrencyIdColumn});
            DataSetMarket.tablePrice.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SecurityPrice", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tablePrice.SecurityIdColumn});
            DataSetMarket.tablePrice.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("CountryProvince", new Column[] {
                        DataSetMarket.tableCountry.CountryIdColumn}, new Column[] {
                        DataSetMarket.tableProvince.CountryIdColumn});
            DataSetMarket.tableProvince.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("CountrySecurity", new Column[] {
                        DataSetMarket.tableCountry.CountryIdColumn}, new Column[] {
                        DataSetMarket.tableSecurity.CountryIdColumn});
            DataSetMarket.tableSecurity.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ObjectSecurity", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn});
            DataSetMarket.tableSecurity.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("VolumeCategorySecurity", new Column[] {
                        DataSetMarket.tableVolumeCategory.VolumeCategoryIdColumn}, new Column[] {
                        DataSetMarket.tableSecurity.VolumeCategoryIdColumn});
            DataSetMarket.tableSecurity.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("BlotterSource", new Column[] {
                        DataSetMarket.tableBlotter.BlotterIdColumn}, new Column[] {
                        DataSetMarket.tableSource.SourceIdColumn});
            DataSetMarket.tableSource.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("DestinationSourceOrder", new Column[] {
                        DataSetMarket.tableDestination.DestinationIdColumn}, new Column[] {
                        DataSetMarket.tableSourceOrder.DestinationIdColumn});
            DataSetMarket.tableSourceOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("OrderTypeSourceOrder", new Column[] {
                        DataSetMarket.tableOrderType.OrderTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableSourceOrder.OrderTypeCodeColumn});
            DataSetMarket.tableSourceOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("PriceTypeSourceOrder", new Column[] {
                        DataSetMarket.tablePriceType.PriceTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableSourceOrder.PriceTypeCodeColumn});
            DataSetMarket.tableSourceOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SecuritySourceOrderSecurityId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableSourceOrder.SecurityIdColumn});
            DataSetMarket.tableSourceOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SecuritySourceOrderSettlementId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableSourceOrder.SettlementIdColumn});
            DataSetMarket.tableSourceOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("StatusSourceOrder", new Column[] {
                        DataSetMarket.tableStatus.StatusCodeColumn}, new Column[] {
                        DataSetMarket.tableSourceOrder.StatusCodeColumn});
            DataSetMarket.tableSourceOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TimeInForceSourceOrder", new Column[] {
                        DataSetMarket.tableTimeInForce.TimeInForceCodeColumn}, new Column[] {
                        DataSetMarket.tableSourceOrder.TimeInForceCodeColumn});
            DataSetMarket.tableSourceOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("UserSourceOrderCreatedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableSourceOrder.CreatedUserIdColumn});
            DataSetMarket.tableSourceOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("UserSourceOrderModifiedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableSourceOrder.ModifiedUserIdColumn});
            DataSetMarket.tableSourceOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("WorkingOrderSourceOrder", new Column[] {
                        DataSetMarket.tableWorkingOrder.WorkingOrderIdColumn}, new Column[] {
                        DataSetMarket.tableSourceOrder.WorkingOrderIdColumn});
            DataSetMarket.tableSourceOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("StylesheetTypeStylesheet", new Column[] {
                        DataSetMarket.tableStylesheetType.StylesheetTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetTypeCodeColumn});
            DataSetMarket.tableStylesheet.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FolderSystemFolder", new Column[] {
                        DataSetMarket.tableFolder.FolderIdColumn}, new Column[] {
                        DataSetMarket.tableSystemFolder.SystemFolderIdColumn});
            DataSetMarket.tableSystemFolder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("AccountTaxLot", new Column[] {
                        DataSetMarket.tableAccount.AccountIdColumn}, new Column[] {
                        DataSetMarket.tableTaxLot.AccountIdColumn});
            DataSetMarket.tableTaxLot.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("PositionTypeTaxLot", new Column[] {
                        DataSetMarket.tablePositionType.PositionTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableTaxLot.PositionTypeCodeColumn});
            DataSetMarket.tableTaxLot.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SecurityTaxLot", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableTaxLot.SecurityIdColumn});
            DataSetMarket.tableTaxLot.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("BlotterTrader", new Column[] {
                        DataSetMarket.tableBlotter.BlotterIdColumn}, new Column[] {
                        DataSetMarket.tableTrader.BlotterIdDefaultColumn});
            DataSetMarket.tableTrader.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("UserTrader", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableTrader.TraderIdColumn});
            DataSetMarket.tableTrader.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TraderTraderVolumeSetting", new Column[] {
                        DataSetMarket.tableTrader.TraderIdColumn}, new Column[] {
                        DataSetMarket.tableTraderVolumeSetting.TraderIdColumn});
            DataSetMarket.tableTraderVolumeSetting.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("VolumeCategoryTraderVolumeSetting", new Column[] {
                        DataSetMarket.tableVolumeCategory.VolumeCategoryIdColumn}, new Column[] {
                        DataSetMarket.tableTraderVolumeSetting.VolumeCategoryIdColumn});
            DataSetMarket.tableTraderVolumeSetting.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ObjectUser", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableUser.UserIdColumn});
            DataSetMarket.tableUser.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SystemFolderUser", new Column[] {
                        DataSetMarket.tableSystemFolder.SystemFolderIdColumn}, new Column[] {
                        DataSetMarket.tableUser.SystemFolderIdColumn});
            DataSetMarket.tableUser.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("BlotterWorkingOrder", new Column[] {
                        DataSetMarket.tableBlotter.BlotterIdColumn}, new Column[] {
                        DataSetMarket.tableWorkingOrder.BlotterIdColumn});
            DataSetMarket.tableWorkingOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("DestinationWorkingOrder", new Column[] {
                        DataSetMarket.tableDestination.DestinationIdColumn}, new Column[] {
                        DataSetMarket.tableWorkingOrder.DestinationIdColumn});
            DataSetMarket.tableWorkingOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("OrderTypeWorkingOrder", new Column[] {
                        DataSetMarket.tableOrderType.OrderTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableWorkingOrder.OrderTypeCodeColumn});
            DataSetMarket.tableWorkingOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("PriceTypeWorkingOrder", new Column[] {
                        DataSetMarket.tablePriceType.PriceTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableWorkingOrder.PriceTypeCodeColumn});
            DataSetMarket.tableWorkingOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("PriceWorkingOrder", new Column[] {
                        DataSetMarket.tablePrice.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableWorkingOrder.SecurityIdColumn});
            DataSetMarket.tableWorkingOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SecurityWorkingOrderSecurityId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableWorkingOrder.SecurityIdColumn});
            DataSetMarket.tableWorkingOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SecurityWorkingOrderSettlementId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableWorkingOrder.SettlementIdColumn});
            DataSetMarket.tableWorkingOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("StatusWorkingOrder", new Column[] {
                        DataSetMarket.tableStatus.StatusCodeColumn}, new Column[] {
                        DataSetMarket.tableWorkingOrder.StatusCodeColumn});
            DataSetMarket.tableWorkingOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SubmissionTypeWorkingOrder", new Column[] {
                        DataSetMarket.tableSubmissionType.SubmissionTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableWorkingOrder.SubmissionTypeCodeColumn});
            DataSetMarket.tableWorkingOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TimeInForceWorkingOrder", new Column[] {
                        DataSetMarket.tableTimeInForce.TimeInForceCodeColumn}, new Column[] {
                        DataSetMarket.tableWorkingOrder.TimeInForceCodeColumn});
            DataSetMarket.tableWorkingOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TimerWorkingOrder", new Column[] {
                        DataSetMarket.tableTimer.TimerIdColumn}, new Column[] {
                        DataSetMarket.tableWorkingOrder.TimerIdColumn});
            DataSetMarket.tableWorkingOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("UserWorkingOrderCreatedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableWorkingOrder.CreatedUserIdColumn});
            DataSetMarket.tableWorkingOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("UserWorkingOrderModifiedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableWorkingOrder.ModifiedUserIdColumn});
            DataSetMarket.tableWorkingOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            DataSetMarket.relationAccountAllocation = new Relation("AccountAllocation", new Column[] {
                        DataSetMarket.tableAccount.AccountIdColumn}, new Column[] {
                        DataSetMarket.tableAllocation.AccountIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationAccountAllocation);
            DataSetMarket.relationAccountBaseAccount = new Relation("AccountBaseAccount", new Column[] {
                        DataSetMarket.tableAccountBase.AccountBaseIdColumn}, new Column[] {
                        DataSetMarket.tableAccount.AccountIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationAccountBaseAccount);
            DataSetMarket.relationAccountBaseAccountGroup = new Relation("AccountBaseAccountGroup", new Column[] {
                        DataSetMarket.tableAccountBase.AccountBaseIdColumn}, new Column[] {
                        DataSetMarket.tableAccountGroup.AccountGroupIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationAccountBaseAccountGroup);
            DataSetMarket.relationAccountPosition = new Relation("AccountPosition", new Column[] {
                        DataSetMarket.tableAccount.AccountIdColumn}, new Column[] {
                        DataSetMarket.tablePosition.AccountIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationAccountPosition);
            DataSetMarket.relationAccountTaxLot = new Relation("AccountTaxLot", new Column[] {
                        DataSetMarket.tableAccount.AccountIdColumn}, new Column[] {
                        DataSetMarket.tableTaxLot.AccountIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationAccountTaxLot);
            DataSetMarket.relationBlotterBranch = new Relation("BlotterBranch", new Column[] {
                        DataSetMarket.tableBlotter.BlotterIdColumn}, new Column[] {
                        DataSetMarket.tableBranch.BranchIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationBlotterBranch);
            DataSetMarket.relationBlotterSource = new Relation("BlotterSource", new Column[] {
                        DataSetMarket.tableBlotter.BlotterIdColumn}, new Column[] {
                        DataSetMarket.tableSource.SourceIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationBlotterSource);
            DataSetMarket.relationBlotterTrader = new Relation("BlotterTrader", new Column[] {
                        DataSetMarket.tableBlotter.BlotterIdColumn}, new Column[] {
                        DataSetMarket.tableTrader.BlotterIdDefaultColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationBlotterTrader);
            DataSetMarket.relationBlotterWorkingOrder = new Relation("BlotterWorkingOrder", new Column[] {
                        DataSetMarket.tableBlotter.BlotterIdColumn}, new Column[] {
                        DataSetMarket.tableWorkingOrder.BlotterIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationBlotterWorkingOrder);
            DataSetMarket.relationBrokerAccountExecution = new Relation("BrokerAccountExecution", new Column[] {
                        DataSetMarket.tableBrokerAccount.BrokerAccountIdColumn}, new Column[] {
                        DataSetMarket.tableExecution.BrokerAccountIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationBrokerAccountExecution);
            DataSetMarket.relationBrokerExecution = new Relation("BrokerExecution", new Column[] {
                        DataSetMarket.tableBroker.BrokerIdColumn}, new Column[] {
                        DataSetMarket.tableExecution.BrokerIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationBrokerExecution);
            DataSetMarket.relationBrokerBrokerAccount = new Relation("BrokerBrokerAccount", new Column[] {
                        DataSetMarket.tableBroker.BrokerIdColumn}, new Column[] {
                        DataSetMarket.tableBrokerAccount.BrokerIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationBrokerBrokerAccount);
            DataSetMarket.relationBrokerClearingBroker = new Relation("BrokerClearingBroker", new Column[] {
                        DataSetMarket.tableBroker.BrokerIdColumn}, new Column[] {
                        DataSetMarket.tableClearingBroker.ClearingBrokerIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationBrokerClearingBroker);
            DataSetMarket.relationCountryAccountBase = new Relation("CountryAccountBase", new Column[] {
                        DataSetMarket.tableCountry.CountryIdColumn}, new Column[] {
                        DataSetMarket.tableAccountBase.CountryIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationCountryAccountBase);
            DataSetMarket.relationCountryHoliday = new Relation("CountryHoliday", new Column[] {
                        DataSetMarket.tableCountry.CountryIdColumn}, new Column[] {
                        DataSetMarket.tableHoliday.CountryIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationCountryHoliday);
            DataSetMarket.relationCountryProvince = new Relation("CountryProvince", new Column[] {
                        DataSetMarket.tableCountry.CountryIdColumn}, new Column[] {
                        DataSetMarket.tableProvince.CountryIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationCountryProvince);
            DataSetMarket.relationCountrySecurity = new Relation("CountrySecurity", new Column[] {
                        DataSetMarket.tableCountry.CountryIdColumn}, new Column[] {
                        DataSetMarket.tableSecurity.CountryIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationCountrySecurity);
            DataSetMarket.relationCurrencyAccountBase = new Relation("CurrencyAccountBase", new Column[] {
                        DataSetMarket.tableCurrency.CurrencyIdColumn}, new Column[] {
                        DataSetMarket.tableAccountBase.CurrencyIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationCurrencyAccountBase);
            DataSetMarket.relationCurrencyPrice = new Relation("CurrencyPrice", new Column[] {
                        DataSetMarket.tableCurrency.CurrencyIdColumn}, new Column[] {
                        DataSetMarket.tablePrice.CurrencyIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationCurrencyPrice);
            DataSetMarket.relationDestinationDestinationOrder = new Relation("DestinationDestinationOrder", new Column[] {
                        DataSetMarket.tableDestination.DestinationIdColumn}, new Column[] {
                        DataSetMarket.tableDestinationOrder.DestinationIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationDestinationDestinationOrder);
            DataSetMarket.relationDestinationOrderExecution = new Relation("DestinationOrderExecution", new Column[] {
                        DataSetMarket.tableDestinationOrder.DestinationOrderIdColumn}, new Column[] {
                        DataSetMarket.tableExecution.DestinationOrderIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationDestinationOrderExecution);
            DataSetMarket.relationDestinationSourceOrder = new Relation("DestinationSourceOrder", new Column[] {
                        DataSetMarket.tableDestination.DestinationIdColumn}, new Column[] {
                        DataSetMarket.tableSourceOrder.DestinationIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationDestinationSourceOrder);
            DataSetMarket.relationDestinationWorkingOrder = new Relation("DestinationWorkingOrder", new Column[] {
                        DataSetMarket.tableDestination.DestinationIdColumn}, new Column[] {
                        DataSetMarket.tableWorkingOrder.DestinationIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationDestinationWorkingOrder);
            DataSetMarket.relationExchangeEquity = new Relation("ExchangeEquity", new Column[] {
                        DataSetMarket.tableExchange.ExchangeIdColumn}, new Column[] {
                        DataSetMarket.tableEquity.ExchangeIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationExchangeEquity);
            DataSetMarket.relationExecutionNegotiation = new Relation("ExecutionNegotiation", new Column[] {
                        DataSetMarket.tableExecution.ExecutionIdColumn}, new Column[] {
                        DataSetMarket.tableNegotiation.ExecutionIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationExecutionNegotiation);
            DataSetMarket.relationFolderSystemFolder = new Relation("FolderSystemFolder", new Column[] {
                        DataSetMarket.tableFolder.FolderIdColumn}, new Column[] {
                        DataSetMarket.tableSystemFolder.SystemFolderIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFolderSystemFolder);
            DataSetMarket.relationHolidayTypeHoliday = new Relation("HolidayTypeHoliday", new Column[] {
                        DataSetMarket.tableHolidayType.HolidayTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableHoliday.HolidayTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationHolidayTypeHoliday);
            DataSetMarket.relationIssuerDebt = new Relation("IssuerDebt", new Column[] {
                        DataSetMarket.tableIssuer.IssuerIdColumn}, new Column[] {
                        DataSetMarket.tableDebt.IssuerIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationIssuerDebt);
            DataSetMarket.relationLotHandlingAccount = new Relation("LotHandlingAccount", new Column[] {
                        DataSetMarket.tableLotHandling.LotHandlingCodeColumn}, new Column[] {
                        DataSetMarket.tableAccount.LotHandlingCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationLotHandlingAccount);
            DataSetMarket.relationMatchNegotiation = new Relation("MatchNegotiation", new Column[] {
                        DataSetMarket.tableMatch.MatchIdColumn}, new Column[] {
                        DataSetMarket.tableNegotiation.MatchIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationMatchNegotiation);
            DataSetMarket.relationObjectAccountBase = new Relation("ObjectAccountBase", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableAccountBase.AccountBaseIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationObjectAccountBase);
            DataSetMarket.relationObjectBlotter = new Relation("ObjectBlotter", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.BlotterIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationObjectBlotter);
            DataSetMarket.relationObjectFolder = new Relation("ObjectFolder", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableFolder.FolderIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationObjectFolder);
            DataSetMarket.relationObjectIssuer = new Relation("ObjectIssuer", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableIssuer.IssuerIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationObjectIssuer);
            DataSetMarket.relationObjectObjectTreeChildId = new Relation("ObjectObjectTreeChildId", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableObjectTree.ChildIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationObjectObjectTreeChildId);
            DataSetMarket.relationObjectObjectTreeParentId = new Relation("ObjectObjectTreeParentId", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableObjectTree.ParentIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationObjectObjectTreeParentId);
            DataSetMarket.relationObjectSecurity = new Relation("ObjectSecurity", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationObjectSecurity);
            DataSetMarket.relationObjectUser = new Relation("ObjectUser", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationObjectUser);
            DataSetMarket.relationOrderTypeAllocation = new Relation("OrderTypeAllocation", new Column[] {
                        DataSetMarket.tableOrderType.OrderTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableAllocation.OrderTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationOrderTypeAllocation);
            DataSetMarket.relationOrderTypeSourceOrder = new Relation("OrderTypeSourceOrder", new Column[] {
                        DataSetMarket.tableOrderType.OrderTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableSourceOrder.OrderTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationOrderTypeSourceOrder);
            DataSetMarket.relationOrderTypeWorkingOrder = new Relation("OrderTypeWorkingOrder", new Column[] {
                        DataSetMarket.tableOrderType.OrderTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableWorkingOrder.OrderTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationOrderTypeWorkingOrder);
            DataSetMarket.relationPartyTypeBlotter = new Relation("PartyTypeBlotter", new Column[] {
                        DataSetMarket.tablePartyType.PartyTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableBlotter.PartyTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationPartyTypeBlotter);
            DataSetMarket.relationPositionTypePosition = new Relation("PositionTypePosition", new Column[] {
                        DataSetMarket.tablePositionType.PositionTypeCodeColumn}, new Column[] {
                        DataSetMarket.tablePosition.PositionTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationPositionTypePosition);
            DataSetMarket.relationPositionTypeTaxLot = new Relation("PositionTypeTaxLot", new Column[] {
                        DataSetMarket.tablePositionType.PositionTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableTaxLot.PositionTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationPositionTypeTaxLot);
            DataSetMarket.relationPriceTypeDestinationOrder = new Relation("PriceTypeDestinationOrder", new Column[] {
                        DataSetMarket.tablePriceType.PriceTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableDestinationOrder.PriceTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationPriceTypeDestinationOrder);
            DataSetMarket.relationPriceTypeSourceOrder = new Relation("PriceTypeSourceOrder", new Column[] {
                        DataSetMarket.tablePriceType.PriceTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableSourceOrder.PriceTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationPriceTypeSourceOrder);
            DataSetMarket.relationPriceTypeWorkingOrder = new Relation("PriceTypeWorkingOrder", new Column[] {
                        DataSetMarket.tablePriceType.PriceTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableWorkingOrder.PriceTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationPriceTypeWorkingOrder);
            DataSetMarket.relationPriceWorkingOrder = new Relation("PriceWorkingOrder", new Column[] {
                        DataSetMarket.tablePrice.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableWorkingOrder.SecurityIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationPriceWorkingOrder);
            DataSetMarket.relationProvinceAccountBase = new Relation("ProvinceAccountBase", new Column[] {
                        DataSetMarket.tableProvince.ProvinceIdColumn}, new Column[] {
                        DataSetMarket.tableAccountBase.ProvinceIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationProvinceAccountBase);
            DataSetMarket.relationSecurityAccountBase = new Relation("SecurityAccountBase", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableAccountBase.CurrencyIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationSecurityAccountBase);
            DataSetMarket.relationSecurityAllocationSecurityId = new Relation("SecurityAllocationSecurityId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableAllocation.SecurityIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationSecurityAllocationSecurityId);
            DataSetMarket.relationSecurityAllocationSettlementId = new Relation("SecurityAllocationSettlementId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableAllocation.SettlementIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationSecurityAllocationSettlementId);
            DataSetMarket.relationSecurityCurrency = new Relation("SecurityCurrency", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableCurrency.CurrencyIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationSecurityCurrency);
            DataSetMarket.relationSecurityDebtDebtId = new Relation("SecurityDebtDebtId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableDebt.DebtIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationSecurityDebtDebtId);
            DataSetMarket.relationSecurityDebtSettlementId = new Relation("SecurityDebtSettlementId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableDebt.SettlementIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationSecurityDebtSettlementId);
            DataSetMarket.relationSecurityEquityEquityId = new Relation("SecurityEquityEquityId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableEquity.EquityIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationSecurityEquityEquityId);
            DataSetMarket.relationSecurityEquitySettlementId = new Relation("SecurityEquitySettlementId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableEquity.SettlementIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationSecurityEquitySettlementId);
            DataSetMarket.relationSecurityPosition = new Relation("SecurityPosition", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tablePosition.SecurityIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationSecurityPosition);
            DataSetMarket.relationSecurityPrice = new Relation("SecurityPrice", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tablePrice.SecurityIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationSecurityPrice);
            DataSetMarket.relationSecuritySourceOrderSecurityId = new Relation("SecuritySourceOrderSecurityId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableSourceOrder.SecurityIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationSecuritySourceOrderSecurityId);
            DataSetMarket.relationSecuritySourceOrderSettlementId = new Relation("SecuritySourceOrderSettlementId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableSourceOrder.SettlementIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationSecuritySourceOrderSettlementId);
            DataSetMarket.relationSecurityTaxLot = new Relation("SecurityTaxLot", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableTaxLot.SecurityIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationSecurityTaxLot);
            DataSetMarket.relationSecurityWorkingOrderSecurityId = new Relation("SecurityWorkingOrderSecurityId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableWorkingOrder.SecurityIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationSecurityWorkingOrderSecurityId);
            DataSetMarket.relationSecurityWorkingOrderSettlementId = new Relation("SecurityWorkingOrderSettlementId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableWorkingOrder.SettlementIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationSecurityWorkingOrderSettlementId);
            DataSetMarket.relationSourceBroker = new Relation("SourceBroker", new Column[] {
                        DataSetMarket.tableSource.SourceIdColumn}, new Column[] {
                        DataSetMarket.tableBroker.BrokerIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationSourceBroker);
            DataSetMarket.relationSourceInstitution = new Relation("SourceInstitution", new Column[] {
                        DataSetMarket.tableSource.SourceIdColumn}, new Column[] {
                        DataSetMarket.tableInstitution.InstitutionIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationSourceInstitution);
            DataSetMarket.relationStateDestinationOrder = new Relation("StateDestinationOrder", new Column[] {
                        DataSetMarket.tableState.StateCodeColumn}, new Column[] {
                        DataSetMarket.tableDestinationOrder.StateCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationStateDestinationOrder);
            DataSetMarket.relationStatusDestinationOrder = new Relation("StatusDestinationOrder", new Column[] {
                        DataSetMarket.tableStatus.StatusCodeColumn}, new Column[] {
                        DataSetMarket.tableDestinationOrder.StatusCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationStatusDestinationOrder);
            DataSetMarket.relationStateExecutionDestinationStateCode = new Relation("StateExecutionDestinationStateCode", new Column[] {
                        DataSetMarket.tableState.StateCodeColumn}, new Column[] {
                        DataSetMarket.tableExecution.DestinationStateCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationStateExecutionDestinationStateCode);
            DataSetMarket.relationStateExecutionSourceStateCode = new Relation("StateExecutionSourceStateCode", new Column[] {
                        DataSetMarket.tableState.StateCodeColumn}, new Column[] {
                        DataSetMarket.tableExecution.SourceStateCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationStateExecutionSourceStateCode);
            DataSetMarket.relationStatusMatch = new Relation("StatusMatch", new Column[] {
                        DataSetMarket.tableStatus.StatusCodeColumn}, new Column[] {
                        DataSetMarket.tableMatch.StatusCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationStatusMatch);
            DataSetMarket.relationStatusNegotiation = new Relation("StatusNegotiation", new Column[] {
                        DataSetMarket.tableStatus.StatusCodeColumn}, new Column[] {
                        DataSetMarket.tableNegotiation.StatusCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationStatusNegotiation);
            DataSetMarket.relationStatusSourceOrder = new Relation("StatusSourceOrder", new Column[] {
                        DataSetMarket.tableStatus.StatusCodeColumn}, new Column[] {
                        DataSetMarket.tableSourceOrder.StatusCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationStatusSourceOrder);
            DataSetMarket.relationStatusWorkingOrder = new Relation("StatusWorkingOrder", new Column[] {
                        DataSetMarket.tableStatus.StatusCodeColumn}, new Column[] {
                        DataSetMarket.tableWorkingOrder.StatusCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationStatusWorkingOrder);
            DataSetMarket.relationStylesheetBlotterAdvertisementStylesheetId = new Relation("StylesheetBlotterAdvertisementStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.AdvertisementStylesheetIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationStylesheetBlotterAdvertisementStylesheetId);
            DataSetMarket.relationStylesheetBlotterDestinationOrderDetailStylesheetId = new Relation("StylesheetBlotterDestinationOrderDetailStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.DestinationOrderDetailStylesheetIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationStylesheetBlotterDestinationOrderDetailStylesheetId);
            DataSetMarket.relationStylesheetBlotterDestinationOrderStylesheetId = new Relation("StylesheetBlotterDestinationOrderStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.DestinationOrderStylesheetIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationStylesheetBlotterDestinationOrderStylesheetId);
            DataSetMarket.relationStylesheetBlotterExecutionDetailStylesheetId = new Relation("StylesheetBlotterExecutionDetailStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.ExecutionDetailStylesheetIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationStylesheetBlotterExecutionDetailStylesheetId);
            DataSetMarket.relationStylesheetBlotterExecutionStylesheetId = new Relation("StylesheetBlotterExecutionStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.ExecutionStylesheetIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationStylesheetBlotterExecutionStylesheetId);
            DataSetMarket.relationStylesheetBlotterMatchStylesheetId = new Relation("StylesheetBlotterMatchStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.MatchStylesheetIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationStylesheetBlotterMatchStylesheetId);
            DataSetMarket.relationStylesheetBlotterMatchHistoryStylesheetId = new Relation("StylesheetBlotterMatchHistoryStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.MatchHistoryStylesheetIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationStylesheetBlotterMatchHistoryStylesheetId);
            DataSetMarket.relationStylesheetBlotterSourceOrderDetailStylesheetId = new Relation("StylesheetBlotterSourceOrderDetailStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.SourceOrderDetailStylesheetIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationStylesheetBlotterSourceOrderDetailStylesheetId);
            DataSetMarket.relationStylesheetBlotterSourceOrderStylesheetId = new Relation("StylesheetBlotterSourceOrderStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.SourceOrderStylesheetIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationStylesheetBlotterSourceOrderStylesheetId);
            DataSetMarket.relationStylesheetBlotterWorkingOrderStylesheetId = new Relation("StylesheetBlotterWorkingOrderStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.WorkingOrderStylesheetIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationStylesheetBlotterWorkingOrderStylesheetId);
            DataSetMarket.relationStylesheetTypeStylesheet = new Relation("StylesheetTypeStylesheet", new Column[] {
                        DataSetMarket.tableStylesheetType.StylesheetTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationStylesheetTypeStylesheet);
            DataSetMarket.relationSubmissionTypeWorkingOrder = new Relation("SubmissionTypeWorkingOrder", new Column[] {
                        DataSetMarket.tableSubmissionType.SubmissionTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableWorkingOrder.SubmissionTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationSubmissionTypeWorkingOrder);
            DataSetMarket.relationSystemFolderUser = new Relation("SystemFolderUser", new Column[] {
                        DataSetMarket.tableSystemFolder.SystemFolderIdColumn}, new Column[] {
                        DataSetMarket.tableUser.SystemFolderIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationSystemFolderUser);
            DataSetMarket.relationTimeInForceDestinationOrder = new Relation("TimeInForceDestinationOrder", new Column[] {
                        DataSetMarket.tableTimeInForce.TimeInForceCodeColumn}, new Column[] {
                        DataSetMarket.tableDestinationOrder.TimeInForceCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationTimeInForceDestinationOrder);
            DataSetMarket.relationTimeInForceSourceOrder = new Relation("TimeInForceSourceOrder", new Column[] {
                        DataSetMarket.tableTimeInForce.TimeInForceCodeColumn}, new Column[] {
                        DataSetMarket.tableSourceOrder.TimeInForceCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationTimeInForceSourceOrder);
            DataSetMarket.relationTimeInForceWorkingOrder = new Relation("TimeInForceWorkingOrder", new Column[] {
                        DataSetMarket.tableTimeInForce.TimeInForceCodeColumn}, new Column[] {
                        DataSetMarket.tableWorkingOrder.TimeInForceCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationTimeInForceWorkingOrder);
            DataSetMarket.relationTimerMatch = new Relation("TimerMatch", new Column[] {
                        DataSetMarket.tableTimer.TimerIdColumn}, new Column[] {
                        DataSetMarket.tableMatch.TimerIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationTimerMatch);
            DataSetMarket.relationTimerWorkingOrder = new Relation("TimerWorkingOrder", new Column[] {
                        DataSetMarket.tableTimer.TimerIdColumn}, new Column[] {
                        DataSetMarket.tableWorkingOrder.TimerIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationTimerWorkingOrder);
            DataSetMarket.relationTraderBrokerAccount = new Relation("TraderBrokerAccount", new Column[] {
                        DataSetMarket.tableTrader.TraderIdColumn}, new Column[] {
                        DataSetMarket.tableBrokerAccount.TraderIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationTraderBrokerAccount);
            DataSetMarket.relationTraderDestinationOrder = new Relation("TraderDestinationOrder", new Column[] {
                        DataSetMarket.tableTrader.TraderIdColumn}, new Column[] {
                        DataSetMarket.tableDestinationOrder.TraderIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationTraderDestinationOrder);
            DataSetMarket.relationTraderTraderVolumeSetting = new Relation("TraderTraderVolumeSetting", new Column[] {
                        DataSetMarket.tableTrader.TraderIdColumn}, new Column[] {
                        DataSetMarket.tableTraderVolumeSetting.TraderIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationTraderTraderVolumeSetting);
            DataSetMarket.relationTypeObject = new Relation("TypeObject", new Column[] {
                        DataSetMarket.tableType.TypeCodeColumn}, new Column[] {
                        DataSetMarket.tableObject.TypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationTypeObject);
            DataSetMarket.relationUserAccountBase = new Relation("UserAccountBase", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableAccountBase.UserIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationUserAccountBase);
            DataSetMarket.relationUserAllocationCreatedUserId = new Relation("UserAllocationCreatedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableAllocation.CreatedUserIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationUserAllocationCreatedUserId);
            DataSetMarket.relationUserAllocationModifiedUserId = new Relation("UserAllocationModifiedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableAllocation.ModifiedUserIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationUserAllocationModifiedUserId);
            DataSetMarket.relationUserComplianceOfficer = new Relation("UserComplianceOfficer", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableComplianceOfficer.ComplianceOfficerIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationUserComplianceOfficer);
            DataSetMarket.relationUserExecutionCreatedUserId = new Relation("UserExecutionCreatedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableExecution.CreatedUserIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationUserExecutionCreatedUserId);
            DataSetMarket.relationUserExecutionModifiedUserId = new Relation("UserExecutionModifiedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableExecution.ModifiedUserIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationUserExecutionModifiedUserId);
            DataSetMarket.relationUserSourceOrderCreatedUserId = new Relation("UserSourceOrderCreatedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableSourceOrder.CreatedUserIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationUserSourceOrderCreatedUserId);
            DataSetMarket.relationUserSourceOrderModifiedUserId = new Relation("UserSourceOrderModifiedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableSourceOrder.ModifiedUserIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationUserSourceOrderModifiedUserId);
            DataSetMarket.relationUserTrader = new Relation("UserTrader", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableTrader.TraderIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationUserTrader);
            DataSetMarket.relationUserWorkingOrderCreatedUserId = new Relation("UserWorkingOrderCreatedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableWorkingOrder.CreatedUserIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationUserWorkingOrderCreatedUserId);
            DataSetMarket.relationUserWorkingOrderModifiedUserId = new Relation("UserWorkingOrderModifiedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableWorkingOrder.ModifiedUserIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationUserWorkingOrderModifiedUserId);
            DataSetMarket.relationVolumeCategorySecurity = new Relation("VolumeCategorySecurity", new Column[] {
                        DataSetMarket.tableVolumeCategory.VolumeCategoryIdColumn}, new Column[] {
                        DataSetMarket.tableSecurity.VolumeCategoryIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationVolumeCategorySecurity);
            DataSetMarket.relationVolumeCategoryTraderVolumeSetting = new Relation("VolumeCategoryTraderVolumeSetting", new Column[] {
                        DataSetMarket.tableVolumeCategory.VolumeCategoryIdColumn}, new Column[] {
                        DataSetMarket.tableTraderVolumeSetting.VolumeCategoryIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationVolumeCategoryTraderVolumeSetting);
            DataSetMarket.relationWorkingOrderAllocation = new Relation("WorkingOrderAllocation", new Column[] {
                        DataSetMarket.tableWorkingOrder.WorkingOrderIdColumn}, new Column[] {
                        DataSetMarket.tableAllocation.WorkingOrderIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationWorkingOrderAllocation);
            DataSetMarket.relationWorkingOrderDestinationOrder = new Relation("WorkingOrderDestinationOrder", new Column[] {
                        DataSetMarket.tableWorkingOrder.WorkingOrderIdColumn}, new Column[] {
                        DataSetMarket.tableDestinationOrder.WorkingOrderIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationWorkingOrderDestinationOrder);
            DataSetMarket.relationWorkingOrderMatch = new Relation("WorkingOrderMatch", new Column[] {
                        DataSetMarket.tableWorkingOrder.WorkingOrderIdColumn}, new Column[] {
                        DataSetMarket.tableMatch.WorkingOrderIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationWorkingOrderMatch);
            DataSetMarket.relationWorkingOrderSourceOrder = new Relation("WorkingOrderSourceOrder", new Column[] {
                        DataSetMarket.tableWorkingOrder.WorkingOrderIdColumn}, new Column[] {
                        DataSetMarket.tableSourceOrder.WorkingOrderIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationWorkingOrderSourceOrder);
        }
        
        private bool ShouldSerializeAccountBase()
        {
            return false;
        }
        
        private bool ShouldSerializeAccount()
        {
            return false;
        }
        
        private bool ShouldSerializeAccountGroup()
        {
            return false;
        }
        
        private bool ShouldSerializeAllocation()
        {
            return false;
        }
        
        private bool ShouldSerializeBlotter()
        {
            return false;
        }
        
        private bool ShouldSerializeBranch()
        {
            return false;
        }
        
        private bool ShouldSerializeBroker()
        {
            return false;
        }
        
        private bool ShouldSerializeBrokerAccount()
        {
            return false;
        }
        
        private bool ShouldSerializeClearingBroker()
        {
            return false;
        }
        
        private bool ShouldSerializeComplianceOfficer()
        {
            return false;
        }
        
        private bool ShouldSerializeCondition()
        {
            return false;
        }
        
        private bool ShouldSerializeConfiguration()
        {
            return false;
        }
        
        private bool ShouldSerializeCountry()
        {
            return false;
        }
        
        private bool ShouldSerializeCurrency()
        {
            return false;
        }
        
        private bool ShouldSerializeDebt()
        {
            return false;
        }
        
        private bool ShouldSerializeDestination()
        {
            return false;
        }
        
        private bool ShouldSerializeDestinationOrder()
        {
            return false;
        }
        
        private bool ShouldSerializeEquity()
        {
            return false;
        }
        
        private bool ShouldSerializeExchange()
        {
            return false;
        }
        
        private bool ShouldSerializeExecution()
        {
            return false;
        }
        
        private bool ShouldSerializeFixMessage()
        {
            return false;
        }
        
        private bool ShouldSerializeFolder()
        {
            return false;
        }
        
        private bool ShouldSerializeHoliday()
        {
            return false;
        }
        
        private bool ShouldSerializeHolidayType()
        {
            return false;
        }
        
        private bool ShouldSerializeImage()
        {
            return false;
        }
        
        private bool ShouldSerializeInstitution()
        {
            return false;
        }
        
        private bool ShouldSerializeIssuer()
        {
            return false;
        }
        
        private bool ShouldSerializeLotHandling()
        {
            return false;
        }
        
        private bool ShouldSerializeMatch()
        {
            return false;
        }
        
        private bool ShouldSerializeNegotiation()
        {
            return false;
        }
        
        private bool ShouldSerializeObject()
        {
            return false;
        }
        
        private bool ShouldSerializeObjectTree()
        {
            return false;
        }
        
        private bool ShouldSerializeOrderType()
        {
            return false;
        }
        
        private bool ShouldSerializePartyType()
        {
            return false;
        }
        
        private bool ShouldSerializePosition()
        {
            return false;
        }
        
        private bool ShouldSerializePositionType()
        {
            return false;
        }
        
        private bool ShouldSerializePrice()
        {
            return false;
        }
        
        private bool ShouldSerializePriceType()
        {
            return false;
        }
        
        private bool ShouldSerializeProperty()
        {
            return false;
        }
        
        private bool ShouldSerializeProvince()
        {
            return false;
        }
        
        private bool ShouldSerializeSecurity()
        {
            return false;
        }
        
        private bool ShouldSerializeState()
        {
            return false;
        }
        
        private bool ShouldSerializeSource()
        {
            return false;
        }
        
        private bool ShouldSerializeSourceOrder()
        {
            return false;
        }
        
        private bool ShouldSerializeStatus()
        {
            return false;
        }
        
        private bool ShouldSerializeStylesheet()
        {
            return false;
        }
        
        private bool ShouldSerializeStylesheetType()
        {
            return false;
        }
        
        private bool ShouldSerializeSubmissionType()
        {
            return false;
        }
        
        private bool ShouldSerializeSystemFolder()
        {
            return false;
        }
        
        private bool ShouldSerializeTaxLot()
        {
            return false;
        }
        
        private bool ShouldSerializeTimeInForce()
        {
            return false;
        }
        
        private bool ShouldSerializeTimer()
        {
            return false;
        }
        
        private bool ShouldSerializeTrader()
        {
            return false;
        }
        
        private bool ShouldSerializeTraderVolumeSetting()
        {
            return false;
        }
        
        private bool ShouldSerializeType()
        {
            return false;
        }
        
        private bool ShouldSerializeUser()
        {
            return false;
        }
        
        private bool ShouldSerializeVolumeCategory()
        {
            return false;
        }
        
        private bool ShouldSerializeWorkingOrder()
        {
            return false;
        }
        
        private static void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e)
        {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove))
            {
                DataSetMarket.InitVars();
            }
        }
        
        public delegate void AccountBaseRowChangeEventHandler(object sender, AccountBaseRowChangeEvent e);
        
        public delegate void AccountRowChangeEventHandler(object sender, AccountRowChangeEvent e);
        
        public delegate void AccountGroupRowChangeEventHandler(object sender, AccountGroupRowChangeEvent e);
        
        public delegate void AllocationRowChangeEventHandler(object sender, AllocationRowChangeEvent e);
        
        public delegate void BlotterRowChangeEventHandler(object sender, BlotterRowChangeEvent e);
        
        public delegate void BranchRowChangeEventHandler(object sender, BranchRowChangeEvent e);
        
        public delegate void BrokerRowChangeEventHandler(object sender, BrokerRowChangeEvent e);
        
        public delegate void BrokerAccountRowChangeEventHandler(object sender, BrokerAccountRowChangeEvent e);
        
        public delegate void ClearingBrokerRowChangeEventHandler(object sender, ClearingBrokerRowChangeEvent e);
        
        public delegate void ComplianceOfficerRowChangeEventHandler(object sender, ComplianceOfficerRowChangeEvent e);
        
        public delegate void ConditionRowChangeEventHandler(object sender, ConditionRowChangeEvent e);
        
        public delegate void ConfigurationRowChangeEventHandler(object sender, ConfigurationRowChangeEvent e);
        
        public delegate void CountryRowChangeEventHandler(object sender, CountryRowChangeEvent e);
        
        public delegate void CurrencyRowChangeEventHandler(object sender, CurrencyRowChangeEvent e);
        
        public delegate void DebtRowChangeEventHandler(object sender, DebtRowChangeEvent e);
        
        public delegate void DestinationRowChangeEventHandler(object sender, DestinationRowChangeEvent e);
        
        public delegate void DestinationOrderRowChangeEventHandler(object sender, DestinationOrderRowChangeEvent e);
        
        public delegate void EquityRowChangeEventHandler(object sender, EquityRowChangeEvent e);
        
        public delegate void ExchangeRowChangeEventHandler(object sender, ExchangeRowChangeEvent e);
        
        public delegate void ExecutionRowChangeEventHandler(object sender, ExecutionRowChangeEvent e);
        
        public delegate void FixMessageRowChangeEventHandler(object sender, FixMessageRowChangeEvent e);
        
        public delegate void FolderRowChangeEventHandler(object sender, FolderRowChangeEvent e);
        
        public delegate void HolidayRowChangeEventHandler(object sender, HolidayRowChangeEvent e);
        
        public delegate void HolidayTypeRowChangeEventHandler(object sender, HolidayTypeRowChangeEvent e);
        
        public delegate void ImageRowChangeEventHandler(object sender, ImageRowChangeEvent e);
        
        public delegate void InstitutionRowChangeEventHandler(object sender, InstitutionRowChangeEvent e);
        
        public delegate void IssuerRowChangeEventHandler(object sender, IssuerRowChangeEvent e);
        
        public delegate void LotHandlingRowChangeEventHandler(object sender, LotHandlingRowChangeEvent e);
        
        public delegate void MatchRowChangeEventHandler(object sender, MatchRowChangeEvent e);
        
        public delegate void NegotiationRowChangeEventHandler(object sender, NegotiationRowChangeEvent e);
        
        public delegate void ObjectRowChangeEventHandler(object sender, ObjectRowChangeEvent e);
        
        public delegate void ObjectTreeRowChangeEventHandler(object sender, ObjectTreeRowChangeEvent e);
        
        public delegate void OrderTypeRowChangeEventHandler(object sender, OrderTypeRowChangeEvent e);
        
        public delegate void PartyTypeRowChangeEventHandler(object sender, PartyTypeRowChangeEvent e);
        
        public delegate void PositionRowChangeEventHandler(object sender, PositionRowChangeEvent e);
        
        public delegate void PositionTypeRowChangeEventHandler(object sender, PositionTypeRowChangeEvent e);
        
        public delegate void PriceRowChangeEventHandler(object sender, PriceRowChangeEvent e);
        
        public delegate void PriceTypeRowChangeEventHandler(object sender, PriceTypeRowChangeEvent e);
        
        public delegate void PropertyRowChangeEventHandler(object sender, PropertyRowChangeEvent e);
        
        public delegate void ProvinceRowChangeEventHandler(object sender, ProvinceRowChangeEvent e);
        
        public delegate void SecurityRowChangeEventHandler(object sender, SecurityRowChangeEvent e);
        
        public delegate void StateRowChangeEventHandler(object sender, StateRowChangeEvent e);
        
        public delegate void SourceRowChangeEventHandler(object sender, SourceRowChangeEvent e);
        
        public delegate void SourceOrderRowChangeEventHandler(object sender, SourceOrderRowChangeEvent e);
        
        public delegate void StatusRowChangeEventHandler(object sender, StatusRowChangeEvent e);
        
        public delegate void StylesheetRowChangeEventHandler(object sender, StylesheetRowChangeEvent e);
        
        public delegate void StylesheetTypeRowChangeEventHandler(object sender, StylesheetTypeRowChangeEvent e);
        
        public delegate void SubmissionTypeRowChangeEventHandler(object sender, SubmissionTypeRowChangeEvent e);
        
        public delegate void SystemFolderRowChangeEventHandler(object sender, SystemFolderRowChangeEvent e);
        
        public delegate void TaxLotRowChangeEventHandler(object sender, TaxLotRowChangeEvent e);
        
        public delegate void TimeInForceRowChangeEventHandler(object sender, TimeInForceRowChangeEvent e);
        
        public delegate void TimerRowChangeEventHandler(object sender, TimerRowChangeEvent e);
        
        public delegate void TraderRowChangeEventHandler(object sender, TraderRowChangeEvent e);
        
        public delegate void TraderVolumeSettingRowChangeEventHandler(object sender, TraderVolumeSettingRowChangeEvent e);
        
        public delegate void TypeRowChangeEventHandler(object sender, TypeRowChangeEvent e);
        
        public delegate void UserRowChangeEventHandler(object sender, UserRowChangeEvent e);
        
        public delegate void VolumeCategoryRowChangeEventHandler(object sender, VolumeCategoryRowChangeEvent e);
        
        public delegate void WorkingOrderRowChangeEventHandler(object sender, WorkingOrderRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountBaseDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnAccountBaseId;
            
            private Column columnAddress0;
            
            private Column columnAddress1;
            
            private Column columnAddress2;
            
            private Column columnCity;
            
            private Column columnCountryId;
            
            private Column columnCurrencyId;
            
            private Column columnMnemonic;
            
            private Column columnPostalCode;
            
            private Column columnProvinceId;
            
            private Column columnUserId;
            
            private Column columnUserData0;
            
            private Column columnUserData1;
            
            private Column columnUserData2;
            
            private Column columnUserData3;
            
            private Column columnUserData4;
            
            private Column columnUserData5;
            
            private Column columnUserData6;
            
            private Column columnUserData7;
            
            internal AccountBaseDataTable() : 
                    base("AccountBase")
            {
                this.InitClass();
            }
            
            internal AccountBaseDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column AccountBaseIdColumn
            {
                get
                {
                    return this.columnAccountBaseId;
                }
            }
            
            public Column Address0Column
            {
                get
                {
                    return this.columnAddress0;
                }
            }
            
            public Column Address1Column
            {
                get
                {
                    return this.columnAddress1;
                }
            }
            
            public Column Address2Column
            {
                get
                {
                    return this.columnAddress2;
                }
            }
            
            public Column CityColumn
            {
                get
                {
                    return this.columnCity;
                }
            }
            
            public Column CountryIdColumn
            {
                get
                {
                    return this.columnCountryId;
                }
            }
            
            public Column CurrencyIdColumn
            {
                get
                {
                    return this.columnCurrencyId;
                }
            }
            
            public Column MnemonicColumn
            {
                get
                {
                    return this.columnMnemonic;
                }
            }
            
            public Column PostalCodeColumn
            {
                get
                {
                    return this.columnPostalCode;
                }
            }
            
            public Column ProvinceIdColumn
            {
                get
                {
                    return this.columnProvinceId;
                }
            }
            
            public Column UserIdColumn
            {
                get
                {
                    return this.columnUserId;
                }
            }
            
            public Column UserData0Column
            {
                get
                {
                    return this.columnUserData0;
                }
            }
            
            public Column UserData1Column
            {
                get
                {
                    return this.columnUserData1;
                }
            }
            
            public Column UserData2Column
            {
                get
                {
                    return this.columnUserData2;
                }
            }
            
            public Column UserData3Column
            {
                get
                {
                    return this.columnUserData3;
                }
            }
            
            public Column UserData4Column
            {
                get
                {
                    return this.columnUserData4;
                }
            }
            
            public Column UserData5Column
            {
                get
                {
                    return this.columnUserData5;
                }
            }
            
            public Column UserData6Column
            {
                get
                {
                    return this.columnUserData6;
                }
            }
            
            public Column UserData7Column
            {
                get
                {
                    return this.columnUserData7;
                }
            }
            
            public AccountBaseRow this[int index]
            {
                get
                {
                    return ((AccountBaseRow)(this.Rows[index]));
                }
            }
            
            public event AccountBaseRowChangeEventHandler AccountBaseRowChanged;
            
            public event AccountBaseRowChangeEventHandler AccountBaseRowChanging;
            
            public event AccountBaseRowChangeEventHandler AccountBaseRowDeleted;
            
            public event AccountBaseRowChangeEventHandler AccountBaseRowDeleting;
            
            public void AddAccountBaseRow(AccountBaseRow row)
            {
                this.Rows.Add(row);
            }
            
            public AccountBaseRow AddAccountBaseRow(
                        ObjectRow parentObjectRowByObjectAccountBase, 
                        string Address0, 
                        string Address1, 
                        string Address2, 
                        string City, 
                        CountryRow parentCountryRowByCountryAccountBase, 
                        CurrencyRow parentCurrencyRowByCurrencyAccountBase, 
                        string Mnemonic, 
                        string PostalCode, 
                        ProvinceRow parentProvinceRowByProvinceAccountBase, 
                        UserRow parentUserRowByUserAccountBase, 
                        decimal UserData0, 
                        decimal UserData1, 
                        decimal UserData2, 
                        decimal UserData3, 
                        string UserData4, 
                        string UserData5, 
                        string UserData6, 
                        string UserData7)
            {
                AccountBaseRow rowAccountBaseRow = ((AccountBaseRow)(this.NewRow()));
                rowAccountBaseRow.ItemArray = new object[] {
                        parentObjectRowByObjectAccountBase[12],
                        Address0,
                        Address1,
                        Address2,
                        City,
                        parentCountryRowByCountryAccountBase[1],
                        parentCurrencyRowByCurrencyAccountBase[25],
                        Mnemonic,
                        PostalCode,
                        parentProvinceRowByProvinceAccountBase[5],
                        parentUserRowByUserAccountBase[20],
                        UserData0,
                        UserData1,
                        UserData2,
                        UserData3,
                        UserData4,
                        UserData5,
                        UserData6,
                        UserData7};
                this.Rows.Add(rowAccountBaseRow);
                return rowAccountBaseRow;
            }
            
            public AccountBaseRow FindByAccountBaseId(int AccountBaseId)
            {
                return ((AccountBaseRow)(this.Rows.Find(new object[] {
                            AccountBaseId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                AccountBaseDataTable cln = ((AccountBaseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new AccountBaseDataTable();
            }
            
            internal void InitVars()
            {
                this.columnAccountBaseId = this.Columns["AccountBaseId"];
                this.columnAddress0 = this.Columns["Address0"];
                this.columnAddress1 = this.Columns["Address1"];
                this.columnAddress2 = this.Columns["Address2"];
                this.columnCity = this.Columns["City"];
                this.columnCountryId = this.Columns["CountryId"];
                this.columnCurrencyId = this.Columns["CurrencyId"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnProvinceId = this.Columns["ProvinceId"];
                this.columnUserId = this.Columns["UserId"];
                this.columnUserData0 = this.Columns["UserData0"];
                this.columnUserData1 = this.Columns["UserData1"];
                this.columnUserData2 = this.Columns["UserData2"];
                this.columnUserData3 = this.Columns["UserData3"];
                this.columnUserData4 = this.Columns["UserData4"];
                this.columnUserData5 = this.Columns["UserData5"];
                this.columnUserData6 = this.Columns["UserData6"];
                this.columnUserData7 = this.Columns["UserData7"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnAccountBaseId = new Column("AccountBaseId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountBaseId);
                this.columnAddress0 = new Column("Address0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress0);
                this.columnAddress1 = new Column("Address1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new Column("Address2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress2);
                this.columnCity = new Column("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnCountryId = new Column("CountryId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryId);
                this.columnCurrencyId = new Column("CurrencyId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyId);
                this.columnMnemonic = new Column("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnPostalCode = new Column("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnProvinceId = new Column("ProvinceId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProvinceId);
                this.columnUserId = new Column("UserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserId);
                this.columnUserData0 = new Column("UserData0", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData0);
                this.columnUserData1 = new Column("UserData1", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData1);
                this.columnUserData2 = new Column("UserData2", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData2);
                this.columnUserData3 = new Column("UserData3", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData3);
                this.columnUserData4 = new Column("UserData4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData4);
                this.columnUserData5 = new Column("UserData5", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData5);
                this.columnUserData6 = new Column("UserData6", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData6);
                this.columnUserData7 = new Column("UserData7", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData7);
                this.Constraints.Add(new UniqueConstraint("KeyAccountBase", new DataColumn[] {
                                this.columnAccountBaseId}, true));
                this.columnAccountBaseId.AllowDBNull = false;
                this.columnAccountBaseId.Unique = true;
                this.columnCurrencyId.AllowDBNull = false;
                this.columnUserId.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.AccountBaseLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "AccountBase"));
                }
            }
            
            public AccountBaseRow NewAccountBaseRow()
            {
                return ((AccountBaseRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new AccountBaseRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(AccountBaseRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.AccountBaseRowChanged != null))
                {
                    this.AccountBaseRowChanged(this, new AccountBaseRowChangeEvent(((AccountBaseRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.AccountBaseRowChanging != null))
                {
                    this.AccountBaseRowChanging(this, new AccountBaseRowChangeEvent(((AccountBaseRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.AccountBaseRowDeleted != null))
                {
                    this.AccountBaseRowDeleted(this, new AccountBaseRowChangeEvent(((AccountBaseRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.AccountBaseRowDeleting != null))
                {
                    this.AccountBaseRowDeleting(this, new AccountBaseRowChangeEvent(((AccountBaseRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAccountBaseRow(AccountBaseRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountBaseRow : Row
        {
            
            private AccountBaseDataTable tableAccountBase;
            
            internal AccountBaseRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableAccountBase = ((AccountBaseDataTable)(this.Table));
            }
            
            public int AccountBaseId
            {
                get
                {
                    return ((int)(this[this.tableAccountBase.AccountBaseIdColumn]));
                }
                set
                {
                    this[this.tableAccountBase.AccountBaseIdColumn] = value;
                }
            }
            
            public string Address0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAccountBase.Address0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccountBase.Address0Column] = value;
                }
            }
            
            public string Address1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAccountBase.Address1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccountBase.Address1Column] = value;
                }
            }
            
            public string Address2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAccountBase.Address2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccountBase.Address2Column] = value;
                }
            }
            
            public string City
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAccountBase.CityColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccountBase.CityColumn] = value;
                }
            }
            
            public int CountryId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableAccountBase.CountryIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccountBase.CountryIdColumn] = value;
                }
            }
            
            public int CurrencyId
            {
                get
                {
                    return ((int)(this[this.tableAccountBase.CurrencyIdColumn]));
                }
                set
                {
                    this[this.tableAccountBase.CurrencyIdColumn] = value;
                }
            }
            
            public string Mnemonic
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAccountBase.MnemonicColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccountBase.MnemonicColumn] = value;
                }
            }
            
            public string PostalCode
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAccountBase.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccountBase.PostalCodeColumn] = value;
                }
            }
            
            public int ProvinceId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableAccountBase.ProvinceIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccountBase.ProvinceIdColumn] = value;
                }
            }
            
            public int UserId
            {
                get
                {
                    return ((int)(this[this.tableAccountBase.UserIdColumn]));
                }
                set
                {
                    this[this.tableAccountBase.UserIdColumn] = value;
                }
            }
            
            public decimal UserData0
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableAccountBase.UserData0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccountBase.UserData0Column] = value;
                }
            }
            
            public decimal UserData1
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableAccountBase.UserData1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccountBase.UserData1Column] = value;
                }
            }
            
            public decimal UserData2
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableAccountBase.UserData2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccountBase.UserData2Column] = value;
                }
            }
            
            public decimal UserData3
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableAccountBase.UserData3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccountBase.UserData3Column] = value;
                }
            }
            
            public string UserData4
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAccountBase.UserData4Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccountBase.UserData4Column] = value;
                }
            }
            
            public string UserData5
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAccountBase.UserData5Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccountBase.UserData5Column] = value;
                }
            }
            
            public string UserData6
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAccountBase.UserData6Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccountBase.UserData6Column] = value;
                }
            }
            
            public string UserData7
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAccountBase.UserData7Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccountBase.UserData7Column] = value;
                }
            }
            
            public CountryRow CountryRow
            {
                get
                {
                    if ((DataSetMarket.lockCountry.IsReaderLockHeld || DataSetMarket.lockCountry.IsWriterLockHeld))
                    {
                        return ((CountryRow)(this.GetParentRow(this.Table.ParentRelations["CountryAccountBase"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Country"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["CountryAccountBase"]);
                }
            }
            
            public CurrencyRow CurrencyRow
            {
                get
                {
                    if ((DataSetMarket.lockCurrency.IsReaderLockHeld || DataSetMarket.lockCurrency.IsWriterLockHeld))
                    {
                        return ((CurrencyRow)(this.GetParentRow(this.Table.ParentRelations["CurrencyAccountBase"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Currency"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["CurrencyAccountBase"]);
                }
            }
            
            public ObjectRow ObjectRow
            {
                get
                {
                    if ((DataSetMarket.lockObject.IsReaderLockHeld || DataSetMarket.lockObject.IsWriterLockHeld))
                    {
                        return ((ObjectRow)(this.GetParentRow(this.Table.ParentRelations["ObjectAccountBase"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Object"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["ObjectAccountBase"]);
                }
            }
            
            public ProvinceRow ProvinceRow
            {
                get
                {
                    if ((DataSetMarket.lockProvince.IsReaderLockHeld || DataSetMarket.lockProvince.IsWriterLockHeld))
                    {
                        return ((ProvinceRow)(this.GetParentRow(this.Table.ParentRelations["ProvinceAccountBase"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Province"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["ProvinceAccountBase"]);
                }
            }
            
            public SecurityRow SecurityRow
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["SecurityAccountBase"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["SecurityAccountBase"]);
                }
            }
            
            public UserRow UserRow
            {
                get
                {
                    if ((DataSetMarket.lockUser.IsReaderLockHeld || DataSetMarket.lockUser.IsWriterLockHeld))
                    {
                        return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["UserAccountBase"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "User"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["UserAccountBase"]);
                }
            }
            
            public bool IsAddress0Null()
            {
                return this.IsNull(this.tableAccountBase.Address0Column);
            }
            
            public void SetAddress0Null()
            {
                this[this.tableAccountBase.Address0Column] = System.Convert.DBNull;
            }
            
            public bool IsAddress1Null()
            {
                return this.IsNull(this.tableAccountBase.Address1Column);
            }
            
            public void SetAddress1Null()
            {
                this[this.tableAccountBase.Address1Column] = System.Convert.DBNull;
            }
            
            public bool IsAddress2Null()
            {
                return this.IsNull(this.tableAccountBase.Address2Column);
            }
            
            public void SetAddress2Null()
            {
                this[this.tableAccountBase.Address2Column] = System.Convert.DBNull;
            }
            
            public bool IsCityNull()
            {
                return this.IsNull(this.tableAccountBase.CityColumn);
            }
            
            public void SetCityNull()
            {
                this[this.tableAccountBase.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryIdNull()
            {
                return this.IsNull(this.tableAccountBase.CountryIdColumn);
            }
            
            public void SetCountryIdNull()
            {
                this[this.tableAccountBase.CountryIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsMnemonicNull()
            {
                return this.IsNull(this.tableAccountBase.MnemonicColumn);
            }
            
            public void SetMnemonicNull()
            {
                this[this.tableAccountBase.MnemonicColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull()
            {
                return this.IsNull(this.tableAccountBase.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull()
            {
                this[this.tableAccountBase.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsProvinceIdNull()
            {
                return this.IsNull(this.tableAccountBase.ProvinceIdColumn);
            }
            
            public void SetProvinceIdNull()
            {
                this[this.tableAccountBase.ProvinceIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserData0Null()
            {
                return this.IsNull(this.tableAccountBase.UserData0Column);
            }
            
            public void SetUserData0Null()
            {
                this[this.tableAccountBase.UserData0Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData1Null()
            {
                return this.IsNull(this.tableAccountBase.UserData1Column);
            }
            
            public void SetUserData1Null()
            {
                this[this.tableAccountBase.UserData1Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData2Null()
            {
                return this.IsNull(this.tableAccountBase.UserData2Column);
            }
            
            public void SetUserData2Null()
            {
                this[this.tableAccountBase.UserData2Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData3Null()
            {
                return this.IsNull(this.tableAccountBase.UserData3Column);
            }
            
            public void SetUserData3Null()
            {
                this[this.tableAccountBase.UserData3Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData4Null()
            {
                return this.IsNull(this.tableAccountBase.UserData4Column);
            }
            
            public void SetUserData4Null()
            {
                this[this.tableAccountBase.UserData4Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData5Null()
            {
                return this.IsNull(this.tableAccountBase.UserData5Column);
            }
            
            public void SetUserData5Null()
            {
                this[this.tableAccountBase.UserData5Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData6Null()
            {
                return this.IsNull(this.tableAccountBase.UserData6Column);
            }
            
            public void SetUserData6Null()
            {
                this[this.tableAccountBase.UserData6Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData7Null()
            {
                return this.IsNull(this.tableAccountBase.UserData7Column);
            }
            
            public void SetUserData7Null()
            {
                this[this.tableAccountBase.UserData7Column] = System.Convert.DBNull;
            }
            
            public AccountRow[] GetAccountRows()
            {
                return ((AccountRow[])(this.GetChildRows(this.Table.ChildRelations["AccountBaseAccount"])));
            }
            
            public AccountGroupRow[] GetAccountGroupRows()
            {
                return ((AccountGroupRow[])(this.GetChildRows(this.Table.ChildRelations["AccountBaseAccountGroup"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountBaseRowChangeEvent : EventArgs
        {
            
            private AccountBaseRow eventRow;
            
            private DataRowAction eventAction;
            
            public AccountBaseRowChangeEvent(AccountBaseRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AccountBaseRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnAccountId;
            
            private Column columnLotHandlingCode;
            
            internal AccountDataTable() : 
                    base("Account")
            {
                this.InitClass();
            }
            
            internal AccountDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column AccountIdColumn
            {
                get
                {
                    return this.columnAccountId;
                }
            }
            
            public Column LotHandlingCodeColumn
            {
                get
                {
                    return this.columnLotHandlingCode;
                }
            }
            
            public AccountRow this[int index]
            {
                get
                {
                    return ((AccountRow)(this.Rows[index]));
                }
            }
            
            public event AccountRowChangeEventHandler AccountRowChanged;
            
            public event AccountRowChangeEventHandler AccountRowChanging;
            
            public event AccountRowChangeEventHandler AccountRowDeleted;
            
            public event AccountRowChangeEventHandler AccountRowDeleting;
            
            public void AddAccountRow(AccountRow row)
            {
                this.Rows.Add(row);
            }
            
            public AccountRow AddAccountRow(AccountBaseRow parentAccountBaseRowByAccountBaseAccount, LotHandlingRow parentLotHandlingRowByLotHandlingAccount)
            {
                AccountRow rowAccountRow = ((AccountRow)(this.NewRow()));
                rowAccountRow.ItemArray = new object[] {
                        parentAccountBaseRowByAccountBaseAccount[17],
                        parentLotHandlingRowByLotHandlingAccount[5]};
                this.Rows.Add(rowAccountRow);
                return rowAccountRow;
            }
            
            public AccountRow FindByAccountId(int AccountId)
            {
                return ((AccountRow)(this.Rows.Find(new object[] {
                            AccountId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                AccountDataTable cln = ((AccountDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new AccountDataTable();
            }
            
            internal void InitVars()
            {
                this.columnAccountId = this.Columns["AccountId"];
                this.columnLotHandlingCode = this.Columns["LotHandlingCode"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnAccountId = new Column("AccountId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountId);
                this.columnLotHandlingCode = new Column("LotHandlingCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLotHandlingCode);
                this.Constraints.Add(new UniqueConstraint("KeyAccount", new DataColumn[] {
                                this.columnAccountId}, true));
                this.columnAccountId.AllowDBNull = false;
                this.columnAccountId.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.AccountLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Account"));
                }
            }
            
            public AccountRow NewAccountRow()
            {
                return ((AccountRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new AccountRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(AccountRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.AccountRowChanged != null))
                {
                    this.AccountRowChanged(this, new AccountRowChangeEvent(((AccountRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.AccountRowChanging != null))
                {
                    this.AccountRowChanging(this, new AccountRowChangeEvent(((AccountRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.AccountRowDeleted != null))
                {
                    this.AccountRowDeleted(this, new AccountRowChangeEvent(((AccountRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.AccountRowDeleting != null))
                {
                    this.AccountRowDeleting(this, new AccountRowChangeEvent(((AccountRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAccountRow(AccountRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountRow : Row
        {
            
            private AccountDataTable tableAccount;
            
            internal AccountRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableAccount = ((AccountDataTable)(this.Table));
            }
            
            public int AccountId
            {
                get
                {
                    return ((int)(this[this.tableAccount.AccountIdColumn]));
                }
                set
                {
                    this[this.tableAccount.AccountIdColumn] = value;
                }
            }
            
            public int LotHandlingCode
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableAccount.LotHandlingCodeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccount.LotHandlingCodeColumn] = value;
                }
            }
            
            public AccountBaseRow AccountBaseRow
            {
                get
                {
                    if ((DataSetMarket.lockAccountBase.IsReaderLockHeld || DataSetMarket.lockAccountBase.IsWriterLockHeld))
                    {
                        return ((AccountBaseRow)(this.GetParentRow(this.Table.ParentRelations["AccountBaseAccount"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "AccountBase"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["AccountBaseAccount"]);
                }
            }
            
            public LotHandlingRow LotHandlingRow
            {
                get
                {
                    if ((DataSetMarket.lockLotHandling.IsReaderLockHeld || DataSetMarket.lockLotHandling.IsWriterLockHeld))
                    {
                        return ((LotHandlingRow)(this.GetParentRow(this.Table.ParentRelations["LotHandlingAccount"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "LotHandling"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["LotHandlingAccount"]);
                }
            }
            
            public bool IsLotHandlingCodeNull()
            {
                return this.IsNull(this.tableAccount.LotHandlingCodeColumn);
            }
            
            public void SetLotHandlingCodeNull()
            {
                this[this.tableAccount.LotHandlingCodeColumn] = System.Convert.DBNull;
            }
            
            public AllocationRow[] GetAllocationRows()
            {
                return ((AllocationRow[])(this.GetChildRows(this.Table.ChildRelations["AccountAllocation"])));
            }
            
            public PositionRow[] GetPositionRows()
            {
                return ((PositionRow[])(this.GetChildRows(this.Table.ChildRelations["AccountPosition"])));
            }
            
            public TaxLotRow[] GetTaxLotRows()
            {
                return ((TaxLotRow[])(this.GetChildRows(this.Table.ChildRelations["AccountTaxLot"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountRowChangeEvent : EventArgs
        {
            
            private AccountRow eventRow;
            
            private DataRowAction eventAction;
            
            public AccountRowChangeEvent(AccountRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AccountRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountGroupDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnAccountGroupId;
            
            internal AccountGroupDataTable() : 
                    base("AccountGroup")
            {
                this.InitClass();
            }
            
            internal AccountGroupDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column AccountGroupIdColumn
            {
                get
                {
                    return this.columnAccountGroupId;
                }
            }
            
            public AccountGroupRow this[int index]
            {
                get
                {
                    return ((AccountGroupRow)(this.Rows[index]));
                }
            }
            
            public event AccountGroupRowChangeEventHandler AccountGroupRowChanged;
            
            public event AccountGroupRowChangeEventHandler AccountGroupRowChanging;
            
            public event AccountGroupRowChangeEventHandler AccountGroupRowDeleted;
            
            public event AccountGroupRowChangeEventHandler AccountGroupRowDeleting;
            
            public void AddAccountGroupRow(AccountGroupRow row)
            {
                this.Rows.Add(row);
            }
            
            public AccountGroupRow AddAccountGroupRow(AccountBaseRow parentAccountBaseRowByAccountBaseAccountGroup)
            {
                AccountGroupRow rowAccountGroupRow = ((AccountGroupRow)(this.NewRow()));
                rowAccountGroupRow.ItemArray = new object[] {
                        parentAccountBaseRowByAccountBaseAccountGroup[17]};
                this.Rows.Add(rowAccountGroupRow);
                return rowAccountGroupRow;
            }
            
            public AccountGroupRow FindByAccountGroupId(int AccountGroupId)
            {
                return ((AccountGroupRow)(this.Rows.Find(new object[] {
                            AccountGroupId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                AccountGroupDataTable cln = ((AccountGroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new AccountGroupDataTable();
            }
            
            internal void InitVars()
            {
                this.columnAccountGroupId = this.Columns["AccountGroupId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnAccountGroupId = new Column("AccountGroupId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountGroupId);
                this.Constraints.Add(new UniqueConstraint("KeyAccountGroup", new DataColumn[] {
                                this.columnAccountGroupId}, true));
                this.columnAccountGroupId.AllowDBNull = false;
                this.columnAccountGroupId.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.AccountGroupLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "AccountGroup"));
                }
            }
            
            public AccountGroupRow NewAccountGroupRow()
            {
                return ((AccountGroupRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new AccountGroupRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(AccountGroupRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.AccountGroupRowChanged != null))
                {
                    this.AccountGroupRowChanged(this, new AccountGroupRowChangeEvent(((AccountGroupRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.AccountGroupRowChanging != null))
                {
                    this.AccountGroupRowChanging(this, new AccountGroupRowChangeEvent(((AccountGroupRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.AccountGroupRowDeleted != null))
                {
                    this.AccountGroupRowDeleted(this, new AccountGroupRowChangeEvent(((AccountGroupRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.AccountGroupRowDeleting != null))
                {
                    this.AccountGroupRowDeleting(this, new AccountGroupRowChangeEvent(((AccountGroupRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAccountGroupRow(AccountGroupRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountGroupRow : Row
        {
            
            private AccountGroupDataTable tableAccountGroup;
            
            internal AccountGroupRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableAccountGroup = ((AccountGroupDataTable)(this.Table));
            }
            
            public int AccountGroupId
            {
                get
                {
                    return ((int)(this[this.tableAccountGroup.AccountGroupIdColumn]));
                }
                set
                {
                    this[this.tableAccountGroup.AccountGroupIdColumn] = value;
                }
            }
            
            public AccountBaseRow AccountBaseRow
            {
                get
                {
                    if ((DataSetMarket.lockAccountBase.IsReaderLockHeld || DataSetMarket.lockAccountBase.IsWriterLockHeld))
                    {
                        return ((AccountBaseRow)(this.GetParentRow(this.Table.ParentRelations["AccountBaseAccountGroup"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "AccountBase"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["AccountBaseAccountGroup"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountGroupRowChangeEvent : EventArgs
        {
            
            private AccountGroupRow eventRow;
            
            private DataRowAction eventAction;
            
            public AccountGroupRowChangeEvent(AccountGroupRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AccountGroupRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AllocationDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnAccountId;
            
            private Column columnAccruedInterest;
            
            private Column columnAllocationId;
            
            private Column columnCommission;
            
            private Column columnCreatedTime;
            
            private Column columnCreatedUserId;
            
            private Column columnModifiedTime;
            
            private Column columnModifiedUserId;
            
            private Column columnOrderTypeCode;
            
            private Column columnPositionTypeCode;
            
            private Column columnPrice;
            
            private Column columnQuantity;
            
            private Column columnSecurityId;
            
            private Column columnSettlementDate;
            
            private Column columnSettlementId;
            
            private Column columnTradeDate;
            
            private Column columnUserFee0;
            
            private Column columnUserFee1;
            
            private Column columnUserFee2;
            
            private Column columnUserFee3;
            
            private Column columnWorkingOrderId;
            
            private DataView viewKeyAllocationAccountIdSecurityIdPositionTypeCode;
            
            internal AllocationDataTable() : 
                    base("Allocation")
            {
                this.InitClass();
            }
            
            internal AllocationDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column AccountIdColumn
            {
                get
                {
                    return this.columnAccountId;
                }
            }
            
            public Column AccruedInterestColumn
            {
                get
                {
                    return this.columnAccruedInterest;
                }
            }
            
            public Column AllocationIdColumn
            {
                get
                {
                    return this.columnAllocationId;
                }
            }
            
            public Column CommissionColumn
            {
                get
                {
                    return this.columnCommission;
                }
            }
            
            public Column CreatedTimeColumn
            {
                get
                {
                    return this.columnCreatedTime;
                }
            }
            
            public Column CreatedUserIdColumn
            {
                get
                {
                    return this.columnCreatedUserId;
                }
            }
            
            public Column ModifiedTimeColumn
            {
                get
                {
                    return this.columnModifiedTime;
                }
            }
            
            public Column ModifiedUserIdColumn
            {
                get
                {
                    return this.columnModifiedUserId;
                }
            }
            
            public Column OrderTypeCodeColumn
            {
                get
                {
                    return this.columnOrderTypeCode;
                }
            }
            
            public Column PositionTypeCodeColumn
            {
                get
                {
                    return this.columnPositionTypeCode;
                }
            }
            
            public Column PriceColumn
            {
                get
                {
                    return this.columnPrice;
                }
            }
            
            public Column QuantityColumn
            {
                get
                {
                    return this.columnQuantity;
                }
            }
            
            public Column SecurityIdColumn
            {
                get
                {
                    return this.columnSecurityId;
                }
            }
            
            public Column SettlementDateColumn
            {
                get
                {
                    return this.columnSettlementDate;
                }
            }
            
            public Column SettlementIdColumn
            {
                get
                {
                    return this.columnSettlementId;
                }
            }
            
            public Column TradeDateColumn
            {
                get
                {
                    return this.columnTradeDate;
                }
            }
            
            public Column UserFee0Column
            {
                get
                {
                    return this.columnUserFee0;
                }
            }
            
            public Column UserFee1Column
            {
                get
                {
                    return this.columnUserFee1;
                }
            }
            
            public Column UserFee2Column
            {
                get
                {
                    return this.columnUserFee2;
                }
            }
            
            public Column UserFee3Column
            {
                get
                {
                    return this.columnUserFee3;
                }
            }
            
            public Column WorkingOrderIdColumn
            {
                get
                {
                    return this.columnWorkingOrderId;
                }
            }
            
            public DataView KeyAllocationAccountIdSecurityIdPositionTypeCode
            {
                get
                {
                    return this.viewKeyAllocationAccountIdSecurityIdPositionTypeCode;
                }
            }
            
            public AllocationRow this[int index]
            {
                get
                {
                    return ((AllocationRow)(this.Rows[index]));
                }
            }
            
            public event AllocationRowChangeEventHandler AllocationRowChanged;
            
            public event AllocationRowChangeEventHandler AllocationRowChanging;
            
            public event AllocationRowChangeEventHandler AllocationRowDeleted;
            
            public event AllocationRowChangeEventHandler AllocationRowDeleting;
            
            public void AddAllocationRow(AllocationRow row)
            {
                this.Rows.Add(row);
            }
            
            public AllocationRow AddAllocationRow(
                        AccountRow parentAccountRowByAccountAllocation, 
                        decimal AccruedInterest, 
                        decimal Commission, 
                        System.DateTime CreatedTime, 
                        UserRow parentUserRowByUserAllocationCreatedUserId, 
                        System.DateTime ModifiedTime, 
                        UserRow parentUserRowByUserAllocationModifiedUserId, 
                        OrderTypeRow parentOrderTypeRowByOrderTypeAllocation, 
                        int PositionTypeCode, 
                        decimal Price, 
                        decimal Quantity, 
                        SecurityRow parentSecurityRowBySecurityAllocationSecurityId, 
                        System.DateTime SettlementDate, 
                        SecurityRow parentSecurityRowBySecurityAllocationSettlementId, 
                        System.DateTime TradeDate, 
                        decimal UserFee0, 
                        decimal UserFee1, 
                        decimal UserFee2, 
                        decimal UserFee3, 
                        WorkingOrderRow parentWorkingOrderRowByWorkingOrderAllocation)
            {
                AllocationRow rowAllocationRow = ((AllocationRow)(this.NewRow()));
                rowAllocationRow.ItemArray = new object[] {
                        parentAccountRowByAccountAllocation[36],
                        AccruedInterest,
                        null,
                        Commission,
                        CreatedTime,
                        parentUserRowByUserAllocationCreatedUserId[20],
                        ModifiedTime,
                        parentUserRowByUserAllocationModifiedUserId[20],
                        parentOrderTypeRowByOrderTypeAllocation[7],
                        PositionTypeCode,
                        Price,
                        Quantity,
                        parentSecurityRowBySecurityAllocationSecurityId[23],
                        SettlementDate,
                        parentSecurityRowBySecurityAllocationSettlementId[23],
                        TradeDate,
                        UserFee0,
                        UserFee1,
                        UserFee2,
                        UserFee3,
                        parentWorkingOrderRowByWorkingOrderAllocation[31]};
                this.Rows.Add(rowAllocationRow);
                return rowAllocationRow;
            }
            
            public AllocationRow FindByAllocationId(int AllocationId)
            {
                return ((AllocationRow)(this.Rows.Find(new object[] {
                            AllocationId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                AllocationDataTable cln = ((AllocationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new AllocationDataTable();
            }
            
            internal void InitVars()
            {
                this.columnAccountId = this.Columns["AccountId"];
                this.columnAccruedInterest = this.Columns["AccruedInterest"];
                this.columnAllocationId = this.Columns["AllocationId"];
                this.columnCommission = this.Columns["Commission"];
                this.columnCreatedTime = this.Columns["CreatedTime"];
                this.columnCreatedUserId = this.Columns["CreatedUserId"];
                this.columnModifiedTime = this.Columns["ModifiedTime"];
                this.columnModifiedUserId = this.Columns["ModifiedUserId"];
                this.columnOrderTypeCode = this.Columns["OrderTypeCode"];
                this.columnPositionTypeCode = this.Columns["PositionTypeCode"];
                this.columnPrice = this.Columns["Price"];
                this.columnQuantity = this.Columns["Quantity"];
                this.columnSecurityId = this.Columns["SecurityId"];
                this.columnSettlementDate = this.Columns["SettlementDate"];
                this.columnSettlementId = this.Columns["SettlementId"];
                this.columnTradeDate = this.Columns["TradeDate"];
                this.columnUserFee0 = this.Columns["UserFee0"];
                this.columnUserFee1 = this.Columns["UserFee1"];
                this.columnUserFee2 = this.Columns["UserFee2"];
                this.columnUserFee3 = this.Columns["UserFee3"];
                this.columnWorkingOrderId = this.Columns["WorkingOrderId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnAccountId = new Column("AccountId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountId);
                this.columnAccruedInterest = new Column("AccruedInterest", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccruedInterest);
                this.columnAllocationId = new Column("AllocationId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAllocationId);
                this.columnCommission = new Column("Commission", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCommission);
                this.columnCreatedTime = new Column("CreatedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedTime);
                this.columnCreatedUserId = new Column("CreatedUserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedUserId);
                this.columnModifiedTime = new Column("ModifiedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedTime);
                this.columnModifiedUserId = new Column("ModifiedUserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedUserId);
                this.columnOrderTypeCode = new Column("OrderTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrderTypeCode);
                this.columnPositionTypeCode = new Column("PositionTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPositionTypeCode);
                this.columnPrice = new Column("Price", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrice);
                this.columnQuantity = new Column("Quantity", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQuantity);
                this.columnSecurityId = new Column("SecurityId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityId);
                this.columnSettlementDate = new Column("SettlementDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSettlementDate);
                this.columnSettlementId = new Column("SettlementId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSettlementId);
                this.columnTradeDate = new Column("TradeDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTradeDate);
                this.columnUserFee0 = new Column("UserFee0", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserFee0);
                this.columnUserFee1 = new Column("UserFee1", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserFee1);
                this.columnUserFee2 = new Column("UserFee2", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserFee2);
                this.columnUserFee3 = new Column("UserFee3", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserFee3);
                this.columnWorkingOrderId = new Column("WorkingOrderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWorkingOrderId);
                this.Constraints.Add(new UniqueConstraint("KeyAllocation", new DataColumn[] {
                                this.columnAllocationId}, true));
                this.viewKeyAllocationAccountIdSecurityIdPositionTypeCode = new DataView(this, null, "AccountId,SecurityId,PositionTypeCode", DataViewRowState.CurrentRows);
                this.columnAccountId.AllowDBNull = false;
                this.columnAccruedInterest.AllowDBNull = false;
                this.columnAllocationId.AutoIncrement = true;
                this.columnAllocationId.AllowDBNull = false;
                this.columnAllocationId.Unique = true;
                this.columnCommission.AllowDBNull = false;
                this.columnCreatedTime.AllowDBNull = false;
                this.columnCreatedUserId.AllowDBNull = false;
                this.columnModifiedTime.AllowDBNull = false;
                this.columnModifiedUserId.AllowDBNull = false;
                this.columnOrderTypeCode.AllowDBNull = false;
                this.columnPositionTypeCode.AllowDBNull = false;
                this.columnPrice.AllowDBNull = false;
                this.columnQuantity.AllowDBNull = false;
                this.columnSecurityId.AllowDBNull = false;
                this.columnSettlementDate.AllowDBNull = false;
                this.columnSettlementId.AllowDBNull = false;
                this.columnTradeDate.AllowDBNull = false;
                this.columnUserFee0.AllowDBNull = false;
                this.columnUserFee1.AllowDBNull = false;
                this.columnUserFee2.AllowDBNull = false;
                this.columnUserFee3.AllowDBNull = false;
                this.columnWorkingOrderId.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.AllocationLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Allocation"));
                }
            }
            
            public AllocationRow NewAllocationRow()
            {
                return ((AllocationRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new AllocationRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(AllocationRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.AllocationRowChanged != null))
                {
                    this.AllocationRowChanged(this, new AllocationRowChangeEvent(((AllocationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.AllocationRowChanging != null))
                {
                    this.AllocationRowChanging(this, new AllocationRowChangeEvent(((AllocationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.AllocationRowDeleted != null))
                {
                    this.AllocationRowDeleted(this, new AllocationRowChangeEvent(((AllocationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.AllocationRowDeleting != null))
                {
                    this.AllocationRowDeleting(this, new AllocationRowChangeEvent(((AllocationRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAllocationRow(AllocationRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AllocationRow : Row
        {
            
            private AllocationDataTable tableAllocation;
            
            internal AllocationRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableAllocation = ((AllocationDataTable)(this.Table));
            }
            
            public int AccountId
            {
                get
                {
                    return ((int)(this[this.tableAllocation.AccountIdColumn]));
                }
                set
                {
                    this[this.tableAllocation.AccountIdColumn] = value;
                }
            }
            
            public decimal AccruedInterest
            {
                get
                {
                    return ((decimal)(this[this.tableAllocation.AccruedInterestColumn]));
                }
                set
                {
                    this[this.tableAllocation.AccruedInterestColumn] = value;
                }
            }
            
            public int AllocationId
            {
                get
                {
                    return ((int)(this[this.tableAllocation.AllocationIdColumn]));
                }
                set
                {
                    this[this.tableAllocation.AllocationIdColumn] = value;
                }
            }
            
            public decimal Commission
            {
                get
                {
                    return ((decimal)(this[this.tableAllocation.CommissionColumn]));
                }
                set
                {
                    this[this.tableAllocation.CommissionColumn] = value;
                }
            }
            
            public System.DateTime CreatedTime
            {
                get
                {
                    return ((System.DateTime)(this[this.tableAllocation.CreatedTimeColumn]));
                }
                set
                {
                    this[this.tableAllocation.CreatedTimeColumn] = value;
                }
            }
            
            public int CreatedUserId
            {
                get
                {
                    return ((int)(this[this.tableAllocation.CreatedUserIdColumn]));
                }
                set
                {
                    this[this.tableAllocation.CreatedUserIdColumn] = value;
                }
            }
            
            public System.DateTime ModifiedTime
            {
                get
                {
                    return ((System.DateTime)(this[this.tableAllocation.ModifiedTimeColumn]));
                }
                set
                {
                    this[this.tableAllocation.ModifiedTimeColumn] = value;
                }
            }
            
            public int ModifiedUserId
            {
                get
                {
                    return ((int)(this[this.tableAllocation.ModifiedUserIdColumn]));
                }
                set
                {
                    this[this.tableAllocation.ModifiedUserIdColumn] = value;
                }
            }
            
            public int OrderTypeCode
            {
                get
                {
                    return ((int)(this[this.tableAllocation.OrderTypeCodeColumn]));
                }
                set
                {
                    this[this.tableAllocation.OrderTypeCodeColumn] = value;
                }
            }
            
            public int PositionTypeCode
            {
                get
                {
                    return ((int)(this[this.tableAllocation.PositionTypeCodeColumn]));
                }
                set
                {
                    this[this.tableAllocation.PositionTypeCodeColumn] = value;
                }
            }
            
            public decimal Price
            {
                get
                {
                    return ((decimal)(this[this.tableAllocation.PriceColumn]));
                }
                set
                {
                    this[this.tableAllocation.PriceColumn] = value;
                }
            }
            
            public decimal Quantity
            {
                get
                {
                    return ((decimal)(this[this.tableAllocation.QuantityColumn]));
                }
                set
                {
                    this[this.tableAllocation.QuantityColumn] = value;
                }
            }
            
            public int SecurityId
            {
                get
                {
                    return ((int)(this[this.tableAllocation.SecurityIdColumn]));
                }
                set
                {
                    this[this.tableAllocation.SecurityIdColumn] = value;
                }
            }
            
            public System.DateTime SettlementDate
            {
                get
                {
                    return ((System.DateTime)(this[this.tableAllocation.SettlementDateColumn]));
                }
                set
                {
                    this[this.tableAllocation.SettlementDateColumn] = value;
                }
            }
            
            public int SettlementId
            {
                get
                {
                    return ((int)(this[this.tableAllocation.SettlementIdColumn]));
                }
                set
                {
                    this[this.tableAllocation.SettlementIdColumn] = value;
                }
            }
            
            public System.DateTime TradeDate
            {
                get
                {
                    return ((System.DateTime)(this[this.tableAllocation.TradeDateColumn]));
                }
                set
                {
                    this[this.tableAllocation.TradeDateColumn] = value;
                }
            }
            
            public decimal UserFee0
            {
                get
                {
                    return ((decimal)(this[this.tableAllocation.UserFee0Column]));
                }
                set
                {
                    this[this.tableAllocation.UserFee0Column] = value;
                }
            }
            
            public decimal UserFee1
            {
                get
                {
                    return ((decimal)(this[this.tableAllocation.UserFee1Column]));
                }
                set
                {
                    this[this.tableAllocation.UserFee1Column] = value;
                }
            }
            
            public decimal UserFee2
            {
                get
                {
                    return ((decimal)(this[this.tableAllocation.UserFee2Column]));
                }
                set
                {
                    this[this.tableAllocation.UserFee2Column] = value;
                }
            }
            
            public decimal UserFee3
            {
                get
                {
                    return ((decimal)(this[this.tableAllocation.UserFee3Column]));
                }
                set
                {
                    this[this.tableAllocation.UserFee3Column] = value;
                }
            }
            
            public int WorkingOrderId
            {
                get
                {
                    return ((int)(this[this.tableAllocation.WorkingOrderIdColumn]));
                }
                set
                {
                    this[this.tableAllocation.WorkingOrderIdColumn] = value;
                }
            }
            
            public AccountRow AccountRow
            {
                get
                {
                    if ((DataSetMarket.lockAccount.IsReaderLockHeld || DataSetMarket.lockAccount.IsWriterLockHeld))
                    {
                        return ((AccountRow)(this.GetParentRow(this.Table.ParentRelations["AccountAllocation"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Account"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["AccountAllocation"]);
                }
            }
            
            public OrderTypeRow OrderTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockOrderType.IsReaderLockHeld || DataSetMarket.lockOrderType.IsWriterLockHeld))
                    {
                        return ((OrderTypeRow)(this.GetParentRow(this.Table.ParentRelations["OrderTypeAllocation"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "OrderType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["OrderTypeAllocation"]);
                }
            }
            
            public SecurityRow SecurityRowBySecurityAllocationSecurityId
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["SecurityAllocationSecurityId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["SecurityAllocationSecurityId"]);
                }
            }
            
            public SecurityRow SecurityRowBySecurityAllocationSettlementId
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["SecurityAllocationSettlementId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["SecurityAllocationSettlementId"]);
                }
            }
            
            public UserRow UserRowByUserAllocationCreatedUserId
            {
                get
                {
                    if ((DataSetMarket.lockUser.IsReaderLockHeld || DataSetMarket.lockUser.IsWriterLockHeld))
                    {
                        return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["UserAllocationCreatedUserId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "User"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["UserAllocationCreatedUserId"]);
                }
            }
            
            public UserRow UserRowByUserAllocationModifiedUserId
            {
                get
                {
                    if ((DataSetMarket.lockUser.IsReaderLockHeld || DataSetMarket.lockUser.IsWriterLockHeld))
                    {
                        return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["UserAllocationModifiedUserId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "User"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["UserAllocationModifiedUserId"]);
                }
            }
            
            public WorkingOrderRow WorkingOrderRow
            {
                get
                {
                    if ((DataSetMarket.lockWorkingOrder.IsReaderLockHeld || DataSetMarket.lockWorkingOrder.IsWriterLockHeld))
                    {
                        return ((WorkingOrderRow)(this.GetParentRow(this.Table.ParentRelations["WorkingOrderAllocation"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "WorkingOrder"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["WorkingOrderAllocation"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AllocationRowChangeEvent : EventArgs
        {
            
            private AllocationRow eventRow;
            
            private DataRowAction eventAction;
            
            public AllocationRowChangeEvent(AllocationRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AllocationRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BlotterDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnAdvertisementStylesheetId;
            
            private Column columnBlotterId;
            
            private Column columnDestinationOrderDetailStylesheetId;
            
            private Column columnDestinationOrderStylesheetId;
            
            private Column columnExecutionDetailStylesheetId;
            
            private Column columnExecutionStylesheetId;
            
            private Column columnMatchStylesheetId;
            
            private Column columnMatchHistoryStylesheetId;
            
            private Column columnPartyTypeCode;
            
            private Column columnSourceOrderDetailStylesheetId;
            
            private Column columnSourceOrderStylesheetId;
            
            private Column columnWorkingOrderStylesheetId;
            
            internal BlotterDataTable() : 
                    base("Blotter")
            {
                this.InitClass();
            }
            
            internal BlotterDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column AdvertisementStylesheetIdColumn
            {
                get
                {
                    return this.columnAdvertisementStylesheetId;
                }
            }
            
            public Column BlotterIdColumn
            {
                get
                {
                    return this.columnBlotterId;
                }
            }
            
            public Column DestinationOrderDetailStylesheetIdColumn
            {
                get
                {
                    return this.columnDestinationOrderDetailStylesheetId;
                }
            }
            
            public Column DestinationOrderStylesheetIdColumn
            {
                get
                {
                    return this.columnDestinationOrderStylesheetId;
                }
            }
            
            public Column ExecutionDetailStylesheetIdColumn
            {
                get
                {
                    return this.columnExecutionDetailStylesheetId;
                }
            }
            
            public Column ExecutionStylesheetIdColumn
            {
                get
                {
                    return this.columnExecutionStylesheetId;
                }
            }
            
            public Column MatchStylesheetIdColumn
            {
                get
                {
                    return this.columnMatchStylesheetId;
                }
            }
            
            public Column MatchHistoryStylesheetIdColumn
            {
                get
                {
                    return this.columnMatchHistoryStylesheetId;
                }
            }
            
            public Column PartyTypeCodeColumn
            {
                get
                {
                    return this.columnPartyTypeCode;
                }
            }
            
            public Column SourceOrderDetailStylesheetIdColumn
            {
                get
                {
                    return this.columnSourceOrderDetailStylesheetId;
                }
            }
            
            public Column SourceOrderStylesheetIdColumn
            {
                get
                {
                    return this.columnSourceOrderStylesheetId;
                }
            }
            
            public Column WorkingOrderStylesheetIdColumn
            {
                get
                {
                    return this.columnWorkingOrderStylesheetId;
                }
            }
            
            public BlotterRow this[int index]
            {
                get
                {
                    return ((BlotterRow)(this.Rows[index]));
                }
            }
            
            public event BlotterRowChangeEventHandler BlotterRowChanged;
            
            public event BlotterRowChangeEventHandler BlotterRowChanging;
            
            public event BlotterRowChangeEventHandler BlotterRowDeleted;
            
            public event BlotterRowChangeEventHandler BlotterRowDeleting;
            
            public void AddBlotterRow(BlotterRow row)
            {
                this.Rows.Add(row);
            }
            
            public BlotterRow AddBlotterRow(StylesheetRow parentStylesheetRowByStylesheetBlotterAdvertisementStylesheetId, ObjectRow parentObjectRowByObjectBlotter, StylesheetRow parentStylesheetRowByStylesheetBlotterDestinationOrderDetailStylesheetId, StylesheetRow parentStylesheetRowByStylesheetBlotterDestinationOrderStylesheetId, StylesheetRow parentStylesheetRowByStylesheetBlotterExecutionDetailStylesheetId, StylesheetRow parentStylesheetRowByStylesheetBlotterExecutionStylesheetId, StylesheetRow parentStylesheetRowByStylesheetBlotterMatchStylesheetId, StylesheetRow parentStylesheetRowByStylesheetBlotterMatchHistoryStylesheetId, PartyTypeRow parentPartyTypeRowByPartyTypeBlotter, StylesheetRow parentStylesheetRowByStylesheetBlotterSourceOrderDetailStylesheetId, StylesheetRow parentStylesheetRowByStylesheetBlotterSourceOrderStylesheetId, StylesheetRow parentStylesheetRowByStylesheetBlotterWorkingOrderStylesheetId)
            {
                BlotterRow rowBlotterRow = ((BlotterRow)(this.NewRow()));
                rowBlotterRow.ItemArray = new object[] {
                        parentStylesheetRowByStylesheetBlotterAdvertisementStylesheetId[3],
                        parentObjectRowByObjectBlotter[12],
                        parentStylesheetRowByStylesheetBlotterDestinationOrderDetailStylesheetId[3],
                        parentStylesheetRowByStylesheetBlotterDestinationOrderStylesheetId[3],
                        parentStylesheetRowByStylesheetBlotterExecutionDetailStylesheetId[3],
                        parentStylesheetRowByStylesheetBlotterExecutionStylesheetId[3],
                        parentStylesheetRowByStylesheetBlotterMatchStylesheetId[3],
                        parentStylesheetRowByStylesheetBlotterMatchHistoryStylesheetId[3],
                        parentPartyTypeRowByPartyTypeBlotter[4],
                        parentStylesheetRowByStylesheetBlotterSourceOrderDetailStylesheetId[3],
                        parentStylesheetRowByStylesheetBlotterSourceOrderStylesheetId[3],
                        parentStylesheetRowByStylesheetBlotterWorkingOrderStylesheetId[3]};
                this.Rows.Add(rowBlotterRow);
                return rowBlotterRow;
            }
            
            public BlotterRow FindByBlotterId(int BlotterId)
            {
                return ((BlotterRow)(this.Rows.Find(new object[] {
                            BlotterId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                BlotterDataTable cln = ((BlotterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new BlotterDataTable();
            }
            
            internal void InitVars()
            {
                this.columnAdvertisementStylesheetId = this.Columns["AdvertisementStylesheetId"];
                this.columnBlotterId = this.Columns["BlotterId"];
                this.columnDestinationOrderDetailStylesheetId = this.Columns["DestinationOrderDetailStylesheetId"];
                this.columnDestinationOrderStylesheetId = this.Columns["DestinationOrderStylesheetId"];
                this.columnExecutionDetailStylesheetId = this.Columns["ExecutionDetailStylesheetId"];
                this.columnExecutionStylesheetId = this.Columns["ExecutionStylesheetId"];
                this.columnMatchStylesheetId = this.Columns["MatchStylesheetId"];
                this.columnMatchHistoryStylesheetId = this.Columns["MatchHistoryStylesheetId"];
                this.columnPartyTypeCode = this.Columns["PartyTypeCode"];
                this.columnSourceOrderDetailStylesheetId = this.Columns["SourceOrderDetailStylesheetId"];
                this.columnSourceOrderStylesheetId = this.Columns["SourceOrderStylesheetId"];
                this.columnWorkingOrderStylesheetId = this.Columns["WorkingOrderStylesheetId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnAdvertisementStylesheetId = new Column("AdvertisementStylesheetId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAdvertisementStylesheetId);
                this.columnBlotterId = new Column("BlotterId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlotterId);
                this.columnDestinationOrderDetailStylesheetId = new Column("DestinationOrderDetailStylesheetId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDestinationOrderDetailStylesheetId);
                this.columnDestinationOrderStylesheetId = new Column("DestinationOrderStylesheetId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDestinationOrderStylesheetId);
                this.columnExecutionDetailStylesheetId = new Column("ExecutionDetailStylesheetId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExecutionDetailStylesheetId);
                this.columnExecutionStylesheetId = new Column("ExecutionStylesheetId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExecutionStylesheetId);
                this.columnMatchStylesheetId = new Column("MatchStylesheetId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMatchStylesheetId);
                this.columnMatchHistoryStylesheetId = new Column("MatchHistoryStylesheetId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMatchHistoryStylesheetId);
                this.columnPartyTypeCode = new Column("PartyTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPartyTypeCode);
                this.columnSourceOrderDetailStylesheetId = new Column("SourceOrderDetailStylesheetId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSourceOrderDetailStylesheetId);
                this.columnSourceOrderStylesheetId = new Column("SourceOrderStylesheetId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSourceOrderStylesheetId);
                this.columnWorkingOrderStylesheetId = new Column("WorkingOrderStylesheetId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWorkingOrderStylesheetId);
                this.Constraints.Add(new UniqueConstraint("KeyBlotter", new DataColumn[] {
                                this.columnBlotterId}, true));
                this.columnBlotterId.AllowDBNull = false;
                this.columnBlotterId.Unique = true;
                this.columnPartyTypeCode.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.BlotterLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Blotter"));
                }
            }
            
            public BlotterRow NewBlotterRow()
            {
                return ((BlotterRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new BlotterRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(BlotterRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.BlotterRowChanged != null))
                {
                    this.BlotterRowChanged(this, new BlotterRowChangeEvent(((BlotterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.BlotterRowChanging != null))
                {
                    this.BlotterRowChanging(this, new BlotterRowChangeEvent(((BlotterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.BlotterRowDeleted != null))
                {
                    this.BlotterRowDeleted(this, new BlotterRowChangeEvent(((BlotterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.BlotterRowDeleting != null))
                {
                    this.BlotterRowDeleting(this, new BlotterRowChangeEvent(((BlotterRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBlotterRow(BlotterRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BlotterRow : Row
        {
            
            private BlotterDataTable tableBlotter;
            
            internal BlotterRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableBlotter = ((BlotterDataTable)(this.Table));
            }
            
            public int AdvertisementStylesheetId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableBlotter.AdvertisementStylesheetIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlotter.AdvertisementStylesheetIdColumn] = value;
                }
            }
            
            public int BlotterId
            {
                get
                {
                    return ((int)(this[this.tableBlotter.BlotterIdColumn]));
                }
                set
                {
                    this[this.tableBlotter.BlotterIdColumn] = value;
                }
            }
            
            public int DestinationOrderDetailStylesheetId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableBlotter.DestinationOrderDetailStylesheetIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlotter.DestinationOrderDetailStylesheetIdColumn] = value;
                }
            }
            
            public int DestinationOrderStylesheetId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableBlotter.DestinationOrderStylesheetIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlotter.DestinationOrderStylesheetIdColumn] = value;
                }
            }
            
            public int ExecutionDetailStylesheetId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableBlotter.ExecutionDetailStylesheetIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlotter.ExecutionDetailStylesheetIdColumn] = value;
                }
            }
            
            public int ExecutionStylesheetId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableBlotter.ExecutionStylesheetIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlotter.ExecutionStylesheetIdColumn] = value;
                }
            }
            
            public int MatchStylesheetId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableBlotter.MatchStylesheetIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlotter.MatchStylesheetIdColumn] = value;
                }
            }
            
            public int MatchHistoryStylesheetId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableBlotter.MatchHistoryStylesheetIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlotter.MatchHistoryStylesheetIdColumn] = value;
                }
            }
            
            public int PartyTypeCode
            {
                get
                {
                    return ((int)(this[this.tableBlotter.PartyTypeCodeColumn]));
                }
                set
                {
                    this[this.tableBlotter.PartyTypeCodeColumn] = value;
                }
            }
            
            public int SourceOrderDetailStylesheetId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableBlotter.SourceOrderDetailStylesheetIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlotter.SourceOrderDetailStylesheetIdColumn] = value;
                }
            }
            
            public int SourceOrderStylesheetId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableBlotter.SourceOrderStylesheetIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlotter.SourceOrderStylesheetIdColumn] = value;
                }
            }
            
            public int WorkingOrderStylesheetId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableBlotter.WorkingOrderStylesheetIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlotter.WorkingOrderStylesheetIdColumn] = value;
                }
            }
            
            public ObjectRow ObjectRow
            {
                get
                {
                    if ((DataSetMarket.lockObject.IsReaderLockHeld || DataSetMarket.lockObject.IsWriterLockHeld))
                    {
                        return ((ObjectRow)(this.GetParentRow(this.Table.ParentRelations["ObjectBlotter"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Object"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["ObjectBlotter"]);
                }
            }
            
            public PartyTypeRow PartyTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockPartyType.IsReaderLockHeld || DataSetMarket.lockPartyType.IsWriterLockHeld))
                    {
                        return ((PartyTypeRow)(this.GetParentRow(this.Table.ParentRelations["PartyTypeBlotter"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "PartyType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["PartyTypeBlotter"]);
                }
            }
            
            public StylesheetRow StylesheetRowByStylesheetBlotterAdvertisementStylesheetId
            {
                get
                {
                    if ((DataSetMarket.lockStylesheet.IsReaderLockHeld || DataSetMarket.lockStylesheet.IsWriterLockHeld))
                    {
                        return ((StylesheetRow)(this.GetParentRow(this.Table.ParentRelations["StylesheetBlotterAdvertisementStylesheetId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Stylesheet"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["StylesheetBlotterAdvertisementStylesheetId"]);
                }
            }
            
            public StylesheetRow StylesheetRowByStylesheetBlotterDestinationOrderDetailStylesheetId
            {
                get
                {
                    if ((DataSetMarket.lockStylesheet.IsReaderLockHeld || DataSetMarket.lockStylesheet.IsWriterLockHeld))
                    {
                        return ((StylesheetRow)(this.GetParentRow(this.Table.ParentRelations["StylesheetBlotterDestinationOrderDetailStylesheetId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Stylesheet"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["StylesheetBlotterDestinationOrderDetailStylesheetId"]);
                }
            }
            
            public StylesheetRow StylesheetRowByStylesheetBlotterDestinationOrderStylesheetId
            {
                get
                {
                    if ((DataSetMarket.lockStylesheet.IsReaderLockHeld || DataSetMarket.lockStylesheet.IsWriterLockHeld))
                    {
                        return ((StylesheetRow)(this.GetParentRow(this.Table.ParentRelations["StylesheetBlotterDestinationOrderStylesheetId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Stylesheet"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["StylesheetBlotterDestinationOrderStylesheetId"]);
                }
            }
            
            public StylesheetRow StylesheetRowByStylesheetBlotterExecutionDetailStylesheetId
            {
                get
                {
                    if ((DataSetMarket.lockStylesheet.IsReaderLockHeld || DataSetMarket.lockStylesheet.IsWriterLockHeld))
                    {
                        return ((StylesheetRow)(this.GetParentRow(this.Table.ParentRelations["StylesheetBlotterExecutionDetailStylesheetId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Stylesheet"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["StylesheetBlotterExecutionDetailStylesheetId"]);
                }
            }
            
            public StylesheetRow StylesheetRowByStylesheetBlotterExecutionStylesheetId
            {
                get
                {
                    if ((DataSetMarket.lockStylesheet.IsReaderLockHeld || DataSetMarket.lockStylesheet.IsWriterLockHeld))
                    {
                        return ((StylesheetRow)(this.GetParentRow(this.Table.ParentRelations["StylesheetBlotterExecutionStylesheetId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Stylesheet"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["StylesheetBlotterExecutionStylesheetId"]);
                }
            }
            
            public StylesheetRow StylesheetRowByStylesheetBlotterMatchStylesheetId
            {
                get
                {
                    if ((DataSetMarket.lockStylesheet.IsReaderLockHeld || DataSetMarket.lockStylesheet.IsWriterLockHeld))
                    {
                        return ((StylesheetRow)(this.GetParentRow(this.Table.ParentRelations["StylesheetBlotterMatchStylesheetId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Stylesheet"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["StylesheetBlotterMatchStylesheetId"]);
                }
            }
            
            public StylesheetRow StylesheetRowByStylesheetBlotterMatchHistoryStylesheetId
            {
                get
                {
                    if ((DataSetMarket.lockStylesheet.IsReaderLockHeld || DataSetMarket.lockStylesheet.IsWriterLockHeld))
                    {
                        return ((StylesheetRow)(this.GetParentRow(this.Table.ParentRelations["StylesheetBlotterMatchHistoryStylesheetId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Stylesheet"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["StylesheetBlotterMatchHistoryStylesheetId"]);
                }
            }
            
            public StylesheetRow StylesheetRowByStylesheetBlotterSourceOrderDetailStylesheetId
            {
                get
                {
                    if ((DataSetMarket.lockStylesheet.IsReaderLockHeld || DataSetMarket.lockStylesheet.IsWriterLockHeld))
                    {
                        return ((StylesheetRow)(this.GetParentRow(this.Table.ParentRelations["StylesheetBlotterSourceOrderDetailStylesheetId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Stylesheet"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["StylesheetBlotterSourceOrderDetailStylesheetId"]);
                }
            }
            
            public StylesheetRow StylesheetRowByStylesheetBlotterSourceOrderStylesheetId
            {
                get
                {
                    if ((DataSetMarket.lockStylesheet.IsReaderLockHeld || DataSetMarket.lockStylesheet.IsWriterLockHeld))
                    {
                        return ((StylesheetRow)(this.GetParentRow(this.Table.ParentRelations["StylesheetBlotterSourceOrderStylesheetId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Stylesheet"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["StylesheetBlotterSourceOrderStylesheetId"]);
                }
            }
            
            public StylesheetRow StylesheetRowByStylesheetBlotterWorkingOrderStylesheetId
            {
                get
                {
                    if ((DataSetMarket.lockStylesheet.IsReaderLockHeld || DataSetMarket.lockStylesheet.IsWriterLockHeld))
                    {
                        return ((StylesheetRow)(this.GetParentRow(this.Table.ParentRelations["StylesheetBlotterWorkingOrderStylesheetId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Stylesheet"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["StylesheetBlotterWorkingOrderStylesheetId"]);
                }
            }
            
            public bool IsAdvertisementStylesheetIdNull()
            {
                return this.IsNull(this.tableBlotter.AdvertisementStylesheetIdColumn);
            }
            
            public void SetAdvertisementStylesheetIdNull()
            {
                this[this.tableBlotter.AdvertisementStylesheetIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsDestinationOrderDetailStylesheetIdNull()
            {
                return this.IsNull(this.tableBlotter.DestinationOrderDetailStylesheetIdColumn);
            }
            
            public void SetDestinationOrderDetailStylesheetIdNull()
            {
                this[this.tableBlotter.DestinationOrderDetailStylesheetIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsDestinationOrderStylesheetIdNull()
            {
                return this.IsNull(this.tableBlotter.DestinationOrderStylesheetIdColumn);
            }
            
            public void SetDestinationOrderStylesheetIdNull()
            {
                this[this.tableBlotter.DestinationOrderStylesheetIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsExecutionDetailStylesheetIdNull()
            {
                return this.IsNull(this.tableBlotter.ExecutionDetailStylesheetIdColumn);
            }
            
            public void SetExecutionDetailStylesheetIdNull()
            {
                this[this.tableBlotter.ExecutionDetailStylesheetIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsExecutionStylesheetIdNull()
            {
                return this.IsNull(this.tableBlotter.ExecutionStylesheetIdColumn);
            }
            
            public void SetExecutionStylesheetIdNull()
            {
                this[this.tableBlotter.ExecutionStylesheetIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsMatchStylesheetIdNull()
            {
                return this.IsNull(this.tableBlotter.MatchStylesheetIdColumn);
            }
            
            public void SetMatchStylesheetIdNull()
            {
                this[this.tableBlotter.MatchStylesheetIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsMatchHistoryStylesheetIdNull()
            {
                return this.IsNull(this.tableBlotter.MatchHistoryStylesheetIdColumn);
            }
            
            public void SetMatchHistoryStylesheetIdNull()
            {
                this[this.tableBlotter.MatchHistoryStylesheetIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsSourceOrderDetailStylesheetIdNull()
            {
                return this.IsNull(this.tableBlotter.SourceOrderDetailStylesheetIdColumn);
            }
            
            public void SetSourceOrderDetailStylesheetIdNull()
            {
                this[this.tableBlotter.SourceOrderDetailStylesheetIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsSourceOrderStylesheetIdNull()
            {
                return this.IsNull(this.tableBlotter.SourceOrderStylesheetIdColumn);
            }
            
            public void SetSourceOrderStylesheetIdNull()
            {
                this[this.tableBlotter.SourceOrderStylesheetIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsWorkingOrderStylesheetIdNull()
            {
                return this.IsNull(this.tableBlotter.WorkingOrderStylesheetIdColumn);
            }
            
            public void SetWorkingOrderStylesheetIdNull()
            {
                this[this.tableBlotter.WorkingOrderStylesheetIdColumn] = System.Convert.DBNull;
            }
            
            public BranchRow[] GetBranchRows()
            {
                return ((BranchRow[])(this.GetChildRows(this.Table.ChildRelations["BlotterBranch"])));
            }
            
            public SourceRow[] GetSourceRows()
            {
                return ((SourceRow[])(this.GetChildRows(this.Table.ChildRelations["BlotterSource"])));
            }
            
            public TraderRow[] GetTraderRows()
            {
                return ((TraderRow[])(this.GetChildRows(this.Table.ChildRelations["BlotterTrader"])));
            }
            
            public WorkingOrderRow[] GetWorkingOrderRows()
            {
                return ((WorkingOrderRow[])(this.GetChildRows(this.Table.ChildRelations["BlotterWorkingOrder"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BlotterRowChangeEvent : EventArgs
        {
            
            private BlotterRow eventRow;
            
            private DataRowAction eventAction;
            
            public BlotterRowChangeEvent(BlotterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BlotterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BranchDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnBranchId;
            
            private Column columnShortName;
            
            internal BranchDataTable() : 
                    base("Branch")
            {
                this.InitClass();
            }
            
            internal BranchDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column BranchIdColumn
            {
                get
                {
                    return this.columnBranchId;
                }
            }
            
            public Column ShortNameColumn
            {
                get
                {
                    return this.columnShortName;
                }
            }
            
            public BranchRow this[int index]
            {
                get
                {
                    return ((BranchRow)(this.Rows[index]));
                }
            }
            
            public event BranchRowChangeEventHandler BranchRowChanged;
            
            public event BranchRowChangeEventHandler BranchRowChanging;
            
            public event BranchRowChangeEventHandler BranchRowDeleted;
            
            public event BranchRowChangeEventHandler BranchRowDeleting;
            
            public void AddBranchRow(BranchRow row)
            {
                this.Rows.Add(row);
            }
            
            public BranchRow AddBranchRow(BlotterRow parentBlotterRowByBlotterBranch, string ShortName)
            {
                BranchRow rowBranchRow = ((BranchRow)(this.NewRow()));
                rowBranchRow.ItemArray = new object[] {
                        parentBlotterRowByBlotterBranch[18],
                        ShortName};
                this.Rows.Add(rowBranchRow);
                return rowBranchRow;
            }
            
            public BranchRow FindByBranchId(int BranchId)
            {
                return ((BranchRow)(this.Rows.Find(new object[] {
                            BranchId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                BranchDataTable cln = ((BranchDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new BranchDataTable();
            }
            
            internal void InitVars()
            {
                this.columnBranchId = this.Columns["BranchId"];
                this.columnShortName = this.Columns["ShortName"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnBranchId = new Column("BranchId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBranchId);
                this.columnShortName = new Column("ShortName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnShortName);
                this.Constraints.Add(new UniqueConstraint("KeyBranch", new DataColumn[] {
                                this.columnBranchId}, true));
                this.columnBranchId.AllowDBNull = false;
                this.columnBranchId.Unique = true;
                this.columnShortName.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.BranchLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Branch"));
                }
            }
            
            public BranchRow NewBranchRow()
            {
                return ((BranchRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new BranchRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(BranchRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.BranchRowChanged != null))
                {
                    this.BranchRowChanged(this, new BranchRowChangeEvent(((BranchRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.BranchRowChanging != null))
                {
                    this.BranchRowChanging(this, new BranchRowChangeEvent(((BranchRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.BranchRowDeleted != null))
                {
                    this.BranchRowDeleted(this, new BranchRowChangeEvent(((BranchRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.BranchRowDeleting != null))
                {
                    this.BranchRowDeleting(this, new BranchRowChangeEvent(((BranchRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBranchRow(BranchRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BranchRow : Row
        {
            
            private BranchDataTable tableBranch;
            
            internal BranchRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableBranch = ((BranchDataTable)(this.Table));
            }
            
            public int BranchId
            {
                get
                {
                    return ((int)(this[this.tableBranch.BranchIdColumn]));
                }
                set
                {
                    this[this.tableBranch.BranchIdColumn] = value;
                }
            }
            
            public string ShortName
            {
                get
                {
                    return ((string)(this[this.tableBranch.ShortNameColumn]));
                }
                set
                {
                    this[this.tableBranch.ShortNameColumn] = value;
                }
            }
            
            public BlotterRow BlotterRow
            {
                get
                {
                    if ((DataSetMarket.lockBlotter.IsReaderLockHeld || DataSetMarket.lockBlotter.IsWriterLockHeld))
                    {
                        return ((BlotterRow)(this.GetParentRow(this.Table.ParentRelations["BlotterBranch"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Blotter"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["BlotterBranch"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BranchRowChangeEvent : EventArgs
        {
            
            private BranchRow eventRow;
            
            private DataRowAction eventAction;
            
            public BranchRowChangeEvent(BranchRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BranchRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BrokerDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnBrokerId;
            
            private Column columnConnected;
            
            private Column columnPhone;
            
            private Column columnSymbol;
            
            internal BrokerDataTable() : 
                    base("Broker")
            {
                this.InitClass();
            }
            
            internal BrokerDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column BrokerIdColumn
            {
                get
                {
                    return this.columnBrokerId;
                }
            }
            
            public Column ConnectedColumn
            {
                get
                {
                    return this.columnConnected;
                }
            }
            
            public Column PhoneColumn
            {
                get
                {
                    return this.columnPhone;
                }
            }
            
            public Column SymbolColumn
            {
                get
                {
                    return this.columnSymbol;
                }
            }
            
            public BrokerRow this[int index]
            {
                get
                {
                    return ((BrokerRow)(this.Rows[index]));
                }
            }
            
            public event BrokerRowChangeEventHandler BrokerRowChanged;
            
            public event BrokerRowChangeEventHandler BrokerRowChanging;
            
            public event BrokerRowChangeEventHandler BrokerRowDeleted;
            
            public event BrokerRowChangeEventHandler BrokerRowDeleting;
            
            public void AddBrokerRow(BrokerRow row)
            {
                this.Rows.Add(row);
            }
            
            public BrokerRow AddBrokerRow(SourceRow parentSourceRowBySourceBroker, bool Connected, string Phone, string Symbol)
            {
                BrokerRow rowBrokerRow = ((BrokerRow)(this.NewRow()));
                rowBrokerRow.ItemArray = new object[] {
                        parentSourceRowBySourceBroker[34],
                        Connected,
                        Phone,
                        Symbol};
                this.Rows.Add(rowBrokerRow);
                return rowBrokerRow;
            }
            
            public BrokerRow FindByBrokerId(int BrokerId)
            {
                return ((BrokerRow)(this.Rows.Find(new object[] {
                            BrokerId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                BrokerDataTable cln = ((BrokerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new BrokerDataTable();
            }
            
            internal void InitVars()
            {
                this.columnBrokerId = this.Columns["BrokerId"];
                this.columnConnected = this.Columns["Connected"];
                this.columnPhone = this.Columns["Phone"];
                this.columnSymbol = this.Columns["Symbol"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnBrokerId = new Column("BrokerId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBrokerId);
                this.columnConnected = new Column("Connected", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConnected);
                this.columnPhone = new Column("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.columnSymbol = new Column("Symbol", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSymbol);
                this.Constraints.Add(new UniqueConstraint("KeyBroker", new DataColumn[] {
                                this.columnBrokerId}, true));
                this.columnBrokerId.AllowDBNull = false;
                this.columnBrokerId.Unique = true;
                this.columnConnected.AllowDBNull = false;
                this.columnConnected.DefaultValue = false;
                this.columnSymbol.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.BrokerLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Broker"));
                }
            }
            
            public BrokerRow NewBrokerRow()
            {
                return ((BrokerRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new BrokerRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(BrokerRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.BrokerRowChanged != null))
                {
                    this.BrokerRowChanged(this, new BrokerRowChangeEvent(((BrokerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.BrokerRowChanging != null))
                {
                    this.BrokerRowChanging(this, new BrokerRowChangeEvent(((BrokerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.BrokerRowDeleted != null))
                {
                    this.BrokerRowDeleted(this, new BrokerRowChangeEvent(((BrokerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.BrokerRowDeleting != null))
                {
                    this.BrokerRowDeleting(this, new BrokerRowChangeEvent(((BrokerRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBrokerRow(BrokerRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BrokerRow : Row
        {
            
            private BrokerDataTable tableBroker;
            
            internal BrokerRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableBroker = ((BrokerDataTable)(this.Table));
            }
            
            public int BrokerId
            {
                get
                {
                    return ((int)(this[this.tableBroker.BrokerIdColumn]));
                }
                set
                {
                    this[this.tableBroker.BrokerIdColumn] = value;
                }
            }
            
            public bool Connected
            {
                get
                {
                    return ((bool)(this[this.tableBroker.ConnectedColumn]));
                }
                set
                {
                    this[this.tableBroker.ConnectedColumn] = value;
                }
            }
            
            public string Phone
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableBroker.PhoneColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBroker.PhoneColumn] = value;
                }
            }
            
            public string Symbol
            {
                get
                {
                    return ((string)(this[this.tableBroker.SymbolColumn]));
                }
                set
                {
                    this[this.tableBroker.SymbolColumn] = value;
                }
            }
            
            public SourceRow SourceRow
            {
                get
                {
                    if ((DataSetMarket.lockSource.IsReaderLockHeld || DataSetMarket.lockSource.IsWriterLockHeld))
                    {
                        return ((SourceRow)(this.GetParentRow(this.Table.ParentRelations["SourceBroker"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Source"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["SourceBroker"]);
                }
            }
            
            public bool IsPhoneNull()
            {
                return this.IsNull(this.tableBroker.PhoneColumn);
            }
            
            public void SetPhoneNull()
            {
                this[this.tableBroker.PhoneColumn] = System.Convert.DBNull;
            }
            
            public ExecutionRow[] GetExecutionRows()
            {
                return ((ExecutionRow[])(this.GetChildRows(this.Table.ChildRelations["BrokerExecution"])));
            }
            
            public BrokerAccountRow[] GetBrokerAccountRows()
            {
                return ((BrokerAccountRow[])(this.GetChildRows(this.Table.ChildRelations["BrokerBrokerAccount"])));
            }
            
            public ClearingBrokerRow[] GetClearingBrokerRows()
            {
                return ((ClearingBrokerRow[])(this.GetChildRows(this.Table.ChildRelations["BrokerClearingBroker"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BrokerRowChangeEvent : EventArgs
        {
            
            private BrokerRow eventRow;
            
            private DataRowAction eventAction;
            
            public BrokerRowChangeEvent(BrokerRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BrokerRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BrokerAccountDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnBrokerAccountId;
            
            private Column columnBrokerId;
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private Column columnMnemonic;
            
            private Column columnTraderId;
            
            private DataView viewKeyBrokerAccountExternalId0;
            
            private DataView viewKeyBrokerAccountExternalId1;
            
            private DataView viewKeyBrokerAccountExternalId2;
            
            private DataView viewKeyBrokerAccountExternalId3;
            
            internal BrokerAccountDataTable() : 
                    base("BrokerAccount")
            {
                this.InitClass();
            }
            
            internal BrokerAccountDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column BrokerAccountIdColumn
            {
                get
                {
                    return this.columnBrokerAccountId;
                }
            }
            
            public Column BrokerIdColumn
            {
                get
                {
                    return this.columnBrokerId;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public Column MnemonicColumn
            {
                get
                {
                    return this.columnMnemonic;
                }
            }
            
            public Column TraderIdColumn
            {
                get
                {
                    return this.columnTraderId;
                }
            }
            
            public DataView KeyBrokerAccountExternalId0
            {
                get
                {
                    return this.viewKeyBrokerAccountExternalId0;
                }
            }
            
            public DataView KeyBrokerAccountExternalId1
            {
                get
                {
                    return this.viewKeyBrokerAccountExternalId1;
                }
            }
            
            public DataView KeyBrokerAccountExternalId2
            {
                get
                {
                    return this.viewKeyBrokerAccountExternalId2;
                }
            }
            
            public DataView KeyBrokerAccountExternalId3
            {
                get
                {
                    return this.viewKeyBrokerAccountExternalId3;
                }
            }
            
            public BrokerAccountRow this[int index]
            {
                get
                {
                    return ((BrokerAccountRow)(this.Rows[index]));
                }
            }
            
            public event BrokerAccountRowChangeEventHandler BrokerAccountRowChanged;
            
            public event BrokerAccountRowChangeEventHandler BrokerAccountRowChanging;
            
            public event BrokerAccountRowChangeEventHandler BrokerAccountRowDeleted;
            
            public event BrokerAccountRowChangeEventHandler BrokerAccountRowDeleting;
            
            public void AddBrokerAccountRow(BrokerAccountRow row)
            {
                this.Rows.Add(row);
            }
            
            public BrokerAccountRow AddBrokerAccountRow(BrokerRow parentBrokerRowByBrokerBrokerAccount, string Description, string ExternalId0, string ExternalId1, string ExternalId2, string ExternalId3, string Mnemonic, TraderRow parentTraderRowByTraderBrokerAccount)
            {
                BrokerAccountRow rowBrokerAccountRow = ((BrokerAccountRow)(this.NewRow()));
                rowBrokerAccountRow.ItemArray = new object[] {
                        null,
                        parentBrokerRowByBrokerBrokerAccount[35],
                        Description,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3,
                        Mnemonic,
                        parentTraderRowByTraderBrokerAccount[61]};
                this.Rows.Add(rowBrokerAccountRow);
                return rowBrokerAccountRow;
            }
            
            public BrokerAccountRow FindByBrokerAccountId(int BrokerAccountId)
            {
                return ((BrokerAccountRow)(this.Rows.Find(new object[] {
                            BrokerAccountId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                BrokerAccountDataTable cln = ((BrokerAccountDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new BrokerAccountDataTable();
            }
            
            internal void InitVars()
            {
                this.columnBrokerAccountId = this.Columns["BrokerAccountId"];
                this.columnBrokerId = this.Columns["BrokerId"];
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnTraderId = this.Columns["TraderId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnBrokerAccountId = new Column("BrokerAccountId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBrokerAccountId);
                this.columnBrokerId = new Column("BrokerId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBrokerId);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.columnMnemonic = new Column("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnTraderId = new Column("TraderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTraderId);
                this.Constraints.Add(new UniqueConstraint("KeyBrokerAccount", new DataColumn[] {
                                this.columnBrokerAccountId}, true));
                this.viewKeyBrokerAccountExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewKeyBrokerAccountExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.viewKeyBrokerAccountExternalId2 = new DataView(this, null, "ExternalId2", DataViewRowState.CurrentRows);
                this.viewKeyBrokerAccountExternalId3 = new DataView(this, null, "ExternalId3", DataViewRowState.CurrentRows);
                this.columnBrokerAccountId.AutoIncrement = true;
                this.columnBrokerAccountId.AllowDBNull = false;
                this.columnBrokerAccountId.Unique = true;
                this.columnBrokerId.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnMnemonic.AllowDBNull = false;
                this.columnTraderId.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.BrokerAccountLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "BrokerAccount"));
                }
            }
            
            public BrokerAccountRow NewBrokerAccountRow()
            {
                return ((BrokerAccountRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new BrokerAccountRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(BrokerAccountRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.BrokerAccountRowChanged != null))
                {
                    this.BrokerAccountRowChanged(this, new BrokerAccountRowChangeEvent(((BrokerAccountRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.BrokerAccountRowChanging != null))
                {
                    this.BrokerAccountRowChanging(this, new BrokerAccountRowChangeEvent(((BrokerAccountRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.BrokerAccountRowDeleted != null))
                {
                    this.BrokerAccountRowDeleted(this, new BrokerAccountRowChangeEvent(((BrokerAccountRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.BrokerAccountRowDeleting != null))
                {
                    this.BrokerAccountRowDeleting(this, new BrokerAccountRowChangeEvent(((BrokerAccountRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBrokerAccountRow(BrokerAccountRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BrokerAccountRow : Row
        {
            
            private BrokerAccountDataTable tableBrokerAccount;
            
            internal BrokerAccountRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableBrokerAccount = ((BrokerAccountDataTable)(this.Table));
            }
            
            public int BrokerAccountId
            {
                get
                {
                    return ((int)(this[this.tableBrokerAccount.BrokerAccountIdColumn]));
                }
                set
                {
                    this[this.tableBrokerAccount.BrokerAccountIdColumn] = value;
                }
            }
            
            public int BrokerId
            {
                get
                {
                    return ((int)(this[this.tableBrokerAccount.BrokerIdColumn]));
                }
                set
                {
                    this[this.tableBrokerAccount.BrokerIdColumn] = value;
                }
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableBrokerAccount.DescriptionColumn]));
                }
                set
                {
                    this[this.tableBrokerAccount.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableBrokerAccount.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBrokerAccount.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableBrokerAccount.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBrokerAccount.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableBrokerAccount.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBrokerAccount.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableBrokerAccount.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBrokerAccount.ExternalId3Column] = value;
                }
            }
            
            public string Mnemonic
            {
                get
                {
                    return ((string)(this[this.tableBrokerAccount.MnemonicColumn]));
                }
                set
                {
                    this[this.tableBrokerAccount.MnemonicColumn] = value;
                }
            }
            
            public int TraderId
            {
                get
                {
                    return ((int)(this[this.tableBrokerAccount.TraderIdColumn]));
                }
                set
                {
                    this[this.tableBrokerAccount.TraderIdColumn] = value;
                }
            }
            
            public BrokerRow BrokerRow
            {
                get
                {
                    if ((DataSetMarket.lockBroker.IsReaderLockHeld || DataSetMarket.lockBroker.IsWriterLockHeld))
                    {
                        return ((BrokerRow)(this.GetParentRow(this.Table.ParentRelations["BrokerBrokerAccount"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Broker"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["BrokerBrokerAccount"]);
                }
            }
            
            public TraderRow TraderRow
            {
                get
                {
                    if ((DataSetMarket.lockTrader.IsReaderLockHeld || DataSetMarket.lockTrader.IsWriterLockHeld))
                    {
                        return ((TraderRow)(this.GetParentRow(this.Table.ParentRelations["TraderBrokerAccount"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Trader"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["TraderBrokerAccount"]);
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableBrokerAccount.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableBrokerAccount.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableBrokerAccount.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableBrokerAccount.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableBrokerAccount.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableBrokerAccount.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableBrokerAccount.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableBrokerAccount.ExternalId3Column] = System.Convert.DBNull;
            }
            
            public ExecutionRow[] GetExecutionRows()
            {
                return ((ExecutionRow[])(this.GetChildRows(this.Table.ChildRelations["BrokerAccountExecution"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BrokerAccountRowChangeEvent : EventArgs
        {
            
            private BrokerAccountRow eventRow;
            
            private DataRowAction eventAction;
            
            public BrokerAccountRowChangeEvent(BrokerAccountRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BrokerAccountRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClearingBrokerDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnClearingBrokerId;
            
            internal ClearingBrokerDataTable() : 
                    base("ClearingBroker")
            {
                this.InitClass();
            }
            
            internal ClearingBrokerDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ClearingBrokerIdColumn
            {
                get
                {
                    return this.columnClearingBrokerId;
                }
            }
            
            public ClearingBrokerRow this[int index]
            {
                get
                {
                    return ((ClearingBrokerRow)(this.Rows[index]));
                }
            }
            
            public event ClearingBrokerRowChangeEventHandler ClearingBrokerRowChanged;
            
            public event ClearingBrokerRowChangeEventHandler ClearingBrokerRowChanging;
            
            public event ClearingBrokerRowChangeEventHandler ClearingBrokerRowDeleted;
            
            public event ClearingBrokerRowChangeEventHandler ClearingBrokerRowDeleting;
            
            public void AddClearingBrokerRow(ClearingBrokerRow row)
            {
                this.Rows.Add(row);
            }
            
            public ClearingBrokerRow AddClearingBrokerRow(BrokerRow parentBrokerRowByBrokerClearingBroker)
            {
                ClearingBrokerRow rowClearingBrokerRow = ((ClearingBrokerRow)(this.NewRow()));
                rowClearingBrokerRow.ItemArray = new object[] {
                        parentBrokerRowByBrokerClearingBroker[35]};
                this.Rows.Add(rowClearingBrokerRow);
                return rowClearingBrokerRow;
            }
            
            public ClearingBrokerRow FindByClearingBrokerId(int ClearingBrokerId)
            {
                return ((ClearingBrokerRow)(this.Rows.Find(new object[] {
                            ClearingBrokerId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                ClearingBrokerDataTable cln = ((ClearingBrokerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new ClearingBrokerDataTable();
            }
            
            internal void InitVars()
            {
                this.columnClearingBrokerId = this.Columns["ClearingBrokerId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnClearingBrokerId = new Column("ClearingBrokerId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClearingBrokerId);
                this.Constraints.Add(new UniqueConstraint("KeyClearingBroker", new DataColumn[] {
                                this.columnClearingBrokerId}, true));
                this.columnClearingBrokerId.AllowDBNull = false;
                this.columnClearingBrokerId.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.ClearingBrokerLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "ClearingBroker"));
                }
            }
            
            public ClearingBrokerRow NewClearingBrokerRow()
            {
                return ((ClearingBrokerRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ClearingBrokerRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(ClearingBrokerRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ClearingBrokerRowChanged != null))
                {
                    this.ClearingBrokerRowChanged(this, new ClearingBrokerRowChangeEvent(((ClearingBrokerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ClearingBrokerRowChanging != null))
                {
                    this.ClearingBrokerRowChanging(this, new ClearingBrokerRowChangeEvent(((ClearingBrokerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ClearingBrokerRowDeleted != null))
                {
                    this.ClearingBrokerRowDeleted(this, new ClearingBrokerRowChangeEvent(((ClearingBrokerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ClearingBrokerRowDeleting != null))
                {
                    this.ClearingBrokerRowDeleting(this, new ClearingBrokerRowChangeEvent(((ClearingBrokerRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveClearingBrokerRow(ClearingBrokerRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClearingBrokerRow : Row
        {
            
            private ClearingBrokerDataTable tableClearingBroker;
            
            internal ClearingBrokerRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableClearingBroker = ((ClearingBrokerDataTable)(this.Table));
            }
            
            public int ClearingBrokerId
            {
                get
                {
                    return ((int)(this[this.tableClearingBroker.ClearingBrokerIdColumn]));
                }
                set
                {
                    this[this.tableClearingBroker.ClearingBrokerIdColumn] = value;
                }
            }
            
            public BrokerRow BrokerRow
            {
                get
                {
                    if ((DataSetMarket.lockBroker.IsReaderLockHeld || DataSetMarket.lockBroker.IsWriterLockHeld))
                    {
                        return ((BrokerRow)(this.GetParentRow(this.Table.ParentRelations["BrokerClearingBroker"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Broker"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["BrokerClearingBroker"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClearingBrokerRowChangeEvent : EventArgs
        {
            
            private ClearingBrokerRow eventRow;
            
            private DataRowAction eventAction;
            
            public ClearingBrokerRowChangeEvent(ClearingBrokerRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ClearingBrokerRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ComplianceOfficerDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnComplianceOfficerId;
            
            internal ComplianceOfficerDataTable() : 
                    base("ComplianceOfficer")
            {
                this.InitClass();
            }
            
            internal ComplianceOfficerDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ComplianceOfficerIdColumn
            {
                get
                {
                    return this.columnComplianceOfficerId;
                }
            }
            
            public ComplianceOfficerRow this[int index]
            {
                get
                {
                    return ((ComplianceOfficerRow)(this.Rows[index]));
                }
            }
            
            public event ComplianceOfficerRowChangeEventHandler ComplianceOfficerRowChanged;
            
            public event ComplianceOfficerRowChangeEventHandler ComplianceOfficerRowChanging;
            
            public event ComplianceOfficerRowChangeEventHandler ComplianceOfficerRowDeleted;
            
            public event ComplianceOfficerRowChangeEventHandler ComplianceOfficerRowDeleting;
            
            public void AddComplianceOfficerRow(ComplianceOfficerRow row)
            {
                this.Rows.Add(row);
            }
            
            public ComplianceOfficerRow AddComplianceOfficerRow(UserRow parentUserRowByUserComplianceOfficer)
            {
                ComplianceOfficerRow rowComplianceOfficerRow = ((ComplianceOfficerRow)(this.NewRow()));
                rowComplianceOfficerRow.ItemArray = new object[] {
                        parentUserRowByUserComplianceOfficer[20]};
                this.Rows.Add(rowComplianceOfficerRow);
                return rowComplianceOfficerRow;
            }
            
            public ComplianceOfficerRow FindByComplianceOfficerId(int ComplianceOfficerId)
            {
                return ((ComplianceOfficerRow)(this.Rows.Find(new object[] {
                            ComplianceOfficerId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                ComplianceOfficerDataTable cln = ((ComplianceOfficerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new ComplianceOfficerDataTable();
            }
            
            internal void InitVars()
            {
                this.columnComplianceOfficerId = this.Columns["ComplianceOfficerId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnComplianceOfficerId = new Column("ComplianceOfficerId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnComplianceOfficerId);
                this.Constraints.Add(new UniqueConstraint("KeyComplianceOfficer", new DataColumn[] {
                                this.columnComplianceOfficerId}, true));
                this.columnComplianceOfficerId.AllowDBNull = false;
                this.columnComplianceOfficerId.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.ComplianceOfficerLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "ComplianceOfficer"));
                }
            }
            
            public ComplianceOfficerRow NewComplianceOfficerRow()
            {
                return ((ComplianceOfficerRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ComplianceOfficerRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(ComplianceOfficerRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ComplianceOfficerRowChanged != null))
                {
                    this.ComplianceOfficerRowChanged(this, new ComplianceOfficerRowChangeEvent(((ComplianceOfficerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ComplianceOfficerRowChanging != null))
                {
                    this.ComplianceOfficerRowChanging(this, new ComplianceOfficerRowChangeEvent(((ComplianceOfficerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ComplianceOfficerRowDeleted != null))
                {
                    this.ComplianceOfficerRowDeleted(this, new ComplianceOfficerRowChangeEvent(((ComplianceOfficerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ComplianceOfficerRowDeleting != null))
                {
                    this.ComplianceOfficerRowDeleting(this, new ComplianceOfficerRowChangeEvent(((ComplianceOfficerRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveComplianceOfficerRow(ComplianceOfficerRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ComplianceOfficerRow : Row
        {
            
            private ComplianceOfficerDataTable tableComplianceOfficer;
            
            internal ComplianceOfficerRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableComplianceOfficer = ((ComplianceOfficerDataTable)(this.Table));
            }
            
            public int ComplianceOfficerId
            {
                get
                {
                    return ((int)(this[this.tableComplianceOfficer.ComplianceOfficerIdColumn]));
                }
                set
                {
                    this[this.tableComplianceOfficer.ComplianceOfficerIdColumn] = value;
                }
            }
            
            public UserRow UserRow
            {
                get
                {
                    if ((DataSetMarket.lockUser.IsReaderLockHeld || DataSetMarket.lockUser.IsWriterLockHeld))
                    {
                        return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["UserComplianceOfficer"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "User"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["UserComplianceOfficer"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ComplianceOfficerRowChangeEvent : EventArgs
        {
            
            private ComplianceOfficerRow eventRow;
            
            private DataRowAction eventAction;
            
            public ComplianceOfficerRowChangeEvent(ComplianceOfficerRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ComplianceOfficerRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConditionDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnConditionCode;
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private Column columnMnemonic;
            
            internal ConditionDataTable() : 
                    base("Condition")
            {
                this.InitClass();
            }
            
            internal ConditionDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ConditionCodeColumn
            {
                get
                {
                    return this.columnConditionCode;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public Column MnemonicColumn
            {
                get
                {
                    return this.columnMnemonic;
                }
            }
            
            public ConditionRow this[int index]
            {
                get
                {
                    return ((ConditionRow)(this.Rows[index]));
                }
            }
            
            public event ConditionRowChangeEventHandler ConditionRowChanged;
            
            public event ConditionRowChangeEventHandler ConditionRowChanging;
            
            public event ConditionRowChangeEventHandler ConditionRowDeleted;
            
            public event ConditionRowChangeEventHandler ConditionRowDeleting;
            
            public void AddConditionRow(ConditionRow row)
            {
                this.Rows.Add(row);
            }
            
            public ConditionRow AddConditionRow(int ConditionCode, string Description, string ExternalId0, string ExternalId1, string ExternalId2, string ExternalId3, string Mnemonic)
            {
                ConditionRow rowConditionRow = ((ConditionRow)(this.NewRow()));
                rowConditionRow.ItemArray = new object[] {
                        ConditionCode,
                        Description,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3,
                        Mnemonic};
                this.Rows.Add(rowConditionRow);
                return rowConditionRow;
            }
            
            public ConditionRow FindByConditionCode(int ConditionCode)
            {
                return ((ConditionRow)(this.Rows.Find(new object[] {
                            ConditionCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                ConditionDataTable cln = ((ConditionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new ConditionDataTable();
            }
            
            internal void InitVars()
            {
                this.columnConditionCode = this.Columns["ConditionCode"];
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
                this.columnMnemonic = this.Columns["Mnemonic"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnConditionCode = new Column("ConditionCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConditionCode);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.columnMnemonic = new Column("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.Constraints.Add(new UniqueConstraint("KeyCondition", new DataColumn[] {
                                this.columnConditionCode}, true));
                this.columnConditionCode.AllowDBNull = false;
                this.columnConditionCode.Unique = true;
                this.columnDescription.AllowDBNull = false;
                this.columnMnemonic.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.ConditionLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Condition"));
                }
            }
            
            public ConditionRow NewConditionRow()
            {
                return ((ConditionRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ConditionRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(ConditionRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ConditionRowChanged != null))
                {
                    this.ConditionRowChanged(this, new ConditionRowChangeEvent(((ConditionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ConditionRowChanging != null))
                {
                    this.ConditionRowChanging(this, new ConditionRowChangeEvent(((ConditionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ConditionRowDeleted != null))
                {
                    this.ConditionRowDeleted(this, new ConditionRowChangeEvent(((ConditionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ConditionRowDeleting != null))
                {
                    this.ConditionRowDeleting(this, new ConditionRowChangeEvent(((ConditionRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveConditionRow(ConditionRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConditionRow : Row
        {
            
            private ConditionDataTable tableCondition;
            
            internal ConditionRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableCondition = ((ConditionDataTable)(this.Table));
            }
            
            public int ConditionCode
            {
                get
                {
                    return ((int)(this[this.tableCondition.ConditionCodeColumn]));
                }
                set
                {
                    this[this.tableCondition.ConditionCodeColumn] = value;
                }
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableCondition.DescriptionColumn]));
                }
                set
                {
                    this[this.tableCondition.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCondition.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCondition.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCondition.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCondition.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCondition.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCondition.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCondition.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCondition.ExternalId3Column] = value;
                }
            }
            
            public string Mnemonic
            {
                get
                {
                    return ((string)(this[this.tableCondition.MnemonicColumn]));
                }
                set
                {
                    this[this.tableCondition.MnemonicColumn] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableCondition.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableCondition.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableCondition.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableCondition.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableCondition.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableCondition.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableCondition.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableCondition.ExternalId3Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConditionRowChangeEvent : EventArgs
        {
            
            private ConditionRow eventRow;
            
            private DataRowAction eventAction;
            
            public ConditionRowChangeEvent(ConditionRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ConditionRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConfigurationDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnColumnIndex;
            
            private Column columnConfigurationId;
            
            private Column columnParameterId;
            
            internal ConfigurationDataTable() : 
                    base("Configuration")
            {
                this.InitClass();
            }
            
            internal ConfigurationDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ColumnIndexColumn
            {
                get
                {
                    return this.columnColumnIndex;
                }
            }
            
            public Column ConfigurationIdColumn
            {
                get
                {
                    return this.columnConfigurationId;
                }
            }
            
            public Column ParameterIdColumn
            {
                get
                {
                    return this.columnParameterId;
                }
            }
            
            public ConfigurationRow this[int index]
            {
                get
                {
                    return ((ConfigurationRow)(this.Rows[index]));
                }
            }
            
            public event ConfigurationRowChangeEventHandler ConfigurationRowChanged;
            
            public event ConfigurationRowChangeEventHandler ConfigurationRowChanging;
            
            public event ConfigurationRowChangeEventHandler ConfigurationRowDeleted;
            
            public event ConfigurationRowChangeEventHandler ConfigurationRowDeleting;
            
            public void AddConfigurationRow(ConfigurationRow row)
            {
                this.Rows.Add(row);
            }
            
            public ConfigurationRow AddConfigurationRow(int ColumnIndex, string ConfigurationId, string ParameterId)
            {
                ConfigurationRow rowConfigurationRow = ((ConfigurationRow)(this.NewRow()));
                rowConfigurationRow.ItemArray = new object[] {
                        ColumnIndex,
                        ConfigurationId,
                        ParameterId};
                this.Rows.Add(rowConfigurationRow);
                return rowConfigurationRow;
            }
            
            public ConfigurationRow FindByConfigurationIdParameterId(string ConfigurationId, string ParameterId)
            {
                return ((ConfigurationRow)(this.Rows.Find(new object[] {
                            ConfigurationId,
                            ParameterId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                ConfigurationDataTable cln = ((ConfigurationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new ConfigurationDataTable();
            }
            
            internal void InitVars()
            {
                this.columnColumnIndex = this.Columns["ColumnIndex"];
                this.columnConfigurationId = this.Columns["ConfigurationId"];
                this.columnParameterId = this.Columns["ParameterId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnColumnIndex = new Column("ColumnIndex", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnColumnIndex);
                this.columnConfigurationId = new Column("ConfigurationId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConfigurationId);
                this.columnParameterId = new Column("ParameterId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnParameterId);
                this.Constraints.Add(new UniqueConstraint("KeyConfiguration", new DataColumn[] {
                                this.columnConfigurationId,
                                this.columnParameterId}, true));
                this.columnColumnIndex.AllowDBNull = false;
                this.columnConfigurationId.AllowDBNull = false;
                this.columnParameterId.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.ConfigurationLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Configuration"));
                }
            }
            
            public ConfigurationRow NewConfigurationRow()
            {
                return ((ConfigurationRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ConfigurationRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(ConfigurationRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ConfigurationRowChanged != null))
                {
                    this.ConfigurationRowChanged(this, new ConfigurationRowChangeEvent(((ConfigurationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ConfigurationRowChanging != null))
                {
                    this.ConfigurationRowChanging(this, new ConfigurationRowChangeEvent(((ConfigurationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ConfigurationRowDeleted != null))
                {
                    this.ConfigurationRowDeleted(this, new ConfigurationRowChangeEvent(((ConfigurationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ConfigurationRowDeleting != null))
                {
                    this.ConfigurationRowDeleting(this, new ConfigurationRowChangeEvent(((ConfigurationRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveConfigurationRow(ConfigurationRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConfigurationRow : Row
        {
            
            private ConfigurationDataTable tableConfiguration;
            
            internal ConfigurationRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableConfiguration = ((ConfigurationDataTable)(this.Table));
            }
            
            public int ColumnIndex
            {
                get
                {
                    return ((int)(this[this.tableConfiguration.ColumnIndexColumn]));
                }
                set
                {
                    this[this.tableConfiguration.ColumnIndexColumn] = value;
                }
            }
            
            public string ConfigurationId
            {
                get
                {
                    return ((string)(this[this.tableConfiguration.ConfigurationIdColumn]));
                }
                set
                {
                    this[this.tableConfiguration.ConfigurationIdColumn] = value;
                }
            }
            
            public string ParameterId
            {
                get
                {
                    return ((string)(this[this.tableConfiguration.ParameterIdColumn]));
                }
                set
                {
                    this[this.tableConfiguration.ParameterIdColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConfigurationRowChangeEvent : EventArgs
        {
            
            private ConfigurationRow eventRow;
            
            private DataRowAction eventAction;
            
            public ConfigurationRowChangeEvent(ConfigurationRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ConfigurationRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CountryDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnAbbreviation;
            
            private Column columnCountryId;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnName;
            
            private DataView viewKeyCountryExternalId0;
            
            private DataView viewKeyCountryExternalId1;
            
            internal CountryDataTable() : 
                    base("Country")
            {
                this.InitClass();
            }
            
            internal CountryDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column AbbreviationColumn
            {
                get
                {
                    return this.columnAbbreviation;
                }
            }
            
            public Column CountryIdColumn
            {
                get
                {
                    return this.columnCountryId;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column NameColumn
            {
                get
                {
                    return this.columnName;
                }
            }
            
            public DataView KeyCountryExternalId0
            {
                get
                {
                    return this.viewKeyCountryExternalId0;
                }
            }
            
            public DataView KeyCountryExternalId1
            {
                get
                {
                    return this.viewKeyCountryExternalId1;
                }
            }
            
            public CountryRow this[int index]
            {
                get
                {
                    return ((CountryRow)(this.Rows[index]));
                }
            }
            
            public event CountryRowChangeEventHandler CountryRowChanged;
            
            public event CountryRowChangeEventHandler CountryRowChanging;
            
            public event CountryRowChangeEventHandler CountryRowDeleted;
            
            public event CountryRowChangeEventHandler CountryRowDeleting;
            
            public void AddCountryRow(CountryRow row)
            {
                this.Rows.Add(row);
            }
            
            public CountryRow AddCountryRow(string Abbreviation, string ExternalId0, string ExternalId1, string Name)
            {
                CountryRow rowCountryRow = ((CountryRow)(this.NewRow()));
                rowCountryRow.ItemArray = new object[] {
                        Abbreviation,
                        null,
                        ExternalId0,
                        ExternalId1,
                        Name};
                this.Rows.Add(rowCountryRow);
                return rowCountryRow;
            }
            
            public CountryRow FindByCountryId(int CountryId)
            {
                return ((CountryRow)(this.Rows.Find(new object[] {
                            CountryId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                CountryDataTable cln = ((CountryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new CountryDataTable();
            }
            
            internal void InitVars()
            {
                this.columnAbbreviation = this.Columns["Abbreviation"];
                this.columnCountryId = this.Columns["CountryId"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnName = this.Columns["Name"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnAbbreviation = new Column("Abbreviation", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAbbreviation);
                this.columnCountryId = new Column("CountryId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryId);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnName = new Column("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.Constraints.Add(new UniqueConstraint("KeyCountry", new DataColumn[] {
                                this.columnCountryId}, true));
                this.viewKeyCountryExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewKeyCountryExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.columnAbbreviation.AllowDBNull = false;
                this.columnCountryId.AutoIncrement = true;
                this.columnCountryId.AllowDBNull = false;
                this.columnCountryId.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.CountryLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Country"));
                }
            }
            
            public CountryRow NewCountryRow()
            {
                return ((CountryRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CountryRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(CountryRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.CountryRowChanged != null))
                {
                    this.CountryRowChanged(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.CountryRowChanging != null))
                {
                    this.CountryRowChanging(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.CountryRowDeleted != null))
                {
                    this.CountryRowDeleted(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.CountryRowDeleting != null))
                {
                    this.CountryRowDeleting(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCountryRow(CountryRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CountryRow : Row
        {
            
            private CountryDataTable tableCountry;
            
            internal CountryRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableCountry = ((CountryDataTable)(this.Table));
            }
            
            public string Abbreviation
            {
                get
                {
                    return ((string)(this[this.tableCountry.AbbreviationColumn]));
                }
                set
                {
                    this[this.tableCountry.AbbreviationColumn] = value;
                }
            }
            
            public int CountryId
            {
                get
                {
                    return ((int)(this[this.tableCountry.CountryIdColumn]));
                }
                set
                {
                    this[this.tableCountry.CountryIdColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCountry.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCountry.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCountry.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCountry.ExternalId1Column] = value;
                }
            }
            
            public string Name
            {
                get
                {
                    return ((string)(this[this.tableCountry.NameColumn]));
                }
                set
                {
                    this[this.tableCountry.NameColumn] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableCountry.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableCountry.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableCountry.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableCountry.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public AccountBaseRow[] GetAccountBaseRows()
            {
                return ((AccountBaseRow[])(this.GetChildRows(this.Table.ChildRelations["CountryAccountBase"])));
            }
            
            public HolidayRow[] GetHolidayRows()
            {
                return ((HolidayRow[])(this.GetChildRows(this.Table.ChildRelations["CountryHoliday"])));
            }
            
            public ProvinceRow[] GetProvinceRows()
            {
                return ((ProvinceRow[])(this.GetChildRows(this.Table.ChildRelations["CountryProvince"])));
            }
            
            public SecurityRow[] GetSecurityRows()
            {
                return ((SecurityRow[])(this.GetChildRows(this.Table.ChildRelations["CountrySecurity"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CountryRowChangeEvent : EventArgs
        {
            
            private CountryRow eventRow;
            
            private DataRowAction eventAction;
            
            public CountryRowChangeEvent(CountryRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CountryRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CurrencyDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnCurrencyId;
            
            internal CurrencyDataTable() : 
                    base("Currency")
            {
                this.InitClass();
            }
            
            internal CurrencyDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column CurrencyIdColumn
            {
                get
                {
                    return this.columnCurrencyId;
                }
            }
            
            public CurrencyRow this[int index]
            {
                get
                {
                    return ((CurrencyRow)(this.Rows[index]));
                }
            }
            
            public event CurrencyRowChangeEventHandler CurrencyRowChanged;
            
            public event CurrencyRowChangeEventHandler CurrencyRowChanging;
            
            public event CurrencyRowChangeEventHandler CurrencyRowDeleted;
            
            public event CurrencyRowChangeEventHandler CurrencyRowDeleting;
            
            public void AddCurrencyRow(CurrencyRow row)
            {
                this.Rows.Add(row);
            }
            
            public CurrencyRow AddCurrencyRow(SecurityRow parentSecurityRowBySecurityCurrency)
            {
                CurrencyRow rowCurrencyRow = ((CurrencyRow)(this.NewRow()));
                rowCurrencyRow.ItemArray = new object[] {
                        parentSecurityRowBySecurityCurrency[23]};
                this.Rows.Add(rowCurrencyRow);
                return rowCurrencyRow;
            }
            
            public CurrencyRow FindByCurrencyId(int CurrencyId)
            {
                return ((CurrencyRow)(this.Rows.Find(new object[] {
                            CurrencyId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                CurrencyDataTable cln = ((CurrencyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new CurrencyDataTable();
            }
            
            internal void InitVars()
            {
                this.columnCurrencyId = this.Columns["CurrencyId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnCurrencyId = new Column("CurrencyId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyId);
                this.Constraints.Add(new UniqueConstraint("KeyCurrency", new DataColumn[] {
                                this.columnCurrencyId}, true));
                this.columnCurrencyId.AllowDBNull = false;
                this.columnCurrencyId.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.CurrencyLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Currency"));
                }
            }
            
            public CurrencyRow NewCurrencyRow()
            {
                return ((CurrencyRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CurrencyRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(CurrencyRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.CurrencyRowChanged != null))
                {
                    this.CurrencyRowChanged(this, new CurrencyRowChangeEvent(((CurrencyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.CurrencyRowChanging != null))
                {
                    this.CurrencyRowChanging(this, new CurrencyRowChangeEvent(((CurrencyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.CurrencyRowDeleted != null))
                {
                    this.CurrencyRowDeleted(this, new CurrencyRowChangeEvent(((CurrencyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.CurrencyRowDeleting != null))
                {
                    this.CurrencyRowDeleting(this, new CurrencyRowChangeEvent(((CurrencyRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCurrencyRow(CurrencyRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CurrencyRow : Row
        {
            
            private CurrencyDataTable tableCurrency;
            
            internal CurrencyRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableCurrency = ((CurrencyDataTable)(this.Table));
            }
            
            public int CurrencyId
            {
                get
                {
                    return ((int)(this[this.tableCurrency.CurrencyIdColumn]));
                }
                set
                {
                    this[this.tableCurrency.CurrencyIdColumn] = value;
                }
            }
            
            public SecurityRow SecurityRow
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["SecurityCurrency"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["SecurityCurrency"]);
                }
            }
            
            public AccountBaseRow[] GetAccountBaseRows()
            {
                return ((AccountBaseRow[])(this.GetChildRows(this.Table.ChildRelations["CurrencyAccountBase"])));
            }
            
            public PriceRow[] GetPriceRows()
            {
                return ((PriceRow[])(this.GetChildRows(this.Table.ChildRelations["CurrencyPrice"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CurrencyRowChangeEvent : EventArgs
        {
            
            private CurrencyRow eventRow;
            
            private DataRowAction eventAction;
            
            public CurrencyRowChangeEvent(CurrencyRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CurrencyRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DebtDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnCapitalGainsTaxRate;
            
            private Column columnCoupon;
            
            private Column columnCutoffPeriod;
            
            private Column columnDatedDate;
            
            private Column columnDebtId;
            
            private Column columnExdividendDays;
            
            private Column columnFaceOutstanding;
            
            private Column columnFirstCoupon;
            
            private Column columnFrequency;
            
            private Column columnIncomeTaxRate;
            
            private Column columnIssuePrice;
            
            private Column columnIssuerId;
            
            private Column columnMaturityDate;
            
            private Column columnRating0;
            
            private Column columnRating1;
            
            private Column columnRating2;
            
            private Column columnRating3;
            
            private Column columnRedemptionValue;
            
            private Column columnSettlementId;
            
            private Column columnTrueYield;
            
            private Column columnWeekendCode;
            
            internal DebtDataTable() : 
                    base("Debt")
            {
                this.InitClass();
            }
            
            internal DebtDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column CapitalGainsTaxRateColumn
            {
                get
                {
                    return this.columnCapitalGainsTaxRate;
                }
            }
            
            public Column CouponColumn
            {
                get
                {
                    return this.columnCoupon;
                }
            }
            
            public Column CutoffPeriodColumn
            {
                get
                {
                    return this.columnCutoffPeriod;
                }
            }
            
            public Column DatedDateColumn
            {
                get
                {
                    return this.columnDatedDate;
                }
            }
            
            public Column DebtIdColumn
            {
                get
                {
                    return this.columnDebtId;
                }
            }
            
            public Column ExdividendDaysColumn
            {
                get
                {
                    return this.columnExdividendDays;
                }
            }
            
            public Column FaceOutstandingColumn
            {
                get
                {
                    return this.columnFaceOutstanding;
                }
            }
            
            public Column FirstCouponColumn
            {
                get
                {
                    return this.columnFirstCoupon;
                }
            }
            
            public Column FrequencyColumn
            {
                get
                {
                    return this.columnFrequency;
                }
            }
            
            public Column IncomeTaxRateColumn
            {
                get
                {
                    return this.columnIncomeTaxRate;
                }
            }
            
            public Column IssuePriceColumn
            {
                get
                {
                    return this.columnIssuePrice;
                }
            }
            
            public Column IssuerIdColumn
            {
                get
                {
                    return this.columnIssuerId;
                }
            }
            
            public Column MaturityDateColumn
            {
                get
                {
                    return this.columnMaturityDate;
                }
            }
            
            public Column Rating0Column
            {
                get
                {
                    return this.columnRating0;
                }
            }
            
            public Column Rating1Column
            {
                get
                {
                    return this.columnRating1;
                }
            }
            
            public Column Rating2Column
            {
                get
                {
                    return this.columnRating2;
                }
            }
            
            public Column Rating3Column
            {
                get
                {
                    return this.columnRating3;
                }
            }
            
            public Column RedemptionValueColumn
            {
                get
                {
                    return this.columnRedemptionValue;
                }
            }
            
            public Column SettlementIdColumn
            {
                get
                {
                    return this.columnSettlementId;
                }
            }
            
            public Column TrueYieldColumn
            {
                get
                {
                    return this.columnTrueYield;
                }
            }
            
            public Column WeekendCodeColumn
            {
                get
                {
                    return this.columnWeekendCode;
                }
            }
            
            public DebtRow this[int index]
            {
                get
                {
                    return ((DebtRow)(this.Rows[index]));
                }
            }
            
            public event DebtRowChangeEventHandler DebtRowChanged;
            
            public event DebtRowChangeEventHandler DebtRowChanging;
            
            public event DebtRowChangeEventHandler DebtRowDeleted;
            
            public event DebtRowChangeEventHandler DebtRowDeleting;
            
            public void AddDebtRow(DebtRow row)
            {
                this.Rows.Add(row);
            }
            
            public DebtRow AddDebtRow(
                        decimal CapitalGainsTaxRate, 
                        decimal Coupon, 
                        int CutoffPeriod, 
                        System.DateTime DatedDate, 
                        SecurityRow parentSecurityRowBySecurityDebtDebtId, 
                        int ExdividendDays, 
                        decimal FaceOutstanding, 
                        System.DateTime FirstCoupon, 
                        int Frequency, 
                        decimal IncomeTaxRate, 
                        int IssuePrice, 
                        IssuerRow parentIssuerRowByIssuerDebt, 
                        System.DateTime MaturityDate, 
                        int Rating0, 
                        int Rating1, 
                        int Rating2, 
                        int Rating3, 
                        decimal RedemptionValue, 
                        SecurityRow parentSecurityRowBySecurityDebtSettlementId, 
                        bool TrueYield, 
                        int WeekendCode)
            {
                DebtRow rowDebtRow = ((DebtRow)(this.NewRow()));
                rowDebtRow.ItemArray = new object[] {
                        CapitalGainsTaxRate,
                        Coupon,
                        CutoffPeriod,
                        DatedDate,
                        parentSecurityRowBySecurityDebtDebtId[23],
                        ExdividendDays,
                        FaceOutstanding,
                        FirstCoupon,
                        Frequency,
                        IncomeTaxRate,
                        IssuePrice,
                        parentIssuerRowByIssuerDebt[22],
                        MaturityDate,
                        Rating0,
                        Rating1,
                        Rating2,
                        Rating3,
                        RedemptionValue,
                        parentSecurityRowBySecurityDebtSettlementId[23],
                        TrueYield,
                        WeekendCode};
                this.Rows.Add(rowDebtRow);
                return rowDebtRow;
            }
            
            public DebtRow FindByDebtId(int DebtId)
            {
                return ((DebtRow)(this.Rows.Find(new object[] {
                            DebtId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                DebtDataTable cln = ((DebtDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new DebtDataTable();
            }
            
            internal void InitVars()
            {
                this.columnCapitalGainsTaxRate = this.Columns["CapitalGainsTaxRate"];
                this.columnCoupon = this.Columns["Coupon"];
                this.columnCutoffPeriod = this.Columns["CutoffPeriod"];
                this.columnDatedDate = this.Columns["DatedDate"];
                this.columnDebtId = this.Columns["DebtId"];
                this.columnExdividendDays = this.Columns["ExdividendDays"];
                this.columnFaceOutstanding = this.Columns["FaceOutstanding"];
                this.columnFirstCoupon = this.Columns["FirstCoupon"];
                this.columnFrequency = this.Columns["Frequency"];
                this.columnIncomeTaxRate = this.Columns["IncomeTaxRate"];
                this.columnIssuePrice = this.Columns["IssuePrice"];
                this.columnIssuerId = this.Columns["IssuerId"];
                this.columnMaturityDate = this.Columns["MaturityDate"];
                this.columnRating0 = this.Columns["Rating0"];
                this.columnRating1 = this.Columns["Rating1"];
                this.columnRating2 = this.Columns["Rating2"];
                this.columnRating3 = this.Columns["Rating3"];
                this.columnRedemptionValue = this.Columns["RedemptionValue"];
                this.columnSettlementId = this.Columns["SettlementId"];
                this.columnTrueYield = this.Columns["TrueYield"];
                this.columnWeekendCode = this.Columns["WeekendCode"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnCapitalGainsTaxRate = new Column("CapitalGainsTaxRate", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCapitalGainsTaxRate);
                this.columnCoupon = new Column("Coupon", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCoupon);
                this.columnCutoffPeriod = new Column("CutoffPeriod", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCutoffPeriod);
                this.columnDatedDate = new Column("DatedDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDatedDate);
                this.columnDebtId = new Column("DebtId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDebtId);
                this.columnExdividendDays = new Column("ExdividendDays", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExdividendDays);
                this.columnFaceOutstanding = new Column("FaceOutstanding", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFaceOutstanding);
                this.columnFirstCoupon = new Column("FirstCoupon", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFirstCoupon);
                this.columnFrequency = new Column("Frequency", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFrequency);
                this.columnIncomeTaxRate = new Column("IncomeTaxRate", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIncomeTaxRate);
                this.columnIssuePrice = new Column("IssuePrice", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIssuePrice);
                this.columnIssuerId = new Column("IssuerId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIssuerId);
                this.columnMaturityDate = new Column("MaturityDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaturityDate);
                this.columnRating0 = new Column("Rating0", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRating0);
                this.columnRating1 = new Column("Rating1", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRating1);
                this.columnRating2 = new Column("Rating2", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRating2);
                this.columnRating3 = new Column("Rating3", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRating3);
                this.columnRedemptionValue = new Column("RedemptionValue", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRedemptionValue);
                this.columnSettlementId = new Column("SettlementId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSettlementId);
                this.columnTrueYield = new Column("TrueYield", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTrueYield);
                this.columnWeekendCode = new Column("WeekendCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWeekendCode);
                this.Constraints.Add(new UniqueConstraint("KeyDebt", new DataColumn[] {
                                this.columnDebtId}, true));
                this.columnCapitalGainsTaxRate.AllowDBNull = false;
                this.columnCapitalGainsTaxRate.DefaultValue = 0.0m;
                this.columnCoupon.AllowDBNull = false;
                this.columnCutoffPeriod.AllowDBNull = false;
                this.columnCutoffPeriod.DefaultValue = 12;
                this.columnDebtId.AllowDBNull = false;
                this.columnDebtId.Unique = true;
                this.columnFaceOutstanding.AllowDBNull = false;
                this.columnFaceOutstanding.DefaultValue = 0m;
                this.columnFrequency.AllowDBNull = false;
                this.columnFrequency.DefaultValue = 0;
                this.columnIncomeTaxRate.AllowDBNull = false;
                this.columnIncomeTaxRate.DefaultValue = 0.0m;
                this.columnIssuePrice.AllowDBNull = false;
                this.columnIssuePrice.DefaultValue = 12;
                this.columnMaturityDate.AllowDBNull = false;
                this.columnRedemptionValue.AllowDBNull = false;
                this.columnRedemptionValue.DefaultValue = 100.0m;
                this.columnSettlementId.AllowDBNull = false;
                this.columnTrueYield.AllowDBNull = false;
                this.columnTrueYield.DefaultValue = true;
                this.columnWeekendCode.AllowDBNull = false;
                this.columnWeekendCode.DefaultValue = 0;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.DebtLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Debt"));
                }
            }
            
            public DebtRow NewDebtRow()
            {
                return ((DebtRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new DebtRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(DebtRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.DebtRowChanged != null))
                {
                    this.DebtRowChanged(this, new DebtRowChangeEvent(((DebtRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.DebtRowChanging != null))
                {
                    this.DebtRowChanging(this, new DebtRowChangeEvent(((DebtRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.DebtRowDeleted != null))
                {
                    this.DebtRowDeleted(this, new DebtRowChangeEvent(((DebtRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.DebtRowDeleting != null))
                {
                    this.DebtRowDeleting(this, new DebtRowChangeEvent(((DebtRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDebtRow(DebtRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DebtRow : Row
        {
            
            private DebtDataTable tableDebt;
            
            internal DebtRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableDebt = ((DebtDataTable)(this.Table));
            }
            
            public decimal CapitalGainsTaxRate
            {
                get
                {
                    return ((decimal)(this[this.tableDebt.CapitalGainsTaxRateColumn]));
                }
                set
                {
                    this[this.tableDebt.CapitalGainsTaxRateColumn] = value;
                }
            }
            
            public decimal Coupon
            {
                get
                {
                    return ((decimal)(this[this.tableDebt.CouponColumn]));
                }
                set
                {
                    this[this.tableDebt.CouponColumn] = value;
                }
            }
            
            public int CutoffPeriod
            {
                get
                {
                    return ((int)(this[this.tableDebt.CutoffPeriodColumn]));
                }
                set
                {
                    this[this.tableDebt.CutoffPeriodColumn] = value;
                }
            }
            
            public System.DateTime DatedDate
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(this[this.tableDebt.DatedDateColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDebt.DatedDateColumn] = value;
                }
            }
            
            public int DebtId
            {
                get
                {
                    return ((int)(this[this.tableDebt.DebtIdColumn]));
                }
                set
                {
                    this[this.tableDebt.DebtIdColumn] = value;
                }
            }
            
            public int ExdividendDays
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableDebt.ExdividendDaysColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDebt.ExdividendDaysColumn] = value;
                }
            }
            
            public decimal FaceOutstanding
            {
                get
                {
                    return ((decimal)(this[this.tableDebt.FaceOutstandingColumn]));
                }
                set
                {
                    this[this.tableDebt.FaceOutstandingColumn] = value;
                }
            }
            
            public System.DateTime FirstCoupon
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(this[this.tableDebt.FirstCouponColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDebt.FirstCouponColumn] = value;
                }
            }
            
            public int Frequency
            {
                get
                {
                    return ((int)(this[this.tableDebt.FrequencyColumn]));
                }
                set
                {
                    this[this.tableDebt.FrequencyColumn] = value;
                }
            }
            
            public decimal IncomeTaxRate
            {
                get
                {
                    return ((decimal)(this[this.tableDebt.IncomeTaxRateColumn]));
                }
                set
                {
                    this[this.tableDebt.IncomeTaxRateColumn] = value;
                }
            }
            
            public int IssuePrice
            {
                get
                {
                    return ((int)(this[this.tableDebt.IssuePriceColumn]));
                }
                set
                {
                    this[this.tableDebt.IssuePriceColumn] = value;
                }
            }
            
            public int IssuerId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableDebt.IssuerIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDebt.IssuerIdColumn] = value;
                }
            }
            
            public System.DateTime MaturityDate
            {
                get
                {
                    return ((System.DateTime)(this[this.tableDebt.MaturityDateColumn]));
                }
                set
                {
                    this[this.tableDebt.MaturityDateColumn] = value;
                }
            }
            
            public int Rating0
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableDebt.Rating0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDebt.Rating0Column] = value;
                }
            }
            
            public int Rating1
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableDebt.Rating1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDebt.Rating1Column] = value;
                }
            }
            
            public int Rating2
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableDebt.Rating2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDebt.Rating2Column] = value;
                }
            }
            
            public int Rating3
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableDebt.Rating3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDebt.Rating3Column] = value;
                }
            }
            
            public decimal RedemptionValue
            {
                get
                {
                    return ((decimal)(this[this.tableDebt.RedemptionValueColumn]));
                }
                set
                {
                    this[this.tableDebt.RedemptionValueColumn] = value;
                }
            }
            
            public int SettlementId
            {
                get
                {
                    return ((int)(this[this.tableDebt.SettlementIdColumn]));
                }
                set
                {
                    this[this.tableDebt.SettlementIdColumn] = value;
                }
            }
            
            public bool TrueYield
            {
                get
                {
                    return ((bool)(this[this.tableDebt.TrueYieldColumn]));
                }
                set
                {
                    this[this.tableDebt.TrueYieldColumn] = value;
                }
            }
            
            public int WeekendCode
            {
                get
                {
                    return ((int)(this[this.tableDebt.WeekendCodeColumn]));
                }
                set
                {
                    this[this.tableDebt.WeekendCodeColumn] = value;
                }
            }
            
            public IssuerRow IssuerRow
            {
                get
                {
                    if ((DataSetMarket.lockIssuer.IsReaderLockHeld || DataSetMarket.lockIssuer.IsWriterLockHeld))
                    {
                        return ((IssuerRow)(this.GetParentRow(this.Table.ParentRelations["IssuerDebt"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Issuer"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["IssuerDebt"]);
                }
            }
            
            public SecurityRow SecurityRowBySecurityDebtDebtId
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["SecurityDebtDebtId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["SecurityDebtDebtId"]);
                }
            }
            
            public SecurityRow SecurityRowBySecurityDebtSettlementId
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["SecurityDebtSettlementId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["SecurityDebtSettlementId"]);
                }
            }
            
            public bool IsDatedDateNull()
            {
                return this.IsNull(this.tableDebt.DatedDateColumn);
            }
            
            public void SetDatedDateNull()
            {
                this[this.tableDebt.DatedDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsExdividendDaysNull()
            {
                return this.IsNull(this.tableDebt.ExdividendDaysColumn);
            }
            
            public void SetExdividendDaysNull()
            {
                this[this.tableDebt.ExdividendDaysColumn] = System.Convert.DBNull;
            }
            
            public bool IsFirstCouponNull()
            {
                return this.IsNull(this.tableDebt.FirstCouponColumn);
            }
            
            public void SetFirstCouponNull()
            {
                this[this.tableDebt.FirstCouponColumn] = System.Convert.DBNull;
            }
            
            public bool IsIssuerIdNull()
            {
                return this.IsNull(this.tableDebt.IssuerIdColumn);
            }
            
            public void SetIssuerIdNull()
            {
                this[this.tableDebt.IssuerIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsRating0Null()
            {
                return this.IsNull(this.tableDebt.Rating0Column);
            }
            
            public void SetRating0Null()
            {
                this[this.tableDebt.Rating0Column] = System.Convert.DBNull;
            }
            
            public bool IsRating1Null()
            {
                return this.IsNull(this.tableDebt.Rating1Column);
            }
            
            public void SetRating1Null()
            {
                this[this.tableDebt.Rating1Column] = System.Convert.DBNull;
            }
            
            public bool IsRating2Null()
            {
                return this.IsNull(this.tableDebt.Rating2Column);
            }
            
            public void SetRating2Null()
            {
                this[this.tableDebt.Rating2Column] = System.Convert.DBNull;
            }
            
            public bool IsRating3Null()
            {
                return this.IsNull(this.tableDebt.Rating3Column);
            }
            
            public void SetRating3Null()
            {
                this[this.tableDebt.Rating3Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DebtRowChangeEvent : EventArgs
        {
            
            private DebtRow eventRow;
            
            private DataRowAction eventAction;
            
            public DebtRowChangeEvent(DebtRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DebtRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DestinationDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnCancelCustomFixTag;
            
            private Column columnClearingFirmId;
            
            private Column columnDestinationId;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnFixAccount;
            
            private Column columnFixAccountSuffixLength;
            
            private Column columnFixExchangeMnemonic;
            
            private Column columnFixExecBroker;
            
            private Column columnFixExecDestinationListed;
            
            private Column columnFixExecDestinationUnlisted;
            
            private Column columnFixHandleInstListed;
            
            private Column columnFixHandleInstUnlisted;
            
            private Column columnFixIoiRoutingId;
            
            private Column columnFixIoiRoutingType;
            
            private Column columnFixNetCommissionType;
            
            private Column columnFixNoteTagId;
            
            private Column columnFixOnBehalfOf;
            
            private Column columnFixOnBehalfOfSub;
            
            private Column columnFixOrderIdFormat;
            
            private Column columnFixPassiveTag;
            
            private Column columnFixProactiveTag;
            
            private Column columnFixSourceCompany;
            
            private Column columnFixSourceId;
            
            private Column columnFixSourceTrader;
            
            private Column columnFixTargetCompany;
            
            private Column columnFixTargetLocationId;
            
            private Column columnFixTargetTrader;
            
            private Column columnFixVersion;
            
            private Column columnIsBroker;
            
            private Column columnIsCancelAllowed;
            
            private Column columnIsCancelReplaceAllowed;
            
            private Column columnIsEcn;
            
            private Column columnIsExchange;
            
            private Column columnIsInternal;
            
            private Column columnIsIoiAllowed;
            
            private Column columnIsLimitPricingAllowed;
            
            private Column columnIsMarketOnClosePricingAllowed;
            
            private Column columnIsMarketPricingAllowed;
            
            private Column columnIsSystemUp;
            
            private Column columnIsTagEligible;
            
            private Column columnIsTradeAwayAllowed;
            
            private Column columnIsUnsolicitedTradeAllowed;
            
            private Column columnLotSize;
            
            private Column columnMaximumQuantityListedLimit;
            
            private Column columnMaximumQuantityListedMarket;
            
            private Column columnMaximumQuantityUnlistedLimit;
            
            private Column columnMaximumQuantityUnlistedMarket;
            
            private Column columnModifiedTime;
            
            private Column columnName;
            
            private Column columnNewOrderCustomFixTag;
            
            private Column columnOatsDepartmentId;
            
            private Column columnOatsDestinationCode;
            
            private Column columnOatsReceivingMpi;
            
            private Column columnOatsRouteMethod;
            
            private Column columnOatsRoutingMpi;
            
            private Column columnOatsSentMpi;
            
            private Column columnOatsTerminalId;
            
            private Column columnOnCloseCancelTime;
            
            private Column columnOnCloseOrderTime;
            
            private Column columnPerShareUsageFee;
            
            private Column columnPostMarketLogic;
            
            private Column columnPrimaryBackupDestinationId;
            
            private Column columnSecondaryBackupDestinationId;
            
            private Column columnSelectnetFlag;
            
            private Column columnShortName;
            
            private Column columnSourceId0;
            
            private Column columnSourceId1;
            
            private Column columnSourceId2;
            
            private Column columnSourceId3;
            
            private Column columnSourceId4;
            
            private Column columnSourceId5;
            
            private Column columnSourceId6;
            
            private Column columnSourceId7;
            
            private Column columnUniqueShortName;
            
            private DataView viewKeyDestinationExternalId0;
            
            private DataView viewKeyDestinationExternalId1;
            
            internal DestinationDataTable() : 
                    base("Destination")
            {
                this.InitClass();
            }
            
            internal DestinationDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column CancelCustomFixTagColumn
            {
                get
                {
                    return this.columnCancelCustomFixTag;
                }
            }
            
            public Column ClearingFirmIdColumn
            {
                get
                {
                    return this.columnClearingFirmId;
                }
            }
            
            public Column DestinationIdColumn
            {
                get
                {
                    return this.columnDestinationId;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column FixAccountColumn
            {
                get
                {
                    return this.columnFixAccount;
                }
            }
            
            public Column FixAccountSuffixLengthColumn
            {
                get
                {
                    return this.columnFixAccountSuffixLength;
                }
            }
            
            public Column FixExchangeMnemonicColumn
            {
                get
                {
                    return this.columnFixExchangeMnemonic;
                }
            }
            
            public Column FixExecBrokerColumn
            {
                get
                {
                    return this.columnFixExecBroker;
                }
            }
            
            public Column FixExecDestinationListedColumn
            {
                get
                {
                    return this.columnFixExecDestinationListed;
                }
            }
            
            public Column FixExecDestinationUnlistedColumn
            {
                get
                {
                    return this.columnFixExecDestinationUnlisted;
                }
            }
            
            public Column FixHandleInstListedColumn
            {
                get
                {
                    return this.columnFixHandleInstListed;
                }
            }
            
            public Column FixHandleInstUnlistedColumn
            {
                get
                {
                    return this.columnFixHandleInstUnlisted;
                }
            }
            
            public Column FixIoiRoutingIdColumn
            {
                get
                {
                    return this.columnFixIoiRoutingId;
                }
            }
            
            public Column FixIoiRoutingTypeColumn
            {
                get
                {
                    return this.columnFixIoiRoutingType;
                }
            }
            
            public Column FixNetCommissionTypeColumn
            {
                get
                {
                    return this.columnFixNetCommissionType;
                }
            }
            
            public Column FixNoteTagIdColumn
            {
                get
                {
                    return this.columnFixNoteTagId;
                }
            }
            
            public Column FixOnBehalfOfColumn
            {
                get
                {
                    return this.columnFixOnBehalfOf;
                }
            }
            
            public Column FixOnBehalfOfSubColumn
            {
                get
                {
                    return this.columnFixOnBehalfOfSub;
                }
            }
            
            public Column FixOrderIdFormatColumn
            {
                get
                {
                    return this.columnFixOrderIdFormat;
                }
            }
            
            public Column FixPassiveTagColumn
            {
                get
                {
                    return this.columnFixPassiveTag;
                }
            }
            
            public Column FixProactiveTagColumn
            {
                get
                {
                    return this.columnFixProactiveTag;
                }
            }
            
            public Column FixSourceCompanyColumn
            {
                get
                {
                    return this.columnFixSourceCompany;
                }
            }
            
            public Column FixSourceIdColumn
            {
                get
                {
                    return this.columnFixSourceId;
                }
            }
            
            public Column FixSourceTraderColumn
            {
                get
                {
                    return this.columnFixSourceTrader;
                }
            }
            
            public Column FixTargetCompanyColumn
            {
                get
                {
                    return this.columnFixTargetCompany;
                }
            }
            
            public Column FixTargetLocationIdColumn
            {
                get
                {
                    return this.columnFixTargetLocationId;
                }
            }
            
            public Column FixTargetTraderColumn
            {
                get
                {
                    return this.columnFixTargetTrader;
                }
            }
            
            public Column FixVersionColumn
            {
                get
                {
                    return this.columnFixVersion;
                }
            }
            
            public Column IsBrokerColumn
            {
                get
                {
                    return this.columnIsBroker;
                }
            }
            
            public Column IsCancelAllowedColumn
            {
                get
                {
                    return this.columnIsCancelAllowed;
                }
            }
            
            public Column IsCancelReplaceAllowedColumn
            {
                get
                {
                    return this.columnIsCancelReplaceAllowed;
                }
            }
            
            public Column IsEcnColumn
            {
                get
                {
                    return this.columnIsEcn;
                }
            }
            
            public Column IsExchangeColumn
            {
                get
                {
                    return this.columnIsExchange;
                }
            }
            
            public Column IsInternalColumn
            {
                get
                {
                    return this.columnIsInternal;
                }
            }
            
            public Column IsIoiAllowedColumn
            {
                get
                {
                    return this.columnIsIoiAllowed;
                }
            }
            
            public Column IsLimitPricingAllowedColumn
            {
                get
                {
                    return this.columnIsLimitPricingAllowed;
                }
            }
            
            public Column IsMarketOnClosePricingAllowedColumn
            {
                get
                {
                    return this.columnIsMarketOnClosePricingAllowed;
                }
            }
            
            public Column IsMarketPricingAllowedColumn
            {
                get
                {
                    return this.columnIsMarketPricingAllowed;
                }
            }
            
            public Column IsSystemUpColumn
            {
                get
                {
                    return this.columnIsSystemUp;
                }
            }
            
            public Column IsTagEligibleColumn
            {
                get
                {
                    return this.columnIsTagEligible;
                }
            }
            
            public Column IsTradeAwayAllowedColumn
            {
                get
                {
                    return this.columnIsTradeAwayAllowed;
                }
            }
            
            public Column IsUnsolicitedTradeAllowedColumn
            {
                get
                {
                    return this.columnIsUnsolicitedTradeAllowed;
                }
            }
            
            public Column LotSizeColumn
            {
                get
                {
                    return this.columnLotSize;
                }
            }
            
            public Column MaximumQuantityListedLimitColumn
            {
                get
                {
                    return this.columnMaximumQuantityListedLimit;
                }
            }
            
            public Column MaximumQuantityListedMarketColumn
            {
                get
                {
                    return this.columnMaximumQuantityListedMarket;
                }
            }
            
            public Column MaximumQuantityUnlistedLimitColumn
            {
                get
                {
                    return this.columnMaximumQuantityUnlistedLimit;
                }
            }
            
            public Column MaximumQuantityUnlistedMarketColumn
            {
                get
                {
                    return this.columnMaximumQuantityUnlistedMarket;
                }
            }
            
            public Column ModifiedTimeColumn
            {
                get
                {
                    return this.columnModifiedTime;
                }
            }
            
            public Column NameColumn
            {
                get
                {
                    return this.columnName;
                }
            }
            
            public Column NewOrderCustomFixTagColumn
            {
                get
                {
                    return this.columnNewOrderCustomFixTag;
                }
            }
            
            public Column OatsDepartmentIdColumn
            {
                get
                {
                    return this.columnOatsDepartmentId;
                }
            }
            
            public Column OatsDestinationCodeColumn
            {
                get
                {
                    return this.columnOatsDestinationCode;
                }
            }
            
            public Column OatsReceivingMpiColumn
            {
                get
                {
                    return this.columnOatsReceivingMpi;
                }
            }
            
            public Column OatsRouteMethodColumn
            {
                get
                {
                    return this.columnOatsRouteMethod;
                }
            }
            
            public Column OatsRoutingMpiColumn
            {
                get
                {
                    return this.columnOatsRoutingMpi;
                }
            }
            
            public Column OatsSentMpiColumn
            {
                get
                {
                    return this.columnOatsSentMpi;
                }
            }
            
            public Column OatsTerminalIdColumn
            {
                get
                {
                    return this.columnOatsTerminalId;
                }
            }
            
            public Column OnCloseCancelTimeColumn
            {
                get
                {
                    return this.columnOnCloseCancelTime;
                }
            }
            
            public Column OnCloseOrderTimeColumn
            {
                get
                {
                    return this.columnOnCloseOrderTime;
                }
            }
            
            public Column PerShareUsageFeeColumn
            {
                get
                {
                    return this.columnPerShareUsageFee;
                }
            }
            
            public Column PostMarketLogicColumn
            {
                get
                {
                    return this.columnPostMarketLogic;
                }
            }
            
            public Column PrimaryBackupDestinationIdColumn
            {
                get
                {
                    return this.columnPrimaryBackupDestinationId;
                }
            }
            
            public Column SecondaryBackupDestinationIdColumn
            {
                get
                {
                    return this.columnSecondaryBackupDestinationId;
                }
            }
            
            public Column SelectnetFlagColumn
            {
                get
                {
                    return this.columnSelectnetFlag;
                }
            }
            
            public Column ShortNameColumn
            {
                get
                {
                    return this.columnShortName;
                }
            }
            
            public Column SourceId0Column
            {
                get
                {
                    return this.columnSourceId0;
                }
            }
            
            public Column SourceId1Column
            {
                get
                {
                    return this.columnSourceId1;
                }
            }
            
            public Column SourceId2Column
            {
                get
                {
                    return this.columnSourceId2;
                }
            }
            
            public Column SourceId3Column
            {
                get
                {
                    return this.columnSourceId3;
                }
            }
            
            public Column SourceId4Column
            {
                get
                {
                    return this.columnSourceId4;
                }
            }
            
            public Column SourceId5Column
            {
                get
                {
                    return this.columnSourceId5;
                }
            }
            
            public Column SourceId6Column
            {
                get
                {
                    return this.columnSourceId6;
                }
            }
            
            public Column SourceId7Column
            {
                get
                {
                    return this.columnSourceId7;
                }
            }
            
            public Column UniqueShortNameColumn
            {
                get
                {
                    return this.columnUniqueShortName;
                }
            }
            
            public DataView KeyDestinationExternalId0
            {
                get
                {
                    return this.viewKeyDestinationExternalId0;
                }
            }
            
            public DataView KeyDestinationExternalId1
            {
                get
                {
                    return this.viewKeyDestinationExternalId1;
                }
            }
            
            public DestinationRow this[int index]
            {
                get
                {
                    return ((DestinationRow)(this.Rows[index]));
                }
            }
            
            public event DestinationRowChangeEventHandler DestinationRowChanged;
            
            public event DestinationRowChangeEventHandler DestinationRowChanging;
            
            public event DestinationRowChangeEventHandler DestinationRowDeleted;
            
            public event DestinationRowChangeEventHandler DestinationRowDeleting;
            
            public void AddDestinationRow(DestinationRow row)
            {
                this.Rows.Add(row);
            }
            
            public DestinationRow AddDestinationRow(
                        string CancelCustomFixTag, 
                        string ClearingFirmId, 
                        string ExternalId0, 
                        string ExternalId1, 
                        string FixAccount, 
                        int FixAccountSuffixLength, 
                        string FixExchangeMnemonic, 
                        string FixExecBroker, 
                        string FixExecDestinationListed, 
                        string FixExecDestinationUnlisted, 
                        string FixHandleInstListed, 
                        string FixHandleInstUnlisted, 
                        string FixIoiRoutingId, 
                        string FixIoiRoutingType, 
                        string FixNetCommissionType, 
                        string FixNoteTagId, 
                        string FixOnBehalfOf, 
                        string FixOnBehalfOfSub, 
                        string FixOrderIdFormat, 
                        string FixPassiveTag, 
                        string FixProactiveTag, 
                        string FixSourceCompany, 
                        string FixSourceId, 
                        string FixSourceTrader, 
                        string FixTargetCompany, 
                        string FixTargetLocationId, 
                        string FixTargetTrader, 
                        string FixVersion, 
                        bool IsBroker, 
                        bool IsCancelAllowed, 
                        bool IsCancelReplaceAllowed, 
                        bool IsEcn, 
                        bool IsExchange, 
                        bool IsInternal, 
                        bool IsIoiAllowed, 
                        bool IsLimitPricingAllowed, 
                        bool IsMarketOnClosePricingAllowed, 
                        bool IsMarketPricingAllowed, 
                        bool IsSystemUp, 
                        bool IsTagEligible, 
                        bool IsTradeAwayAllowed, 
                        bool IsUnsolicitedTradeAllowed, 
                        int LotSize, 
                        decimal MaximumQuantityListedLimit, 
                        decimal MaximumQuantityListedMarket, 
                        decimal MaximumQuantityUnlistedLimit, 
                        decimal MaximumQuantityUnlistedMarket, 
                        System.DateTime ModifiedTime, 
                        string Name, 
                        string NewOrderCustomFixTag, 
                        string OatsDepartmentId, 
                        string OatsDestinationCode, 
                        string OatsReceivingMpi, 
                        string OatsRouteMethod, 
                        string OatsRoutingMpi, 
                        string OatsSentMpi, 
                        string OatsTerminalId, 
                        int OnCloseCancelTime, 
                        int OnCloseOrderTime, 
                        decimal PerShareUsageFee, 
                        string PostMarketLogic, 
                        int PrimaryBackupDestinationId, 
                        int SecondaryBackupDestinationId, 
                        bool SelectnetFlag, 
                        string ShortName, 
                        string SourceId0, 
                        string SourceId1, 
                        string SourceId2, 
                        string SourceId3, 
                        string SourceId4, 
                        string SourceId5, 
                        string SourceId6, 
                        string SourceId7, 
                        string UniqueShortName)
            {
                DestinationRow rowDestinationRow = ((DestinationRow)(this.NewRow()));
                rowDestinationRow.ItemArray = new object[] {
                        CancelCustomFixTag,
                        ClearingFirmId,
                        null,
                        ExternalId0,
                        ExternalId1,
                        FixAccount,
                        FixAccountSuffixLength,
                        FixExchangeMnemonic,
                        FixExecBroker,
                        FixExecDestinationListed,
                        FixExecDestinationUnlisted,
                        FixHandleInstListed,
                        FixHandleInstUnlisted,
                        FixIoiRoutingId,
                        FixIoiRoutingType,
                        FixNetCommissionType,
                        FixNoteTagId,
                        FixOnBehalfOf,
                        FixOnBehalfOfSub,
                        FixOrderIdFormat,
                        FixPassiveTag,
                        FixProactiveTag,
                        FixSourceCompany,
                        FixSourceId,
                        FixSourceTrader,
                        FixTargetCompany,
                        FixTargetLocationId,
                        FixTargetTrader,
                        FixVersion,
                        IsBroker,
                        IsCancelAllowed,
                        IsCancelReplaceAllowed,
                        IsEcn,
                        IsExchange,
                        IsInternal,
                        IsIoiAllowed,
                        IsLimitPricingAllowed,
                        IsMarketOnClosePricingAllowed,
                        IsMarketPricingAllowed,
                        IsSystemUp,
                        IsTagEligible,
                        IsTradeAwayAllowed,
                        IsUnsolicitedTradeAllowed,
                        LotSize,
                        MaximumQuantityListedLimit,
                        MaximumQuantityListedMarket,
                        MaximumQuantityUnlistedLimit,
                        MaximumQuantityUnlistedMarket,
                        ModifiedTime,
                        Name,
                        NewOrderCustomFixTag,
                        OatsDepartmentId,
                        OatsDestinationCode,
                        OatsReceivingMpi,
                        OatsRouteMethod,
                        OatsRoutingMpi,
                        OatsSentMpi,
                        OatsTerminalId,
                        OnCloseCancelTime,
                        OnCloseOrderTime,
                        PerShareUsageFee,
                        PostMarketLogic,
                        PrimaryBackupDestinationId,
                        SecondaryBackupDestinationId,
                        SelectnetFlag,
                        ShortName,
                        SourceId0,
                        SourceId1,
                        SourceId2,
                        SourceId3,
                        SourceId4,
                        SourceId5,
                        SourceId6,
                        SourceId7,
                        UniqueShortName};
                this.Rows.Add(rowDestinationRow);
                return rowDestinationRow;
            }
            
            public DestinationRow FindByDestinationId(int DestinationId)
            {
                return ((DestinationRow)(this.Rows.Find(new object[] {
                            DestinationId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                DestinationDataTable cln = ((DestinationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new DestinationDataTable();
            }
            
            internal void InitVars()
            {
                this.columnCancelCustomFixTag = this.Columns["CancelCustomFixTag"];
                this.columnClearingFirmId = this.Columns["ClearingFirmId"];
                this.columnDestinationId = this.Columns["DestinationId"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnFixAccount = this.Columns["FixAccount"];
                this.columnFixAccountSuffixLength = this.Columns["FixAccountSuffixLength"];
                this.columnFixExchangeMnemonic = this.Columns["FixExchangeMnemonic"];
                this.columnFixExecBroker = this.Columns["FixExecBroker"];
                this.columnFixExecDestinationListed = this.Columns["FixExecDestinationListed"];
                this.columnFixExecDestinationUnlisted = this.Columns["FixExecDestinationUnlisted"];
                this.columnFixHandleInstListed = this.Columns["FixHandleInstListed"];
                this.columnFixHandleInstUnlisted = this.Columns["FixHandleInstUnlisted"];
                this.columnFixIoiRoutingId = this.Columns["FixIoiRoutingId"];
                this.columnFixIoiRoutingType = this.Columns["FixIoiRoutingType"];
                this.columnFixNetCommissionType = this.Columns["FixNetCommissionType"];
                this.columnFixNoteTagId = this.Columns["FixNoteTagId"];
                this.columnFixOnBehalfOf = this.Columns["FixOnBehalfOf"];
                this.columnFixOnBehalfOfSub = this.Columns["FixOnBehalfOfSub"];
                this.columnFixOrderIdFormat = this.Columns["FixOrderIdFormat"];
                this.columnFixPassiveTag = this.Columns["FixPassiveTag"];
                this.columnFixProactiveTag = this.Columns["FixProactiveTag"];
                this.columnFixSourceCompany = this.Columns["FixSourceCompany"];
                this.columnFixSourceId = this.Columns["FixSourceId"];
                this.columnFixSourceTrader = this.Columns["FixSourceTrader"];
                this.columnFixTargetCompany = this.Columns["FixTargetCompany"];
                this.columnFixTargetLocationId = this.Columns["FixTargetLocationId"];
                this.columnFixTargetTrader = this.Columns["FixTargetTrader"];
                this.columnFixVersion = this.Columns["FixVersion"];
                this.columnIsBroker = this.Columns["IsBroker"];
                this.columnIsCancelAllowed = this.Columns["IsCancelAllowed"];
                this.columnIsCancelReplaceAllowed = this.Columns["IsCancelReplaceAllowed"];
                this.columnIsEcn = this.Columns["IsEcn"];
                this.columnIsExchange = this.Columns["IsExchange"];
                this.columnIsInternal = this.Columns["IsInternal"];
                this.columnIsIoiAllowed = this.Columns["IsIoiAllowed"];
                this.columnIsLimitPricingAllowed = this.Columns["IsLimitPricingAllowed"];
                this.columnIsMarketOnClosePricingAllowed = this.Columns["IsMarketOnClosePricingAllowed"];
                this.columnIsMarketPricingAllowed = this.Columns["IsMarketPricingAllowed"];
                this.columnIsSystemUp = this.Columns["IsSystemUp"];
                this.columnIsTagEligible = this.Columns["IsTagEligible"];
                this.columnIsTradeAwayAllowed = this.Columns["IsTradeAwayAllowed"];
                this.columnIsUnsolicitedTradeAllowed = this.Columns["IsUnsolicitedTradeAllowed"];
                this.columnLotSize = this.Columns["LotSize"];
                this.columnMaximumQuantityListedLimit = this.Columns["MaximumQuantityListedLimit"];
                this.columnMaximumQuantityListedMarket = this.Columns["MaximumQuantityListedMarket"];
                this.columnMaximumQuantityUnlistedLimit = this.Columns["MaximumQuantityUnlistedLimit"];
                this.columnMaximumQuantityUnlistedMarket = this.Columns["MaximumQuantityUnlistedMarket"];
                this.columnModifiedTime = this.Columns["ModifiedTime"];
                this.columnName = this.Columns["Name"];
                this.columnNewOrderCustomFixTag = this.Columns["NewOrderCustomFixTag"];
                this.columnOatsDepartmentId = this.Columns["OatsDepartmentId"];
                this.columnOatsDestinationCode = this.Columns["OatsDestinationCode"];
                this.columnOatsReceivingMpi = this.Columns["OatsReceivingMpi"];
                this.columnOatsRouteMethod = this.Columns["OatsRouteMethod"];
                this.columnOatsRoutingMpi = this.Columns["OatsRoutingMpi"];
                this.columnOatsSentMpi = this.Columns["OatsSentMpi"];
                this.columnOatsTerminalId = this.Columns["OatsTerminalId"];
                this.columnOnCloseCancelTime = this.Columns["OnCloseCancelTime"];
                this.columnOnCloseOrderTime = this.Columns["OnCloseOrderTime"];
                this.columnPerShareUsageFee = this.Columns["PerShareUsageFee"];
                this.columnPostMarketLogic = this.Columns["PostMarketLogic"];
                this.columnPrimaryBackupDestinationId = this.Columns["PrimaryBackupDestinationId"];
                this.columnSecondaryBackupDestinationId = this.Columns["SecondaryBackupDestinationId"];
                this.columnSelectnetFlag = this.Columns["SelectnetFlag"];
                this.columnShortName = this.Columns["ShortName"];
                this.columnSourceId0 = this.Columns["SourceId0"];
                this.columnSourceId1 = this.Columns["SourceId1"];
                this.columnSourceId2 = this.Columns["SourceId2"];
                this.columnSourceId3 = this.Columns["SourceId3"];
                this.columnSourceId4 = this.Columns["SourceId4"];
                this.columnSourceId5 = this.Columns["SourceId5"];
                this.columnSourceId6 = this.Columns["SourceId6"];
                this.columnSourceId7 = this.Columns["SourceId7"];
                this.columnUniqueShortName = this.Columns["UniqueShortName"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnCancelCustomFixTag = new Column("CancelCustomFixTag", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCancelCustomFixTag);
                this.columnClearingFirmId = new Column("ClearingFirmId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClearingFirmId);
                this.columnDestinationId = new Column("DestinationId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDestinationId);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnFixAccount = new Column("FixAccount", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixAccount);
                this.columnFixAccountSuffixLength = new Column("FixAccountSuffixLength", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixAccountSuffixLength);
                this.columnFixExchangeMnemonic = new Column("FixExchangeMnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixExchangeMnemonic);
                this.columnFixExecBroker = new Column("FixExecBroker", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixExecBroker);
                this.columnFixExecDestinationListed = new Column("FixExecDestinationListed", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixExecDestinationListed);
                this.columnFixExecDestinationUnlisted = new Column("FixExecDestinationUnlisted", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixExecDestinationUnlisted);
                this.columnFixHandleInstListed = new Column("FixHandleInstListed", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixHandleInstListed);
                this.columnFixHandleInstUnlisted = new Column("FixHandleInstUnlisted", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixHandleInstUnlisted);
                this.columnFixIoiRoutingId = new Column("FixIoiRoutingId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixIoiRoutingId);
                this.columnFixIoiRoutingType = new Column("FixIoiRoutingType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixIoiRoutingType);
                this.columnFixNetCommissionType = new Column("FixNetCommissionType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixNetCommissionType);
                this.columnFixNoteTagId = new Column("FixNoteTagId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixNoteTagId);
                this.columnFixOnBehalfOf = new Column("FixOnBehalfOf", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixOnBehalfOf);
                this.columnFixOnBehalfOfSub = new Column("FixOnBehalfOfSub", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixOnBehalfOfSub);
                this.columnFixOrderIdFormat = new Column("FixOrderIdFormat", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixOrderIdFormat);
                this.columnFixPassiveTag = new Column("FixPassiveTag", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixPassiveTag);
                this.columnFixProactiveTag = new Column("FixProactiveTag", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixProactiveTag);
                this.columnFixSourceCompany = new Column("FixSourceCompany", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixSourceCompany);
                this.columnFixSourceId = new Column("FixSourceId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixSourceId);
                this.columnFixSourceTrader = new Column("FixSourceTrader", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixSourceTrader);
                this.columnFixTargetCompany = new Column("FixTargetCompany", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixTargetCompany);
                this.columnFixTargetLocationId = new Column("FixTargetLocationId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixTargetLocationId);
                this.columnFixTargetTrader = new Column("FixTargetTrader", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixTargetTrader);
                this.columnFixVersion = new Column("FixVersion", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixVersion);
                this.columnIsBroker = new Column("IsBroker", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsBroker);
                this.columnIsCancelAllowed = new Column("IsCancelAllowed", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsCancelAllowed);
                this.columnIsCancelReplaceAllowed = new Column("IsCancelReplaceAllowed", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsCancelReplaceAllowed);
                this.columnIsEcn = new Column("IsEcn", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsEcn);
                this.columnIsExchange = new Column("IsExchange", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsExchange);
                this.columnIsInternal = new Column("IsInternal", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsInternal);
                this.columnIsIoiAllowed = new Column("IsIoiAllowed", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsIoiAllowed);
                this.columnIsLimitPricingAllowed = new Column("IsLimitPricingAllowed", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsLimitPricingAllowed);
                this.columnIsMarketOnClosePricingAllowed = new Column("IsMarketOnClosePricingAllowed", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsMarketOnClosePricingAllowed);
                this.columnIsMarketPricingAllowed = new Column("IsMarketPricingAllowed", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsMarketPricingAllowed);
                this.columnIsSystemUp = new Column("IsSystemUp", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsSystemUp);
                this.columnIsTagEligible = new Column("IsTagEligible", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsTagEligible);
                this.columnIsTradeAwayAllowed = new Column("IsTradeAwayAllowed", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsTradeAwayAllowed);
                this.columnIsUnsolicitedTradeAllowed = new Column("IsUnsolicitedTradeAllowed", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsUnsolicitedTradeAllowed);
                this.columnLotSize = new Column("LotSize", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLotSize);
                this.columnMaximumQuantityListedLimit = new Column("MaximumQuantityListedLimit", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaximumQuantityListedLimit);
                this.columnMaximumQuantityListedMarket = new Column("MaximumQuantityListedMarket", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaximumQuantityListedMarket);
                this.columnMaximumQuantityUnlistedLimit = new Column("MaximumQuantityUnlistedLimit", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaximumQuantityUnlistedLimit);
                this.columnMaximumQuantityUnlistedMarket = new Column("MaximumQuantityUnlistedMarket", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaximumQuantityUnlistedMarket);
                this.columnModifiedTime = new Column("ModifiedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedTime);
                this.columnName = new Column("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnNewOrderCustomFixTag = new Column("NewOrderCustomFixTag", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNewOrderCustomFixTag);
                this.columnOatsDepartmentId = new Column("OatsDepartmentId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOatsDepartmentId);
                this.columnOatsDestinationCode = new Column("OatsDestinationCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOatsDestinationCode);
                this.columnOatsReceivingMpi = new Column("OatsReceivingMpi", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOatsReceivingMpi);
                this.columnOatsRouteMethod = new Column("OatsRouteMethod", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOatsRouteMethod);
                this.columnOatsRoutingMpi = new Column("OatsRoutingMpi", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOatsRoutingMpi);
                this.columnOatsSentMpi = new Column("OatsSentMpi", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOatsSentMpi);
                this.columnOatsTerminalId = new Column("OatsTerminalId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOatsTerminalId);
                this.columnOnCloseCancelTime = new Column("OnCloseCancelTime", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOnCloseCancelTime);
                this.columnOnCloseOrderTime = new Column("OnCloseOrderTime", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOnCloseOrderTime);
                this.columnPerShareUsageFee = new Column("PerShareUsageFee", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPerShareUsageFee);
                this.columnPostMarketLogic = new Column("PostMarketLogic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostMarketLogic);
                this.columnPrimaryBackupDestinationId = new Column("PrimaryBackupDestinationId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrimaryBackupDestinationId);
                this.columnSecondaryBackupDestinationId = new Column("SecondaryBackupDestinationId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecondaryBackupDestinationId);
                this.columnSelectnetFlag = new Column("SelectnetFlag", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSelectnetFlag);
                this.columnShortName = new Column("ShortName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnShortName);
                this.columnSourceId0 = new Column("SourceId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSourceId0);
                this.columnSourceId1 = new Column("SourceId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSourceId1);
                this.columnSourceId2 = new Column("SourceId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSourceId2);
                this.columnSourceId3 = new Column("SourceId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSourceId3);
                this.columnSourceId4 = new Column("SourceId4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSourceId4);
                this.columnSourceId5 = new Column("SourceId5", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSourceId5);
                this.columnSourceId6 = new Column("SourceId6", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSourceId6);
                this.columnSourceId7 = new Column("SourceId7", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSourceId7);
                this.columnUniqueShortName = new Column("UniqueShortName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUniqueShortName);
                this.Constraints.Add(new UniqueConstraint("KeyDestination", new DataColumn[] {
                                this.columnDestinationId}, true));
                this.viewKeyDestinationExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewKeyDestinationExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.columnDestinationId.AutoIncrement = true;
                this.columnDestinationId.AllowDBNull = false;
                this.columnDestinationId.Unique = true;
                this.columnFixOrderIdFormat.AllowDBNull = false;
                this.columnFixOrderIdFormat.DefaultValue = "{0:00000}";
                this.columnFixVersion.AllowDBNull = false;
                this.columnFixVersion.DefaultValue = "4.0";
                this.columnIsBroker.AllowDBNull = false;
                this.columnIsBroker.DefaultValue = false;
                this.columnIsCancelAllowed.AllowDBNull = false;
                this.columnIsCancelAllowed.DefaultValue = true;
                this.columnIsCancelReplaceAllowed.AllowDBNull = false;
                this.columnIsCancelReplaceAllowed.DefaultValue = true;
                this.columnIsEcn.AllowDBNull = false;
                this.columnIsEcn.DefaultValue = false;
                this.columnIsExchange.AllowDBNull = false;
                this.columnIsExchange.DefaultValue = false;
                this.columnIsInternal.AllowDBNull = false;
                this.columnIsInternal.DefaultValue = false;
                this.columnIsIoiAllowed.AllowDBNull = false;
                this.columnIsIoiAllowed.DefaultValue = false;
                this.columnIsLimitPricingAllowed.AllowDBNull = false;
                this.columnIsLimitPricingAllowed.DefaultValue = true;
                this.columnIsMarketOnClosePricingAllowed.AllowDBNull = false;
                this.columnIsMarketOnClosePricingAllowed.DefaultValue = false;
                this.columnIsMarketPricingAllowed.AllowDBNull = false;
                this.columnIsMarketPricingAllowed.DefaultValue = true;
                this.columnIsSystemUp.AllowDBNull = false;
                this.columnIsSystemUp.DefaultValue = false;
                this.columnIsTagEligible.DefaultValue = true;
                this.columnIsTradeAwayAllowed.AllowDBNull = false;
                this.columnIsTradeAwayAllowed.DefaultValue = false;
                this.columnIsUnsolicitedTradeAllowed.DefaultValue = false;
                this.columnModifiedTime.AllowDBNull = false;
                this.columnPerShareUsageFee.DefaultValue = 0.0m;
                this.columnSelectnetFlag.AllowDBNull = false;
                this.columnSelectnetFlag.DefaultValue = false;
                this.columnShortName.AllowDBNull = false;
                this.columnUniqueShortName.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.DestinationLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Destination"));
                }
            }
            
            public DestinationRow NewDestinationRow()
            {
                return ((DestinationRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new DestinationRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(DestinationRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.DestinationRowChanged != null))
                {
                    this.DestinationRowChanged(this, new DestinationRowChangeEvent(((DestinationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.DestinationRowChanging != null))
                {
                    this.DestinationRowChanging(this, new DestinationRowChangeEvent(((DestinationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.DestinationRowDeleted != null))
                {
                    this.DestinationRowDeleted(this, new DestinationRowChangeEvent(((DestinationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.DestinationRowDeleting != null))
                {
                    this.DestinationRowDeleting(this, new DestinationRowChangeEvent(((DestinationRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDestinationRow(DestinationRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DestinationRow : Row
        {
            
            private DestinationDataTable tableDestination;
            
            internal DestinationRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableDestination = ((DestinationDataTable)(this.Table));
            }
            
            public string CancelCustomFixTag
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.CancelCustomFixTagColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.CancelCustomFixTagColumn] = value;
                }
            }
            
            public string ClearingFirmId
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.ClearingFirmIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.ClearingFirmIdColumn] = value;
                }
            }
            
            public int DestinationId
            {
                get
                {
                    return ((int)(this[this.tableDestination.DestinationIdColumn]));
                }
                set
                {
                    this[this.tableDestination.DestinationIdColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.ExternalId1Column] = value;
                }
            }
            
            public string FixAccount
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.FixAccountColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.FixAccountColumn] = value;
                }
            }
            
            public int FixAccountSuffixLength
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableDestination.FixAccountSuffixLengthColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.FixAccountSuffixLengthColumn] = value;
                }
            }
            
            public string FixExchangeMnemonic
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.FixExchangeMnemonicColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.FixExchangeMnemonicColumn] = value;
                }
            }
            
            public string FixExecBroker
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.FixExecBrokerColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.FixExecBrokerColumn] = value;
                }
            }
            
            public string FixExecDestinationListed
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.FixExecDestinationListedColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.FixExecDestinationListedColumn] = value;
                }
            }
            
            public string FixExecDestinationUnlisted
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.FixExecDestinationUnlistedColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.FixExecDestinationUnlistedColumn] = value;
                }
            }
            
            public string FixHandleInstListed
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.FixHandleInstListedColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.FixHandleInstListedColumn] = value;
                }
            }
            
            public string FixHandleInstUnlisted
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.FixHandleInstUnlistedColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.FixHandleInstUnlistedColumn] = value;
                }
            }
            
            public string FixIoiRoutingId
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.FixIoiRoutingIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.FixIoiRoutingIdColumn] = value;
                }
            }
            
            public string FixIoiRoutingType
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.FixIoiRoutingTypeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.FixIoiRoutingTypeColumn] = value;
                }
            }
            
            public string FixNetCommissionType
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.FixNetCommissionTypeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.FixNetCommissionTypeColumn] = value;
                }
            }
            
            public string FixNoteTagId
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.FixNoteTagIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.FixNoteTagIdColumn] = value;
                }
            }
            
            public string FixOnBehalfOf
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.FixOnBehalfOfColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.FixOnBehalfOfColumn] = value;
                }
            }
            
            public string FixOnBehalfOfSub
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.FixOnBehalfOfSubColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.FixOnBehalfOfSubColumn] = value;
                }
            }
            
            public string FixOrderIdFormat
            {
                get
                {
                    return ((string)(this[this.tableDestination.FixOrderIdFormatColumn]));
                }
                set
                {
                    this[this.tableDestination.FixOrderIdFormatColumn] = value;
                }
            }
            
            public string FixPassiveTag
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.FixPassiveTagColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.FixPassiveTagColumn] = value;
                }
            }
            
            public string FixProactiveTag
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.FixProactiveTagColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.FixProactiveTagColumn] = value;
                }
            }
            
            public string FixSourceCompany
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.FixSourceCompanyColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.FixSourceCompanyColumn] = value;
                }
            }
            
            public string FixSourceId
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.FixSourceIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.FixSourceIdColumn] = value;
                }
            }
            
            public string FixSourceTrader
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.FixSourceTraderColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.FixSourceTraderColumn] = value;
                }
            }
            
            public string FixTargetCompany
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.FixTargetCompanyColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.FixTargetCompanyColumn] = value;
                }
            }
            
            public string FixTargetLocationId
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.FixTargetLocationIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.FixTargetLocationIdColumn] = value;
                }
            }
            
            public string FixTargetTrader
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.FixTargetTraderColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.FixTargetTraderColumn] = value;
                }
            }
            
            public string FixVersion
            {
                get
                {
                    return ((string)(this[this.tableDestination.FixVersionColumn]));
                }
                set
                {
                    this[this.tableDestination.FixVersionColumn] = value;
                }
            }
            
            public bool IsBroker
            {
                get
                {
                    return ((bool)(this[this.tableDestination.IsBrokerColumn]));
                }
                set
                {
                    this[this.tableDestination.IsBrokerColumn] = value;
                }
            }
            
            public bool IsCancelAllowed
            {
                get
                {
                    return ((bool)(this[this.tableDestination.IsCancelAllowedColumn]));
                }
                set
                {
                    this[this.tableDestination.IsCancelAllowedColumn] = value;
                }
            }
            
            public bool IsCancelReplaceAllowed
            {
                get
                {
                    return ((bool)(this[this.tableDestination.IsCancelReplaceAllowedColumn]));
                }
                set
                {
                    this[this.tableDestination.IsCancelReplaceAllowedColumn] = value;
                }
            }
            
            public bool IsEcn
            {
                get
                {
                    return ((bool)(this[this.tableDestination.IsEcnColumn]));
                }
                set
                {
                    this[this.tableDestination.IsEcnColumn] = value;
                }
            }
            
            public bool IsExchange
            {
                get
                {
                    return ((bool)(this[this.tableDestination.IsExchangeColumn]));
                }
                set
                {
                    this[this.tableDestination.IsExchangeColumn] = value;
                }
            }
            
            public bool IsInternal
            {
                get
                {
                    return ((bool)(this[this.tableDestination.IsInternalColumn]));
                }
                set
                {
                    this[this.tableDestination.IsInternalColumn] = value;
                }
            }
            
            public bool IsIoiAllowed
            {
                get
                {
                    return ((bool)(this[this.tableDestination.IsIoiAllowedColumn]));
                }
                set
                {
                    this[this.tableDestination.IsIoiAllowedColumn] = value;
                }
            }
            
            public bool IsLimitPricingAllowed
            {
                get
                {
                    return ((bool)(this[this.tableDestination.IsLimitPricingAllowedColumn]));
                }
                set
                {
                    this[this.tableDestination.IsLimitPricingAllowedColumn] = value;
                }
            }
            
            public bool IsMarketOnClosePricingAllowed
            {
                get
                {
                    return ((bool)(this[this.tableDestination.IsMarketOnClosePricingAllowedColumn]));
                }
                set
                {
                    this[this.tableDestination.IsMarketOnClosePricingAllowedColumn] = value;
                }
            }
            
            public bool IsMarketPricingAllowed
            {
                get
                {
                    return ((bool)(this[this.tableDestination.IsMarketPricingAllowedColumn]));
                }
                set
                {
                    this[this.tableDestination.IsMarketPricingAllowedColumn] = value;
                }
            }
            
            public bool IsSystemUp
            {
                get
                {
                    return ((bool)(this[this.tableDestination.IsSystemUpColumn]));
                }
                set
                {
                    this[this.tableDestination.IsSystemUpColumn] = value;
                }
            }
            
            public bool IsTagEligible
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableDestination.IsTagEligibleColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.IsTagEligibleColumn] = value;
                }
            }
            
            public bool IsTradeAwayAllowed
            {
                get
                {
                    return ((bool)(this[this.tableDestination.IsTradeAwayAllowedColumn]));
                }
                set
                {
                    this[this.tableDestination.IsTradeAwayAllowedColumn] = value;
                }
            }
            
            public bool IsUnsolicitedTradeAllowed
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableDestination.IsUnsolicitedTradeAllowedColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.IsUnsolicitedTradeAllowedColumn] = value;
                }
            }
            
            public int LotSize
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableDestination.LotSizeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.LotSizeColumn] = value;
                }
            }
            
            public decimal MaximumQuantityListedLimit
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableDestination.MaximumQuantityListedLimitColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.MaximumQuantityListedLimitColumn] = value;
                }
            }
            
            public decimal MaximumQuantityListedMarket
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableDestination.MaximumQuantityListedMarketColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.MaximumQuantityListedMarketColumn] = value;
                }
            }
            
            public decimal MaximumQuantityUnlistedLimit
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableDestination.MaximumQuantityUnlistedLimitColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.MaximumQuantityUnlistedLimitColumn] = value;
                }
            }
            
            public decimal MaximumQuantityUnlistedMarket
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableDestination.MaximumQuantityUnlistedMarketColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.MaximumQuantityUnlistedMarketColumn] = value;
                }
            }
            
            public System.DateTime ModifiedTime
            {
                get
                {
                    return ((System.DateTime)(this[this.tableDestination.ModifiedTimeColumn]));
                }
                set
                {
                    this[this.tableDestination.ModifiedTimeColumn] = value;
                }
            }
            
            public string Name
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.NameColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.NameColumn] = value;
                }
            }
            
            public string NewOrderCustomFixTag
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.NewOrderCustomFixTagColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.NewOrderCustomFixTagColumn] = value;
                }
            }
            
            public string OatsDepartmentId
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.OatsDepartmentIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.OatsDepartmentIdColumn] = value;
                }
            }
            
            public string OatsDestinationCode
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.OatsDestinationCodeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.OatsDestinationCodeColumn] = value;
                }
            }
            
            public string OatsReceivingMpi
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.OatsReceivingMpiColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.OatsReceivingMpiColumn] = value;
                }
            }
            
            public string OatsRouteMethod
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.OatsRouteMethodColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.OatsRouteMethodColumn] = value;
                }
            }
            
            public string OatsRoutingMpi
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.OatsRoutingMpiColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.OatsRoutingMpiColumn] = value;
                }
            }
            
            public string OatsSentMpi
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.OatsSentMpiColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.OatsSentMpiColumn] = value;
                }
            }
            
            public string OatsTerminalId
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.OatsTerminalIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.OatsTerminalIdColumn] = value;
                }
            }
            
            public int OnCloseCancelTime
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableDestination.OnCloseCancelTimeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.OnCloseCancelTimeColumn] = value;
                }
            }
            
            public int OnCloseOrderTime
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableDestination.OnCloseOrderTimeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.OnCloseOrderTimeColumn] = value;
                }
            }
            
            public decimal PerShareUsageFee
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableDestination.PerShareUsageFeeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.PerShareUsageFeeColumn] = value;
                }
            }
            
            public string PostMarketLogic
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.PostMarketLogicColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.PostMarketLogicColumn] = value;
                }
            }
            
            public int PrimaryBackupDestinationId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableDestination.PrimaryBackupDestinationIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.PrimaryBackupDestinationIdColumn] = value;
                }
            }
            
            public int SecondaryBackupDestinationId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableDestination.SecondaryBackupDestinationIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.SecondaryBackupDestinationIdColumn] = value;
                }
            }
            
            public bool SelectnetFlag
            {
                get
                {
                    return ((bool)(this[this.tableDestination.SelectnetFlagColumn]));
                }
                set
                {
                    this[this.tableDestination.SelectnetFlagColumn] = value;
                }
            }
            
            public string ShortName
            {
                get
                {
                    return ((string)(this[this.tableDestination.ShortNameColumn]));
                }
                set
                {
                    this[this.tableDestination.ShortNameColumn] = value;
                }
            }
            
            public string SourceId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.SourceId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.SourceId0Column] = value;
                }
            }
            
            public string SourceId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.SourceId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.SourceId1Column] = value;
                }
            }
            
            public string SourceId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.SourceId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.SourceId2Column] = value;
                }
            }
            
            public string SourceId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.SourceId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.SourceId3Column] = value;
                }
            }
            
            public string SourceId4
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.SourceId4Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.SourceId4Column] = value;
                }
            }
            
            public string SourceId5
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.SourceId5Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.SourceId5Column] = value;
                }
            }
            
            public string SourceId6
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.SourceId6Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.SourceId6Column] = value;
                }
            }
            
            public string SourceId7
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestination.SourceId7Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestination.SourceId7Column] = value;
                }
            }
            
            public string UniqueShortName
            {
                get
                {
                    return ((string)(this[this.tableDestination.UniqueShortNameColumn]));
                }
                set
                {
                    this[this.tableDestination.UniqueShortNameColumn] = value;
                }
            }
            
            public bool IsCancelCustomFixTagNull()
            {
                return this.IsNull(this.tableDestination.CancelCustomFixTagColumn);
            }
            
            public void SetCancelCustomFixTagNull()
            {
                this[this.tableDestination.CancelCustomFixTagColumn] = System.Convert.DBNull;
            }
            
            public bool IsClearingFirmIdNull()
            {
                return this.IsNull(this.tableDestination.ClearingFirmIdColumn);
            }
            
            public void SetClearingFirmIdNull()
            {
                this[this.tableDestination.ClearingFirmIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableDestination.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableDestination.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableDestination.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableDestination.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsFixAccountNull()
            {
                return this.IsNull(this.tableDestination.FixAccountColumn);
            }
            
            public void SetFixAccountNull()
            {
                this[this.tableDestination.FixAccountColumn] = System.Convert.DBNull;
            }
            
            public bool IsFixAccountSuffixLengthNull()
            {
                return this.IsNull(this.tableDestination.FixAccountSuffixLengthColumn);
            }
            
            public void SetFixAccountSuffixLengthNull()
            {
                this[this.tableDestination.FixAccountSuffixLengthColumn] = System.Convert.DBNull;
            }
            
            public bool IsFixExchangeMnemonicNull()
            {
                return this.IsNull(this.tableDestination.FixExchangeMnemonicColumn);
            }
            
            public void SetFixExchangeMnemonicNull()
            {
                this[this.tableDestination.FixExchangeMnemonicColumn] = System.Convert.DBNull;
            }
            
            public bool IsFixExecBrokerNull()
            {
                return this.IsNull(this.tableDestination.FixExecBrokerColumn);
            }
            
            public void SetFixExecBrokerNull()
            {
                this[this.tableDestination.FixExecBrokerColumn] = System.Convert.DBNull;
            }
            
            public bool IsFixExecDestinationListedNull()
            {
                return this.IsNull(this.tableDestination.FixExecDestinationListedColumn);
            }
            
            public void SetFixExecDestinationListedNull()
            {
                this[this.tableDestination.FixExecDestinationListedColumn] = System.Convert.DBNull;
            }
            
            public bool IsFixExecDestinationUnlistedNull()
            {
                return this.IsNull(this.tableDestination.FixExecDestinationUnlistedColumn);
            }
            
            public void SetFixExecDestinationUnlistedNull()
            {
                this[this.tableDestination.FixExecDestinationUnlistedColumn] = System.Convert.DBNull;
            }
            
            public bool IsFixHandleInstListedNull()
            {
                return this.IsNull(this.tableDestination.FixHandleInstListedColumn);
            }
            
            public void SetFixHandleInstListedNull()
            {
                this[this.tableDestination.FixHandleInstListedColumn] = System.Convert.DBNull;
            }
            
            public bool IsFixHandleInstUnlistedNull()
            {
                return this.IsNull(this.tableDestination.FixHandleInstUnlistedColumn);
            }
            
            public void SetFixHandleInstUnlistedNull()
            {
                this[this.tableDestination.FixHandleInstUnlistedColumn] = System.Convert.DBNull;
            }
            
            public bool IsFixIoiRoutingIdNull()
            {
                return this.IsNull(this.tableDestination.FixIoiRoutingIdColumn);
            }
            
            public void SetFixIoiRoutingIdNull()
            {
                this[this.tableDestination.FixIoiRoutingIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsFixIoiRoutingTypeNull()
            {
                return this.IsNull(this.tableDestination.FixIoiRoutingTypeColumn);
            }
            
            public void SetFixIoiRoutingTypeNull()
            {
                this[this.tableDestination.FixIoiRoutingTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsFixNetCommissionTypeNull()
            {
                return this.IsNull(this.tableDestination.FixNetCommissionTypeColumn);
            }
            
            public void SetFixNetCommissionTypeNull()
            {
                this[this.tableDestination.FixNetCommissionTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsFixNoteTagIdNull()
            {
                return this.IsNull(this.tableDestination.FixNoteTagIdColumn);
            }
            
            public void SetFixNoteTagIdNull()
            {
                this[this.tableDestination.FixNoteTagIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsFixOnBehalfOfNull()
            {
                return this.IsNull(this.tableDestination.FixOnBehalfOfColumn);
            }
            
            public void SetFixOnBehalfOfNull()
            {
                this[this.tableDestination.FixOnBehalfOfColumn] = System.Convert.DBNull;
            }
            
            public bool IsFixOnBehalfOfSubNull()
            {
                return this.IsNull(this.tableDestination.FixOnBehalfOfSubColumn);
            }
            
            public void SetFixOnBehalfOfSubNull()
            {
                this[this.tableDestination.FixOnBehalfOfSubColumn] = System.Convert.DBNull;
            }
            
            public bool IsFixPassiveTagNull()
            {
                return this.IsNull(this.tableDestination.FixPassiveTagColumn);
            }
            
            public void SetFixPassiveTagNull()
            {
                this[this.tableDestination.FixPassiveTagColumn] = System.Convert.DBNull;
            }
            
            public bool IsFixProactiveTagNull()
            {
                return this.IsNull(this.tableDestination.FixProactiveTagColumn);
            }
            
            public void SetFixProactiveTagNull()
            {
                this[this.tableDestination.FixProactiveTagColumn] = System.Convert.DBNull;
            }
            
            public bool IsFixSourceCompanyNull()
            {
                return this.IsNull(this.tableDestination.FixSourceCompanyColumn);
            }
            
            public void SetFixSourceCompanyNull()
            {
                this[this.tableDestination.FixSourceCompanyColumn] = System.Convert.DBNull;
            }
            
            public bool IsFixSourceIdNull()
            {
                return this.IsNull(this.tableDestination.FixSourceIdColumn);
            }
            
            public void SetFixSourceIdNull()
            {
                this[this.tableDestination.FixSourceIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsFixSourceTraderNull()
            {
                return this.IsNull(this.tableDestination.FixSourceTraderColumn);
            }
            
            public void SetFixSourceTraderNull()
            {
                this[this.tableDestination.FixSourceTraderColumn] = System.Convert.DBNull;
            }
            
            public bool IsFixTargetCompanyNull()
            {
                return this.IsNull(this.tableDestination.FixTargetCompanyColumn);
            }
            
            public void SetFixTargetCompanyNull()
            {
                this[this.tableDestination.FixTargetCompanyColumn] = System.Convert.DBNull;
            }
            
            public bool IsFixTargetLocationIdNull()
            {
                return this.IsNull(this.tableDestination.FixTargetLocationIdColumn);
            }
            
            public void SetFixTargetLocationIdNull()
            {
                this[this.tableDestination.FixTargetLocationIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsFixTargetTraderNull()
            {
                return this.IsNull(this.tableDestination.FixTargetTraderColumn);
            }
            
            public void SetFixTargetTraderNull()
            {
                this[this.tableDestination.FixTargetTraderColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsTagEligibleNull()
            {
                return this.IsNull(this.tableDestination.IsTagEligibleColumn);
            }
            
            public void SetIsTagEligibleNull()
            {
                this[this.tableDestination.IsTagEligibleColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsUnsolicitedTradeAllowedNull()
            {
                return this.IsNull(this.tableDestination.IsUnsolicitedTradeAllowedColumn);
            }
            
            public void SetIsUnsolicitedTradeAllowedNull()
            {
                this[this.tableDestination.IsUnsolicitedTradeAllowedColumn] = System.Convert.DBNull;
            }
            
            public bool IsLotSizeNull()
            {
                return this.IsNull(this.tableDestination.LotSizeColumn);
            }
            
            public void SetLotSizeNull()
            {
                this[this.tableDestination.LotSizeColumn] = System.Convert.DBNull;
            }
            
            public bool IsMaximumQuantityListedLimitNull()
            {
                return this.IsNull(this.tableDestination.MaximumQuantityListedLimitColumn);
            }
            
            public void SetMaximumQuantityListedLimitNull()
            {
                this[this.tableDestination.MaximumQuantityListedLimitColumn] = System.Convert.DBNull;
            }
            
            public bool IsMaximumQuantityListedMarketNull()
            {
                return this.IsNull(this.tableDestination.MaximumQuantityListedMarketColumn);
            }
            
            public void SetMaximumQuantityListedMarketNull()
            {
                this[this.tableDestination.MaximumQuantityListedMarketColumn] = System.Convert.DBNull;
            }
            
            public bool IsMaximumQuantityUnlistedLimitNull()
            {
                return this.IsNull(this.tableDestination.MaximumQuantityUnlistedLimitColumn);
            }
            
            public void SetMaximumQuantityUnlistedLimitNull()
            {
                this[this.tableDestination.MaximumQuantityUnlistedLimitColumn] = System.Convert.DBNull;
            }
            
            public bool IsMaximumQuantityUnlistedMarketNull()
            {
                return this.IsNull(this.tableDestination.MaximumQuantityUnlistedMarketColumn);
            }
            
            public void SetMaximumQuantityUnlistedMarketNull()
            {
                this[this.tableDestination.MaximumQuantityUnlistedMarketColumn] = System.Convert.DBNull;
            }
            
            public bool IsNameNull()
            {
                return this.IsNull(this.tableDestination.NameColumn);
            }
            
            public void SetNameNull()
            {
                this[this.tableDestination.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsNewOrderCustomFixTagNull()
            {
                return this.IsNull(this.tableDestination.NewOrderCustomFixTagColumn);
            }
            
            public void SetNewOrderCustomFixTagNull()
            {
                this[this.tableDestination.NewOrderCustomFixTagColumn] = System.Convert.DBNull;
            }
            
            public bool IsOatsDepartmentIdNull()
            {
                return this.IsNull(this.tableDestination.OatsDepartmentIdColumn);
            }
            
            public void SetOatsDepartmentIdNull()
            {
                this[this.tableDestination.OatsDepartmentIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsOatsDestinationCodeNull()
            {
                return this.IsNull(this.tableDestination.OatsDestinationCodeColumn);
            }
            
            public void SetOatsDestinationCodeNull()
            {
                this[this.tableDestination.OatsDestinationCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsOatsReceivingMpiNull()
            {
                return this.IsNull(this.tableDestination.OatsReceivingMpiColumn);
            }
            
            public void SetOatsReceivingMpiNull()
            {
                this[this.tableDestination.OatsReceivingMpiColumn] = System.Convert.DBNull;
            }
            
            public bool IsOatsRouteMethodNull()
            {
                return this.IsNull(this.tableDestination.OatsRouteMethodColumn);
            }
            
            public void SetOatsRouteMethodNull()
            {
                this[this.tableDestination.OatsRouteMethodColumn] = System.Convert.DBNull;
            }
            
            public bool IsOatsRoutingMpiNull()
            {
                return this.IsNull(this.tableDestination.OatsRoutingMpiColumn);
            }
            
            public void SetOatsRoutingMpiNull()
            {
                this[this.tableDestination.OatsRoutingMpiColumn] = System.Convert.DBNull;
            }
            
            public bool IsOatsSentMpiNull()
            {
                return this.IsNull(this.tableDestination.OatsSentMpiColumn);
            }
            
            public void SetOatsSentMpiNull()
            {
                this[this.tableDestination.OatsSentMpiColumn] = System.Convert.DBNull;
            }
            
            public bool IsOatsTerminalIdNull()
            {
                return this.IsNull(this.tableDestination.OatsTerminalIdColumn);
            }
            
            public void SetOatsTerminalIdNull()
            {
                this[this.tableDestination.OatsTerminalIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsOnCloseCancelTimeNull()
            {
                return this.IsNull(this.tableDestination.OnCloseCancelTimeColumn);
            }
            
            public void SetOnCloseCancelTimeNull()
            {
                this[this.tableDestination.OnCloseCancelTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsOnCloseOrderTimeNull()
            {
                return this.IsNull(this.tableDestination.OnCloseOrderTimeColumn);
            }
            
            public void SetOnCloseOrderTimeNull()
            {
                this[this.tableDestination.OnCloseOrderTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsPerShareUsageFeeNull()
            {
                return this.IsNull(this.tableDestination.PerShareUsageFeeColumn);
            }
            
            public void SetPerShareUsageFeeNull()
            {
                this[this.tableDestination.PerShareUsageFeeColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostMarketLogicNull()
            {
                return this.IsNull(this.tableDestination.PostMarketLogicColumn);
            }
            
            public void SetPostMarketLogicNull()
            {
                this[this.tableDestination.PostMarketLogicColumn] = System.Convert.DBNull;
            }
            
            public bool IsPrimaryBackupDestinationIdNull()
            {
                return this.IsNull(this.tableDestination.PrimaryBackupDestinationIdColumn);
            }
            
            public void SetPrimaryBackupDestinationIdNull()
            {
                this[this.tableDestination.PrimaryBackupDestinationIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsSecondaryBackupDestinationIdNull()
            {
                return this.IsNull(this.tableDestination.SecondaryBackupDestinationIdColumn);
            }
            
            public void SetSecondaryBackupDestinationIdNull()
            {
                this[this.tableDestination.SecondaryBackupDestinationIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsSourceId0Null()
            {
                return this.IsNull(this.tableDestination.SourceId0Column);
            }
            
            public void SetSourceId0Null()
            {
                this[this.tableDestination.SourceId0Column] = System.Convert.DBNull;
            }
            
            public bool IsSourceId1Null()
            {
                return this.IsNull(this.tableDestination.SourceId1Column);
            }
            
            public void SetSourceId1Null()
            {
                this[this.tableDestination.SourceId1Column] = System.Convert.DBNull;
            }
            
            public bool IsSourceId2Null()
            {
                return this.IsNull(this.tableDestination.SourceId2Column);
            }
            
            public void SetSourceId2Null()
            {
                this[this.tableDestination.SourceId2Column] = System.Convert.DBNull;
            }
            
            public bool IsSourceId3Null()
            {
                return this.IsNull(this.tableDestination.SourceId3Column);
            }
            
            public void SetSourceId3Null()
            {
                this[this.tableDestination.SourceId3Column] = System.Convert.DBNull;
            }
            
            public bool IsSourceId4Null()
            {
                return this.IsNull(this.tableDestination.SourceId4Column);
            }
            
            public void SetSourceId4Null()
            {
                this[this.tableDestination.SourceId4Column] = System.Convert.DBNull;
            }
            
            public bool IsSourceId5Null()
            {
                return this.IsNull(this.tableDestination.SourceId5Column);
            }
            
            public void SetSourceId5Null()
            {
                this[this.tableDestination.SourceId5Column] = System.Convert.DBNull;
            }
            
            public bool IsSourceId6Null()
            {
                return this.IsNull(this.tableDestination.SourceId6Column);
            }
            
            public void SetSourceId6Null()
            {
                this[this.tableDestination.SourceId6Column] = System.Convert.DBNull;
            }
            
            public bool IsSourceId7Null()
            {
                return this.IsNull(this.tableDestination.SourceId7Column);
            }
            
            public void SetSourceId7Null()
            {
                this[this.tableDestination.SourceId7Column] = System.Convert.DBNull;
            }
            
            public DestinationOrderRow[] GetDestinationOrderRows()
            {
                return ((DestinationOrderRow[])(this.GetChildRows(this.Table.ChildRelations["DestinationDestinationOrder"])));
            }
            
            public SourceOrderRow[] GetSourceOrderRows()
            {
                return ((SourceOrderRow[])(this.GetChildRows(this.Table.ChildRelations["DestinationSourceOrder"])));
            }
            
            public WorkingOrderRow[] GetWorkingOrderRows()
            {
                return ((WorkingOrderRow[])(this.GetChildRows(this.Table.ChildRelations["DestinationWorkingOrder"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DestinationRowChangeEvent : EventArgs
        {
            
            private DestinationRow eventRow;
            
            private DataRowAction eventAction;
            
            public DestinationRowChangeEvent(DestinationRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DestinationRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DestinationOrderDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnCanceledQuantity;
            
            private Column columnCanceledTime;
            
            private Column columnCreatedTime;
            
            private Column columnCreatedUserId;
            
            private Column columnDestinationId;
            
            private Column columnDestinationOrderId;
            
            private Column columnExternalId0;
            
            private Column columnIsCanceledByUser;
            
            private Column columnIsHidden;
            
            private Column columnLimitPrice;
            
            private Column columnModifiedTime;
            
            private Column columnModifiedUserId;
            
            private Column columnOrderTypeCode;
            
            private Column columnOrderedQuantity;
            
            private Column columnPriceTypeCode;
            
            private Column columnStateCode;
            
            private Column columnStatusCode;
            
            private Column columnStopPrice;
            
            private Column columnTraderId;
            
            private Column columnTimeInForceCode;
            
            private Column columnWorkingOrderId;
            
            private DataView viewKeyDestinationOrderExternalId0;
            
            internal DestinationOrderDataTable() : 
                    base("DestinationOrder")
            {
                this.InitClass();
            }
            
            internal DestinationOrderDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column CanceledQuantityColumn
            {
                get
                {
                    return this.columnCanceledQuantity;
                }
            }
            
            public Column CanceledTimeColumn
            {
                get
                {
                    return this.columnCanceledTime;
                }
            }
            
            public Column CreatedTimeColumn
            {
                get
                {
                    return this.columnCreatedTime;
                }
            }
            
            public Column CreatedUserIdColumn
            {
                get
                {
                    return this.columnCreatedUserId;
                }
            }
            
            public Column DestinationIdColumn
            {
                get
                {
                    return this.columnDestinationId;
                }
            }
            
            public Column DestinationOrderIdColumn
            {
                get
                {
                    return this.columnDestinationOrderId;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column IsCanceledByUserColumn
            {
                get
                {
                    return this.columnIsCanceledByUser;
                }
            }
            
            public Column IsHiddenColumn
            {
                get
                {
                    return this.columnIsHidden;
                }
            }
            
            public Column LimitPriceColumn
            {
                get
                {
                    return this.columnLimitPrice;
                }
            }
            
            public Column ModifiedTimeColumn
            {
                get
                {
                    return this.columnModifiedTime;
                }
            }
            
            public Column ModifiedUserIdColumn
            {
                get
                {
                    return this.columnModifiedUserId;
                }
            }
            
            public Column OrderTypeCodeColumn
            {
                get
                {
                    return this.columnOrderTypeCode;
                }
            }
            
            public Column OrderedQuantityColumn
            {
                get
                {
                    return this.columnOrderedQuantity;
                }
            }
            
            public Column PriceTypeCodeColumn
            {
                get
                {
                    return this.columnPriceTypeCode;
                }
            }
            
            public Column StateCodeColumn
            {
                get
                {
                    return this.columnStateCode;
                }
            }
            
            public Column StatusCodeColumn
            {
                get
                {
                    return this.columnStatusCode;
                }
            }
            
            public Column StopPriceColumn
            {
                get
                {
                    return this.columnStopPrice;
                }
            }
            
            public Column TraderIdColumn
            {
                get
                {
                    return this.columnTraderId;
                }
            }
            
            public Column TimeInForceCodeColumn
            {
                get
                {
                    return this.columnTimeInForceCode;
                }
            }
            
            public Column WorkingOrderIdColumn
            {
                get
                {
                    return this.columnWorkingOrderId;
                }
            }
            
            public DataView KeyDestinationOrderExternalId0
            {
                get
                {
                    return this.viewKeyDestinationOrderExternalId0;
                }
            }
            
            public DestinationOrderRow this[int index]
            {
                get
                {
                    return ((DestinationOrderRow)(this.Rows[index]));
                }
            }
            
            public event DestinationOrderRowChangeEventHandler DestinationOrderRowChanged;
            
            public event DestinationOrderRowChangeEventHandler DestinationOrderRowChanging;
            
            public event DestinationOrderRowChangeEventHandler DestinationOrderRowDeleted;
            
            public event DestinationOrderRowChangeEventHandler DestinationOrderRowDeleting;
            
            public void AddDestinationOrderRow(DestinationOrderRow row)
            {
                this.Rows.Add(row);
            }
            
            public DestinationOrderRow AddDestinationOrderRow(
                        decimal CanceledQuantity, 
                        System.DateTime CanceledTime, 
                        System.DateTime CreatedTime, 
                        int CreatedUserId, 
                        DestinationRow parentDestinationRowByDestinationDestinationOrder, 
                        string ExternalId0, 
                        bool IsCanceledByUser, 
                        bool IsHidden, 
                        decimal LimitPrice, 
                        System.DateTime ModifiedTime, 
                        int ModifiedUserId, 
                        int OrderTypeCode, 
                        decimal OrderedQuantity, 
                        PriceTypeRow parentPriceTypeRowByPriceTypeDestinationOrder, 
                        StateRow parentStateRowByStateDestinationOrder, 
                        StatusRow parentStatusRowByStatusDestinationOrder, 
                        decimal StopPrice, 
                        TraderRow parentTraderRowByTraderDestinationOrder, 
                        TimeInForceRow parentTimeInForceRowByTimeInForceDestinationOrder, 
                        WorkingOrderRow parentWorkingOrderRowByWorkingOrderDestinationOrder)
            {
                DestinationOrderRow rowDestinationOrderRow = ((DestinationOrderRow)(this.NewRow()));
                rowDestinationOrderRow.ItemArray = new object[] {
                        CanceledQuantity,
                        CanceledTime,
                        CreatedTime,
                        CreatedUserId,
                        parentDestinationRowByDestinationDestinationOrder[2],
                        null,
                        ExternalId0,
                        IsCanceledByUser,
                        IsHidden,
                        LimitPrice,
                        ModifiedTime,
                        ModifiedUserId,
                        OrderTypeCode,
                        OrderedQuantity,
                        parentPriceTypeRowByPriceTypeDestinationOrder[6],
                        parentStateRowByStateDestinationOrder[6],
                        parentStatusRowByStatusDestinationOrder[6],
                        StopPrice,
                        parentTraderRowByTraderDestinationOrder[61],
                        parentTimeInForceRowByTimeInForceDestinationOrder[6],
                        parentWorkingOrderRowByWorkingOrderDestinationOrder[31]};
                this.Rows.Add(rowDestinationOrderRow);
                return rowDestinationOrderRow;
            }
            
            public DestinationOrderRow FindByDestinationOrderId(int DestinationOrderId)
            {
                return ((DestinationOrderRow)(this.Rows.Find(new object[] {
                            DestinationOrderId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                DestinationOrderDataTable cln = ((DestinationOrderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new DestinationOrderDataTable();
            }
            
            internal void InitVars()
            {
                this.columnCanceledQuantity = this.Columns["CanceledQuantity"];
                this.columnCanceledTime = this.Columns["CanceledTime"];
                this.columnCreatedTime = this.Columns["CreatedTime"];
                this.columnCreatedUserId = this.Columns["CreatedUserId"];
                this.columnDestinationId = this.Columns["DestinationId"];
                this.columnDestinationOrderId = this.Columns["DestinationOrderId"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnIsCanceledByUser = this.Columns["IsCanceledByUser"];
                this.columnIsHidden = this.Columns["IsHidden"];
                this.columnLimitPrice = this.Columns["LimitPrice"];
                this.columnModifiedTime = this.Columns["ModifiedTime"];
                this.columnModifiedUserId = this.Columns["ModifiedUserId"];
                this.columnOrderTypeCode = this.Columns["OrderTypeCode"];
                this.columnOrderedQuantity = this.Columns["OrderedQuantity"];
                this.columnPriceTypeCode = this.Columns["PriceTypeCode"];
                this.columnStateCode = this.Columns["StateCode"];
                this.columnStatusCode = this.Columns["StatusCode"];
                this.columnStopPrice = this.Columns["StopPrice"];
                this.columnTraderId = this.Columns["TraderId"];
                this.columnTimeInForceCode = this.Columns["TimeInForceCode"];
                this.columnWorkingOrderId = this.Columns["WorkingOrderId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnCanceledQuantity = new Column("CanceledQuantity", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCanceledQuantity);
                this.columnCanceledTime = new Column("CanceledTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCanceledTime);
                this.columnCreatedTime = new Column("CreatedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedTime);
                this.columnCreatedUserId = new Column("CreatedUserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedUserId);
                this.columnDestinationId = new Column("DestinationId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDestinationId);
                this.columnDestinationOrderId = new Column("DestinationOrderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDestinationOrderId);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnIsCanceledByUser = new Column("IsCanceledByUser", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsCanceledByUser);
                this.columnIsHidden = new Column("IsHidden", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsHidden);
                this.columnLimitPrice = new Column("LimitPrice", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLimitPrice);
                this.columnModifiedTime = new Column("ModifiedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedTime);
                this.columnModifiedUserId = new Column("ModifiedUserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedUserId);
                this.columnOrderTypeCode = new Column("OrderTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrderTypeCode);
                this.columnOrderedQuantity = new Column("OrderedQuantity", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrderedQuantity);
                this.columnPriceTypeCode = new Column("PriceTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPriceTypeCode);
                this.columnStateCode = new Column("StateCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateCode);
                this.columnStatusCode = new Column("StatusCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStatusCode);
                this.columnStopPrice = new Column("StopPrice", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStopPrice);
                this.columnTraderId = new Column("TraderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTraderId);
                this.columnTimeInForceCode = new Column("TimeInForceCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeInForceCode);
                this.columnWorkingOrderId = new Column("WorkingOrderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWorkingOrderId);
                this.Constraints.Add(new UniqueConstraint("KeyDestinationOrder", new DataColumn[] {
                                this.columnDestinationOrderId}, true));
                this.viewKeyDestinationOrderExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.columnCanceledQuantity.AllowDBNull = false;
                this.columnCanceledQuantity.DefaultValue = 0m;
                this.columnCreatedTime.AllowDBNull = false;
                this.columnCreatedUserId.AllowDBNull = false;
                this.columnDestinationId.AllowDBNull = false;
                this.columnDestinationOrderId.AutoIncrement = true;
                this.columnDestinationOrderId.AllowDBNull = false;
                this.columnDestinationOrderId.Unique = true;
                this.columnIsCanceledByUser.AllowDBNull = false;
                this.columnIsCanceledByUser.DefaultValue = false;
                this.columnIsHidden.AllowDBNull = false;
                this.columnIsHidden.DefaultValue = false;
                this.columnModifiedTime.AllowDBNull = false;
                this.columnModifiedUserId.AllowDBNull = false;
                this.columnOrderTypeCode.AllowDBNull = false;
                this.columnOrderedQuantity.AllowDBNull = false;
                this.columnPriceTypeCode.AllowDBNull = false;
                this.columnStateCode.AllowDBNull = false;
                this.columnStatusCode.AllowDBNull = false;
                this.columnTimeInForceCode.AllowDBNull = false;
                this.columnWorkingOrderId.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.DestinationOrderLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "DestinationOrder"));
                }
            }
            
            public DestinationOrderRow NewDestinationOrderRow()
            {
                return ((DestinationOrderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new DestinationOrderRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(DestinationOrderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.DestinationOrderRowChanged != null))
                {
                    this.DestinationOrderRowChanged(this, new DestinationOrderRowChangeEvent(((DestinationOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.DestinationOrderRowChanging != null))
                {
                    this.DestinationOrderRowChanging(this, new DestinationOrderRowChangeEvent(((DestinationOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.DestinationOrderRowDeleted != null))
                {
                    this.DestinationOrderRowDeleted(this, new DestinationOrderRowChangeEvent(((DestinationOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.DestinationOrderRowDeleting != null))
                {
                    this.DestinationOrderRowDeleting(this, new DestinationOrderRowChangeEvent(((DestinationOrderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDestinationOrderRow(DestinationOrderRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DestinationOrderRow : Row
        {
            
            private DestinationOrderDataTable tableDestinationOrder;
            
            internal DestinationOrderRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableDestinationOrder = ((DestinationOrderDataTable)(this.Table));
            }
            
            public decimal CanceledQuantity
            {
                get
                {
                    return ((decimal)(this[this.tableDestinationOrder.CanceledQuantityColumn]));
                }
                set
                {
                    this[this.tableDestinationOrder.CanceledQuantityColumn] = value;
                }
            }
            
            public System.DateTime CanceledTime
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(this[this.tableDestinationOrder.CanceledTimeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestinationOrder.CanceledTimeColumn] = value;
                }
            }
            
            public System.DateTime CreatedTime
            {
                get
                {
                    return ((System.DateTime)(this[this.tableDestinationOrder.CreatedTimeColumn]));
                }
                set
                {
                    this[this.tableDestinationOrder.CreatedTimeColumn] = value;
                }
            }
            
            public int CreatedUserId
            {
                get
                {
                    return ((int)(this[this.tableDestinationOrder.CreatedUserIdColumn]));
                }
                set
                {
                    this[this.tableDestinationOrder.CreatedUserIdColumn] = value;
                }
            }
            
            public int DestinationId
            {
                get
                {
                    return ((int)(this[this.tableDestinationOrder.DestinationIdColumn]));
                }
                set
                {
                    this[this.tableDestinationOrder.DestinationIdColumn] = value;
                }
            }
            
            public int DestinationOrderId
            {
                get
                {
                    return ((int)(this[this.tableDestinationOrder.DestinationOrderIdColumn]));
                }
                set
                {
                    this[this.tableDestinationOrder.DestinationOrderIdColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDestinationOrder.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestinationOrder.ExternalId0Column] = value;
                }
            }
            
            public bool IsCanceledByUser
            {
                get
                {
                    return ((bool)(this[this.tableDestinationOrder.IsCanceledByUserColumn]));
                }
                set
                {
                    this[this.tableDestinationOrder.IsCanceledByUserColumn] = value;
                }
            }
            
            public bool IsHidden
            {
                get
                {
                    return ((bool)(this[this.tableDestinationOrder.IsHiddenColumn]));
                }
                set
                {
                    this[this.tableDestinationOrder.IsHiddenColumn] = value;
                }
            }
            
            public decimal LimitPrice
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableDestinationOrder.LimitPriceColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestinationOrder.LimitPriceColumn] = value;
                }
            }
            
            public System.DateTime ModifiedTime
            {
                get
                {
                    return ((System.DateTime)(this[this.tableDestinationOrder.ModifiedTimeColumn]));
                }
                set
                {
                    this[this.tableDestinationOrder.ModifiedTimeColumn] = value;
                }
            }
            
            public int ModifiedUserId
            {
                get
                {
                    return ((int)(this[this.tableDestinationOrder.ModifiedUserIdColumn]));
                }
                set
                {
                    this[this.tableDestinationOrder.ModifiedUserIdColumn] = value;
                }
            }
            
            public int OrderTypeCode
            {
                get
                {
                    return ((int)(this[this.tableDestinationOrder.OrderTypeCodeColumn]));
                }
                set
                {
                    this[this.tableDestinationOrder.OrderTypeCodeColumn] = value;
                }
            }
            
            public decimal OrderedQuantity
            {
                get
                {
                    return ((decimal)(this[this.tableDestinationOrder.OrderedQuantityColumn]));
                }
                set
                {
                    this[this.tableDestinationOrder.OrderedQuantityColumn] = value;
                }
            }
            
            public int PriceTypeCode
            {
                get
                {
                    return ((int)(this[this.tableDestinationOrder.PriceTypeCodeColumn]));
                }
                set
                {
                    this[this.tableDestinationOrder.PriceTypeCodeColumn] = value;
                }
            }
            
            public int StateCode
            {
                get
                {
                    return ((int)(this[this.tableDestinationOrder.StateCodeColumn]));
                }
                set
                {
                    this[this.tableDestinationOrder.StateCodeColumn] = value;
                }
            }
            
            public int StatusCode
            {
                get
                {
                    return ((int)(this[this.tableDestinationOrder.StatusCodeColumn]));
                }
                set
                {
                    this[this.tableDestinationOrder.StatusCodeColumn] = value;
                }
            }
            
            public decimal StopPrice
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableDestinationOrder.StopPriceColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestinationOrder.StopPriceColumn] = value;
                }
            }
            
            public int TraderId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableDestinationOrder.TraderIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDestinationOrder.TraderIdColumn] = value;
                }
            }
            
            public int TimeInForceCode
            {
                get
                {
                    return ((int)(this[this.tableDestinationOrder.TimeInForceCodeColumn]));
                }
                set
                {
                    this[this.tableDestinationOrder.TimeInForceCodeColumn] = value;
                }
            }
            
            public int WorkingOrderId
            {
                get
                {
                    return ((int)(this[this.tableDestinationOrder.WorkingOrderIdColumn]));
                }
                set
                {
                    this[this.tableDestinationOrder.WorkingOrderIdColumn] = value;
                }
            }
            
            public DestinationRow DestinationRow
            {
                get
                {
                    if ((DataSetMarket.lockDestination.IsReaderLockHeld || DataSetMarket.lockDestination.IsWriterLockHeld))
                    {
                        return ((DestinationRow)(this.GetParentRow(this.Table.ParentRelations["DestinationDestinationOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Destination"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["DestinationDestinationOrder"]);
                }
            }
            
            public PriceTypeRow PriceTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockPriceType.IsReaderLockHeld || DataSetMarket.lockPriceType.IsWriterLockHeld))
                    {
                        return ((PriceTypeRow)(this.GetParentRow(this.Table.ParentRelations["PriceTypeDestinationOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "PriceType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["PriceTypeDestinationOrder"]);
                }
            }
            
            public StateRow StateRow
            {
                get
                {
                    if ((DataSetMarket.lockState.IsReaderLockHeld || DataSetMarket.lockState.IsWriterLockHeld))
                    {
                        return ((StateRow)(this.GetParentRow(this.Table.ParentRelations["StateDestinationOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "State"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["StateDestinationOrder"]);
                }
            }
            
            public StatusRow StatusRow
            {
                get
                {
                    if ((DataSetMarket.lockStatus.IsReaderLockHeld || DataSetMarket.lockStatus.IsWriterLockHeld))
                    {
                        return ((StatusRow)(this.GetParentRow(this.Table.ParentRelations["StatusDestinationOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Status"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["StatusDestinationOrder"]);
                }
            }
            
            public TimeInForceRow TimeInForceRow
            {
                get
                {
                    if ((DataSetMarket.lockTimeInForce.IsReaderLockHeld || DataSetMarket.lockTimeInForce.IsWriterLockHeld))
                    {
                        return ((TimeInForceRow)(this.GetParentRow(this.Table.ParentRelations["TimeInForceDestinationOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "TimeInForce"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["TimeInForceDestinationOrder"]);
                }
            }
            
            public TraderRow TraderRow
            {
                get
                {
                    if ((DataSetMarket.lockTrader.IsReaderLockHeld || DataSetMarket.lockTrader.IsWriterLockHeld))
                    {
                        return ((TraderRow)(this.GetParentRow(this.Table.ParentRelations["TraderDestinationOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Trader"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["TraderDestinationOrder"]);
                }
            }
            
            public WorkingOrderRow WorkingOrderRow
            {
                get
                {
                    if ((DataSetMarket.lockWorkingOrder.IsReaderLockHeld || DataSetMarket.lockWorkingOrder.IsWriterLockHeld))
                    {
                        return ((WorkingOrderRow)(this.GetParentRow(this.Table.ParentRelations["WorkingOrderDestinationOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "WorkingOrder"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["WorkingOrderDestinationOrder"]);
                }
            }
            
            public bool IsCanceledTimeNull()
            {
                return this.IsNull(this.tableDestinationOrder.CanceledTimeColumn);
            }
            
            public void SetCanceledTimeNull()
            {
                this[this.tableDestinationOrder.CanceledTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableDestinationOrder.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableDestinationOrder.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsLimitPriceNull()
            {
                return this.IsNull(this.tableDestinationOrder.LimitPriceColumn);
            }
            
            public void SetLimitPriceNull()
            {
                this[this.tableDestinationOrder.LimitPriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsStopPriceNull()
            {
                return this.IsNull(this.tableDestinationOrder.StopPriceColumn);
            }
            
            public void SetStopPriceNull()
            {
                this[this.tableDestinationOrder.StopPriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsTraderIdNull()
            {
                return this.IsNull(this.tableDestinationOrder.TraderIdColumn);
            }
            
            public void SetTraderIdNull()
            {
                this[this.tableDestinationOrder.TraderIdColumn] = System.Convert.DBNull;
            }
            
            public ExecutionRow[] GetExecutionRows()
            {
                return ((ExecutionRow[])(this.GetChildRows(this.Table.ChildRelations["DestinationOrderExecution"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DestinationOrderRowChangeEvent : EventArgs
        {
            
            private DestinationOrderRow eventRow;
            
            private DataRowAction eventAction;
            
            public DestinationOrderRowChangeEvent(DestinationOrderRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DestinationOrderRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EquityDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnEquityId;
            
            private Column columnExchangeId;
            
            private Column columnIssuerId;
            
            private Column columnSettlementId;
            
            private Column columnSharesOutstanding;
            
            internal EquityDataTable() : 
                    base("Equity")
            {
                this.InitClass();
            }
            
            internal EquityDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column EquityIdColumn
            {
                get
                {
                    return this.columnEquityId;
                }
            }
            
            public Column ExchangeIdColumn
            {
                get
                {
                    return this.columnExchangeId;
                }
            }
            
            public Column IssuerIdColumn
            {
                get
                {
                    return this.columnIssuerId;
                }
            }
            
            public Column SettlementIdColumn
            {
                get
                {
                    return this.columnSettlementId;
                }
            }
            
            public Column SharesOutstandingColumn
            {
                get
                {
                    return this.columnSharesOutstanding;
                }
            }
            
            public EquityRow this[int index]
            {
                get
                {
                    return ((EquityRow)(this.Rows[index]));
                }
            }
            
            public event EquityRowChangeEventHandler EquityRowChanged;
            
            public event EquityRowChangeEventHandler EquityRowChanging;
            
            public event EquityRowChangeEventHandler EquityRowDeleted;
            
            public event EquityRowChangeEventHandler EquityRowDeleting;
            
            public void AddEquityRow(EquityRow row)
            {
                this.Rows.Add(row);
            }
            
            public EquityRow AddEquityRow(SecurityRow parentSecurityRowBySecurityEquityEquityId, ExchangeRow parentExchangeRowByExchangeEquity, int IssuerId, SecurityRow parentSecurityRowBySecurityEquitySettlementId, decimal SharesOutstanding)
            {
                EquityRow rowEquityRow = ((EquityRow)(this.NewRow()));
                rowEquityRow.ItemArray = new object[] {
                        parentSecurityRowBySecurityEquityEquityId[23],
                        parentExchangeRowByExchangeEquity[0],
                        IssuerId,
                        parentSecurityRowBySecurityEquitySettlementId[23],
                        SharesOutstanding};
                this.Rows.Add(rowEquityRow);
                return rowEquityRow;
            }
            
            public EquityRow FindByEquityId(int EquityId)
            {
                return ((EquityRow)(this.Rows.Find(new object[] {
                            EquityId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                EquityDataTable cln = ((EquityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new EquityDataTable();
            }
            
            internal void InitVars()
            {
                this.columnEquityId = this.Columns["EquityId"];
                this.columnExchangeId = this.Columns["ExchangeId"];
                this.columnIssuerId = this.Columns["IssuerId"];
                this.columnSettlementId = this.Columns["SettlementId"];
                this.columnSharesOutstanding = this.Columns["SharesOutstanding"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnEquityId = new Column("EquityId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEquityId);
                this.columnExchangeId = new Column("ExchangeId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExchangeId);
                this.columnIssuerId = new Column("IssuerId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIssuerId);
                this.columnSettlementId = new Column("SettlementId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSettlementId);
                this.columnSharesOutstanding = new Column("SharesOutstanding", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSharesOutstanding);
                this.Constraints.Add(new UniqueConstraint("KeyEquity", new DataColumn[] {
                                this.columnEquityId}, true));
                this.columnEquityId.AllowDBNull = false;
                this.columnEquityId.Unique = true;
                this.columnSettlementId.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.EquityLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Equity"));
                }
            }
            
            public EquityRow NewEquityRow()
            {
                return ((EquityRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new EquityRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(EquityRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.EquityRowChanged != null))
                {
                    this.EquityRowChanged(this, new EquityRowChangeEvent(((EquityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.EquityRowChanging != null))
                {
                    this.EquityRowChanging(this, new EquityRowChangeEvent(((EquityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.EquityRowDeleted != null))
                {
                    this.EquityRowDeleted(this, new EquityRowChangeEvent(((EquityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.EquityRowDeleting != null))
                {
                    this.EquityRowDeleting(this, new EquityRowChangeEvent(((EquityRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEquityRow(EquityRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EquityRow : Row
        {
            
            private EquityDataTable tableEquity;
            
            internal EquityRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableEquity = ((EquityDataTable)(this.Table));
            }
            
            public int EquityId
            {
                get
                {
                    return ((int)(this[this.tableEquity.EquityIdColumn]));
                }
                set
                {
                    this[this.tableEquity.EquityIdColumn] = value;
                }
            }
            
            public int ExchangeId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableEquity.ExchangeIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableEquity.ExchangeIdColumn] = value;
                }
            }
            
            public int IssuerId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableEquity.IssuerIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableEquity.IssuerIdColumn] = value;
                }
            }
            
            public int SettlementId
            {
                get
                {
                    return ((int)(this[this.tableEquity.SettlementIdColumn]));
                }
                set
                {
                    this[this.tableEquity.SettlementIdColumn] = value;
                }
            }
            
            public decimal SharesOutstanding
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableEquity.SharesOutstandingColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableEquity.SharesOutstandingColumn] = value;
                }
            }
            
            public ExchangeRow ExchangeRow
            {
                get
                {
                    if ((DataSetMarket.lockExchange.IsReaderLockHeld || DataSetMarket.lockExchange.IsWriterLockHeld))
                    {
                        return ((ExchangeRow)(this.GetParentRow(this.Table.ParentRelations["ExchangeEquity"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Exchange"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["ExchangeEquity"]);
                }
            }
            
            public SecurityRow SecurityRowBySecurityEquityEquityId
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["SecurityEquityEquityId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["SecurityEquityEquityId"]);
                }
            }
            
            public SecurityRow SecurityRowBySecurityEquitySettlementId
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["SecurityEquitySettlementId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["SecurityEquitySettlementId"]);
                }
            }
            
            public bool IsExchangeIdNull()
            {
                return this.IsNull(this.tableEquity.ExchangeIdColumn);
            }
            
            public void SetExchangeIdNull()
            {
                this[this.tableEquity.ExchangeIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsIssuerIdNull()
            {
                return this.IsNull(this.tableEquity.IssuerIdColumn);
            }
            
            public void SetIssuerIdNull()
            {
                this[this.tableEquity.IssuerIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsSharesOutstandingNull()
            {
                return this.IsNull(this.tableEquity.SharesOutstandingColumn);
            }
            
            public void SetSharesOutstandingNull()
            {
                this[this.tableEquity.SharesOutstandingColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EquityRowChangeEvent : EventArgs
        {
            
            private EquityRow eventRow;
            
            private DataRowAction eventAction;
            
            public EquityRowChangeEvent(EquityRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public EquityRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ExchangeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnExchangeId;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private Column columnName;
            
            private DataView viewKeyExchangeExternalId0;
            
            private DataView viewKeyExchangeExternalId1;
            
            private DataView viewKeyExchangeExternalId2;
            
            private DataView viewKeyExchangeExternalId3;
            
            internal ExchangeDataTable() : 
                    base("Exchange")
            {
                this.InitClass();
            }
            
            internal ExchangeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ExchangeIdColumn
            {
                get
                {
                    return this.columnExchangeId;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public Column NameColumn
            {
                get
                {
                    return this.columnName;
                }
            }
            
            public DataView KeyExchangeExternalId0
            {
                get
                {
                    return this.viewKeyExchangeExternalId0;
                }
            }
            
            public DataView KeyExchangeExternalId1
            {
                get
                {
                    return this.viewKeyExchangeExternalId1;
                }
            }
            
            public DataView KeyExchangeExternalId2
            {
                get
                {
                    return this.viewKeyExchangeExternalId2;
                }
            }
            
            public DataView KeyExchangeExternalId3
            {
                get
                {
                    return this.viewKeyExchangeExternalId3;
                }
            }
            
            public ExchangeRow this[int index]
            {
                get
                {
                    return ((ExchangeRow)(this.Rows[index]));
                }
            }
            
            public event ExchangeRowChangeEventHandler ExchangeRowChanged;
            
            public event ExchangeRowChangeEventHandler ExchangeRowChanging;
            
            public event ExchangeRowChangeEventHandler ExchangeRowDeleted;
            
            public event ExchangeRowChangeEventHandler ExchangeRowDeleting;
            
            public void AddExchangeRow(ExchangeRow row)
            {
                this.Rows.Add(row);
            }
            
            public ExchangeRow AddExchangeRow(string ExternalId0, string ExternalId1, string ExternalId2, string ExternalId3, string Name)
            {
                ExchangeRow rowExchangeRow = ((ExchangeRow)(this.NewRow()));
                rowExchangeRow.ItemArray = new object[] {
                        null,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3,
                        Name};
                this.Rows.Add(rowExchangeRow);
                return rowExchangeRow;
            }
            
            public ExchangeRow FindByExchangeId(int ExchangeId)
            {
                return ((ExchangeRow)(this.Rows.Find(new object[] {
                            ExchangeId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                ExchangeDataTable cln = ((ExchangeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new ExchangeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnExchangeId = this.Columns["ExchangeId"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
                this.columnName = this.Columns["Name"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnExchangeId = new Column("ExchangeId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExchangeId);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.columnName = new Column("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.Constraints.Add(new UniqueConstraint("KeyExchange", new DataColumn[] {
                                this.columnExchangeId}, true));
                this.viewKeyExchangeExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewKeyExchangeExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.viewKeyExchangeExternalId2 = new DataView(this, null, "ExternalId2", DataViewRowState.CurrentRows);
                this.viewKeyExchangeExternalId3 = new DataView(this, null, "ExternalId3", DataViewRowState.CurrentRows);
                this.columnExchangeId.AutoIncrement = true;
                this.columnExchangeId.AllowDBNull = false;
                this.columnExchangeId.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.ExchangeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Exchange"));
                }
            }
            
            public ExchangeRow NewExchangeRow()
            {
                return ((ExchangeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ExchangeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(ExchangeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ExchangeRowChanged != null))
                {
                    this.ExchangeRowChanged(this, new ExchangeRowChangeEvent(((ExchangeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ExchangeRowChanging != null))
                {
                    this.ExchangeRowChanging(this, new ExchangeRowChangeEvent(((ExchangeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ExchangeRowDeleted != null))
                {
                    this.ExchangeRowDeleted(this, new ExchangeRowChangeEvent(((ExchangeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ExchangeRowDeleting != null))
                {
                    this.ExchangeRowDeleting(this, new ExchangeRowChangeEvent(((ExchangeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveExchangeRow(ExchangeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ExchangeRow : Row
        {
            
            private ExchangeDataTable tableExchange;
            
            internal ExchangeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableExchange = ((ExchangeDataTable)(this.Table));
            }
            
            public int ExchangeId
            {
                get
                {
                    return ((int)(this[this.tableExchange.ExchangeIdColumn]));
                }
                set
                {
                    this[this.tableExchange.ExchangeIdColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableExchange.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableExchange.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableExchange.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableExchange.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableExchange.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableExchange.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableExchange.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableExchange.ExternalId3Column] = value;
                }
            }
            
            public string Name
            {
                get
                {
                    return ((string)(this[this.tableExchange.NameColumn]));
                }
                set
                {
                    this[this.tableExchange.NameColumn] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableExchange.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableExchange.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableExchange.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableExchange.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableExchange.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableExchange.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableExchange.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableExchange.ExternalId3Column] = System.Convert.DBNull;
            }
            
            public EquityRow[] GetEquityRows()
            {
                return ((EquityRow[])(this.GetChildRows(this.Table.ChildRelations["ExchangeEquity"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ExchangeRowChangeEvent : EventArgs
        {
            
            private ExchangeRow eventRow;
            
            private DataRowAction eventAction;
            
            public ExchangeRowChangeEvent(ExchangeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ExchangeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ExecutionDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnAccruedInterest;
            
            private Column columnBrokerAccountId;
            
            private Column columnBrokerId;
            
            private Column columnCommission;
            
            private Column columnCreatedTime;
            
            private Column columnCreatedUserId;
            
            private Column columnDestinationOrderId;
            
            private Column columnDestinationStateCode;
            
            private Column columnExecutionId;
            
            private Column columnExecutionPrice;
            
            private Column columnExecutionQuantity;
            
            private Column columnExternalId0;
            
            private Column columnFixMessageId;
            
            private Column columnIsHidden;
            
            private Column columnModifiedTime;
            
            private Column columnModifiedUserId;
            
            private Column columnOriginalDestinationOrderId;
            
            private Column columnOriginalPrice;
            
            private Column columnOriginalQuantity;
            
            private Column columnSettlementDate;
            
            private Column columnSourceExecutionId;
            
            private Column columnSourceStateCode;
            
            private Column columnTradeDate;
            
            private Column columnUserFee0;
            
            private Column columnUserFee1;
            
            private Column columnUserFee2;
            
            private Column columnUserFee3;
            
            private DataView viewKeyExecutionExternalId0;
            
            internal ExecutionDataTable() : 
                    base("Execution")
            {
                this.InitClass();
            }
            
            internal ExecutionDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column AccruedInterestColumn
            {
                get
                {
                    return this.columnAccruedInterest;
                }
            }
            
            public Column BrokerAccountIdColumn
            {
                get
                {
                    return this.columnBrokerAccountId;
                }
            }
            
            public Column BrokerIdColumn
            {
                get
                {
                    return this.columnBrokerId;
                }
            }
            
            public Column CommissionColumn
            {
                get
                {
                    return this.columnCommission;
                }
            }
            
            public Column CreatedTimeColumn
            {
                get
                {
                    return this.columnCreatedTime;
                }
            }
            
            public Column CreatedUserIdColumn
            {
                get
                {
                    return this.columnCreatedUserId;
                }
            }
            
            public Column DestinationOrderIdColumn
            {
                get
                {
                    return this.columnDestinationOrderId;
                }
            }
            
            public Column DestinationStateCodeColumn
            {
                get
                {
                    return this.columnDestinationStateCode;
                }
            }
            
            public Column ExecutionIdColumn
            {
                get
                {
                    return this.columnExecutionId;
                }
            }
            
            public Column ExecutionPriceColumn
            {
                get
                {
                    return this.columnExecutionPrice;
                }
            }
            
            public Column ExecutionQuantityColumn
            {
                get
                {
                    return this.columnExecutionQuantity;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column FixMessageIdColumn
            {
                get
                {
                    return this.columnFixMessageId;
                }
            }
            
            public Column IsHiddenColumn
            {
                get
                {
                    return this.columnIsHidden;
                }
            }
            
            public Column ModifiedTimeColumn
            {
                get
                {
                    return this.columnModifiedTime;
                }
            }
            
            public Column ModifiedUserIdColumn
            {
                get
                {
                    return this.columnModifiedUserId;
                }
            }
            
            public Column OriginalDestinationOrderIdColumn
            {
                get
                {
                    return this.columnOriginalDestinationOrderId;
                }
            }
            
            public Column OriginalPriceColumn
            {
                get
                {
                    return this.columnOriginalPrice;
                }
            }
            
            public Column OriginalQuantityColumn
            {
                get
                {
                    return this.columnOriginalQuantity;
                }
            }
            
            public Column SettlementDateColumn
            {
                get
                {
                    return this.columnSettlementDate;
                }
            }
            
            public Column SourceExecutionIdColumn
            {
                get
                {
                    return this.columnSourceExecutionId;
                }
            }
            
            public Column SourceStateCodeColumn
            {
                get
                {
                    return this.columnSourceStateCode;
                }
            }
            
            public Column TradeDateColumn
            {
                get
                {
                    return this.columnTradeDate;
                }
            }
            
            public Column UserFee0Column
            {
                get
                {
                    return this.columnUserFee0;
                }
            }
            
            public Column UserFee1Column
            {
                get
                {
                    return this.columnUserFee1;
                }
            }
            
            public Column UserFee2Column
            {
                get
                {
                    return this.columnUserFee2;
                }
            }
            
            public Column UserFee3Column
            {
                get
                {
                    return this.columnUserFee3;
                }
            }
            
            public DataView KeyExecutionExternalId0
            {
                get
                {
                    return this.viewKeyExecutionExternalId0;
                }
            }
            
            public ExecutionRow this[int index]
            {
                get
                {
                    return ((ExecutionRow)(this.Rows[index]));
                }
            }
            
            public event ExecutionRowChangeEventHandler ExecutionRowChanged;
            
            public event ExecutionRowChangeEventHandler ExecutionRowChanging;
            
            public event ExecutionRowChangeEventHandler ExecutionRowDeleted;
            
            public event ExecutionRowChangeEventHandler ExecutionRowDeleting;
            
            public void AddExecutionRow(ExecutionRow row)
            {
                this.Rows.Add(row);
            }
            
            public ExecutionRow AddExecutionRow(
                        decimal AccruedInterest, 
                        BrokerAccountRow parentBrokerAccountRowByBrokerAccountExecution, 
                        BrokerRow parentBrokerRowByBrokerExecution, 
                        decimal Commission, 
                        System.DateTime CreatedTime, 
                        UserRow parentUserRowByUserExecutionCreatedUserId, 
                        DestinationOrderRow parentDestinationOrderRowByDestinationOrderExecution, 
                        StateRow parentStateRowByStateExecutionDestinationStateCode, 
                        decimal ExecutionPrice, 
                        decimal ExecutionQuantity, 
                        string ExternalId0, 
                        int FixMessageId, 
                        bool IsHidden, 
                        System.DateTime ModifiedTime, 
                        UserRow parentUserRowByUserExecutionModifiedUserId, 
                        int OriginalDestinationOrderId, 
                        decimal OriginalPrice, 
                        decimal OriginalQuantity, 
                        System.DateTime SettlementDate, 
                        string SourceExecutionId, 
                        StateRow parentStateRowByStateExecutionSourceStateCode, 
                        System.DateTime TradeDate, 
                        decimal UserFee0, 
                        decimal UserFee1, 
                        decimal UserFee2, 
                        decimal UserFee3)
            {
                ExecutionRow rowExecutionRow = ((ExecutionRow)(this.NewRow()));
                rowExecutionRow.ItemArray = new object[] {
                        AccruedInterest,
                        parentBrokerAccountRowByBrokerAccountExecution[0],
                        parentBrokerRowByBrokerExecution[35],
                        Commission,
                        CreatedTime,
                        parentUserRowByUserExecutionCreatedUserId[20],
                        parentDestinationOrderRowByDestinationOrderExecution[5],
                        parentStateRowByStateExecutionDestinationStateCode[6],
                        null,
                        ExecutionPrice,
                        ExecutionQuantity,
                        ExternalId0,
                        FixMessageId,
                        IsHidden,
                        ModifiedTime,
                        parentUserRowByUserExecutionModifiedUserId[20],
                        OriginalDestinationOrderId,
                        OriginalPrice,
                        OriginalQuantity,
                        SettlementDate,
                        SourceExecutionId,
                        parentStateRowByStateExecutionSourceStateCode[6],
                        TradeDate,
                        UserFee0,
                        UserFee1,
                        UserFee2,
                        UserFee3};
                this.Rows.Add(rowExecutionRow);
                return rowExecutionRow;
            }
            
            public ExecutionRow FindByExecutionId(int ExecutionId)
            {
                return ((ExecutionRow)(this.Rows.Find(new object[] {
                            ExecutionId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                ExecutionDataTable cln = ((ExecutionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new ExecutionDataTable();
            }
            
            internal void InitVars()
            {
                this.columnAccruedInterest = this.Columns["AccruedInterest"];
                this.columnBrokerAccountId = this.Columns["BrokerAccountId"];
                this.columnBrokerId = this.Columns["BrokerId"];
                this.columnCommission = this.Columns["Commission"];
                this.columnCreatedTime = this.Columns["CreatedTime"];
                this.columnCreatedUserId = this.Columns["CreatedUserId"];
                this.columnDestinationOrderId = this.Columns["DestinationOrderId"];
                this.columnDestinationStateCode = this.Columns["DestinationStateCode"];
                this.columnExecutionId = this.Columns["ExecutionId"];
                this.columnExecutionPrice = this.Columns["ExecutionPrice"];
                this.columnExecutionQuantity = this.Columns["ExecutionQuantity"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnFixMessageId = this.Columns["FixMessageId"];
                this.columnIsHidden = this.Columns["IsHidden"];
                this.columnModifiedTime = this.Columns["ModifiedTime"];
                this.columnModifiedUserId = this.Columns["ModifiedUserId"];
                this.columnOriginalDestinationOrderId = this.Columns["OriginalDestinationOrderId"];
                this.columnOriginalPrice = this.Columns["OriginalPrice"];
                this.columnOriginalQuantity = this.Columns["OriginalQuantity"];
                this.columnSettlementDate = this.Columns["SettlementDate"];
                this.columnSourceExecutionId = this.Columns["SourceExecutionId"];
                this.columnSourceStateCode = this.Columns["SourceStateCode"];
                this.columnTradeDate = this.Columns["TradeDate"];
                this.columnUserFee0 = this.Columns["UserFee0"];
                this.columnUserFee1 = this.Columns["UserFee1"];
                this.columnUserFee2 = this.Columns["UserFee2"];
                this.columnUserFee3 = this.Columns["UserFee3"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnAccruedInterest = new Column("AccruedInterest", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccruedInterest);
                this.columnBrokerAccountId = new Column("BrokerAccountId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBrokerAccountId);
                this.columnBrokerId = new Column("BrokerId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBrokerId);
                this.columnCommission = new Column("Commission", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCommission);
                this.columnCreatedTime = new Column("CreatedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedTime);
                this.columnCreatedUserId = new Column("CreatedUserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedUserId);
                this.columnDestinationOrderId = new Column("DestinationOrderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDestinationOrderId);
                this.columnDestinationStateCode = new Column("DestinationStateCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDestinationStateCode);
                this.columnExecutionId = new Column("ExecutionId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExecutionId);
                this.columnExecutionPrice = new Column("ExecutionPrice", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExecutionPrice);
                this.columnExecutionQuantity = new Column("ExecutionQuantity", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExecutionQuantity);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnFixMessageId = new Column("FixMessageId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixMessageId);
                this.columnIsHidden = new Column("IsHidden", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsHidden);
                this.columnModifiedTime = new Column("ModifiedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedTime);
                this.columnModifiedUserId = new Column("ModifiedUserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedUserId);
                this.columnOriginalDestinationOrderId = new Column("OriginalDestinationOrderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOriginalDestinationOrderId);
                this.columnOriginalPrice = new Column("OriginalPrice", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOriginalPrice);
                this.columnOriginalQuantity = new Column("OriginalQuantity", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOriginalQuantity);
                this.columnSettlementDate = new Column("SettlementDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSettlementDate);
                this.columnSourceExecutionId = new Column("SourceExecutionId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSourceExecutionId);
                this.columnSourceStateCode = new Column("SourceStateCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSourceStateCode);
                this.columnTradeDate = new Column("TradeDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTradeDate);
                this.columnUserFee0 = new Column("UserFee0", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserFee0);
                this.columnUserFee1 = new Column("UserFee1", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserFee1);
                this.columnUserFee2 = new Column("UserFee2", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserFee2);
                this.columnUserFee3 = new Column("UserFee3", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserFee3);
                this.Constraints.Add(new UniqueConstraint("KeyExecution", new DataColumn[] {
                                this.columnExecutionId}, true));
                this.viewKeyExecutionExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.columnAccruedInterest.AllowDBNull = false;
                this.columnAccruedInterest.DefaultValue = 0.0m;
                this.columnCommission.AllowDBNull = false;
                this.columnCommission.DefaultValue = 0.0m;
                this.columnDestinationOrderId.AllowDBNull = false;
                this.columnDestinationStateCode.AllowDBNull = false;
                this.columnExecutionId.AutoIncrement = true;
                this.columnExecutionId.AllowDBNull = false;
                this.columnExecutionId.Unique = true;
                this.columnExecutionPrice.AllowDBNull = false;
                this.columnExecutionQuantity.AllowDBNull = false;
                this.columnIsHidden.AllowDBNull = false;
                this.columnIsHidden.DefaultValue = false;
                this.columnSettlementDate.AllowDBNull = false;
                this.columnSourceStateCode.AllowDBNull = false;
                this.columnTradeDate.AllowDBNull = false;
                this.columnUserFee0.AllowDBNull = false;
                this.columnUserFee0.DefaultValue = 0.0m;
                this.columnUserFee1.AllowDBNull = false;
                this.columnUserFee1.DefaultValue = 0.0m;
                this.columnUserFee2.AllowDBNull = false;
                this.columnUserFee2.DefaultValue = 0.0m;
                this.columnUserFee3.AllowDBNull = false;
                this.columnUserFee3.DefaultValue = 0.0m;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.ExecutionLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Execution"));
                }
            }
            
            public ExecutionRow NewExecutionRow()
            {
                return ((ExecutionRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ExecutionRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(ExecutionRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ExecutionRowChanged != null))
                {
                    this.ExecutionRowChanged(this, new ExecutionRowChangeEvent(((ExecutionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ExecutionRowChanging != null))
                {
                    this.ExecutionRowChanging(this, new ExecutionRowChangeEvent(((ExecutionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ExecutionRowDeleted != null))
                {
                    this.ExecutionRowDeleted(this, new ExecutionRowChangeEvent(((ExecutionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ExecutionRowDeleting != null))
                {
                    this.ExecutionRowDeleting(this, new ExecutionRowChangeEvent(((ExecutionRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveExecutionRow(ExecutionRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ExecutionRow : Row
        {
            
            private ExecutionDataTable tableExecution;
            
            internal ExecutionRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableExecution = ((ExecutionDataTable)(this.Table));
            }
            
            public decimal AccruedInterest
            {
                get
                {
                    return ((decimal)(this[this.tableExecution.AccruedInterestColumn]));
                }
                set
                {
                    this[this.tableExecution.AccruedInterestColumn] = value;
                }
            }
            
            public int BrokerAccountId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableExecution.BrokerAccountIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableExecution.BrokerAccountIdColumn] = value;
                }
            }
            
            public int BrokerId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableExecution.BrokerIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableExecution.BrokerIdColumn] = value;
                }
            }
            
            public decimal Commission
            {
                get
                {
                    return ((decimal)(this[this.tableExecution.CommissionColumn]));
                }
                set
                {
                    this[this.tableExecution.CommissionColumn] = value;
                }
            }
            
            public System.DateTime CreatedTime
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(this[this.tableExecution.CreatedTimeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableExecution.CreatedTimeColumn] = value;
                }
            }
            
            public int CreatedUserId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableExecution.CreatedUserIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableExecution.CreatedUserIdColumn] = value;
                }
            }
            
            public int DestinationOrderId
            {
                get
                {
                    return ((int)(this[this.tableExecution.DestinationOrderIdColumn]));
                }
                set
                {
                    this[this.tableExecution.DestinationOrderIdColumn] = value;
                }
            }
            
            public int DestinationStateCode
            {
                get
                {
                    return ((int)(this[this.tableExecution.DestinationStateCodeColumn]));
                }
                set
                {
                    this[this.tableExecution.DestinationStateCodeColumn] = value;
                }
            }
            
            public int ExecutionId
            {
                get
                {
                    return ((int)(this[this.tableExecution.ExecutionIdColumn]));
                }
                set
                {
                    this[this.tableExecution.ExecutionIdColumn] = value;
                }
            }
            
            public decimal ExecutionPrice
            {
                get
                {
                    return ((decimal)(this[this.tableExecution.ExecutionPriceColumn]));
                }
                set
                {
                    this[this.tableExecution.ExecutionPriceColumn] = value;
                }
            }
            
            public decimal ExecutionQuantity
            {
                get
                {
                    return ((decimal)(this[this.tableExecution.ExecutionQuantityColumn]));
                }
                set
                {
                    this[this.tableExecution.ExecutionQuantityColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableExecution.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableExecution.ExternalId0Column] = value;
                }
            }
            
            public int FixMessageId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableExecution.FixMessageIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableExecution.FixMessageIdColumn] = value;
                }
            }
            
            public bool IsHidden
            {
                get
                {
                    return ((bool)(this[this.tableExecution.IsHiddenColumn]));
                }
                set
                {
                    this[this.tableExecution.IsHiddenColumn] = value;
                }
            }
            
            public System.DateTime ModifiedTime
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(this[this.tableExecution.ModifiedTimeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableExecution.ModifiedTimeColumn] = value;
                }
            }
            
            public int ModifiedUserId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableExecution.ModifiedUserIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableExecution.ModifiedUserIdColumn] = value;
                }
            }
            
            public int OriginalDestinationOrderId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableExecution.OriginalDestinationOrderIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableExecution.OriginalDestinationOrderIdColumn] = value;
                }
            }
            
            public decimal OriginalPrice
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableExecution.OriginalPriceColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableExecution.OriginalPriceColumn] = value;
                }
            }
            
            public decimal OriginalQuantity
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableExecution.OriginalQuantityColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableExecution.OriginalQuantityColumn] = value;
                }
            }
            
            public System.DateTime SettlementDate
            {
                get
                {
                    return ((System.DateTime)(this[this.tableExecution.SettlementDateColumn]));
                }
                set
                {
                    this[this.tableExecution.SettlementDateColumn] = value;
                }
            }
            
            public string SourceExecutionId
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableExecution.SourceExecutionIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableExecution.SourceExecutionIdColumn] = value;
                }
            }
            
            public int SourceStateCode
            {
                get
                {
                    return ((int)(this[this.tableExecution.SourceStateCodeColumn]));
                }
                set
                {
                    this[this.tableExecution.SourceStateCodeColumn] = value;
                }
            }
            
            public System.DateTime TradeDate
            {
                get
                {
                    return ((System.DateTime)(this[this.tableExecution.TradeDateColumn]));
                }
                set
                {
                    this[this.tableExecution.TradeDateColumn] = value;
                }
            }
            
            public decimal UserFee0
            {
                get
                {
                    return ((decimal)(this[this.tableExecution.UserFee0Column]));
                }
                set
                {
                    this[this.tableExecution.UserFee0Column] = value;
                }
            }
            
            public decimal UserFee1
            {
                get
                {
                    return ((decimal)(this[this.tableExecution.UserFee1Column]));
                }
                set
                {
                    this[this.tableExecution.UserFee1Column] = value;
                }
            }
            
            public decimal UserFee2
            {
                get
                {
                    return ((decimal)(this[this.tableExecution.UserFee2Column]));
                }
                set
                {
                    this[this.tableExecution.UserFee2Column] = value;
                }
            }
            
            public decimal UserFee3
            {
                get
                {
                    return ((decimal)(this[this.tableExecution.UserFee3Column]));
                }
                set
                {
                    this[this.tableExecution.UserFee3Column] = value;
                }
            }
            
            public BrokerAccountRow BrokerAccountRow
            {
                get
                {
                    if ((DataSetMarket.lockBrokerAccount.IsReaderLockHeld || DataSetMarket.lockBrokerAccount.IsWriterLockHeld))
                    {
                        return ((BrokerAccountRow)(this.GetParentRow(this.Table.ParentRelations["BrokerAccountExecution"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "BrokerAccount"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["BrokerAccountExecution"]);
                }
            }
            
            public BrokerRow BrokerRow
            {
                get
                {
                    if ((DataSetMarket.lockBroker.IsReaderLockHeld || DataSetMarket.lockBroker.IsWriterLockHeld))
                    {
                        return ((BrokerRow)(this.GetParentRow(this.Table.ParentRelations["BrokerExecution"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Broker"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["BrokerExecution"]);
                }
            }
            
            public DestinationOrderRow DestinationOrderRow
            {
                get
                {
                    if ((DataSetMarket.lockDestinationOrder.IsReaderLockHeld || DataSetMarket.lockDestinationOrder.IsWriterLockHeld))
                    {
                        return ((DestinationOrderRow)(this.GetParentRow(this.Table.ParentRelations["DestinationOrderExecution"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "DestinationOrder"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["DestinationOrderExecution"]);
                }
            }
            
            public StateRow StateRowByStateExecutionDestinationStateCode
            {
                get
                {
                    if ((DataSetMarket.lockState.IsReaderLockHeld || DataSetMarket.lockState.IsWriterLockHeld))
                    {
                        return ((StateRow)(this.GetParentRow(this.Table.ParentRelations["StateExecutionDestinationStateCode"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "State"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["StateExecutionDestinationStateCode"]);
                }
            }
            
            public StateRow StateRowByStateExecutionSourceStateCode
            {
                get
                {
                    if ((DataSetMarket.lockState.IsReaderLockHeld || DataSetMarket.lockState.IsWriterLockHeld))
                    {
                        return ((StateRow)(this.GetParentRow(this.Table.ParentRelations["StateExecutionSourceStateCode"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "State"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["StateExecutionSourceStateCode"]);
                }
            }
            
            public UserRow UserRowByUserExecutionCreatedUserId
            {
                get
                {
                    if ((DataSetMarket.lockUser.IsReaderLockHeld || DataSetMarket.lockUser.IsWriterLockHeld))
                    {
                        return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["UserExecutionCreatedUserId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "User"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["UserExecutionCreatedUserId"]);
                }
            }
            
            public UserRow UserRowByUserExecutionModifiedUserId
            {
                get
                {
                    if ((DataSetMarket.lockUser.IsReaderLockHeld || DataSetMarket.lockUser.IsWriterLockHeld))
                    {
                        return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["UserExecutionModifiedUserId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "User"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["UserExecutionModifiedUserId"]);
                }
            }
            
            public bool IsBrokerAccountIdNull()
            {
                return this.IsNull(this.tableExecution.BrokerAccountIdColumn);
            }
            
            public void SetBrokerAccountIdNull()
            {
                this[this.tableExecution.BrokerAccountIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsBrokerIdNull()
            {
                return this.IsNull(this.tableExecution.BrokerIdColumn);
            }
            
            public void SetBrokerIdNull()
            {
                this[this.tableExecution.BrokerIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsCreatedTimeNull()
            {
                return this.IsNull(this.tableExecution.CreatedTimeColumn);
            }
            
            public void SetCreatedTimeNull()
            {
                this[this.tableExecution.CreatedTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCreatedUserIdNull()
            {
                return this.IsNull(this.tableExecution.CreatedUserIdColumn);
            }
            
            public void SetCreatedUserIdNull()
            {
                this[this.tableExecution.CreatedUserIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableExecution.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableExecution.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsFixMessageIdNull()
            {
                return this.IsNull(this.tableExecution.FixMessageIdColumn);
            }
            
            public void SetFixMessageIdNull()
            {
                this[this.tableExecution.FixMessageIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsModifiedTimeNull()
            {
                return this.IsNull(this.tableExecution.ModifiedTimeColumn);
            }
            
            public void SetModifiedTimeNull()
            {
                this[this.tableExecution.ModifiedTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsModifiedUserIdNull()
            {
                return this.IsNull(this.tableExecution.ModifiedUserIdColumn);
            }
            
            public void SetModifiedUserIdNull()
            {
                this[this.tableExecution.ModifiedUserIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsOriginalDestinationOrderIdNull()
            {
                return this.IsNull(this.tableExecution.OriginalDestinationOrderIdColumn);
            }
            
            public void SetOriginalDestinationOrderIdNull()
            {
                this[this.tableExecution.OriginalDestinationOrderIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsOriginalPriceNull()
            {
                return this.IsNull(this.tableExecution.OriginalPriceColumn);
            }
            
            public void SetOriginalPriceNull()
            {
                this[this.tableExecution.OriginalPriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsOriginalQuantityNull()
            {
                return this.IsNull(this.tableExecution.OriginalQuantityColumn);
            }
            
            public void SetOriginalQuantityNull()
            {
                this[this.tableExecution.OriginalQuantityColumn] = System.Convert.DBNull;
            }
            
            public bool IsSourceExecutionIdNull()
            {
                return this.IsNull(this.tableExecution.SourceExecutionIdColumn);
            }
            
            public void SetSourceExecutionIdNull()
            {
                this[this.tableExecution.SourceExecutionIdColumn] = System.Convert.DBNull;
            }
            
            public NegotiationRow[] GetNegotiationRows()
            {
                return ((NegotiationRow[])(this.GetChildRows(this.Table.ChildRelations["ExecutionNegotiation"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ExecutionRowChangeEvent : EventArgs
        {
            
            private ExecutionRow eventRow;
            
            private DataRowAction eventAction;
            
            public ExecutionRowChangeEvent(ExecutionRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ExecutionRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FixMessageDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnFixMessageId;
            
            private Column columnTag;
            
            private Column columnValue;
            
            internal FixMessageDataTable() : 
                    base("FixMessage")
            {
                this.InitClass();
            }
            
            internal FixMessageDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column FixMessageIdColumn
            {
                get
                {
                    return this.columnFixMessageId;
                }
            }
            
            public Column TagColumn
            {
                get
                {
                    return this.columnTag;
                }
            }
            
            public Column ValueColumn
            {
                get
                {
                    return this.columnValue;
                }
            }
            
            public FixMessageRow this[int index]
            {
                get
                {
                    return ((FixMessageRow)(this.Rows[index]));
                }
            }
            
            public event FixMessageRowChangeEventHandler FixMessageRowChanged;
            
            public event FixMessageRowChangeEventHandler FixMessageRowChanging;
            
            public event FixMessageRowChangeEventHandler FixMessageRowDeleted;
            
            public event FixMessageRowChangeEventHandler FixMessageRowDeleting;
            
            public void AddFixMessageRow(FixMessageRow row)
            {
                this.Rows.Add(row);
            }
            
            public FixMessageRow AddFixMessageRow(int FixMessageId, int Tag, object Value)
            {
                FixMessageRow rowFixMessageRow = ((FixMessageRow)(this.NewRow()));
                rowFixMessageRow.ItemArray = new object[] {
                        FixMessageId,
                        Tag,
                        Value};
                this.Rows.Add(rowFixMessageRow);
                return rowFixMessageRow;
            }
            
            public FixMessageRow FindByFixMessageIdTag(int FixMessageId, int Tag)
            {
                return ((FixMessageRow)(this.Rows.Find(new object[] {
                            FixMessageId,
                            Tag})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                FixMessageDataTable cln = ((FixMessageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new FixMessageDataTable();
            }
            
            internal void InitVars()
            {
                this.columnFixMessageId = this.Columns["FixMessageId"];
                this.columnTag = this.Columns["Tag"];
                this.columnValue = this.Columns["Value"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnFixMessageId = new Column("FixMessageId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixMessageId);
                this.columnTag = new Column("Tag", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTag);
                this.Constraints.Add(new UniqueConstraint("KeyFixMessage", new DataColumn[] {
                                this.columnFixMessageId,
                                this.columnTag}, true));
                this.columnFixMessageId.AllowDBNull = false;
                this.columnTag.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.FixMessageLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "FixMessage"));
                }
            }
            
            public FixMessageRow NewFixMessageRow()
            {
                return ((FixMessageRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new FixMessageRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(FixMessageRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.FixMessageRowChanged != null))
                {
                    this.FixMessageRowChanged(this, new FixMessageRowChangeEvent(((FixMessageRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.FixMessageRowChanging != null))
                {
                    this.FixMessageRowChanging(this, new FixMessageRowChangeEvent(((FixMessageRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.FixMessageRowDeleted != null))
                {
                    this.FixMessageRowDeleted(this, new FixMessageRowChangeEvent(((FixMessageRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.FixMessageRowDeleting != null))
                {
                    this.FixMessageRowDeleting(this, new FixMessageRowChangeEvent(((FixMessageRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFixMessageRow(FixMessageRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FixMessageRow : Row
        {
            
            private FixMessageDataTable tableFixMessage;
            
            internal FixMessageRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableFixMessage = ((FixMessageDataTable)(this.Table));
            }
            
            public int FixMessageId
            {
                get
                {
                    return ((int)(this[this.tableFixMessage.FixMessageIdColumn]));
                }
                set
                {
                    this[this.tableFixMessage.FixMessageIdColumn] = value;
                }
            }
            
            public int Tag
            {
                get
                {
                    return ((int)(this[this.tableFixMessage.TagColumn]));
                }
                set
                {
                    this[this.tableFixMessage.TagColumn] = value;
                }
            }
            
            public object Value
            {
                get
                {
                    return this[this.tableFixMessage.ValueColumn];
                }
                set
                {
                    this[this.tableFixMessage.ValueColumn] = value;
                }
            }
            
            public bool IsValueNull()
            {
                return this.IsNull(this.tableFixMessage.ValueColumn);
            }
            
            public void SetValueNull()
            {
                this[this.tableFixMessage.ValueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FixMessageRowChangeEvent : EventArgs
        {
            
            private FixMessageRow eventRow;
            
            private DataRowAction eventAction;
            
            public FixMessageRowChangeEvent(FixMessageRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FixMessageRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FolderDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnFolderId;
            
            internal FolderDataTable() : 
                    base("Folder")
            {
                this.InitClass();
            }
            
            internal FolderDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column FolderIdColumn
            {
                get
                {
                    return this.columnFolderId;
                }
            }
            
            public FolderRow this[int index]
            {
                get
                {
                    return ((FolderRow)(this.Rows[index]));
                }
            }
            
            public event FolderRowChangeEventHandler FolderRowChanged;
            
            public event FolderRowChangeEventHandler FolderRowChanging;
            
            public event FolderRowChangeEventHandler FolderRowDeleted;
            
            public event FolderRowChangeEventHandler FolderRowDeleting;
            
            public void AddFolderRow(FolderRow row)
            {
                this.Rows.Add(row);
            }
            
            public FolderRow AddFolderRow(ObjectRow parentObjectRowByObjectFolder)
            {
                FolderRow rowFolderRow = ((FolderRow)(this.NewRow()));
                rowFolderRow.ItemArray = new object[] {
                        parentObjectRowByObjectFolder[12]};
                this.Rows.Add(rowFolderRow);
                return rowFolderRow;
            }
            
            public FolderRow FindByFolderId(int FolderId)
            {
                return ((FolderRow)(this.Rows.Find(new object[] {
                            FolderId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                FolderDataTable cln = ((FolderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new FolderDataTable();
            }
            
            internal void InitVars()
            {
                this.columnFolderId = this.Columns["FolderId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnFolderId = new Column("FolderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFolderId);
                this.Constraints.Add(new UniqueConstraint("KeyFolder", new DataColumn[] {
                                this.columnFolderId}, true));
                this.columnFolderId.AllowDBNull = false;
                this.columnFolderId.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.FolderLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Folder"));
                }
            }
            
            public FolderRow NewFolderRow()
            {
                return ((FolderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new FolderRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(FolderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.FolderRowChanged != null))
                {
                    this.FolderRowChanged(this, new FolderRowChangeEvent(((FolderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.FolderRowChanging != null))
                {
                    this.FolderRowChanging(this, new FolderRowChangeEvent(((FolderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.FolderRowDeleted != null))
                {
                    this.FolderRowDeleted(this, new FolderRowChangeEvent(((FolderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.FolderRowDeleting != null))
                {
                    this.FolderRowDeleting(this, new FolderRowChangeEvent(((FolderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFolderRow(FolderRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FolderRow : Row
        {
            
            private FolderDataTable tableFolder;
            
            internal FolderRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableFolder = ((FolderDataTable)(this.Table));
            }
            
            public int FolderId
            {
                get
                {
                    return ((int)(this[this.tableFolder.FolderIdColumn]));
                }
                set
                {
                    this[this.tableFolder.FolderIdColumn] = value;
                }
            }
            
            public ObjectRow ObjectRow
            {
                get
                {
                    if ((DataSetMarket.lockObject.IsReaderLockHeld || DataSetMarket.lockObject.IsWriterLockHeld))
                    {
                        return ((ObjectRow)(this.GetParentRow(this.Table.ParentRelations["ObjectFolder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Object"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["ObjectFolder"]);
                }
            }
            
            public SystemFolderRow[] GetSystemFolderRows()
            {
                return ((SystemFolderRow[])(this.GetChildRows(this.Table.ChildRelations["FolderSystemFolder"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FolderRowChangeEvent : EventArgs
        {
            
            private FolderRow eventRow;
            
            private DataRowAction eventAction;
            
            public FolderRowChangeEvent(FolderRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FolderRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HolidayDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnCountryId;
            
            private Column columnDate;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnHolidayId;
            
            private Column columnHolidayTypeCode;
            
            private DataView viewKeyHolidayExternalId0;
            
            private DataView viewKeyHolidayExternalId1;
            
            internal HolidayDataTable() : 
                    base("Holiday")
            {
                this.InitClass();
            }
            
            internal HolidayDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column CountryIdColumn
            {
                get
                {
                    return this.columnCountryId;
                }
            }
            
            public Column DateColumn
            {
                get
                {
                    return this.columnDate;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column HolidayIdColumn
            {
                get
                {
                    return this.columnHolidayId;
                }
            }
            
            public Column HolidayTypeCodeColumn
            {
                get
                {
                    return this.columnHolidayTypeCode;
                }
            }
            
            public DataView KeyHolidayExternalId0
            {
                get
                {
                    return this.viewKeyHolidayExternalId0;
                }
            }
            
            public DataView KeyHolidayExternalId1
            {
                get
                {
                    return this.viewKeyHolidayExternalId1;
                }
            }
            
            public HolidayRow this[int index]
            {
                get
                {
                    return ((HolidayRow)(this.Rows[index]));
                }
            }
            
            public event HolidayRowChangeEventHandler HolidayRowChanged;
            
            public event HolidayRowChangeEventHandler HolidayRowChanging;
            
            public event HolidayRowChangeEventHandler HolidayRowDeleted;
            
            public event HolidayRowChangeEventHandler HolidayRowDeleting;
            
            public void AddHolidayRow(HolidayRow row)
            {
                this.Rows.Add(row);
            }
            
            public HolidayRow AddHolidayRow(CountryRow parentCountryRowByCountryHoliday, System.DateTime Date, string ExternalId0, string ExternalId1, HolidayTypeRow parentHolidayTypeRowByHolidayTypeHoliday)
            {
                HolidayRow rowHolidayRow = ((HolidayRow)(this.NewRow()));
                rowHolidayRow.ItemArray = new object[] {
                        parentCountryRowByCountryHoliday[1],
                        Date,
                        ExternalId0,
                        ExternalId1,
                        null,
                        parentHolidayTypeRowByHolidayTypeHoliday[5]};
                this.Rows.Add(rowHolidayRow);
                return rowHolidayRow;
            }
            
            public HolidayRow FindByHolidayId(int HolidayId)
            {
                return ((HolidayRow)(this.Rows.Find(new object[] {
                            HolidayId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                HolidayDataTable cln = ((HolidayDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new HolidayDataTable();
            }
            
            internal void InitVars()
            {
                this.columnCountryId = this.Columns["CountryId"];
                this.columnDate = this.Columns["Date"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnHolidayId = this.Columns["HolidayId"];
                this.columnHolidayTypeCode = this.Columns["HolidayTypeCode"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnCountryId = new Column("CountryId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryId);
                this.columnDate = new Column("Date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDate);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnHolidayId = new Column("HolidayId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHolidayId);
                this.columnHolidayTypeCode = new Column("HolidayTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHolidayTypeCode);
                this.Constraints.Add(new UniqueConstraint("KeyHoliday", new DataColumn[] {
                                this.columnHolidayId}, true));
                this.viewKeyHolidayExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewKeyHolidayExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.columnCountryId.AllowDBNull = false;
                this.columnDate.AllowDBNull = false;
                this.columnHolidayId.AutoIncrement = true;
                this.columnHolidayId.AllowDBNull = false;
                this.columnHolidayId.Unique = true;
                this.columnHolidayTypeCode.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.HolidayLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Holiday"));
                }
            }
            
            public HolidayRow NewHolidayRow()
            {
                return ((HolidayRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new HolidayRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(HolidayRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.HolidayRowChanged != null))
                {
                    this.HolidayRowChanged(this, new HolidayRowChangeEvent(((HolidayRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.HolidayRowChanging != null))
                {
                    this.HolidayRowChanging(this, new HolidayRowChangeEvent(((HolidayRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.HolidayRowDeleted != null))
                {
                    this.HolidayRowDeleted(this, new HolidayRowChangeEvent(((HolidayRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.HolidayRowDeleting != null))
                {
                    this.HolidayRowDeleting(this, new HolidayRowChangeEvent(((HolidayRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveHolidayRow(HolidayRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HolidayRow : Row
        {
            
            private HolidayDataTable tableHoliday;
            
            internal HolidayRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableHoliday = ((HolidayDataTable)(this.Table));
            }
            
            public int CountryId
            {
                get
                {
                    return ((int)(this[this.tableHoliday.CountryIdColumn]));
                }
                set
                {
                    this[this.tableHoliday.CountryIdColumn] = value;
                }
            }
            
            public System.DateTime Date
            {
                get
                {
                    return ((System.DateTime)(this[this.tableHoliday.DateColumn]));
                }
                set
                {
                    this[this.tableHoliday.DateColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableHoliday.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableHoliday.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableHoliday.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableHoliday.ExternalId1Column] = value;
                }
            }
            
            public int HolidayId
            {
                get
                {
                    return ((int)(this[this.tableHoliday.HolidayIdColumn]));
                }
                set
                {
                    this[this.tableHoliday.HolidayIdColumn] = value;
                }
            }
            
            public int HolidayTypeCode
            {
                get
                {
                    return ((int)(this[this.tableHoliday.HolidayTypeCodeColumn]));
                }
                set
                {
                    this[this.tableHoliday.HolidayTypeCodeColumn] = value;
                }
            }
            
            public CountryRow CountryRow
            {
                get
                {
                    if ((DataSetMarket.lockCountry.IsReaderLockHeld || DataSetMarket.lockCountry.IsWriterLockHeld))
                    {
                        return ((CountryRow)(this.GetParentRow(this.Table.ParentRelations["CountryHoliday"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Country"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["CountryHoliday"]);
                }
            }
            
            public HolidayTypeRow HolidayTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockHolidayType.IsReaderLockHeld || DataSetMarket.lockHolidayType.IsWriterLockHeld))
                    {
                        return ((HolidayTypeRow)(this.GetParentRow(this.Table.ParentRelations["HolidayTypeHoliday"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "HolidayType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["HolidayTypeHoliday"]);
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableHoliday.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableHoliday.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableHoliday.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableHoliday.ExternalId1Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HolidayRowChangeEvent : EventArgs
        {
            
            private HolidayRow eventRow;
            
            private DataRowAction eventAction;
            
            public HolidayRowChangeEvent(HolidayRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public HolidayRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HolidayTypeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private Column columnHolidayTypeCode;
            
            internal HolidayTypeDataTable() : 
                    base("HolidayType")
            {
                this.InitClass();
            }
            
            internal HolidayTypeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public Column HolidayTypeCodeColumn
            {
                get
                {
                    return this.columnHolidayTypeCode;
                }
            }
            
            public HolidayTypeRow this[int index]
            {
                get
                {
                    return ((HolidayTypeRow)(this.Rows[index]));
                }
            }
            
            public event HolidayTypeRowChangeEventHandler HolidayTypeRowChanged;
            
            public event HolidayTypeRowChangeEventHandler HolidayTypeRowChanging;
            
            public event HolidayTypeRowChangeEventHandler HolidayTypeRowDeleted;
            
            public event HolidayTypeRowChangeEventHandler HolidayTypeRowDeleting;
            
            public void AddHolidayTypeRow(HolidayTypeRow row)
            {
                this.Rows.Add(row);
            }
            
            public HolidayTypeRow AddHolidayTypeRow(string Description, string ExternalId0, string ExternalId1, string ExternalId2, string ExternalId3, int HolidayTypeCode)
            {
                HolidayTypeRow rowHolidayTypeRow = ((HolidayTypeRow)(this.NewRow()));
                rowHolidayTypeRow.ItemArray = new object[] {
                        Description,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3,
                        HolidayTypeCode};
                this.Rows.Add(rowHolidayTypeRow);
                return rowHolidayTypeRow;
            }
            
            public HolidayTypeRow FindByHolidayTypeCode(int HolidayTypeCode)
            {
                return ((HolidayTypeRow)(this.Rows.Find(new object[] {
                            HolidayTypeCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                HolidayTypeDataTable cln = ((HolidayTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new HolidayTypeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
                this.columnHolidayTypeCode = this.Columns["HolidayTypeCode"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.columnHolidayTypeCode = new Column("HolidayTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHolidayTypeCode);
                this.Constraints.Add(new UniqueConstraint("KeyHolidayType", new DataColumn[] {
                                this.columnHolidayTypeCode}, true));
                this.columnDescription.AllowDBNull = false;
                this.columnHolidayTypeCode.AllowDBNull = false;
                this.columnHolidayTypeCode.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.HolidayTypeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "HolidayType"));
                }
            }
            
            public HolidayTypeRow NewHolidayTypeRow()
            {
                return ((HolidayTypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new HolidayTypeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(HolidayTypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.HolidayTypeRowChanged != null))
                {
                    this.HolidayTypeRowChanged(this, new HolidayTypeRowChangeEvent(((HolidayTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.HolidayTypeRowChanging != null))
                {
                    this.HolidayTypeRowChanging(this, new HolidayTypeRowChangeEvent(((HolidayTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.HolidayTypeRowDeleted != null))
                {
                    this.HolidayTypeRowDeleted(this, new HolidayTypeRowChangeEvent(((HolidayTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.HolidayTypeRowDeleting != null))
                {
                    this.HolidayTypeRowDeleting(this, new HolidayTypeRowChangeEvent(((HolidayTypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveHolidayTypeRow(HolidayTypeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HolidayTypeRow : Row
        {
            
            private HolidayTypeDataTable tableHolidayType;
            
            internal HolidayTypeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableHolidayType = ((HolidayTypeDataTable)(this.Table));
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableHolidayType.DescriptionColumn]));
                }
                set
                {
                    this[this.tableHolidayType.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableHolidayType.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableHolidayType.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableHolidayType.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableHolidayType.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableHolidayType.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableHolidayType.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableHolidayType.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableHolidayType.ExternalId3Column] = value;
                }
            }
            
            public int HolidayTypeCode
            {
                get
                {
                    return ((int)(this[this.tableHolidayType.HolidayTypeCodeColumn]));
                }
                set
                {
                    this[this.tableHolidayType.HolidayTypeCodeColumn] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableHolidayType.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableHolidayType.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableHolidayType.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableHolidayType.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableHolidayType.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableHolidayType.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableHolidayType.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableHolidayType.ExternalId3Column] = System.Convert.DBNull;
            }
            
            public HolidayRow[] GetHolidayRows()
            {
                return ((HolidayRow[])(this.GetChildRows(this.Table.ChildRelations["HolidayTypeHoliday"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HolidayTypeRowChangeEvent : EventArgs
        {
            
            private HolidayTypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public HolidayTypeRowChangeEvent(HolidayTypeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public HolidayTypeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ImageDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnExternalId0;
            
            private Column columnImageId;
            
            private Column columnImage;
            
            private DataView viewKeyImageExternalId0;
            
            internal ImageDataTable() : 
                    base("Image")
            {
                this.InitClass();
            }
            
            internal ImageDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ImageIdColumn
            {
                get
                {
                    return this.columnImageId;
                }
            }
            
            public Column ImageColumn
            {
                get
                {
                    return this.columnImage;
                }
            }
            
            public DataView KeyImageExternalId0
            {
                get
                {
                    return this.viewKeyImageExternalId0;
                }
            }
            
            public ImageRow this[int index]
            {
                get
                {
                    return ((ImageRow)(this.Rows[index]));
                }
            }
            
            public event ImageRowChangeEventHandler ImageRowChanged;
            
            public event ImageRowChangeEventHandler ImageRowChanging;
            
            public event ImageRowChangeEventHandler ImageRowDeleted;
            
            public event ImageRowChangeEventHandler ImageRowDeleting;
            
            public void AddImageRow(ImageRow row)
            {
                this.Rows.Add(row);
            }
            
            public ImageRow AddImageRow(string ExternalId0, string Image)
            {
                ImageRow rowImageRow = ((ImageRow)(this.NewRow()));
                rowImageRow.ItemArray = new object[] {
                        ExternalId0,
                        null,
                        Image};
                this.Rows.Add(rowImageRow);
                return rowImageRow;
            }
            
            public ImageRow FindByImageId(int ImageId)
            {
                return ((ImageRow)(this.Rows.Find(new object[] {
                            ImageId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                ImageDataTable cln = ((ImageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new ImageDataTable();
            }
            
            internal void InitVars()
            {
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnImageId = this.Columns["ImageId"];
                this.columnImage = this.Columns["Image"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnImageId = new Column("ImageId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnImageId);
                this.columnImage = new Column("Image", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnImage);
                this.Constraints.Add(new UniqueConstraint("KeyImage", new DataColumn[] {
                                this.columnImageId}, true));
                this.viewKeyImageExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.columnImageId.AutoIncrement = true;
                this.columnImageId.AllowDBNull = false;
                this.columnImageId.Unique = true;
                this.columnImage.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.ImageLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Image"));
                }
            }
            
            public ImageRow NewImageRow()
            {
                return ((ImageRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ImageRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(ImageRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ImageRowChanged != null))
                {
                    this.ImageRowChanged(this, new ImageRowChangeEvent(((ImageRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ImageRowChanging != null))
                {
                    this.ImageRowChanging(this, new ImageRowChangeEvent(((ImageRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ImageRowDeleted != null))
                {
                    this.ImageRowDeleted(this, new ImageRowChangeEvent(((ImageRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ImageRowDeleting != null))
                {
                    this.ImageRowDeleting(this, new ImageRowChangeEvent(((ImageRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveImageRow(ImageRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ImageRow : Row
        {
            
            private ImageDataTable tableImage;
            
            internal ImageRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableImage = ((ImageDataTable)(this.Table));
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableImage.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableImage.ExternalId0Column] = value;
                }
            }
            
            public int ImageId
            {
                get
                {
                    return ((int)(this[this.tableImage.ImageIdColumn]));
                }
                set
                {
                    this[this.tableImage.ImageIdColumn] = value;
                }
            }
            
            public string Image
            {
                get
                {
                    return ((string)(this[this.tableImage.ImageColumn]));
                }
                set
                {
                    this[this.tableImage.ImageColumn] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableImage.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableImage.ExternalId0Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ImageRowChangeEvent : EventArgs
        {
            
            private ImageRow eventRow;
            
            private DataRowAction eventAction;
            
            public ImageRowChangeEvent(ImageRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ImageRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InstitutionDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnInstitutionId;
            
            internal InstitutionDataTable() : 
                    base("Institution")
            {
                this.InitClass();
            }
            
            internal InstitutionDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column InstitutionIdColumn
            {
                get
                {
                    return this.columnInstitutionId;
                }
            }
            
            public InstitutionRow this[int index]
            {
                get
                {
                    return ((InstitutionRow)(this.Rows[index]));
                }
            }
            
            public event InstitutionRowChangeEventHandler InstitutionRowChanged;
            
            public event InstitutionRowChangeEventHandler InstitutionRowChanging;
            
            public event InstitutionRowChangeEventHandler InstitutionRowDeleted;
            
            public event InstitutionRowChangeEventHandler InstitutionRowDeleting;
            
            public void AddInstitutionRow(InstitutionRow row)
            {
                this.Rows.Add(row);
            }
            
            public InstitutionRow AddInstitutionRow(SourceRow parentSourceRowBySourceInstitution)
            {
                InstitutionRow rowInstitutionRow = ((InstitutionRow)(this.NewRow()));
                rowInstitutionRow.ItemArray = new object[] {
                        parentSourceRowBySourceInstitution[34]};
                this.Rows.Add(rowInstitutionRow);
                return rowInstitutionRow;
            }
            
            public InstitutionRow FindByInstitutionId(int InstitutionId)
            {
                return ((InstitutionRow)(this.Rows.Find(new object[] {
                            InstitutionId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                InstitutionDataTable cln = ((InstitutionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new InstitutionDataTable();
            }
            
            internal void InitVars()
            {
                this.columnInstitutionId = this.Columns["InstitutionId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnInstitutionId = new Column("InstitutionId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInstitutionId);
                this.Constraints.Add(new UniqueConstraint("KeyInstitution", new DataColumn[] {
                                this.columnInstitutionId}, true));
                this.columnInstitutionId.AllowDBNull = false;
                this.columnInstitutionId.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.InstitutionLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Institution"));
                }
            }
            
            public InstitutionRow NewInstitutionRow()
            {
                return ((InstitutionRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new InstitutionRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(InstitutionRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.InstitutionRowChanged != null))
                {
                    this.InstitutionRowChanged(this, new InstitutionRowChangeEvent(((InstitutionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.InstitutionRowChanging != null))
                {
                    this.InstitutionRowChanging(this, new InstitutionRowChangeEvent(((InstitutionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.InstitutionRowDeleted != null))
                {
                    this.InstitutionRowDeleted(this, new InstitutionRowChangeEvent(((InstitutionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.InstitutionRowDeleting != null))
                {
                    this.InstitutionRowDeleting(this, new InstitutionRowChangeEvent(((InstitutionRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveInstitutionRow(InstitutionRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InstitutionRow : Row
        {
            
            private InstitutionDataTable tableInstitution;
            
            internal InstitutionRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableInstitution = ((InstitutionDataTable)(this.Table));
            }
            
            public int InstitutionId
            {
                get
                {
                    return ((int)(this[this.tableInstitution.InstitutionIdColumn]));
                }
                set
                {
                    this[this.tableInstitution.InstitutionIdColumn] = value;
                }
            }
            
            public SourceRow SourceRow
            {
                get
                {
                    if ((DataSetMarket.lockSource.IsReaderLockHeld || DataSetMarket.lockSource.IsWriterLockHeld))
                    {
                        return ((SourceRow)(this.GetParentRow(this.Table.ParentRelations["SourceInstitution"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Source"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["SourceInstitution"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InstitutionRowChangeEvent : EventArgs
        {
            
            private InstitutionRow eventRow;
            
            private DataRowAction eventAction;
            
            public InstitutionRowChangeEvent(InstitutionRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public InstitutionRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class IssuerDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnAddress0;
            
            private Column columnAddress1;
            
            private Column columnAddress2;
            
            private Column columnCity;
            
            private Column columnCountryId;
            
            private Column columnIssuerId;
            
            private Column columnPostalCode;
            
            private Column columnProvinceId;
            
            private Column columnRating0;
            
            private Column columnRating1;
            
            private Column columnRating2;
            
            private Column columnRating3;
            
            private Column columnUserData0;
            
            private Column columnUserData1;
            
            private Column columnUserData2;
            
            private Column columnUserData3;
            
            private Column columnUserData4;
            
            private Column columnUserData5;
            
            private Column columnUserData6;
            
            private Column columnUserData7;
            
            internal IssuerDataTable() : 
                    base("Issuer")
            {
                this.InitClass();
            }
            
            internal IssuerDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column Address0Column
            {
                get
                {
                    return this.columnAddress0;
                }
            }
            
            public Column Address1Column
            {
                get
                {
                    return this.columnAddress1;
                }
            }
            
            public Column Address2Column
            {
                get
                {
                    return this.columnAddress2;
                }
            }
            
            public Column CityColumn
            {
                get
                {
                    return this.columnCity;
                }
            }
            
            public Column CountryIdColumn
            {
                get
                {
                    return this.columnCountryId;
                }
            }
            
            public Column IssuerIdColumn
            {
                get
                {
                    return this.columnIssuerId;
                }
            }
            
            public Column PostalCodeColumn
            {
                get
                {
                    return this.columnPostalCode;
                }
            }
            
            public Column ProvinceIdColumn
            {
                get
                {
                    return this.columnProvinceId;
                }
            }
            
            public Column Rating0Column
            {
                get
                {
                    return this.columnRating0;
                }
            }
            
            public Column Rating1Column
            {
                get
                {
                    return this.columnRating1;
                }
            }
            
            public Column Rating2Column
            {
                get
                {
                    return this.columnRating2;
                }
            }
            
            public Column Rating3Column
            {
                get
                {
                    return this.columnRating3;
                }
            }
            
            public Column UserData0Column
            {
                get
                {
                    return this.columnUserData0;
                }
            }
            
            public Column UserData1Column
            {
                get
                {
                    return this.columnUserData1;
                }
            }
            
            public Column UserData2Column
            {
                get
                {
                    return this.columnUserData2;
                }
            }
            
            public Column UserData3Column
            {
                get
                {
                    return this.columnUserData3;
                }
            }
            
            public Column UserData4Column
            {
                get
                {
                    return this.columnUserData4;
                }
            }
            
            public Column UserData5Column
            {
                get
                {
                    return this.columnUserData5;
                }
            }
            
            public Column UserData6Column
            {
                get
                {
                    return this.columnUserData6;
                }
            }
            
            public Column UserData7Column
            {
                get
                {
                    return this.columnUserData7;
                }
            }
            
            public IssuerRow this[int index]
            {
                get
                {
                    return ((IssuerRow)(this.Rows[index]));
                }
            }
            
            public event IssuerRowChangeEventHandler IssuerRowChanged;
            
            public event IssuerRowChangeEventHandler IssuerRowChanging;
            
            public event IssuerRowChangeEventHandler IssuerRowDeleted;
            
            public event IssuerRowChangeEventHandler IssuerRowDeleting;
            
            public void AddIssuerRow(IssuerRow row)
            {
                this.Rows.Add(row);
            }
            
            public IssuerRow AddIssuerRow(
                        string Address0, 
                        string Address1, 
                        string Address2, 
                        string City, 
                        int CountryId, 
                        ObjectRow parentObjectRowByObjectIssuer, 
                        string PostalCode, 
                        int ProvinceId, 
                        decimal Rating0, 
                        decimal Rating1, 
                        decimal Rating2, 
                        decimal Rating3, 
                        decimal UserData0, 
                        decimal UserData1, 
                        decimal UserData2, 
                        decimal UserData3, 
                        string UserData4, 
                        string UserData5, 
                        string UserData6, 
                        string UserData7)
            {
                IssuerRow rowIssuerRow = ((IssuerRow)(this.NewRow()));
                rowIssuerRow.ItemArray = new object[] {
                        Address0,
                        Address1,
                        Address2,
                        City,
                        CountryId,
                        parentObjectRowByObjectIssuer[12],
                        PostalCode,
                        ProvinceId,
                        Rating0,
                        Rating1,
                        Rating2,
                        Rating3,
                        UserData0,
                        UserData1,
                        UserData2,
                        UserData3,
                        UserData4,
                        UserData5,
                        UserData6,
                        UserData7};
                this.Rows.Add(rowIssuerRow);
                return rowIssuerRow;
            }
            
            public IssuerRow FindByIssuerId(int IssuerId)
            {
                return ((IssuerRow)(this.Rows.Find(new object[] {
                            IssuerId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                IssuerDataTable cln = ((IssuerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new IssuerDataTable();
            }
            
            internal void InitVars()
            {
                this.columnAddress0 = this.Columns["Address0"];
                this.columnAddress1 = this.Columns["Address1"];
                this.columnAddress2 = this.Columns["Address2"];
                this.columnCity = this.Columns["City"];
                this.columnCountryId = this.Columns["CountryId"];
                this.columnIssuerId = this.Columns["IssuerId"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnProvinceId = this.Columns["ProvinceId"];
                this.columnRating0 = this.Columns["Rating0"];
                this.columnRating1 = this.Columns["Rating1"];
                this.columnRating2 = this.Columns["Rating2"];
                this.columnRating3 = this.Columns["Rating3"];
                this.columnUserData0 = this.Columns["UserData0"];
                this.columnUserData1 = this.Columns["UserData1"];
                this.columnUserData2 = this.Columns["UserData2"];
                this.columnUserData3 = this.Columns["UserData3"];
                this.columnUserData4 = this.Columns["UserData4"];
                this.columnUserData5 = this.Columns["UserData5"];
                this.columnUserData6 = this.Columns["UserData6"];
                this.columnUserData7 = this.Columns["UserData7"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnAddress0 = new Column("Address0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress0);
                this.columnAddress1 = new Column("Address1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new Column("Address2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress2);
                this.columnCity = new Column("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnCountryId = new Column("CountryId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryId);
                this.columnIssuerId = new Column("IssuerId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIssuerId);
                this.columnPostalCode = new Column("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnProvinceId = new Column("ProvinceId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProvinceId);
                this.columnRating0 = new Column("Rating0", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRating0);
                this.columnRating1 = new Column("Rating1", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRating1);
                this.columnRating2 = new Column("Rating2", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRating2);
                this.columnRating3 = new Column("Rating3", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRating3);
                this.columnUserData0 = new Column("UserData0", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData0);
                this.columnUserData1 = new Column("UserData1", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData1);
                this.columnUserData2 = new Column("UserData2", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData2);
                this.columnUserData3 = new Column("UserData3", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData3);
                this.columnUserData4 = new Column("UserData4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData4);
                this.columnUserData5 = new Column("UserData5", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData5);
                this.columnUserData6 = new Column("UserData6", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData6);
                this.columnUserData7 = new Column("UserData7", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData7);
                this.Constraints.Add(new UniqueConstraint("KeyIssuer", new DataColumn[] {
                                this.columnIssuerId}, true));
                this.columnIssuerId.AllowDBNull = false;
                this.columnIssuerId.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.IssuerLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Issuer"));
                }
            }
            
            public IssuerRow NewIssuerRow()
            {
                return ((IssuerRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new IssuerRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(IssuerRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.IssuerRowChanged != null))
                {
                    this.IssuerRowChanged(this, new IssuerRowChangeEvent(((IssuerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.IssuerRowChanging != null))
                {
                    this.IssuerRowChanging(this, new IssuerRowChangeEvent(((IssuerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.IssuerRowDeleted != null))
                {
                    this.IssuerRowDeleted(this, new IssuerRowChangeEvent(((IssuerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.IssuerRowDeleting != null))
                {
                    this.IssuerRowDeleting(this, new IssuerRowChangeEvent(((IssuerRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveIssuerRow(IssuerRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class IssuerRow : Row
        {
            
            private IssuerDataTable tableIssuer;
            
            internal IssuerRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableIssuer = ((IssuerDataTable)(this.Table));
            }
            
            public string Address0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableIssuer.Address0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.Address0Column] = value;
                }
            }
            
            public string Address1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableIssuer.Address1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.Address1Column] = value;
                }
            }
            
            public string Address2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableIssuer.Address2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.Address2Column] = value;
                }
            }
            
            public string City
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableIssuer.CityColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.CityColumn] = value;
                }
            }
            
            public int CountryId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableIssuer.CountryIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.CountryIdColumn] = value;
                }
            }
            
            public int IssuerId
            {
                get
                {
                    return ((int)(this[this.tableIssuer.IssuerIdColumn]));
                }
                set
                {
                    this[this.tableIssuer.IssuerIdColumn] = value;
                }
            }
            
            public string PostalCode
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableIssuer.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.PostalCodeColumn] = value;
                }
            }
            
            public int ProvinceId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableIssuer.ProvinceIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.ProvinceIdColumn] = value;
                }
            }
            
            public decimal Rating0
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableIssuer.Rating0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.Rating0Column] = value;
                }
            }
            
            public decimal Rating1
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableIssuer.Rating1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.Rating1Column] = value;
                }
            }
            
            public decimal Rating2
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableIssuer.Rating2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.Rating2Column] = value;
                }
            }
            
            public decimal Rating3
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableIssuer.Rating3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.Rating3Column] = value;
                }
            }
            
            public decimal UserData0
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableIssuer.UserData0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.UserData0Column] = value;
                }
            }
            
            public decimal UserData1
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableIssuer.UserData1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.UserData1Column] = value;
                }
            }
            
            public decimal UserData2
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableIssuer.UserData2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.UserData2Column] = value;
                }
            }
            
            public decimal UserData3
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableIssuer.UserData3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.UserData3Column] = value;
                }
            }
            
            public string UserData4
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableIssuer.UserData4Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.UserData4Column] = value;
                }
            }
            
            public string UserData5
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableIssuer.UserData5Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.UserData5Column] = value;
                }
            }
            
            public string UserData6
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableIssuer.UserData6Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.UserData6Column] = value;
                }
            }
            
            public string UserData7
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableIssuer.UserData7Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.UserData7Column] = value;
                }
            }
            
            public ObjectRow ObjectRow
            {
                get
                {
                    if ((DataSetMarket.lockObject.IsReaderLockHeld || DataSetMarket.lockObject.IsWriterLockHeld))
                    {
                        return ((ObjectRow)(this.GetParentRow(this.Table.ParentRelations["ObjectIssuer"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Object"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["ObjectIssuer"]);
                }
            }
            
            public bool IsAddress0Null()
            {
                return this.IsNull(this.tableIssuer.Address0Column);
            }
            
            public void SetAddress0Null()
            {
                this[this.tableIssuer.Address0Column] = System.Convert.DBNull;
            }
            
            public bool IsAddress1Null()
            {
                return this.IsNull(this.tableIssuer.Address1Column);
            }
            
            public void SetAddress1Null()
            {
                this[this.tableIssuer.Address1Column] = System.Convert.DBNull;
            }
            
            public bool IsAddress2Null()
            {
                return this.IsNull(this.tableIssuer.Address2Column);
            }
            
            public void SetAddress2Null()
            {
                this[this.tableIssuer.Address2Column] = System.Convert.DBNull;
            }
            
            public bool IsCityNull()
            {
                return this.IsNull(this.tableIssuer.CityColumn);
            }
            
            public void SetCityNull()
            {
                this[this.tableIssuer.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryIdNull()
            {
                return this.IsNull(this.tableIssuer.CountryIdColumn);
            }
            
            public void SetCountryIdNull()
            {
                this[this.tableIssuer.CountryIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull()
            {
                return this.IsNull(this.tableIssuer.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull()
            {
                this[this.tableIssuer.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsProvinceIdNull()
            {
                return this.IsNull(this.tableIssuer.ProvinceIdColumn);
            }
            
            public void SetProvinceIdNull()
            {
                this[this.tableIssuer.ProvinceIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsRating0Null()
            {
                return this.IsNull(this.tableIssuer.Rating0Column);
            }
            
            public void SetRating0Null()
            {
                this[this.tableIssuer.Rating0Column] = System.Convert.DBNull;
            }
            
            public bool IsRating1Null()
            {
                return this.IsNull(this.tableIssuer.Rating1Column);
            }
            
            public void SetRating1Null()
            {
                this[this.tableIssuer.Rating1Column] = System.Convert.DBNull;
            }
            
            public bool IsRating2Null()
            {
                return this.IsNull(this.tableIssuer.Rating2Column);
            }
            
            public void SetRating2Null()
            {
                this[this.tableIssuer.Rating2Column] = System.Convert.DBNull;
            }
            
            public bool IsRating3Null()
            {
                return this.IsNull(this.tableIssuer.Rating3Column);
            }
            
            public void SetRating3Null()
            {
                this[this.tableIssuer.Rating3Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData0Null()
            {
                return this.IsNull(this.tableIssuer.UserData0Column);
            }
            
            public void SetUserData0Null()
            {
                this[this.tableIssuer.UserData0Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData1Null()
            {
                return this.IsNull(this.tableIssuer.UserData1Column);
            }
            
            public void SetUserData1Null()
            {
                this[this.tableIssuer.UserData1Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData2Null()
            {
                return this.IsNull(this.tableIssuer.UserData2Column);
            }
            
            public void SetUserData2Null()
            {
                this[this.tableIssuer.UserData2Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData3Null()
            {
                return this.IsNull(this.tableIssuer.UserData3Column);
            }
            
            public void SetUserData3Null()
            {
                this[this.tableIssuer.UserData3Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData4Null()
            {
                return this.IsNull(this.tableIssuer.UserData4Column);
            }
            
            public void SetUserData4Null()
            {
                this[this.tableIssuer.UserData4Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData5Null()
            {
                return this.IsNull(this.tableIssuer.UserData5Column);
            }
            
            public void SetUserData5Null()
            {
                this[this.tableIssuer.UserData5Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData6Null()
            {
                return this.IsNull(this.tableIssuer.UserData6Column);
            }
            
            public void SetUserData6Null()
            {
                this[this.tableIssuer.UserData6Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData7Null()
            {
                return this.IsNull(this.tableIssuer.UserData7Column);
            }
            
            public void SetUserData7Null()
            {
                this[this.tableIssuer.UserData7Column] = System.Convert.DBNull;
            }
            
            public DebtRow[] GetDebtRows()
            {
                return ((DebtRow[])(this.GetChildRows(this.Table.ChildRelations["IssuerDebt"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class IssuerRowChangeEvent : EventArgs
        {
            
            private IssuerRow eventRow;
            
            private DataRowAction eventAction;
            
            public IssuerRowChangeEvent(IssuerRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public IssuerRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LotHandlingDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private Column columnLotHandlingCode;
            
            private Column columnMnemonic;
            
            private DataView viewKeyLotHandlingExternalId0;
            
            private DataView viewKeyLotHandlingExternalId1;
            
            private DataView viewKeyLotHandlingExternalId2;
            
            private DataView viewKeyLotHandlingExternalId3;
            
            internal LotHandlingDataTable() : 
                    base("LotHandling")
            {
                this.InitClass();
            }
            
            internal LotHandlingDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public Column LotHandlingCodeColumn
            {
                get
                {
                    return this.columnLotHandlingCode;
                }
            }
            
            public Column MnemonicColumn
            {
                get
                {
                    return this.columnMnemonic;
                }
            }
            
            public DataView KeyLotHandlingExternalId0
            {
                get
                {
                    return this.viewKeyLotHandlingExternalId0;
                }
            }
            
            public DataView KeyLotHandlingExternalId1
            {
                get
                {
                    return this.viewKeyLotHandlingExternalId1;
                }
            }
            
            public DataView KeyLotHandlingExternalId2
            {
                get
                {
                    return this.viewKeyLotHandlingExternalId2;
                }
            }
            
            public DataView KeyLotHandlingExternalId3
            {
                get
                {
                    return this.viewKeyLotHandlingExternalId3;
                }
            }
            
            public LotHandlingRow this[int index]
            {
                get
                {
                    return ((LotHandlingRow)(this.Rows[index]));
                }
            }
            
            public event LotHandlingRowChangeEventHandler LotHandlingRowChanged;
            
            public event LotHandlingRowChangeEventHandler LotHandlingRowChanging;
            
            public event LotHandlingRowChangeEventHandler LotHandlingRowDeleted;
            
            public event LotHandlingRowChangeEventHandler LotHandlingRowDeleting;
            
            public void AddLotHandlingRow(LotHandlingRow row)
            {
                this.Rows.Add(row);
            }
            
            public LotHandlingRow AddLotHandlingRow(string Description, string ExternalId0, string ExternalId1, string ExternalId2, string ExternalId3, int LotHandlingCode, string Mnemonic)
            {
                LotHandlingRow rowLotHandlingRow = ((LotHandlingRow)(this.NewRow()));
                rowLotHandlingRow.ItemArray = new object[] {
                        Description,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3,
                        LotHandlingCode,
                        Mnemonic};
                this.Rows.Add(rowLotHandlingRow);
                return rowLotHandlingRow;
            }
            
            public LotHandlingRow FindByLotHandlingCode(int LotHandlingCode)
            {
                return ((LotHandlingRow)(this.Rows.Find(new object[] {
                            LotHandlingCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                LotHandlingDataTable cln = ((LotHandlingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new LotHandlingDataTable();
            }
            
            internal void InitVars()
            {
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
                this.columnLotHandlingCode = this.Columns["LotHandlingCode"];
                this.columnMnemonic = this.Columns["Mnemonic"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.columnLotHandlingCode = new Column("LotHandlingCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLotHandlingCode);
                this.columnMnemonic = new Column("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.Constraints.Add(new UniqueConstraint("KeyLotHandling", new DataColumn[] {
                                this.columnLotHandlingCode}, true));
                this.viewKeyLotHandlingExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewKeyLotHandlingExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.viewKeyLotHandlingExternalId2 = new DataView(this, null, "ExternalId2", DataViewRowState.CurrentRows);
                this.viewKeyLotHandlingExternalId3 = new DataView(this, null, "ExternalId3", DataViewRowState.CurrentRows);
                this.columnDescription.AllowDBNull = false;
                this.columnLotHandlingCode.AllowDBNull = false;
                this.columnLotHandlingCode.Unique = true;
                this.columnMnemonic.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.LotHandlingLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "LotHandling"));
                }
            }
            
            public LotHandlingRow NewLotHandlingRow()
            {
                return ((LotHandlingRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new LotHandlingRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(LotHandlingRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.LotHandlingRowChanged != null))
                {
                    this.LotHandlingRowChanged(this, new LotHandlingRowChangeEvent(((LotHandlingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.LotHandlingRowChanging != null))
                {
                    this.LotHandlingRowChanging(this, new LotHandlingRowChangeEvent(((LotHandlingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.LotHandlingRowDeleted != null))
                {
                    this.LotHandlingRowDeleted(this, new LotHandlingRowChangeEvent(((LotHandlingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.LotHandlingRowDeleting != null))
                {
                    this.LotHandlingRowDeleting(this, new LotHandlingRowChangeEvent(((LotHandlingRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveLotHandlingRow(LotHandlingRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LotHandlingRow : Row
        {
            
            private LotHandlingDataTable tableLotHandling;
            
            internal LotHandlingRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableLotHandling = ((LotHandlingDataTable)(this.Table));
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableLotHandling.DescriptionColumn]));
                }
                set
                {
                    this[this.tableLotHandling.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLotHandling.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLotHandling.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLotHandling.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLotHandling.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLotHandling.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLotHandling.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLotHandling.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLotHandling.ExternalId3Column] = value;
                }
            }
            
            public int LotHandlingCode
            {
                get
                {
                    return ((int)(this[this.tableLotHandling.LotHandlingCodeColumn]));
                }
                set
                {
                    this[this.tableLotHandling.LotHandlingCodeColumn] = value;
                }
            }
            
            public string Mnemonic
            {
                get
                {
                    return ((string)(this[this.tableLotHandling.MnemonicColumn]));
                }
                set
                {
                    this[this.tableLotHandling.MnemonicColumn] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableLotHandling.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableLotHandling.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableLotHandling.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableLotHandling.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableLotHandling.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableLotHandling.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableLotHandling.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableLotHandling.ExternalId3Column] = System.Convert.DBNull;
            }
            
            public AccountRow[] GetAccountRows()
            {
                return ((AccountRow[])(this.GetChildRows(this.Table.ChildRelations["LotHandlingAccount"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LotHandlingRowChangeEvent : EventArgs
        {
            
            private LotHandlingRow eventRow;
            
            private DataRowAction eventAction;
            
            public LotHandlingRowChangeEvent(LotHandlingRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public LotHandlingRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MatchDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnContraOrderId;
            
            private Column columnCreatedTime;
            
            private Column columnMatchId;
            
            private Column columnTimerId;
            
            private Column columnStatusCode;
            
            private Column columnWorkingOrderId;
            
            private DataView viewKeyMatchWorkingOrderIdContraOrderId;
            
            internal MatchDataTable() : 
                    base("Match")
            {
                this.InitClass();
            }
            
            internal MatchDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ContraOrderIdColumn
            {
                get
                {
                    return this.columnContraOrderId;
                }
            }
            
            public Column CreatedTimeColumn
            {
                get
                {
                    return this.columnCreatedTime;
                }
            }
            
            public Column MatchIdColumn
            {
                get
                {
                    return this.columnMatchId;
                }
            }
            
            public Column TimerIdColumn
            {
                get
                {
                    return this.columnTimerId;
                }
            }
            
            public Column StatusCodeColumn
            {
                get
                {
                    return this.columnStatusCode;
                }
            }
            
            public Column WorkingOrderIdColumn
            {
                get
                {
                    return this.columnWorkingOrderId;
                }
            }
            
            public DataView KeyMatchWorkingOrderIdContraOrderId
            {
                get
                {
                    return this.viewKeyMatchWorkingOrderIdContraOrderId;
                }
            }
            
            public MatchRow this[int index]
            {
                get
                {
                    return ((MatchRow)(this.Rows[index]));
                }
            }
            
            public event MatchRowChangeEventHandler MatchRowChanged;
            
            public event MatchRowChangeEventHandler MatchRowChanging;
            
            public event MatchRowChangeEventHandler MatchRowDeleted;
            
            public event MatchRowChangeEventHandler MatchRowDeleting;
            
            public void AddMatchRow(MatchRow row)
            {
                this.Rows.Add(row);
            }
            
            public MatchRow AddMatchRow(int ContraOrderId, System.DateTime CreatedTime, TimerRow parentTimerRowByTimerMatch, StatusRow parentStatusRowByStatusMatch, WorkingOrderRow parentWorkingOrderRowByWorkingOrderMatch)
            {
                MatchRow rowMatchRow = ((MatchRow)(this.NewRow()));
                rowMatchRow.ItemArray = new object[] {
                        ContraOrderId,
                        CreatedTime,
                        null,
                        parentTimerRowByTimerMatch[4],
                        parentStatusRowByStatusMatch[6],
                        parentWorkingOrderRowByWorkingOrderMatch[31]};
                this.Rows.Add(rowMatchRow);
                return rowMatchRow;
            }
            
            public MatchRow FindByMatchId(int MatchId)
            {
                return ((MatchRow)(this.Rows.Find(new object[] {
                            MatchId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                MatchDataTable cln = ((MatchDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new MatchDataTable();
            }
            
            internal void InitVars()
            {
                this.columnContraOrderId = this.Columns["ContraOrderId"];
                this.columnCreatedTime = this.Columns["CreatedTime"];
                this.columnMatchId = this.Columns["MatchId"];
                this.columnTimerId = this.Columns["TimerId"];
                this.columnStatusCode = this.Columns["StatusCode"];
                this.columnWorkingOrderId = this.Columns["WorkingOrderId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnContraOrderId = new Column("ContraOrderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContraOrderId);
                this.columnCreatedTime = new Column("CreatedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedTime);
                this.columnMatchId = new Column("MatchId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMatchId);
                this.columnTimerId = new Column("TimerId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimerId);
                this.columnStatusCode = new Column("StatusCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStatusCode);
                this.columnWorkingOrderId = new Column("WorkingOrderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWorkingOrderId);
                this.Constraints.Add(new UniqueConstraint("KeyMatch", new DataColumn[] {
                                this.columnMatchId}, true));
                this.viewKeyMatchWorkingOrderIdContraOrderId = new DataView(this, null, "WorkingOrderId,ContraOrderId,CreatedTime", DataViewRowState.CurrentRows);
                this.columnContraOrderId.AllowDBNull = false;
                this.columnCreatedTime.AllowDBNull = false;
                this.columnMatchId.AutoIncrement = true;
                this.columnMatchId.AllowDBNull = false;
                this.columnMatchId.Unique = true;
                this.columnStatusCode.AllowDBNull = false;
                this.columnWorkingOrderId.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.MatchLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Match"));
                }
            }
            
            public MatchRow NewMatchRow()
            {
                return ((MatchRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new MatchRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(MatchRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.MatchRowChanged != null))
                {
                    this.MatchRowChanged(this, new MatchRowChangeEvent(((MatchRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.MatchRowChanging != null))
                {
                    this.MatchRowChanging(this, new MatchRowChangeEvent(((MatchRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.MatchRowDeleted != null))
                {
                    this.MatchRowDeleted(this, new MatchRowChangeEvent(((MatchRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.MatchRowDeleting != null))
                {
                    this.MatchRowDeleting(this, new MatchRowChangeEvent(((MatchRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMatchRow(MatchRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MatchRow : Row
        {
            
            private MatchDataTable tableMatch;
            
            internal MatchRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableMatch = ((MatchDataTable)(this.Table));
            }
            
            public int ContraOrderId
            {
                get
                {
                    return ((int)(this[this.tableMatch.ContraOrderIdColumn]));
                }
                set
                {
                    this[this.tableMatch.ContraOrderIdColumn] = value;
                }
            }
            
            public System.DateTime CreatedTime
            {
                get
                {
                    return ((System.DateTime)(this[this.tableMatch.CreatedTimeColumn]));
                }
                set
                {
                    this[this.tableMatch.CreatedTimeColumn] = value;
                }
            }
            
            public int MatchId
            {
                get
                {
                    return ((int)(this[this.tableMatch.MatchIdColumn]));
                }
                set
                {
                    this[this.tableMatch.MatchIdColumn] = value;
                }
            }
            
            public int TimerId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableMatch.TimerIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableMatch.TimerIdColumn] = value;
                }
            }
            
            public int StatusCode
            {
                get
                {
                    return ((int)(this[this.tableMatch.StatusCodeColumn]));
                }
                set
                {
                    this[this.tableMatch.StatusCodeColumn] = value;
                }
            }
            
            public int WorkingOrderId
            {
                get
                {
                    return ((int)(this[this.tableMatch.WorkingOrderIdColumn]));
                }
                set
                {
                    this[this.tableMatch.WorkingOrderIdColumn] = value;
                }
            }
            
            public StatusRow StatusRow
            {
                get
                {
                    if ((DataSetMarket.lockStatus.IsReaderLockHeld || DataSetMarket.lockStatus.IsWriterLockHeld))
                    {
                        return ((StatusRow)(this.GetParentRow(this.Table.ParentRelations["StatusMatch"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Status"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["StatusMatch"]);
                }
            }
            
            public TimerRow TimerRow
            {
                get
                {
                    if ((DataSetMarket.lockTimer.IsReaderLockHeld || DataSetMarket.lockTimer.IsWriterLockHeld))
                    {
                        return ((TimerRow)(this.GetParentRow(this.Table.ParentRelations["TimerMatch"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Timer"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["TimerMatch"]);
                }
            }
            
            public WorkingOrderRow WorkingOrderRow
            {
                get
                {
                    if ((DataSetMarket.lockWorkingOrder.IsReaderLockHeld || DataSetMarket.lockWorkingOrder.IsWriterLockHeld))
                    {
                        return ((WorkingOrderRow)(this.GetParentRow(this.Table.ParentRelations["WorkingOrderMatch"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "WorkingOrder"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["WorkingOrderMatch"]);
                }
            }
            
            public bool IsTimerIdNull()
            {
                return this.IsNull(this.tableMatch.TimerIdColumn);
            }
            
            public void SetTimerIdNull()
            {
                this[this.tableMatch.TimerIdColumn] = System.Convert.DBNull;
            }
            
            public NegotiationRow[] GetNegotiationRows()
            {
                return ((NegotiationRow[])(this.GetChildRows(this.Table.ChildRelations["MatchNegotiation"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MatchRowChangeEvent : EventArgs
        {
            
            private MatchRow eventRow;
            
            private DataRowAction eventAction;
            
            public MatchRowChangeEvent(MatchRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MatchRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class NegotiationDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnExecutionId;
            
            private Column columnMatchId;
            
            private Column columnNegotiationId;
            
            private Column columnQuantity;
            
            private Column columnStatusCode;
            
            internal NegotiationDataTable() : 
                    base("Negotiation")
            {
                this.InitClass();
            }
            
            internal NegotiationDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ExecutionIdColumn
            {
                get
                {
                    return this.columnExecutionId;
                }
            }
            
            public Column MatchIdColumn
            {
                get
                {
                    return this.columnMatchId;
                }
            }
            
            public Column NegotiationIdColumn
            {
                get
                {
                    return this.columnNegotiationId;
                }
            }
            
            public Column QuantityColumn
            {
                get
                {
                    return this.columnQuantity;
                }
            }
            
            public Column StatusCodeColumn
            {
                get
                {
                    return this.columnStatusCode;
                }
            }
            
            public NegotiationRow this[int index]
            {
                get
                {
                    return ((NegotiationRow)(this.Rows[index]));
                }
            }
            
            public event NegotiationRowChangeEventHandler NegotiationRowChanged;
            
            public event NegotiationRowChangeEventHandler NegotiationRowChanging;
            
            public event NegotiationRowChangeEventHandler NegotiationRowDeleted;
            
            public event NegotiationRowChangeEventHandler NegotiationRowDeleting;
            
            public void AddNegotiationRow(NegotiationRow row)
            {
                this.Rows.Add(row);
            }
            
            public NegotiationRow AddNegotiationRow(ExecutionRow parentExecutionRowByExecutionNegotiation, MatchRow parentMatchRowByMatchNegotiation, decimal Quantity, StatusRow parentStatusRowByStatusNegotiation)
            {
                NegotiationRow rowNegotiationRow = ((NegotiationRow)(this.NewRow()));
                rowNegotiationRow.ItemArray = new object[] {
                        parentExecutionRowByExecutionNegotiation[8],
                        parentMatchRowByMatchNegotiation[2],
                        null,
                        Quantity,
                        parentStatusRowByStatusNegotiation[6]};
                this.Rows.Add(rowNegotiationRow);
                return rowNegotiationRow;
            }
            
            public NegotiationRow FindByNegotiationId(int NegotiationId)
            {
                return ((NegotiationRow)(this.Rows.Find(new object[] {
                            NegotiationId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                NegotiationDataTable cln = ((NegotiationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new NegotiationDataTable();
            }
            
            internal void InitVars()
            {
                this.columnExecutionId = this.Columns["ExecutionId"];
                this.columnMatchId = this.Columns["MatchId"];
                this.columnNegotiationId = this.Columns["NegotiationId"];
                this.columnQuantity = this.Columns["Quantity"];
                this.columnStatusCode = this.Columns["StatusCode"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnExecutionId = new Column("ExecutionId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExecutionId);
                this.columnMatchId = new Column("MatchId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMatchId);
                this.columnNegotiationId = new Column("NegotiationId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNegotiationId);
                this.columnQuantity = new Column("Quantity", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQuantity);
                this.columnStatusCode = new Column("StatusCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStatusCode);
                this.Constraints.Add(new UniqueConstraint("KeyNegotiation", new DataColumn[] {
                                this.columnNegotiationId}, true));
                this.columnMatchId.AllowDBNull = false;
                this.columnNegotiationId.AutoIncrement = true;
                this.columnNegotiationId.AllowDBNull = false;
                this.columnNegotiationId.Unique = true;
                this.columnQuantity.AllowDBNull = false;
                this.columnStatusCode.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.NegotiationLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Negotiation"));
                }
            }
            
            public NegotiationRow NewNegotiationRow()
            {
                return ((NegotiationRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new NegotiationRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(NegotiationRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.NegotiationRowChanged != null))
                {
                    this.NegotiationRowChanged(this, new NegotiationRowChangeEvent(((NegotiationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.NegotiationRowChanging != null))
                {
                    this.NegotiationRowChanging(this, new NegotiationRowChangeEvent(((NegotiationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.NegotiationRowDeleted != null))
                {
                    this.NegotiationRowDeleted(this, new NegotiationRowChangeEvent(((NegotiationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.NegotiationRowDeleting != null))
                {
                    this.NegotiationRowDeleting(this, new NegotiationRowChangeEvent(((NegotiationRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveNegotiationRow(NegotiationRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class NegotiationRow : Row
        {
            
            private NegotiationDataTable tableNegotiation;
            
            internal NegotiationRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableNegotiation = ((NegotiationDataTable)(this.Table));
            }
            
            public int ExecutionId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableNegotiation.ExecutionIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableNegotiation.ExecutionIdColumn] = value;
                }
            }
            
            public int MatchId
            {
                get
                {
                    return ((int)(this[this.tableNegotiation.MatchIdColumn]));
                }
                set
                {
                    this[this.tableNegotiation.MatchIdColumn] = value;
                }
            }
            
            public int NegotiationId
            {
                get
                {
                    return ((int)(this[this.tableNegotiation.NegotiationIdColumn]));
                }
                set
                {
                    this[this.tableNegotiation.NegotiationIdColumn] = value;
                }
            }
            
            public decimal Quantity
            {
                get
                {
                    return ((decimal)(this[this.tableNegotiation.QuantityColumn]));
                }
                set
                {
                    this[this.tableNegotiation.QuantityColumn] = value;
                }
            }
            
            public int StatusCode
            {
                get
                {
                    return ((int)(this[this.tableNegotiation.StatusCodeColumn]));
                }
                set
                {
                    this[this.tableNegotiation.StatusCodeColumn] = value;
                }
            }
            
            public ExecutionRow ExecutionRow
            {
                get
                {
                    if ((DataSetMarket.lockExecution.IsReaderLockHeld || DataSetMarket.lockExecution.IsWriterLockHeld))
                    {
                        return ((ExecutionRow)(this.GetParentRow(this.Table.ParentRelations["ExecutionNegotiation"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Execution"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["ExecutionNegotiation"]);
                }
            }
            
            public MatchRow MatchRow
            {
                get
                {
                    if ((DataSetMarket.lockMatch.IsReaderLockHeld || DataSetMarket.lockMatch.IsWriterLockHeld))
                    {
                        return ((MatchRow)(this.GetParentRow(this.Table.ParentRelations["MatchNegotiation"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Match"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["MatchNegotiation"]);
                }
            }
            
            public StatusRow StatusRow
            {
                get
                {
                    if ((DataSetMarket.lockStatus.IsReaderLockHeld || DataSetMarket.lockStatus.IsWriterLockHeld))
                    {
                        return ((StatusRow)(this.GetParentRow(this.Table.ParentRelations["StatusNegotiation"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Status"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["StatusNegotiation"]);
                }
            }
            
            public bool IsExecutionIdNull()
            {
                return this.IsNull(this.tableNegotiation.ExecutionIdColumn);
            }
            
            public void SetExecutionIdNull()
            {
                this[this.tableNegotiation.ExecutionIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class NegotiationRowChangeEvent : EventArgs
        {
            
            private NegotiationRow eventRow;
            
            private DataRowAction eventAction;
            
            public NegotiationRowChangeEvent(NegotiationRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public NegotiationRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ObjectDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private Column columnExternalId4;
            
            private Column columnExternalId5;
            
            private Column columnExternalId6;
            
            private Column columnExternalId7;
            
            private Column columnGroupPermission;
            
            private Column columnHidden;
            
            private Column columnName;
            
            private Column columnObjectId;
            
            private Column columnOwner;
            
            private Column columnOwnerPermission;
            
            private Column columnReadOnly;
            
            private Column columnTypeCode;
            
            private Column columnWorldPermission;
            
            private DataView viewKeyObjectExternalId0;
            
            private DataView viewKeyObjectExternalId1;
            
            private DataView viewKeyObjectExternalId2;
            
            private DataView viewKeyObjectExternalId3;
            
            private DataView viewKeyObjectExternalId4;
            
            private DataView viewKeyObjectExternalId5;
            
            private DataView viewKeyObjectExternalId6;
            
            private DataView viewKeyObjectExternalId7;
            
            internal ObjectDataTable() : 
                    base("Object")
            {
                this.InitClass();
            }
            
            internal ObjectDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public Column ExternalId4Column
            {
                get
                {
                    return this.columnExternalId4;
                }
            }
            
            public Column ExternalId5Column
            {
                get
                {
                    return this.columnExternalId5;
                }
            }
            
            public Column ExternalId6Column
            {
                get
                {
                    return this.columnExternalId6;
                }
            }
            
            public Column ExternalId7Column
            {
                get
                {
                    return this.columnExternalId7;
                }
            }
            
            public Column GroupPermissionColumn
            {
                get
                {
                    return this.columnGroupPermission;
                }
            }
            
            public Column HiddenColumn
            {
                get
                {
                    return this.columnHidden;
                }
            }
            
            public Column NameColumn
            {
                get
                {
                    return this.columnName;
                }
            }
            
            public Column ObjectIdColumn
            {
                get
                {
                    return this.columnObjectId;
                }
            }
            
            public Column OwnerColumn
            {
                get
                {
                    return this.columnOwner;
                }
            }
            
            public Column OwnerPermissionColumn
            {
                get
                {
                    return this.columnOwnerPermission;
                }
            }
            
            public Column ReadOnlyColumn
            {
                get
                {
                    return this.columnReadOnly;
                }
            }
            
            public Column TypeCodeColumn
            {
                get
                {
                    return this.columnTypeCode;
                }
            }
            
            public Column WorldPermissionColumn
            {
                get
                {
                    return this.columnWorldPermission;
                }
            }
            
            public DataView KeyObjectExternalId0
            {
                get
                {
                    return this.viewKeyObjectExternalId0;
                }
            }
            
            public DataView KeyObjectExternalId1
            {
                get
                {
                    return this.viewKeyObjectExternalId1;
                }
            }
            
            public DataView KeyObjectExternalId2
            {
                get
                {
                    return this.viewKeyObjectExternalId2;
                }
            }
            
            public DataView KeyObjectExternalId3
            {
                get
                {
                    return this.viewKeyObjectExternalId3;
                }
            }
            
            public DataView KeyObjectExternalId4
            {
                get
                {
                    return this.viewKeyObjectExternalId4;
                }
            }
            
            public DataView KeyObjectExternalId5
            {
                get
                {
                    return this.viewKeyObjectExternalId5;
                }
            }
            
            public DataView KeyObjectExternalId6
            {
                get
                {
                    return this.viewKeyObjectExternalId6;
                }
            }
            
            public DataView KeyObjectExternalId7
            {
                get
                {
                    return this.viewKeyObjectExternalId7;
                }
            }
            
            public ObjectRow this[int index]
            {
                get
                {
                    return ((ObjectRow)(this.Rows[index]));
                }
            }
            
            public event ObjectRowChangeEventHandler ObjectRowChanged;
            
            public event ObjectRowChangeEventHandler ObjectRowChanging;
            
            public event ObjectRowChangeEventHandler ObjectRowDeleted;
            
            public event ObjectRowChangeEventHandler ObjectRowDeleting;
            
            public void AddObjectRow(ObjectRow row)
            {
                this.Rows.Add(row);
            }
            
            public ObjectRow AddObjectRow(
                        string Description, 
                        string ExternalId0, 
                        string ExternalId1, 
                        string ExternalId2, 
                        string ExternalId3, 
                        string ExternalId4, 
                        string ExternalId5, 
                        string ExternalId6, 
                        string ExternalId7, 
                        int GroupPermission, 
                        bool Hidden, 
                        string Name, 
                        int Owner, 
                        int OwnerPermission, 
                        bool ReadOnly, 
                        TypeRow parentTypeRowByTypeObject, 
                        int WorldPermission)
            {
                ObjectRow rowObjectRow = ((ObjectRow)(this.NewRow()));
                rowObjectRow.ItemArray = new object[] {
                        Description,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3,
                        ExternalId4,
                        ExternalId5,
                        ExternalId6,
                        ExternalId7,
                        GroupPermission,
                        Hidden,
                        Name,
                        null,
                        Owner,
                        OwnerPermission,
                        ReadOnly,
                        parentTypeRowByTypeObject[3],
                        WorldPermission};
                this.Rows.Add(rowObjectRow);
                return rowObjectRow;
            }
            
            public ObjectRow FindByObjectId(int ObjectId)
            {
                return ((ObjectRow)(this.Rows.Find(new object[] {
                            ObjectId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                ObjectDataTable cln = ((ObjectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new ObjectDataTable();
            }
            
            internal void InitVars()
            {
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
                this.columnExternalId4 = this.Columns["ExternalId4"];
                this.columnExternalId5 = this.Columns["ExternalId5"];
                this.columnExternalId6 = this.Columns["ExternalId6"];
                this.columnExternalId7 = this.Columns["ExternalId7"];
                this.columnGroupPermission = this.Columns["GroupPermission"];
                this.columnHidden = this.Columns["Hidden"];
                this.columnName = this.Columns["Name"];
                this.columnObjectId = this.Columns["ObjectId"];
                this.columnOwner = this.Columns["Owner"];
                this.columnOwnerPermission = this.Columns["OwnerPermission"];
                this.columnReadOnly = this.Columns["ReadOnly"];
                this.columnTypeCode = this.Columns["TypeCode"];
                this.columnWorldPermission = this.Columns["WorldPermission"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.columnExternalId4 = new Column("ExternalId4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId4);
                this.columnExternalId5 = new Column("ExternalId5", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId5);
                this.columnExternalId6 = new Column("ExternalId6", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId6);
                this.columnExternalId7 = new Column("ExternalId7", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId7);
                this.columnGroupPermission = new Column("GroupPermission", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGroupPermission);
                this.columnHidden = new Column("Hidden", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHidden);
                this.columnName = new Column("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnObjectId = new Column("ObjectId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnObjectId);
                this.columnOwner = new Column("Owner", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOwner);
                this.columnOwnerPermission = new Column("OwnerPermission", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOwnerPermission);
                this.columnReadOnly = new Column("ReadOnly", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReadOnly);
                this.columnTypeCode = new Column("TypeCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTypeCode);
                this.columnWorldPermission = new Column("WorldPermission", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWorldPermission);
                this.Constraints.Add(new UniqueConstraint("KeyObject", new DataColumn[] {
                                this.columnObjectId}, true));
                this.viewKeyObjectExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewKeyObjectExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.viewKeyObjectExternalId2 = new DataView(this, null, "ExternalId2", DataViewRowState.CurrentRows);
                this.viewKeyObjectExternalId3 = new DataView(this, null, "ExternalId3", DataViewRowState.CurrentRows);
                this.viewKeyObjectExternalId4 = new DataView(this, null, "ExternalId4", DataViewRowState.CurrentRows);
                this.viewKeyObjectExternalId5 = new DataView(this, null, "ExternalId5", DataViewRowState.CurrentRows);
                this.viewKeyObjectExternalId6 = new DataView(this, null, "ExternalId6", DataViewRowState.CurrentRows);
                this.viewKeyObjectExternalId7 = new DataView(this, null, "ExternalId7", DataViewRowState.CurrentRows);
                this.columnGroupPermission.AllowDBNull = false;
                this.columnGroupPermission.DefaultValue = 0;
                this.columnHidden.AllowDBNull = false;
                this.columnHidden.DefaultValue = false;
                this.columnName.AllowDBNull = false;
                this.columnObjectId.AutoIncrement = true;
                this.columnObjectId.AllowDBNull = false;
                this.columnObjectId.Unique = true;
                this.columnOwner.AllowDBNull = false;
                this.columnOwner.DefaultValue = 0;
                this.columnOwnerPermission.AllowDBNull = false;
                this.columnOwnerPermission.DefaultValue = 0;
                this.columnReadOnly.AllowDBNull = false;
                this.columnReadOnly.DefaultValue = false;
                this.columnTypeCode.AllowDBNull = false;
                this.columnTypeCode.DefaultValue = "Object";
                this.columnWorldPermission.AllowDBNull = false;
                this.columnWorldPermission.DefaultValue = 0;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.ObjectLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Object"));
                }
            }
            
            public ObjectRow NewObjectRow()
            {
                return ((ObjectRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ObjectRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(ObjectRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ObjectRowChanged != null))
                {
                    this.ObjectRowChanged(this, new ObjectRowChangeEvent(((ObjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ObjectRowChanging != null))
                {
                    this.ObjectRowChanging(this, new ObjectRowChangeEvent(((ObjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ObjectRowDeleted != null))
                {
                    this.ObjectRowDeleted(this, new ObjectRowChangeEvent(((ObjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ObjectRowDeleting != null))
                {
                    this.ObjectRowDeleting(this, new ObjectRowChangeEvent(((ObjectRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveObjectRow(ObjectRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ObjectRow : Row
        {
            
            private ObjectDataTable tableObject;
            
            internal ObjectRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableObject = ((ObjectDataTable)(this.Table));
            }
            
            public string Description
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.DescriptionColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.ExternalId3Column] = value;
                }
            }
            
            public string ExternalId4
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.ExternalId4Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.ExternalId4Column] = value;
                }
            }
            
            public string ExternalId5
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.ExternalId5Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.ExternalId5Column] = value;
                }
            }
            
            public string ExternalId6
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.ExternalId6Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.ExternalId6Column] = value;
                }
            }
            
            public string ExternalId7
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.ExternalId7Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.ExternalId7Column] = value;
                }
            }
            
            public int GroupPermission
            {
                get
                {
                    return ((int)(this[this.tableObject.GroupPermissionColumn]));
                }
                set
                {
                    this[this.tableObject.GroupPermissionColumn] = value;
                }
            }
            
            public bool Hidden
            {
                get
                {
                    return ((bool)(this[this.tableObject.HiddenColumn]));
                }
                set
                {
                    this[this.tableObject.HiddenColumn] = value;
                }
            }
            
            public string Name
            {
                get
                {
                    return ((string)(this[this.tableObject.NameColumn]));
                }
                set
                {
                    this[this.tableObject.NameColumn] = value;
                }
            }
            
            public int ObjectId
            {
                get
                {
                    return ((int)(this[this.tableObject.ObjectIdColumn]));
                }
                set
                {
                    this[this.tableObject.ObjectIdColumn] = value;
                }
            }
            
            public int Owner
            {
                get
                {
                    return ((int)(this[this.tableObject.OwnerColumn]));
                }
                set
                {
                    this[this.tableObject.OwnerColumn] = value;
                }
            }
            
            public int OwnerPermission
            {
                get
                {
                    return ((int)(this[this.tableObject.OwnerPermissionColumn]));
                }
                set
                {
                    this[this.tableObject.OwnerPermissionColumn] = value;
                }
            }
            
            public bool ReadOnly
            {
                get
                {
                    return ((bool)(this[this.tableObject.ReadOnlyColumn]));
                }
                set
                {
                    this[this.tableObject.ReadOnlyColumn] = value;
                }
            }
            
            public string TypeCode
            {
                get
                {
                    return ((string)(this[this.tableObject.TypeCodeColumn]));
                }
                set
                {
                    this[this.tableObject.TypeCodeColumn] = value;
                }
            }
            
            public int WorldPermission
            {
                get
                {
                    return ((int)(this[this.tableObject.WorldPermissionColumn]));
                }
                set
                {
                    this[this.tableObject.WorldPermissionColumn] = value;
                }
            }
            
            public TypeRow TypeRow
            {
                get
                {
                    if ((DataSetMarket.lockType.IsReaderLockHeld || DataSetMarket.lockType.IsWriterLockHeld))
                    {
                        return ((TypeRow)(this.GetParentRow(this.Table.ParentRelations["TypeObject"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Type"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["TypeObject"]);
                }
            }
            
            public bool IsDescriptionNull()
            {
                return this.IsNull(this.tableObject.DescriptionColumn);
            }
            
            public void SetDescriptionNull()
            {
                this[this.tableObject.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableObject.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableObject.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableObject.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableObject.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableObject.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableObject.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableObject.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableObject.ExternalId3Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId4Null()
            {
                return this.IsNull(this.tableObject.ExternalId4Column);
            }
            
            public void SetExternalId4Null()
            {
                this[this.tableObject.ExternalId4Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId5Null()
            {
                return this.IsNull(this.tableObject.ExternalId5Column);
            }
            
            public void SetExternalId5Null()
            {
                this[this.tableObject.ExternalId5Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId6Null()
            {
                return this.IsNull(this.tableObject.ExternalId6Column);
            }
            
            public void SetExternalId6Null()
            {
                this[this.tableObject.ExternalId6Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId7Null()
            {
                return this.IsNull(this.tableObject.ExternalId7Column);
            }
            
            public void SetExternalId7Null()
            {
                this[this.tableObject.ExternalId7Column] = System.Convert.DBNull;
            }
            
            public AccountBaseRow[] GetAccountBaseRows()
            {
                return ((AccountBaseRow[])(this.GetChildRows(this.Table.ChildRelations["ObjectAccountBase"])));
            }
            
            public BlotterRow[] GetBlotterRows()
            {
                return ((BlotterRow[])(this.GetChildRows(this.Table.ChildRelations["ObjectBlotter"])));
            }
            
            public FolderRow[] GetFolderRows()
            {
                return ((FolderRow[])(this.GetChildRows(this.Table.ChildRelations["ObjectFolder"])));
            }
            
            public IssuerRow[] GetIssuerRows()
            {
                return ((IssuerRow[])(this.GetChildRows(this.Table.ChildRelations["ObjectIssuer"])));
            }
            
            public ObjectTreeRow[] GetObjectTreeRowsByObjectObjectTreeChildId()
            {
                return ((ObjectTreeRow[])(this.GetChildRows(this.Table.ChildRelations["ObjectObjectTreeChildId"])));
            }
            
            public ObjectTreeRow[] GetObjectTreeRowsByObjectObjectTreeParentId()
            {
                return ((ObjectTreeRow[])(this.GetChildRows(this.Table.ChildRelations["ObjectObjectTreeParentId"])));
            }
            
            public SecurityRow[] GetSecurityRows()
            {
                return ((SecurityRow[])(this.GetChildRows(this.Table.ChildRelations["ObjectSecurity"])));
            }
            
            public UserRow[] GetUserRows()
            {
                return ((UserRow[])(this.GetChildRows(this.Table.ChildRelations["ObjectUser"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ObjectRowChangeEvent : EventArgs
        {
            
            private ObjectRow eventRow;
            
            private DataRowAction eventAction;
            
            public ObjectRowChangeEvent(ObjectRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ObjectRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ObjectTreeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnObjectTreeId;
            
            private Column columnChildId;
            
            private Column columnParentId;
            
            private Column columnExternalId0;
            
            private DataView viewKeyObjectTreeExternalId0;
            
            internal ObjectTreeDataTable() : 
                    base("ObjectTree")
            {
                this.InitClass();
            }
            
            internal ObjectTreeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ObjectTreeIdColumn
            {
                get
                {
                    return this.columnObjectTreeId;
                }
            }
            
            public Column ChildIdColumn
            {
                get
                {
                    return this.columnChildId;
                }
            }
            
            public Column ParentIdColumn
            {
                get
                {
                    return this.columnParentId;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public DataView KeyObjectTreeExternalId0
            {
                get
                {
                    return this.viewKeyObjectTreeExternalId0;
                }
            }
            
            public ObjectTreeRow this[int index]
            {
                get
                {
                    return ((ObjectTreeRow)(this.Rows[index]));
                }
            }
            
            public event ObjectTreeRowChangeEventHandler ObjectTreeRowChanged;
            
            public event ObjectTreeRowChangeEventHandler ObjectTreeRowChanging;
            
            public event ObjectTreeRowChangeEventHandler ObjectTreeRowDeleted;
            
            public event ObjectTreeRowChangeEventHandler ObjectTreeRowDeleting;
            
            public void AddObjectTreeRow(ObjectTreeRow row)
            {
                this.Rows.Add(row);
            }
            
            public ObjectTreeRow AddObjectTreeRow(ObjectRow parentObjectRowByObjectObjectTreeChildId, ObjectRow parentObjectRowByObjectObjectTreeParentId, string ExternalId0)
            {
                ObjectTreeRow rowObjectTreeRow = ((ObjectTreeRow)(this.NewRow()));
                rowObjectTreeRow.ItemArray = new object[] {
                        null,
                        parentObjectRowByObjectObjectTreeChildId[12],
                        parentObjectRowByObjectObjectTreeParentId[12],
                        ExternalId0};
                this.Rows.Add(rowObjectTreeRow);
                return rowObjectTreeRow;
            }
            
            public ObjectTreeRow FindByObjectTreeId(int ObjectTreeId)
            {
                return ((ObjectTreeRow)(this.Rows.Find(new object[] {
                            ObjectTreeId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                ObjectTreeDataTable cln = ((ObjectTreeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new ObjectTreeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnObjectTreeId = this.Columns["ObjectTreeId"];
                this.columnChildId = this.Columns["ChildId"];
                this.columnParentId = this.Columns["ParentId"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnObjectTreeId = new Column("ObjectTreeId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnObjectTreeId);
                this.columnChildId = new Column("ChildId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChildId);
                this.columnParentId = new Column("ParentId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnParentId);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.Constraints.Add(new UniqueConstraint("KeyObjectTree", new DataColumn[] {
                                this.columnObjectTreeId}, true));
                this.viewKeyObjectTreeExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.columnObjectTreeId.AutoIncrement = true;
                this.columnObjectTreeId.AllowDBNull = false;
                this.columnObjectTreeId.Unique = true;
                this.columnChildId.AllowDBNull = false;
                this.columnParentId.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.ObjectTreeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "ObjectTree"));
                }
            }
            
            public ObjectTreeRow NewObjectTreeRow()
            {
                return ((ObjectTreeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ObjectTreeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(ObjectTreeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ObjectTreeRowChanged != null))
                {
                    this.ObjectTreeRowChanged(this, new ObjectTreeRowChangeEvent(((ObjectTreeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ObjectTreeRowChanging != null))
                {
                    this.ObjectTreeRowChanging(this, new ObjectTreeRowChangeEvent(((ObjectTreeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ObjectTreeRowDeleted != null))
                {
                    this.ObjectTreeRowDeleted(this, new ObjectTreeRowChangeEvent(((ObjectTreeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ObjectTreeRowDeleting != null))
                {
                    this.ObjectTreeRowDeleting(this, new ObjectTreeRowChangeEvent(((ObjectTreeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveObjectTreeRow(ObjectTreeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ObjectTreeRow : Row
        {
            
            private ObjectTreeDataTable tableObjectTree;
            
            internal ObjectTreeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableObjectTree = ((ObjectTreeDataTable)(this.Table));
            }
            
            public int ObjectTreeId
            {
                get
                {
                    return ((int)(this[this.tableObjectTree.ObjectTreeIdColumn]));
                }
                set
                {
                    this[this.tableObjectTree.ObjectTreeIdColumn] = value;
                }
            }
            
            public int ChildId
            {
                get
                {
                    return ((int)(this[this.tableObjectTree.ChildIdColumn]));
                }
                set
                {
                    this[this.tableObjectTree.ChildIdColumn] = value;
                }
            }
            
            public int ParentId
            {
                get
                {
                    return ((int)(this[this.tableObjectTree.ParentIdColumn]));
                }
                set
                {
                    this[this.tableObjectTree.ParentIdColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObjectTree.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObjectTree.ExternalId0Column] = value;
                }
            }
            
            public ObjectRow ObjectRowByObjectObjectTreeChildId
            {
                get
                {
                    if ((DataSetMarket.lockObject.IsReaderLockHeld || DataSetMarket.lockObject.IsWriterLockHeld))
                    {
                        return ((ObjectRow)(this.GetParentRow(this.Table.ParentRelations["ObjectObjectTreeChildId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Object"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["ObjectObjectTreeChildId"]);
                }
            }
            
            public ObjectRow ObjectRowByObjectObjectTreeParentId
            {
                get
                {
                    if ((DataSetMarket.lockObject.IsReaderLockHeld || DataSetMarket.lockObject.IsWriterLockHeld))
                    {
                        return ((ObjectRow)(this.GetParentRow(this.Table.ParentRelations["ObjectObjectTreeParentId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Object"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["ObjectObjectTreeParentId"]);
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableObjectTree.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableObjectTree.ExternalId0Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ObjectTreeRowChangeEvent : EventArgs
        {
            
            private ObjectTreeRow eventRow;
            
            private DataRowAction eventAction;
            
            public ObjectTreeRowChangeEvent(ObjectTreeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ObjectTreeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrderTypeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnCashSign;
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private Column columnMnemonic;
            
            private Column columnOrderTypeCode;
            
            private Column columnQuantitySign;
            
            private DataView viewKeyOrderTypeExternalId0;
            
            private DataView viewKeyOrderTypeExternalId1;
            
            private DataView viewKeyOrderTypeExternalId2;
            
            private DataView viewKeyOrderTypeExternalId3;
            
            internal OrderTypeDataTable() : 
                    base("OrderType")
            {
                this.InitClass();
            }
            
            internal OrderTypeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column CashSignColumn
            {
                get
                {
                    return this.columnCashSign;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public Column MnemonicColumn
            {
                get
                {
                    return this.columnMnemonic;
                }
            }
            
            public Column OrderTypeCodeColumn
            {
                get
                {
                    return this.columnOrderTypeCode;
                }
            }
            
            public Column QuantitySignColumn
            {
                get
                {
                    return this.columnQuantitySign;
                }
            }
            
            public DataView KeyOrderTypeExternalId0
            {
                get
                {
                    return this.viewKeyOrderTypeExternalId0;
                }
            }
            
            public DataView KeyOrderTypeExternalId1
            {
                get
                {
                    return this.viewKeyOrderTypeExternalId1;
                }
            }
            
            public DataView KeyOrderTypeExternalId2
            {
                get
                {
                    return this.viewKeyOrderTypeExternalId2;
                }
            }
            
            public DataView KeyOrderTypeExternalId3
            {
                get
                {
                    return this.viewKeyOrderTypeExternalId3;
                }
            }
            
            public OrderTypeRow this[int index]
            {
                get
                {
                    return ((OrderTypeRow)(this.Rows[index]));
                }
            }
            
            public event OrderTypeRowChangeEventHandler OrderTypeRowChanged;
            
            public event OrderTypeRowChangeEventHandler OrderTypeRowChanging;
            
            public event OrderTypeRowChangeEventHandler OrderTypeRowDeleted;
            
            public event OrderTypeRowChangeEventHandler OrderTypeRowDeleting;
            
            public void AddOrderTypeRow(OrderTypeRow row)
            {
                this.Rows.Add(row);
            }
            
            public OrderTypeRow AddOrderTypeRow(decimal CashSign, string Description, string ExternalId0, string ExternalId1, string ExternalId2, string ExternalId3, string Mnemonic, int OrderTypeCode, decimal QuantitySign)
            {
                OrderTypeRow rowOrderTypeRow = ((OrderTypeRow)(this.NewRow()));
                rowOrderTypeRow.ItemArray = new object[] {
                        CashSign,
                        Description,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3,
                        Mnemonic,
                        OrderTypeCode,
                        QuantitySign};
                this.Rows.Add(rowOrderTypeRow);
                return rowOrderTypeRow;
            }
            
            public OrderTypeRow FindByOrderTypeCode(int OrderTypeCode)
            {
                return ((OrderTypeRow)(this.Rows.Find(new object[] {
                            OrderTypeCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                OrderTypeDataTable cln = ((OrderTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new OrderTypeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnCashSign = this.Columns["CashSign"];
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnOrderTypeCode = this.Columns["OrderTypeCode"];
                this.columnQuantitySign = this.Columns["QuantitySign"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnCashSign = new Column("CashSign", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCashSign);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.columnMnemonic = new Column("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnOrderTypeCode = new Column("OrderTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrderTypeCode);
                this.columnQuantitySign = new Column("QuantitySign", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQuantitySign);
                this.Constraints.Add(new UniqueConstraint("KeyOrderType", new DataColumn[] {
                                this.columnOrderTypeCode}, true));
                this.viewKeyOrderTypeExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewKeyOrderTypeExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.viewKeyOrderTypeExternalId2 = new DataView(this, null, "ExternalId2", DataViewRowState.CurrentRows);
                this.viewKeyOrderTypeExternalId3 = new DataView(this, null, "ExternalId3", DataViewRowState.CurrentRows);
                this.columnCashSign.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnMnemonic.AllowDBNull = false;
                this.columnOrderTypeCode.AllowDBNull = false;
                this.columnOrderTypeCode.Unique = true;
                this.columnQuantitySign.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.OrderTypeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "OrderType"));
                }
            }
            
            public OrderTypeRow NewOrderTypeRow()
            {
                return ((OrderTypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new OrderTypeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(OrderTypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.OrderTypeRowChanged != null))
                {
                    this.OrderTypeRowChanged(this, new OrderTypeRowChangeEvent(((OrderTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.OrderTypeRowChanging != null))
                {
                    this.OrderTypeRowChanging(this, new OrderTypeRowChangeEvent(((OrderTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.OrderTypeRowDeleted != null))
                {
                    this.OrderTypeRowDeleted(this, new OrderTypeRowChangeEvent(((OrderTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.OrderTypeRowDeleting != null))
                {
                    this.OrderTypeRowDeleting(this, new OrderTypeRowChangeEvent(((OrderTypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveOrderTypeRow(OrderTypeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrderTypeRow : Row
        {
            
            private OrderTypeDataTable tableOrderType;
            
            internal OrderTypeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableOrderType = ((OrderTypeDataTable)(this.Table));
            }
            
            public decimal CashSign
            {
                get
                {
                    return ((decimal)(this[this.tableOrderType.CashSignColumn]));
                }
                set
                {
                    this[this.tableOrderType.CashSignColumn] = value;
                }
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableOrderType.DescriptionColumn]));
                }
                set
                {
                    this[this.tableOrderType.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableOrderType.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableOrderType.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableOrderType.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableOrderType.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableOrderType.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableOrderType.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableOrderType.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableOrderType.ExternalId3Column] = value;
                }
            }
            
            public string Mnemonic
            {
                get
                {
                    return ((string)(this[this.tableOrderType.MnemonicColumn]));
                }
                set
                {
                    this[this.tableOrderType.MnemonicColumn] = value;
                }
            }
            
            public int OrderTypeCode
            {
                get
                {
                    return ((int)(this[this.tableOrderType.OrderTypeCodeColumn]));
                }
                set
                {
                    this[this.tableOrderType.OrderTypeCodeColumn] = value;
                }
            }
            
            public decimal QuantitySign
            {
                get
                {
                    return ((decimal)(this[this.tableOrderType.QuantitySignColumn]));
                }
                set
                {
                    this[this.tableOrderType.QuantitySignColumn] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableOrderType.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableOrderType.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableOrderType.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableOrderType.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableOrderType.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableOrderType.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableOrderType.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableOrderType.ExternalId3Column] = System.Convert.DBNull;
            }
            
            public AllocationRow[] GetAllocationRows()
            {
                return ((AllocationRow[])(this.GetChildRows(this.Table.ChildRelations["OrderTypeAllocation"])));
            }
            
            public SourceOrderRow[] GetSourceOrderRows()
            {
                return ((SourceOrderRow[])(this.GetChildRows(this.Table.ChildRelations["OrderTypeSourceOrder"])));
            }
            
            public WorkingOrderRow[] GetWorkingOrderRows()
            {
                return ((WorkingOrderRow[])(this.GetChildRows(this.Table.ChildRelations["OrderTypeWorkingOrder"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrderTypeRowChangeEvent : EventArgs
        {
            
            private OrderTypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public OrderTypeRowChangeEvent(OrderTypeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public OrderTypeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PartyTypeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnMnemonic;
            
            private Column columnPartyTypeCode;
            
            private DataView viewKeyPartyTypeExternalId0;
            
            private DataView viewKeyPartyTypeExternalId1;
            
            internal PartyTypeDataTable() : 
                    base("PartyType")
            {
                this.InitClass();
            }
            
            internal PartyTypeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column MnemonicColumn
            {
                get
                {
                    return this.columnMnemonic;
                }
            }
            
            public Column PartyTypeCodeColumn
            {
                get
                {
                    return this.columnPartyTypeCode;
                }
            }
            
            public DataView KeyPartyTypeExternalId0
            {
                get
                {
                    return this.viewKeyPartyTypeExternalId0;
                }
            }
            
            public DataView KeyPartyTypeExternalId1
            {
                get
                {
                    return this.viewKeyPartyTypeExternalId1;
                }
            }
            
            public PartyTypeRow this[int index]
            {
                get
                {
                    return ((PartyTypeRow)(this.Rows[index]));
                }
            }
            
            public event PartyTypeRowChangeEventHandler PartyTypeRowChanged;
            
            public event PartyTypeRowChangeEventHandler PartyTypeRowChanging;
            
            public event PartyTypeRowChangeEventHandler PartyTypeRowDeleted;
            
            public event PartyTypeRowChangeEventHandler PartyTypeRowDeleting;
            
            public void AddPartyTypeRow(PartyTypeRow row)
            {
                this.Rows.Add(row);
            }
            
            public PartyTypeRow AddPartyTypeRow(string Description, string ExternalId0, string ExternalId1, string Mnemonic, int PartyTypeCode)
            {
                PartyTypeRow rowPartyTypeRow = ((PartyTypeRow)(this.NewRow()));
                rowPartyTypeRow.ItemArray = new object[] {
                        Description,
                        ExternalId0,
                        ExternalId1,
                        Mnemonic,
                        PartyTypeCode};
                this.Rows.Add(rowPartyTypeRow);
                return rowPartyTypeRow;
            }
            
            public PartyTypeRow FindByPartyTypeCode(int PartyTypeCode)
            {
                return ((PartyTypeRow)(this.Rows.Find(new object[] {
                            PartyTypeCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                PartyTypeDataTable cln = ((PartyTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new PartyTypeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnPartyTypeCode = this.Columns["PartyTypeCode"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnMnemonic = new Column("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnPartyTypeCode = new Column("PartyTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPartyTypeCode);
                this.Constraints.Add(new UniqueConstraint("KeyPartyType", new DataColumn[] {
                                this.columnPartyTypeCode}, true));
                this.viewKeyPartyTypeExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewKeyPartyTypeExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.columnDescription.AllowDBNull = false;
                this.columnMnemonic.AllowDBNull = false;
                this.columnPartyTypeCode.AllowDBNull = false;
                this.columnPartyTypeCode.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.PartyTypeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "PartyType"));
                }
            }
            
            public PartyTypeRow NewPartyTypeRow()
            {
                return ((PartyTypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new PartyTypeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(PartyTypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.PartyTypeRowChanged != null))
                {
                    this.PartyTypeRowChanged(this, new PartyTypeRowChangeEvent(((PartyTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.PartyTypeRowChanging != null))
                {
                    this.PartyTypeRowChanging(this, new PartyTypeRowChangeEvent(((PartyTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.PartyTypeRowDeleted != null))
                {
                    this.PartyTypeRowDeleted(this, new PartyTypeRowChangeEvent(((PartyTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.PartyTypeRowDeleting != null))
                {
                    this.PartyTypeRowDeleting(this, new PartyTypeRowChangeEvent(((PartyTypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePartyTypeRow(PartyTypeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PartyTypeRow : Row
        {
            
            private PartyTypeDataTable tablePartyType;
            
            internal PartyTypeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tablePartyType = ((PartyTypeDataTable)(this.Table));
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tablePartyType.DescriptionColumn]));
                }
                set
                {
                    this[this.tablePartyType.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablePartyType.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePartyType.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablePartyType.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePartyType.ExternalId1Column] = value;
                }
            }
            
            public string Mnemonic
            {
                get
                {
                    return ((string)(this[this.tablePartyType.MnemonicColumn]));
                }
                set
                {
                    this[this.tablePartyType.MnemonicColumn] = value;
                }
            }
            
            public int PartyTypeCode
            {
                get
                {
                    return ((int)(this[this.tablePartyType.PartyTypeCodeColumn]));
                }
                set
                {
                    this[this.tablePartyType.PartyTypeCodeColumn] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tablePartyType.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tablePartyType.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tablePartyType.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tablePartyType.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public BlotterRow[] GetBlotterRows()
            {
                return ((BlotterRow[])(this.GetChildRows(this.Table.ChildRelations["PartyTypeBlotter"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PartyTypeRowChangeEvent : EventArgs
        {
            
            private PartyTypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public PartyTypeRowChangeEvent(PartyTypeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PartyTypeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PositionDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnAccountId;
            
            private Column columnPositionTypeCode;
            
            private Column columnSecurityId;
            
            private Column columnUserData0;
            
            private Column columnUserData1;
            
            private Column columnUserData2;
            
            private Column columnUserData3;
            
            private Column columnUserData4;
            
            private Column columnUserData5;
            
            private Column columnUserData6;
            
            private Column columnUserData7;
            
            internal PositionDataTable() : 
                    base("Position")
            {
                this.InitClass();
            }
            
            internal PositionDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column AccountIdColumn
            {
                get
                {
                    return this.columnAccountId;
                }
            }
            
            public Column PositionTypeCodeColumn
            {
                get
                {
                    return this.columnPositionTypeCode;
                }
            }
            
            public Column SecurityIdColumn
            {
                get
                {
                    return this.columnSecurityId;
                }
            }
            
            public Column UserData0Column
            {
                get
                {
                    return this.columnUserData0;
                }
            }
            
            public Column UserData1Column
            {
                get
                {
                    return this.columnUserData1;
                }
            }
            
            public Column UserData2Column
            {
                get
                {
                    return this.columnUserData2;
                }
            }
            
            public Column UserData3Column
            {
                get
                {
                    return this.columnUserData3;
                }
            }
            
            public Column UserData4Column
            {
                get
                {
                    return this.columnUserData4;
                }
            }
            
            public Column UserData5Column
            {
                get
                {
                    return this.columnUserData5;
                }
            }
            
            public Column UserData6Column
            {
                get
                {
                    return this.columnUserData6;
                }
            }
            
            public Column UserData7Column
            {
                get
                {
                    return this.columnUserData7;
                }
            }
            
            public PositionRow this[int index]
            {
                get
                {
                    return ((PositionRow)(this.Rows[index]));
                }
            }
            
            public event PositionRowChangeEventHandler PositionRowChanged;
            
            public event PositionRowChangeEventHandler PositionRowChanging;
            
            public event PositionRowChangeEventHandler PositionRowDeleted;
            
            public event PositionRowChangeEventHandler PositionRowDeleting;
            
            public void AddPositionRow(PositionRow row)
            {
                this.Rows.Add(row);
            }
            
            public PositionRow AddPositionRow(AccountRow parentAccountRowByAccountPosition, PositionTypeRow parentPositionTypeRowByPositionTypePosition, SecurityRow parentSecurityRowBySecurityPosition, decimal UserData0, decimal UserData1, decimal UserData2, decimal UserData3, decimal UserData4, decimal UserData5, decimal UserData6, decimal UserData7)
            {
                PositionRow rowPositionRow = ((PositionRow)(this.NewRow()));
                rowPositionRow.ItemArray = new object[] {
                        parentAccountRowByAccountPosition[36],
                        parentPositionTypeRowByPositionTypePosition[5],
                        parentSecurityRowBySecurityPosition[23],
                        UserData0,
                        UserData1,
                        UserData2,
                        UserData3,
                        UserData4,
                        UserData5,
                        UserData6,
                        UserData7};
                this.Rows.Add(rowPositionRow);
                return rowPositionRow;
            }
            
            public PositionRow FindByAccountIdSecurityIdPositionTypeCode(int AccountId, int SecurityId, int PositionTypeCode)
            {
                return ((PositionRow)(this.Rows.Find(new object[] {
                            AccountId,
                            SecurityId,
                            PositionTypeCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                PositionDataTable cln = ((PositionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new PositionDataTable();
            }
            
            internal void InitVars()
            {
                this.columnAccountId = this.Columns["AccountId"];
                this.columnPositionTypeCode = this.Columns["PositionTypeCode"];
                this.columnSecurityId = this.Columns["SecurityId"];
                this.columnUserData0 = this.Columns["UserData0"];
                this.columnUserData1 = this.Columns["UserData1"];
                this.columnUserData2 = this.Columns["UserData2"];
                this.columnUserData3 = this.Columns["UserData3"];
                this.columnUserData4 = this.Columns["UserData4"];
                this.columnUserData5 = this.Columns["UserData5"];
                this.columnUserData6 = this.Columns["UserData6"];
                this.columnUserData7 = this.Columns["UserData7"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnAccountId = new Column("AccountId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountId);
                this.columnPositionTypeCode = new Column("PositionTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPositionTypeCode);
                this.columnSecurityId = new Column("SecurityId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityId);
                this.columnUserData0 = new Column("UserData0", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData0);
                this.columnUserData1 = new Column("UserData1", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData1);
                this.columnUserData2 = new Column("UserData2", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData2);
                this.columnUserData3 = new Column("UserData3", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData3);
                this.columnUserData4 = new Column("UserData4", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData4);
                this.columnUserData5 = new Column("UserData5", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData5);
                this.columnUserData6 = new Column("UserData6", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData6);
                this.columnUserData7 = new Column("UserData7", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData7);
                this.Constraints.Add(new UniqueConstraint("KeyPosition", new DataColumn[] {
                                this.columnAccountId,
                                this.columnSecurityId,
                                this.columnPositionTypeCode}, true));
                this.columnAccountId.AllowDBNull = false;
                this.columnPositionTypeCode.AllowDBNull = false;
                this.columnSecurityId.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.PositionLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Position"));
                }
            }
            
            public PositionRow NewPositionRow()
            {
                return ((PositionRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new PositionRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(PositionRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.PositionRowChanged != null))
                {
                    this.PositionRowChanged(this, new PositionRowChangeEvent(((PositionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.PositionRowChanging != null))
                {
                    this.PositionRowChanging(this, new PositionRowChangeEvent(((PositionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.PositionRowDeleted != null))
                {
                    this.PositionRowDeleted(this, new PositionRowChangeEvent(((PositionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.PositionRowDeleting != null))
                {
                    this.PositionRowDeleting(this, new PositionRowChangeEvent(((PositionRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePositionRow(PositionRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PositionRow : Row
        {
            
            private PositionDataTable tablePosition;
            
            internal PositionRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tablePosition = ((PositionDataTable)(this.Table));
            }
            
            public int AccountId
            {
                get
                {
                    return ((int)(this[this.tablePosition.AccountIdColumn]));
                }
                set
                {
                    this[this.tablePosition.AccountIdColumn] = value;
                }
            }
            
            public int PositionTypeCode
            {
                get
                {
                    return ((int)(this[this.tablePosition.PositionTypeCodeColumn]));
                }
                set
                {
                    this[this.tablePosition.PositionTypeCodeColumn] = value;
                }
            }
            
            public int SecurityId
            {
                get
                {
                    return ((int)(this[this.tablePosition.SecurityIdColumn]));
                }
                set
                {
                    this[this.tablePosition.SecurityIdColumn] = value;
                }
            }
            
            public decimal UserData0
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablePosition.UserData0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePosition.UserData0Column] = value;
                }
            }
            
            public decimal UserData1
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablePosition.UserData1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePosition.UserData1Column] = value;
                }
            }
            
            public decimal UserData2
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablePosition.UserData2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePosition.UserData2Column] = value;
                }
            }
            
            public decimal UserData3
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablePosition.UserData3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePosition.UserData3Column] = value;
                }
            }
            
            public decimal UserData4
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablePosition.UserData4Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePosition.UserData4Column] = value;
                }
            }
            
            public decimal UserData5
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablePosition.UserData5Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePosition.UserData5Column] = value;
                }
            }
            
            public decimal UserData6
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablePosition.UserData6Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePosition.UserData6Column] = value;
                }
            }
            
            public decimal UserData7
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablePosition.UserData7Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePosition.UserData7Column] = value;
                }
            }
            
            public AccountRow AccountRow
            {
                get
                {
                    if ((DataSetMarket.lockAccount.IsReaderLockHeld || DataSetMarket.lockAccount.IsWriterLockHeld))
                    {
                        return ((AccountRow)(this.GetParentRow(this.Table.ParentRelations["AccountPosition"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Account"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["AccountPosition"]);
                }
            }
            
            public PositionTypeRow PositionTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockPositionType.IsReaderLockHeld || DataSetMarket.lockPositionType.IsWriterLockHeld))
                    {
                        return ((PositionTypeRow)(this.GetParentRow(this.Table.ParentRelations["PositionTypePosition"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "PositionType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["PositionTypePosition"]);
                }
            }
            
            public SecurityRow SecurityRow
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["SecurityPosition"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["SecurityPosition"]);
                }
            }
            
            public bool IsUserData0Null()
            {
                return this.IsNull(this.tablePosition.UserData0Column);
            }
            
            public void SetUserData0Null()
            {
                this[this.tablePosition.UserData0Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData1Null()
            {
                return this.IsNull(this.tablePosition.UserData1Column);
            }
            
            public void SetUserData1Null()
            {
                this[this.tablePosition.UserData1Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData2Null()
            {
                return this.IsNull(this.tablePosition.UserData2Column);
            }
            
            public void SetUserData2Null()
            {
                this[this.tablePosition.UserData2Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData3Null()
            {
                return this.IsNull(this.tablePosition.UserData3Column);
            }
            
            public void SetUserData3Null()
            {
                this[this.tablePosition.UserData3Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData4Null()
            {
                return this.IsNull(this.tablePosition.UserData4Column);
            }
            
            public void SetUserData4Null()
            {
                this[this.tablePosition.UserData4Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData5Null()
            {
                return this.IsNull(this.tablePosition.UserData5Column);
            }
            
            public void SetUserData5Null()
            {
                this[this.tablePosition.UserData5Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData6Null()
            {
                return this.IsNull(this.tablePosition.UserData6Column);
            }
            
            public void SetUserData6Null()
            {
                this[this.tablePosition.UserData6Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData7Null()
            {
                return this.IsNull(this.tablePosition.UserData7Column);
            }
            
            public void SetUserData7Null()
            {
                this[this.tablePosition.UserData7Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PositionRowChangeEvent : EventArgs
        {
            
            private PositionRow eventRow;
            
            private DataRowAction eventAction;
            
            public PositionRowChangeEvent(PositionRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PositionRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PositionTypeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private Column columnMnemonic;
            
            private Column columnPositionTypeCode;
            
            private Column columnSign;
            
            private DataView viewKeyPositionTypeExternalId0;
            
            private DataView viewKeyPositionTypeExternalId1;
            
            private DataView viewKeyPositionTypeExternalId2;
            
            private DataView viewKeyPositionTypeExternalId3;
            
            internal PositionTypeDataTable() : 
                    base("PositionType")
            {
                this.InitClass();
            }
            
            internal PositionTypeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public Column MnemonicColumn
            {
                get
                {
                    return this.columnMnemonic;
                }
            }
            
            public Column PositionTypeCodeColumn
            {
                get
                {
                    return this.columnPositionTypeCode;
                }
            }
            
            public Column SignColumn
            {
                get
                {
                    return this.columnSign;
                }
            }
            
            public DataView KeyPositionTypeExternalId0
            {
                get
                {
                    return this.viewKeyPositionTypeExternalId0;
                }
            }
            
            public DataView KeyPositionTypeExternalId1
            {
                get
                {
                    return this.viewKeyPositionTypeExternalId1;
                }
            }
            
            public DataView KeyPositionTypeExternalId2
            {
                get
                {
                    return this.viewKeyPositionTypeExternalId2;
                }
            }
            
            public DataView KeyPositionTypeExternalId3
            {
                get
                {
                    return this.viewKeyPositionTypeExternalId3;
                }
            }
            
            public PositionTypeRow this[int index]
            {
                get
                {
                    return ((PositionTypeRow)(this.Rows[index]));
                }
            }
            
            public event PositionTypeRowChangeEventHandler PositionTypeRowChanged;
            
            public event PositionTypeRowChangeEventHandler PositionTypeRowChanging;
            
            public event PositionTypeRowChangeEventHandler PositionTypeRowDeleted;
            
            public event PositionTypeRowChangeEventHandler PositionTypeRowDeleting;
            
            public void AddPositionTypeRow(PositionTypeRow row)
            {
                this.Rows.Add(row);
            }
            
            public PositionTypeRow AddPositionTypeRow(string ExternalId0, string ExternalId1, string ExternalId2, string ExternalId3, string Mnemonic, int PositionTypeCode, decimal Sign)
            {
                PositionTypeRow rowPositionTypeRow = ((PositionTypeRow)(this.NewRow()));
                rowPositionTypeRow.ItemArray = new object[] {
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3,
                        Mnemonic,
                        PositionTypeCode,
                        Sign};
                this.Rows.Add(rowPositionTypeRow);
                return rowPositionTypeRow;
            }
            
            public PositionTypeRow FindByPositionTypeCode(int PositionTypeCode)
            {
                return ((PositionTypeRow)(this.Rows.Find(new object[] {
                            PositionTypeCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                PositionTypeDataTable cln = ((PositionTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new PositionTypeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnPositionTypeCode = this.Columns["PositionTypeCode"];
                this.columnSign = this.Columns["Sign"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.columnMnemonic = new Column("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnPositionTypeCode = new Column("PositionTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPositionTypeCode);
                this.columnSign = new Column("Sign", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSign);
                this.Constraints.Add(new UniqueConstraint("KeyPositionType", new DataColumn[] {
                                this.columnPositionTypeCode}, true));
                this.viewKeyPositionTypeExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewKeyPositionTypeExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.viewKeyPositionTypeExternalId2 = new DataView(this, null, "ExternalId2", DataViewRowState.CurrentRows);
                this.viewKeyPositionTypeExternalId3 = new DataView(this, null, "ExternalId3", DataViewRowState.CurrentRows);
                this.columnMnemonic.AllowDBNull = false;
                this.columnPositionTypeCode.AllowDBNull = false;
                this.columnPositionTypeCode.Unique = true;
                this.columnSign.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.PositionTypeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "PositionType"));
                }
            }
            
            public PositionTypeRow NewPositionTypeRow()
            {
                return ((PositionTypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new PositionTypeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(PositionTypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.PositionTypeRowChanged != null))
                {
                    this.PositionTypeRowChanged(this, new PositionTypeRowChangeEvent(((PositionTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.PositionTypeRowChanging != null))
                {
                    this.PositionTypeRowChanging(this, new PositionTypeRowChangeEvent(((PositionTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.PositionTypeRowDeleted != null))
                {
                    this.PositionTypeRowDeleted(this, new PositionTypeRowChangeEvent(((PositionTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.PositionTypeRowDeleting != null))
                {
                    this.PositionTypeRowDeleting(this, new PositionTypeRowChangeEvent(((PositionTypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePositionTypeRow(PositionTypeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PositionTypeRow : Row
        {
            
            private PositionTypeDataTable tablePositionType;
            
            internal PositionTypeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tablePositionType = ((PositionTypeDataTable)(this.Table));
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablePositionType.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePositionType.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablePositionType.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePositionType.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablePositionType.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePositionType.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablePositionType.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePositionType.ExternalId3Column] = value;
                }
            }
            
            public string Mnemonic
            {
                get
                {
                    return ((string)(this[this.tablePositionType.MnemonicColumn]));
                }
                set
                {
                    this[this.tablePositionType.MnemonicColumn] = value;
                }
            }
            
            public int PositionTypeCode
            {
                get
                {
                    return ((int)(this[this.tablePositionType.PositionTypeCodeColumn]));
                }
                set
                {
                    this[this.tablePositionType.PositionTypeCodeColumn] = value;
                }
            }
            
            public decimal Sign
            {
                get
                {
                    return ((decimal)(this[this.tablePositionType.SignColumn]));
                }
                set
                {
                    this[this.tablePositionType.SignColumn] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tablePositionType.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tablePositionType.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tablePositionType.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tablePositionType.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tablePositionType.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tablePositionType.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tablePositionType.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tablePositionType.ExternalId3Column] = System.Convert.DBNull;
            }
            
            public PositionRow[] GetPositionRows()
            {
                return ((PositionRow[])(this.GetChildRows(this.Table.ChildRelations["PositionTypePosition"])));
            }
            
            public TaxLotRow[] GetTaxLotRows()
            {
                return ((TaxLotRow[])(this.GetChildRows(this.Table.ChildRelations["PositionTypeTaxLot"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PositionTypeRowChangeEvent : EventArgs
        {
            
            private PositionTypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public PositionTypeRowChangeEvent(PositionTypeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PositionTypeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PriceDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnAskPrice;
            
            private Column columnAskSize;
            
            private Column columnBidPrice;
            
            private Column columnBidSize;
            
            private Column columnClosePrice;
            
            private Column columnCurrencyId;
            
            private Column columnHighPrice;
            
            private Column columnLastPrice;
            
            private Column columnLastSize;
            
            private Column columnLowPrice;
            
            private Column columnOpenPrice;
            
            private Column columnPriceChange;
            
            private Column columnSecurityId;
            
            private Column columnVolume;
            
            private Column columnVolumeWeightedAveragePrice;
            
            internal PriceDataTable() : 
                    base("Price")
            {
                this.InitClass();
            }
            
            internal PriceDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column AskPriceColumn
            {
                get
                {
                    return this.columnAskPrice;
                }
            }
            
            public Column AskSizeColumn
            {
                get
                {
                    return this.columnAskSize;
                }
            }
            
            public Column BidPriceColumn
            {
                get
                {
                    return this.columnBidPrice;
                }
            }
            
            public Column BidSizeColumn
            {
                get
                {
                    return this.columnBidSize;
                }
            }
            
            public Column ClosePriceColumn
            {
                get
                {
                    return this.columnClosePrice;
                }
            }
            
            public Column CurrencyIdColumn
            {
                get
                {
                    return this.columnCurrencyId;
                }
            }
            
            public Column HighPriceColumn
            {
                get
                {
                    return this.columnHighPrice;
                }
            }
            
            public Column LastPriceColumn
            {
                get
                {
                    return this.columnLastPrice;
                }
            }
            
            public Column LastSizeColumn
            {
                get
                {
                    return this.columnLastSize;
                }
            }
            
            public Column LowPriceColumn
            {
                get
                {
                    return this.columnLowPrice;
                }
            }
            
            public Column OpenPriceColumn
            {
                get
                {
                    return this.columnOpenPrice;
                }
            }
            
            public Column PriceChangeColumn
            {
                get
                {
                    return this.columnPriceChange;
                }
            }
            
            public Column SecurityIdColumn
            {
                get
                {
                    return this.columnSecurityId;
                }
            }
            
            public Column VolumeColumn
            {
                get
                {
                    return this.columnVolume;
                }
            }
            
            public Column VolumeWeightedAveragePriceColumn
            {
                get
                {
                    return this.columnVolumeWeightedAveragePrice;
                }
            }
            
            public PriceRow this[int index]
            {
                get
                {
                    return ((PriceRow)(this.Rows[index]));
                }
            }
            
            public event PriceRowChangeEventHandler PriceRowChanged;
            
            public event PriceRowChangeEventHandler PriceRowChanging;
            
            public event PriceRowChangeEventHandler PriceRowDeleted;
            
            public event PriceRowChangeEventHandler PriceRowDeleting;
            
            public void AddPriceRow(PriceRow row)
            {
                this.Rows.Add(row);
            }
            
            public PriceRow AddPriceRow(decimal AskPrice, decimal AskSize, decimal BidPrice, decimal BidSize, decimal ClosePrice, CurrencyRow parentCurrencyRowByCurrencyPrice, decimal HighPrice, decimal LastPrice, decimal LastSize, decimal LowPrice, decimal OpenPrice, decimal PriceChange, SecurityRow parentSecurityRowBySecurityPrice, decimal Volume, decimal VolumeWeightedAveragePrice)
            {
                PriceRow rowPriceRow = ((PriceRow)(this.NewRow()));
                rowPriceRow.ItemArray = new object[] {
                        AskPrice,
                        AskSize,
                        BidPrice,
                        BidSize,
                        ClosePrice,
                        parentCurrencyRowByCurrencyPrice[25],
                        HighPrice,
                        LastPrice,
                        LastSize,
                        LowPrice,
                        OpenPrice,
                        PriceChange,
                        parentSecurityRowBySecurityPrice[23],
                        Volume,
                        VolumeWeightedAveragePrice};
                this.Rows.Add(rowPriceRow);
                return rowPriceRow;
            }
            
            public PriceRow FindBySecurityId(int SecurityId)
            {
                return ((PriceRow)(this.Rows.Find(new object[] {
                            SecurityId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                PriceDataTable cln = ((PriceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new PriceDataTable();
            }
            
            internal void InitVars()
            {
                this.columnAskPrice = this.Columns["AskPrice"];
                this.columnAskSize = this.Columns["AskSize"];
                this.columnBidPrice = this.Columns["BidPrice"];
                this.columnBidSize = this.Columns["BidSize"];
                this.columnClosePrice = this.Columns["ClosePrice"];
                this.columnCurrencyId = this.Columns["CurrencyId"];
                this.columnHighPrice = this.Columns["HighPrice"];
                this.columnLastPrice = this.Columns["LastPrice"];
                this.columnLastSize = this.Columns["LastSize"];
                this.columnLowPrice = this.Columns["LowPrice"];
                this.columnOpenPrice = this.Columns["OpenPrice"];
                this.columnPriceChange = this.Columns["PriceChange"];
                this.columnSecurityId = this.Columns["SecurityId"];
                this.columnVolume = this.Columns["Volume"];
                this.columnVolumeWeightedAveragePrice = this.Columns["VolumeWeightedAveragePrice"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnAskPrice = new Column("AskPrice", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAskPrice);
                this.columnAskSize = new Column("AskSize", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAskSize);
                this.columnBidPrice = new Column("BidPrice", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBidPrice);
                this.columnBidSize = new Column("BidSize", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBidSize);
                this.columnClosePrice = new Column("ClosePrice", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClosePrice);
                this.columnCurrencyId = new Column("CurrencyId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyId);
                this.columnHighPrice = new Column("HighPrice", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHighPrice);
                this.columnLastPrice = new Column("LastPrice", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastPrice);
                this.columnLastSize = new Column("LastSize", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastSize);
                this.columnLowPrice = new Column("LowPrice", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLowPrice);
                this.columnOpenPrice = new Column("OpenPrice", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOpenPrice);
                this.columnPriceChange = new Column("PriceChange", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPriceChange);
                this.columnSecurityId = new Column("SecurityId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityId);
                this.columnVolume = new Column("Volume", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVolume);
                this.columnVolumeWeightedAveragePrice = new Column("VolumeWeightedAveragePrice", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVolumeWeightedAveragePrice);
                this.Constraints.Add(new UniqueConstraint("KeyPrice", new DataColumn[] {
                                this.columnSecurityId}, true));
                this.columnAskPrice.AllowDBNull = false;
                this.columnAskPrice.DefaultValue = 0.0m;
                this.columnAskSize.AllowDBNull = false;
                this.columnAskSize.DefaultValue = 0.0m;
                this.columnBidPrice.AllowDBNull = false;
                this.columnBidPrice.DefaultValue = 0.0m;
                this.columnBidSize.AllowDBNull = false;
                this.columnBidSize.DefaultValue = 0.0m;
                this.columnClosePrice.AllowDBNull = false;
                this.columnClosePrice.DefaultValue = 0.0m;
                this.columnCurrencyId.AllowDBNull = false;
                this.columnHighPrice.AllowDBNull = false;
                this.columnHighPrice.DefaultValue = 0.0m;
                this.columnLastPrice.AllowDBNull = false;
                this.columnLastPrice.DefaultValue = 0.0m;
                this.columnLastSize.AllowDBNull = false;
                this.columnLastSize.DefaultValue = 0.0m;
                this.columnLowPrice.AllowDBNull = false;
                this.columnLowPrice.DefaultValue = 0.0m;
                this.columnOpenPrice.AllowDBNull = false;
                this.columnOpenPrice.DefaultValue = 0.0m;
                this.columnPriceChange.IsPersistent = false;
                this.columnPriceChange.AllowDBNull = false;
                this.columnPriceChange.DefaultValue = 0.0m;
                this.columnSecurityId.AllowDBNull = false;
                this.columnSecurityId.Unique = true;
                this.columnVolume.AllowDBNull = false;
                this.columnVolume.DefaultValue = 0.0m;
                this.columnVolumeWeightedAveragePrice.AllowDBNull = false;
                this.columnVolumeWeightedAveragePrice.DefaultValue = 0.0m;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.PriceLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Price"));
                }
            }
            
            public PriceRow NewPriceRow()
            {
                return ((PriceRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new PriceRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(PriceRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.PriceRowChanged != null))
                {
                    this.PriceRowChanged(this, new PriceRowChangeEvent(((PriceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.PriceRowChanging != null))
                {
                    this.PriceRowChanging(this, new PriceRowChangeEvent(((PriceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.PriceRowDeleted != null))
                {
                    this.PriceRowDeleted(this, new PriceRowChangeEvent(((PriceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.PriceRowDeleting != null))
                {
                    this.PriceRowDeleting(this, new PriceRowChangeEvent(((PriceRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePriceRow(PriceRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PriceRow : Row
        {
            
            private PriceDataTable tablePrice;
            
            internal PriceRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tablePrice = ((PriceDataTable)(this.Table));
            }
            
            public decimal AskPrice
            {
                get
                {
                    return ((decimal)(this[this.tablePrice.AskPriceColumn]));
                }
                set
                {
                    this[this.tablePrice.AskPriceColumn] = value;
                }
            }
            
            public decimal AskSize
            {
                get
                {
                    return ((decimal)(this[this.tablePrice.AskSizeColumn]));
                }
                set
                {
                    this[this.tablePrice.AskSizeColumn] = value;
                }
            }
            
            public decimal BidPrice
            {
                get
                {
                    return ((decimal)(this[this.tablePrice.BidPriceColumn]));
                }
                set
                {
                    this[this.tablePrice.BidPriceColumn] = value;
                }
            }
            
            public decimal BidSize
            {
                get
                {
                    return ((decimal)(this[this.tablePrice.BidSizeColumn]));
                }
                set
                {
                    this[this.tablePrice.BidSizeColumn] = value;
                }
            }
            
            public decimal ClosePrice
            {
                get
                {
                    return ((decimal)(this[this.tablePrice.ClosePriceColumn]));
                }
                set
                {
                    this[this.tablePrice.ClosePriceColumn] = value;
                }
            }
            
            public int CurrencyId
            {
                get
                {
                    return ((int)(this[this.tablePrice.CurrencyIdColumn]));
                }
                set
                {
                    this[this.tablePrice.CurrencyIdColumn] = value;
                }
            }
            
            public decimal HighPrice
            {
                get
                {
                    return ((decimal)(this[this.tablePrice.HighPriceColumn]));
                }
                set
                {
                    this[this.tablePrice.HighPriceColumn] = value;
                }
            }
            
            public decimal LastPrice
            {
                get
                {
                    return ((decimal)(this[this.tablePrice.LastPriceColumn]));
                }
                set
                {
                    this[this.tablePrice.LastPriceColumn] = value;
                }
            }
            
            public decimal LastSize
            {
                get
                {
                    return ((decimal)(this[this.tablePrice.LastSizeColumn]));
                }
                set
                {
                    this[this.tablePrice.LastSizeColumn] = value;
                }
            }
            
            public decimal LowPrice
            {
                get
                {
                    return ((decimal)(this[this.tablePrice.LowPriceColumn]));
                }
                set
                {
                    this[this.tablePrice.LowPriceColumn] = value;
                }
            }
            
            public decimal OpenPrice
            {
                get
                {
                    return ((decimal)(this[this.tablePrice.OpenPriceColumn]));
                }
                set
                {
                    this[this.tablePrice.OpenPriceColumn] = value;
                }
            }
            
            public decimal PriceChange
            {
                get
                {
                    return ((decimal)(this[this.tablePrice.PriceChangeColumn]));
                }
                set
                {
                    this[this.tablePrice.PriceChangeColumn] = value;
                }
            }
            
            public int SecurityId
            {
                get
                {
                    return ((int)(this[this.tablePrice.SecurityIdColumn]));
                }
                set
                {
                    this[this.tablePrice.SecurityIdColumn] = value;
                }
            }
            
            public decimal Volume
            {
                get
                {
                    return ((decimal)(this[this.tablePrice.VolumeColumn]));
                }
                set
                {
                    this[this.tablePrice.VolumeColumn] = value;
                }
            }
            
            public decimal VolumeWeightedAveragePrice
            {
                get
                {
                    return ((decimal)(this[this.tablePrice.VolumeWeightedAveragePriceColumn]));
                }
                set
                {
                    this[this.tablePrice.VolumeWeightedAveragePriceColumn] = value;
                }
            }
            
            public CurrencyRow CurrencyRow
            {
                get
                {
                    if ((DataSetMarket.lockCurrency.IsReaderLockHeld || DataSetMarket.lockCurrency.IsWriterLockHeld))
                    {
                        return ((CurrencyRow)(this.GetParentRow(this.Table.ParentRelations["CurrencyPrice"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Currency"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["CurrencyPrice"]);
                }
            }
            
            public SecurityRow SecurityRow
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["SecurityPrice"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["SecurityPrice"]);
                }
            }
            
            public WorkingOrderRow[] GetWorkingOrderRows()
            {
                return ((WorkingOrderRow[])(this.GetChildRows(this.Table.ChildRelations["PriceWorkingOrder"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PriceRowChangeEvent : EventArgs
        {
            
            private PriceRow eventRow;
            
            private DataRowAction eventAction;
            
            public PriceRowChangeEvent(PriceRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PriceRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PriceTypeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private Column columnMnemonic;
            
            private Column columnPriceTypeCode;
            
            private DataView viewKeyPriceTypeExternalId0;
            
            private DataView viewKeyPriceTypeExternalId1;
            
            private DataView viewKeyPriceTypeExternalId2;
            
            private DataView viewKeyPriceTypeExternalId3;
            
            internal PriceTypeDataTable() : 
                    base("PriceType")
            {
                this.InitClass();
            }
            
            internal PriceTypeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public Column MnemonicColumn
            {
                get
                {
                    return this.columnMnemonic;
                }
            }
            
            public Column PriceTypeCodeColumn
            {
                get
                {
                    return this.columnPriceTypeCode;
                }
            }
            
            public DataView KeyPriceTypeExternalId0
            {
                get
                {
                    return this.viewKeyPriceTypeExternalId0;
                }
            }
            
            public DataView KeyPriceTypeExternalId1
            {
                get
                {
                    return this.viewKeyPriceTypeExternalId1;
                }
            }
            
            public DataView KeyPriceTypeExternalId2
            {
                get
                {
                    return this.viewKeyPriceTypeExternalId2;
                }
            }
            
            public DataView KeyPriceTypeExternalId3
            {
                get
                {
                    return this.viewKeyPriceTypeExternalId3;
                }
            }
            
            public PriceTypeRow this[int index]
            {
                get
                {
                    return ((PriceTypeRow)(this.Rows[index]));
                }
            }
            
            public event PriceTypeRowChangeEventHandler PriceTypeRowChanged;
            
            public event PriceTypeRowChangeEventHandler PriceTypeRowChanging;
            
            public event PriceTypeRowChangeEventHandler PriceTypeRowDeleted;
            
            public event PriceTypeRowChangeEventHandler PriceTypeRowDeleting;
            
            public void AddPriceTypeRow(PriceTypeRow row)
            {
                this.Rows.Add(row);
            }
            
            public PriceTypeRow AddPriceTypeRow(string Description, string ExternalId0, string ExternalId1, string ExternalId2, string ExternalId3, string Mnemonic, int PriceTypeCode)
            {
                PriceTypeRow rowPriceTypeRow = ((PriceTypeRow)(this.NewRow()));
                rowPriceTypeRow.ItemArray = new object[] {
                        Description,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3,
                        Mnemonic,
                        PriceTypeCode};
                this.Rows.Add(rowPriceTypeRow);
                return rowPriceTypeRow;
            }
            
            public PriceTypeRow FindByPriceTypeCode(int PriceTypeCode)
            {
                return ((PriceTypeRow)(this.Rows.Find(new object[] {
                            PriceTypeCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                PriceTypeDataTable cln = ((PriceTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new PriceTypeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnPriceTypeCode = this.Columns["PriceTypeCode"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.columnMnemonic = new Column("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnPriceTypeCode = new Column("PriceTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPriceTypeCode);
                this.Constraints.Add(new UniqueConstraint("KeyPriceType", new DataColumn[] {
                                this.columnPriceTypeCode}, true));
                this.viewKeyPriceTypeExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewKeyPriceTypeExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.viewKeyPriceTypeExternalId2 = new DataView(this, null, "ExternalId2", DataViewRowState.CurrentRows);
                this.viewKeyPriceTypeExternalId3 = new DataView(this, null, "ExternalId3", DataViewRowState.CurrentRows);
                this.columnDescription.AllowDBNull = false;
                this.columnMnemonic.AllowDBNull = false;
                this.columnPriceTypeCode.AllowDBNull = false;
                this.columnPriceTypeCode.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.PriceTypeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "PriceType"));
                }
            }
            
            public PriceTypeRow NewPriceTypeRow()
            {
                return ((PriceTypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new PriceTypeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(PriceTypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.PriceTypeRowChanged != null))
                {
                    this.PriceTypeRowChanged(this, new PriceTypeRowChangeEvent(((PriceTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.PriceTypeRowChanging != null))
                {
                    this.PriceTypeRowChanging(this, new PriceTypeRowChangeEvent(((PriceTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.PriceTypeRowDeleted != null))
                {
                    this.PriceTypeRowDeleted(this, new PriceTypeRowChangeEvent(((PriceTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.PriceTypeRowDeleting != null))
                {
                    this.PriceTypeRowDeleting(this, new PriceTypeRowChangeEvent(((PriceTypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePriceTypeRow(PriceTypeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PriceTypeRow : Row
        {
            
            private PriceTypeDataTable tablePriceType;
            
            internal PriceTypeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tablePriceType = ((PriceTypeDataTable)(this.Table));
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tablePriceType.DescriptionColumn]));
                }
                set
                {
                    this[this.tablePriceType.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablePriceType.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePriceType.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablePriceType.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePriceType.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablePriceType.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePriceType.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablePriceType.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePriceType.ExternalId3Column] = value;
                }
            }
            
            public string Mnemonic
            {
                get
                {
                    return ((string)(this[this.tablePriceType.MnemonicColumn]));
                }
                set
                {
                    this[this.tablePriceType.MnemonicColumn] = value;
                }
            }
            
            public int PriceTypeCode
            {
                get
                {
                    return ((int)(this[this.tablePriceType.PriceTypeCodeColumn]));
                }
                set
                {
                    this[this.tablePriceType.PriceTypeCodeColumn] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tablePriceType.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tablePriceType.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tablePriceType.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tablePriceType.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tablePriceType.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tablePriceType.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tablePriceType.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tablePriceType.ExternalId3Column] = System.Convert.DBNull;
            }
            
            public DestinationOrderRow[] GetDestinationOrderRows()
            {
                return ((DestinationOrderRow[])(this.GetChildRows(this.Table.ChildRelations["PriceTypeDestinationOrder"])));
            }
            
            public SourceOrderRow[] GetSourceOrderRows()
            {
                return ((SourceOrderRow[])(this.GetChildRows(this.Table.ChildRelations["PriceTypeSourceOrder"])));
            }
            
            public WorkingOrderRow[] GetWorkingOrderRows()
            {
                return ((WorkingOrderRow[])(this.GetChildRows(this.Table.ChildRelations["PriceTypeWorkingOrder"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PriceTypeRowChangeEvent : EventArgs
        {
            
            private PriceTypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public PriceTypeRowChangeEvent(PriceTypeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PriceTypeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PropertyDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private Column columnName;
            
            private Column columnPropertyCode;
            
            private DataView viewKeyPropertyExternalId0;
            
            private DataView viewKeyPropertyExternalId1;
            
            private DataView viewKeyPropertyExternalId2;
            
            private DataView viewKeyPropertyExternalId3;
            
            internal PropertyDataTable() : 
                    base("Property")
            {
                this.InitClass();
            }
            
            internal PropertyDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public Column NameColumn
            {
                get
                {
                    return this.columnName;
                }
            }
            
            public Column PropertyCodeColumn
            {
                get
                {
                    return this.columnPropertyCode;
                }
            }
            
            public DataView KeyPropertyExternalId0
            {
                get
                {
                    return this.viewKeyPropertyExternalId0;
                }
            }
            
            public DataView KeyPropertyExternalId1
            {
                get
                {
                    return this.viewKeyPropertyExternalId1;
                }
            }
            
            public DataView KeyPropertyExternalId2
            {
                get
                {
                    return this.viewKeyPropertyExternalId2;
                }
            }
            
            public DataView KeyPropertyExternalId3
            {
                get
                {
                    return this.viewKeyPropertyExternalId3;
                }
            }
            
            public PropertyRow this[int index]
            {
                get
                {
                    return ((PropertyRow)(this.Rows[index]));
                }
            }
            
            public event PropertyRowChangeEventHandler PropertyRowChanged;
            
            public event PropertyRowChangeEventHandler PropertyRowChanging;
            
            public event PropertyRowChangeEventHandler PropertyRowDeleted;
            
            public event PropertyRowChangeEventHandler PropertyRowDeleting;
            
            public void AddPropertyRow(PropertyRow row)
            {
                this.Rows.Add(row);
            }
            
            public PropertyRow AddPropertyRow(string ExternalId0, string ExternalId1, string ExternalId2, string ExternalId3, string Name, int PropertyCode)
            {
                PropertyRow rowPropertyRow = ((PropertyRow)(this.NewRow()));
                rowPropertyRow.ItemArray = new object[] {
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3,
                        Name,
                        PropertyCode};
                this.Rows.Add(rowPropertyRow);
                return rowPropertyRow;
            }
            
            public PropertyRow FindByPropertyCode(int PropertyCode)
            {
                return ((PropertyRow)(this.Rows.Find(new object[] {
                            PropertyCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                PropertyDataTable cln = ((PropertyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new PropertyDataTable();
            }
            
            internal void InitVars()
            {
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
                this.columnName = this.Columns["Name"];
                this.columnPropertyCode = this.Columns["PropertyCode"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.columnName = new Column("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnPropertyCode = new Column("PropertyCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPropertyCode);
                this.Constraints.Add(new UniqueConstraint("KeyProperty", new DataColumn[] {
                                this.columnPropertyCode}, true));
                this.viewKeyPropertyExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewKeyPropertyExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.viewKeyPropertyExternalId2 = new DataView(this, null, "ExternalId2", DataViewRowState.CurrentRows);
                this.viewKeyPropertyExternalId3 = new DataView(this, null, "ExternalId3", DataViewRowState.CurrentRows);
                this.columnPropertyCode.AllowDBNull = false;
                this.columnPropertyCode.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.PropertyLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Property"));
                }
            }
            
            public PropertyRow NewPropertyRow()
            {
                return ((PropertyRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new PropertyRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(PropertyRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.PropertyRowChanged != null))
                {
                    this.PropertyRowChanged(this, new PropertyRowChangeEvent(((PropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.PropertyRowChanging != null))
                {
                    this.PropertyRowChanging(this, new PropertyRowChangeEvent(((PropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.PropertyRowDeleted != null))
                {
                    this.PropertyRowDeleted(this, new PropertyRowChangeEvent(((PropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.PropertyRowDeleting != null))
                {
                    this.PropertyRowDeleting(this, new PropertyRowChangeEvent(((PropertyRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePropertyRow(PropertyRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PropertyRow : Row
        {
            
            private PropertyDataTable tableProperty;
            
            internal PropertyRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableProperty = ((PropertyDataTable)(this.Table));
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableProperty.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableProperty.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableProperty.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableProperty.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableProperty.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableProperty.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableProperty.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableProperty.ExternalId3Column] = value;
                }
            }
            
            public string Name
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableProperty.NameColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableProperty.NameColumn] = value;
                }
            }
            
            public int PropertyCode
            {
                get
                {
                    return ((int)(this[this.tableProperty.PropertyCodeColumn]));
                }
                set
                {
                    this[this.tableProperty.PropertyCodeColumn] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableProperty.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableProperty.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableProperty.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableProperty.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableProperty.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableProperty.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableProperty.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableProperty.ExternalId3Column] = System.Convert.DBNull;
            }
            
            public bool IsNameNull()
            {
                return this.IsNull(this.tableProperty.NameColumn);
            }
            
            public void SetNameNull()
            {
                this[this.tableProperty.NameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PropertyRowChangeEvent : EventArgs
        {
            
            private PropertyRow eventRow;
            
            private DataRowAction eventAction;
            
            public PropertyRowChangeEvent(PropertyRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PropertyRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProvinceDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnAbbreviation;
            
            private Column columnCountryId;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnName;
            
            private Column columnProvinceId;
            
            private DataView viewKeyProvinceExternalId0;
            
            private DataView viewKeyProvinceExternalId1;
            
            internal ProvinceDataTable() : 
                    base("Province")
            {
                this.InitClass();
            }
            
            internal ProvinceDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column AbbreviationColumn
            {
                get
                {
                    return this.columnAbbreviation;
                }
            }
            
            public Column CountryIdColumn
            {
                get
                {
                    return this.columnCountryId;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column NameColumn
            {
                get
                {
                    return this.columnName;
                }
            }
            
            public Column ProvinceIdColumn
            {
                get
                {
                    return this.columnProvinceId;
                }
            }
            
            public DataView KeyProvinceExternalId0
            {
                get
                {
                    return this.viewKeyProvinceExternalId0;
                }
            }
            
            public DataView KeyProvinceExternalId1
            {
                get
                {
                    return this.viewKeyProvinceExternalId1;
                }
            }
            
            public ProvinceRow this[int index]
            {
                get
                {
                    return ((ProvinceRow)(this.Rows[index]));
                }
            }
            
            public event ProvinceRowChangeEventHandler ProvinceRowChanged;
            
            public event ProvinceRowChangeEventHandler ProvinceRowChanging;
            
            public event ProvinceRowChangeEventHandler ProvinceRowDeleted;
            
            public event ProvinceRowChangeEventHandler ProvinceRowDeleting;
            
            public void AddProvinceRow(ProvinceRow row)
            {
                this.Rows.Add(row);
            }
            
            public ProvinceRow AddProvinceRow(string Abbreviation, CountryRow parentCountryRowByCountryProvince, string ExternalId0, string ExternalId1, string Name)
            {
                ProvinceRow rowProvinceRow = ((ProvinceRow)(this.NewRow()));
                rowProvinceRow.ItemArray = new object[] {
                        Abbreviation,
                        parentCountryRowByCountryProvince[1],
                        ExternalId0,
                        ExternalId1,
                        Name,
                        null};
                this.Rows.Add(rowProvinceRow);
                return rowProvinceRow;
            }
            
            public ProvinceRow FindByProvinceId(int ProvinceId)
            {
                return ((ProvinceRow)(this.Rows.Find(new object[] {
                            ProvinceId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                ProvinceDataTable cln = ((ProvinceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new ProvinceDataTable();
            }
            
            internal void InitVars()
            {
                this.columnAbbreviation = this.Columns["Abbreviation"];
                this.columnCountryId = this.Columns["CountryId"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnName = this.Columns["Name"];
                this.columnProvinceId = this.Columns["ProvinceId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnAbbreviation = new Column("Abbreviation", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAbbreviation);
                this.columnCountryId = new Column("CountryId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryId);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnName = new Column("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnProvinceId = new Column("ProvinceId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProvinceId);
                this.Constraints.Add(new UniqueConstraint("KeyProvince", new DataColumn[] {
                                this.columnProvinceId}, true));
                this.viewKeyProvinceExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewKeyProvinceExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.columnAbbreviation.AllowDBNull = false;
                this.columnCountryId.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnProvinceId.AutoIncrement = true;
                this.columnProvinceId.AllowDBNull = false;
                this.columnProvinceId.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.ProvinceLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Province"));
                }
            }
            
            public ProvinceRow NewProvinceRow()
            {
                return ((ProvinceRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ProvinceRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(ProvinceRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ProvinceRowChanged != null))
                {
                    this.ProvinceRowChanged(this, new ProvinceRowChangeEvent(((ProvinceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ProvinceRowChanging != null))
                {
                    this.ProvinceRowChanging(this, new ProvinceRowChangeEvent(((ProvinceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ProvinceRowDeleted != null))
                {
                    this.ProvinceRowDeleted(this, new ProvinceRowChangeEvent(((ProvinceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ProvinceRowDeleting != null))
                {
                    this.ProvinceRowDeleting(this, new ProvinceRowChangeEvent(((ProvinceRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProvinceRow(ProvinceRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProvinceRow : Row
        {
            
            private ProvinceDataTable tableProvince;
            
            internal ProvinceRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableProvince = ((ProvinceDataTable)(this.Table));
            }
            
            public string Abbreviation
            {
                get
                {
                    return ((string)(this[this.tableProvince.AbbreviationColumn]));
                }
                set
                {
                    this[this.tableProvince.AbbreviationColumn] = value;
                }
            }
            
            public int CountryId
            {
                get
                {
                    return ((int)(this[this.tableProvince.CountryIdColumn]));
                }
                set
                {
                    this[this.tableProvince.CountryIdColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableProvince.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableProvince.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableProvince.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableProvince.ExternalId1Column] = value;
                }
            }
            
            public string Name
            {
                get
                {
                    return ((string)(this[this.tableProvince.NameColumn]));
                }
                set
                {
                    this[this.tableProvince.NameColumn] = value;
                }
            }
            
            public int ProvinceId
            {
                get
                {
                    return ((int)(this[this.tableProvince.ProvinceIdColumn]));
                }
                set
                {
                    this[this.tableProvince.ProvinceIdColumn] = value;
                }
            }
            
            public CountryRow CountryRow
            {
                get
                {
                    if ((DataSetMarket.lockCountry.IsReaderLockHeld || DataSetMarket.lockCountry.IsWriterLockHeld))
                    {
                        return ((CountryRow)(this.GetParentRow(this.Table.ParentRelations["CountryProvince"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Country"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["CountryProvince"]);
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableProvince.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableProvince.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableProvince.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableProvince.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public AccountBaseRow[] GetAccountBaseRows()
            {
                return ((AccountBaseRow[])(this.GetChildRows(this.Table.ChildRelations["ProvinceAccountBase"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProvinceRowChangeEvent : EventArgs
        {
            
            private ProvinceRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProvinceRowChangeEvent(ProvinceRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProvinceRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SecurityDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnAverageDailyVolume;
            
            private Column columnCountryId;
            
            private Column columnMinimumQuantity;
            
            private Column columnMarketCapitalization;
            
            private Column columnPriceFactor;
            
            private Column columnQuantityFactor;
            
            private Column columnSecurityId;
            
            private Column columnSymbol;
            
            private Column columnLogo;
            
            private Column columnVolumeCategoryId;
            
            internal SecurityDataTable() : 
                    base("Security")
            {
                this.InitClass();
            }
            
            internal SecurityDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column AverageDailyVolumeColumn
            {
                get
                {
                    return this.columnAverageDailyVolume;
                }
            }
            
            public Column CountryIdColumn
            {
                get
                {
                    return this.columnCountryId;
                }
            }
            
            public Column MinimumQuantityColumn
            {
                get
                {
                    return this.columnMinimumQuantity;
                }
            }
            
            public Column MarketCapitalizationColumn
            {
                get
                {
                    return this.columnMarketCapitalization;
                }
            }
            
            public Column PriceFactorColumn
            {
                get
                {
                    return this.columnPriceFactor;
                }
            }
            
            public Column QuantityFactorColumn
            {
                get
                {
                    return this.columnQuantityFactor;
                }
            }
            
            public Column SecurityIdColumn
            {
                get
                {
                    return this.columnSecurityId;
                }
            }
            
            public Column SymbolColumn
            {
                get
                {
                    return this.columnSymbol;
                }
            }
            
            public Column LogoColumn
            {
                get
                {
                    return this.columnLogo;
                }
            }
            
            public Column VolumeCategoryIdColumn
            {
                get
                {
                    return this.columnVolumeCategoryId;
                }
            }
            
            public SecurityRow this[int index]
            {
                get
                {
                    return ((SecurityRow)(this.Rows[index]));
                }
            }
            
            public event SecurityRowChangeEventHandler SecurityRowChanged;
            
            public event SecurityRowChangeEventHandler SecurityRowChanging;
            
            public event SecurityRowChangeEventHandler SecurityRowDeleted;
            
            public event SecurityRowChangeEventHandler SecurityRowDeleting;
            
            public void AddSecurityRow(SecurityRow row)
            {
                this.Rows.Add(row);
            }
            
            public SecurityRow AddSecurityRow(decimal AverageDailyVolume, CountryRow parentCountryRowByCountrySecurity, decimal MinimumQuantity, decimal MarketCapitalization, decimal PriceFactor, decimal QuantityFactor, ObjectRow parentObjectRowByObjectSecurity, string Symbol, string Logo, VolumeCategoryRow parentVolumeCategoryRowByVolumeCategorySecurity)
            {
                SecurityRow rowSecurityRow = ((SecurityRow)(this.NewRow()));
                rowSecurityRow.ItemArray = new object[] {
                        AverageDailyVolume,
                        parentCountryRowByCountrySecurity[1],
                        MinimumQuantity,
                        MarketCapitalization,
                        PriceFactor,
                        QuantityFactor,
                        parentObjectRowByObjectSecurity[12],
                        Symbol,
                        Logo,
                        parentVolumeCategoryRowByVolumeCategorySecurity[5]};
                this.Rows.Add(rowSecurityRow);
                return rowSecurityRow;
            }
            
            public SecurityRow FindBySecurityId(int SecurityId)
            {
                return ((SecurityRow)(this.Rows.Find(new object[] {
                            SecurityId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                SecurityDataTable cln = ((SecurityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new SecurityDataTable();
            }
            
            internal void InitVars()
            {
                this.columnAverageDailyVolume = this.Columns["AverageDailyVolume"];
                this.columnCountryId = this.Columns["CountryId"];
                this.columnMinimumQuantity = this.Columns["MinimumQuantity"];
                this.columnMarketCapitalization = this.Columns["MarketCapitalization"];
                this.columnPriceFactor = this.Columns["PriceFactor"];
                this.columnQuantityFactor = this.Columns["QuantityFactor"];
                this.columnSecurityId = this.Columns["SecurityId"];
                this.columnSymbol = this.Columns["Symbol"];
                this.columnLogo = this.Columns["Logo"];
                this.columnVolumeCategoryId = this.Columns["VolumeCategoryId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnAverageDailyVolume = new Column("AverageDailyVolume", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAverageDailyVolume);
                this.columnCountryId = new Column("CountryId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryId);
                this.columnMinimumQuantity = new Column("MinimumQuantity", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMinimumQuantity);
                this.columnMarketCapitalization = new Column("MarketCapitalization", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMarketCapitalization);
                this.columnPriceFactor = new Column("PriceFactor", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPriceFactor);
                this.columnQuantityFactor = new Column("QuantityFactor", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQuantityFactor);
                this.columnSecurityId = new Column("SecurityId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityId);
                this.columnSymbol = new Column("Symbol", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSymbol);
                this.columnLogo = new Column("Logo", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLogo);
                this.columnVolumeCategoryId = new Column("VolumeCategoryId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVolumeCategoryId);
                this.Constraints.Add(new UniqueConstraint("KeySecurity", new DataColumn[] {
                                this.columnSecurityId}, true));
                this.columnCountryId.AllowDBNull = false;
                this.columnPriceFactor.AllowDBNull = false;
                this.columnQuantityFactor.AllowDBNull = false;
                this.columnSecurityId.AllowDBNull = false;
                this.columnSecurityId.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.SecurityLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                }
            }
            
            public SecurityRow NewSecurityRow()
            {
                return ((SecurityRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new SecurityRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(SecurityRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.SecurityRowChanged != null))
                {
                    this.SecurityRowChanged(this, new SecurityRowChangeEvent(((SecurityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.SecurityRowChanging != null))
                {
                    this.SecurityRowChanging(this, new SecurityRowChangeEvent(((SecurityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.SecurityRowDeleted != null))
                {
                    this.SecurityRowDeleted(this, new SecurityRowChangeEvent(((SecurityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.SecurityRowDeleting != null))
                {
                    this.SecurityRowDeleting(this, new SecurityRowChangeEvent(((SecurityRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSecurityRow(SecurityRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SecurityRow : Row
        {
            
            private SecurityDataTable tableSecurity;
            
            internal SecurityRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableSecurity = ((SecurityDataTable)(this.Table));
            }
            
            public decimal AverageDailyVolume
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableSecurity.AverageDailyVolumeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSecurity.AverageDailyVolumeColumn] = value;
                }
            }
            
            public int CountryId
            {
                get
                {
                    return ((int)(this[this.tableSecurity.CountryIdColumn]));
                }
                set
                {
                    this[this.tableSecurity.CountryIdColumn] = value;
                }
            }
            
            public decimal MinimumQuantity
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableSecurity.MinimumQuantityColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSecurity.MinimumQuantityColumn] = value;
                }
            }
            
            public decimal MarketCapitalization
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableSecurity.MarketCapitalizationColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSecurity.MarketCapitalizationColumn] = value;
                }
            }
            
            public decimal PriceFactor
            {
                get
                {
                    return ((decimal)(this[this.tableSecurity.PriceFactorColumn]));
                }
                set
                {
                    this[this.tableSecurity.PriceFactorColumn] = value;
                }
            }
            
            public decimal QuantityFactor
            {
                get
                {
                    return ((decimal)(this[this.tableSecurity.QuantityFactorColumn]));
                }
                set
                {
                    this[this.tableSecurity.QuantityFactorColumn] = value;
                }
            }
            
            public int SecurityId
            {
                get
                {
                    return ((int)(this[this.tableSecurity.SecurityIdColumn]));
                }
                set
                {
                    this[this.tableSecurity.SecurityIdColumn] = value;
                }
            }
            
            public string Symbol
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSecurity.SymbolColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSecurity.SymbolColumn] = value;
                }
            }
            
            public string Logo
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSecurity.LogoColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSecurity.LogoColumn] = value;
                }
            }
            
            public int VolumeCategoryId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableSecurity.VolumeCategoryIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSecurity.VolumeCategoryIdColumn] = value;
                }
            }
            
            public CountryRow CountryRow
            {
                get
                {
                    if ((DataSetMarket.lockCountry.IsReaderLockHeld || DataSetMarket.lockCountry.IsWriterLockHeld))
                    {
                        return ((CountryRow)(this.GetParentRow(this.Table.ParentRelations["CountrySecurity"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Country"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["CountrySecurity"]);
                }
            }
            
            public ObjectRow ObjectRow
            {
                get
                {
                    if ((DataSetMarket.lockObject.IsReaderLockHeld || DataSetMarket.lockObject.IsWriterLockHeld))
                    {
                        return ((ObjectRow)(this.GetParentRow(this.Table.ParentRelations["ObjectSecurity"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Object"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["ObjectSecurity"]);
                }
            }
            
            public VolumeCategoryRow VolumeCategoryRow
            {
                get
                {
                    if ((DataSetMarket.lockVolumeCategory.IsReaderLockHeld || DataSetMarket.lockVolumeCategory.IsWriterLockHeld))
                    {
                        return ((VolumeCategoryRow)(this.GetParentRow(this.Table.ParentRelations["VolumeCategorySecurity"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "VolumeCategory"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["VolumeCategorySecurity"]);
                }
            }
            
            public bool IsAverageDailyVolumeNull()
            {
                return this.IsNull(this.tableSecurity.AverageDailyVolumeColumn);
            }
            
            public void SetAverageDailyVolumeNull()
            {
                this[this.tableSecurity.AverageDailyVolumeColumn] = System.Convert.DBNull;
            }
            
            public bool IsMinimumQuantityNull()
            {
                return this.IsNull(this.tableSecurity.MinimumQuantityColumn);
            }
            
            public void SetMinimumQuantityNull()
            {
                this[this.tableSecurity.MinimumQuantityColumn] = System.Convert.DBNull;
            }
            
            public bool IsMarketCapitalizationNull()
            {
                return this.IsNull(this.tableSecurity.MarketCapitalizationColumn);
            }
            
            public void SetMarketCapitalizationNull()
            {
                this[this.tableSecurity.MarketCapitalizationColumn] = System.Convert.DBNull;
            }
            
            public bool IsSymbolNull()
            {
                return this.IsNull(this.tableSecurity.SymbolColumn);
            }
            
            public void SetSymbolNull()
            {
                this[this.tableSecurity.SymbolColumn] = System.Convert.DBNull;
            }
            
            public bool IsLogoNull()
            {
                return this.IsNull(this.tableSecurity.LogoColumn);
            }
            
            public void SetLogoNull()
            {
                this[this.tableSecurity.LogoColumn] = System.Convert.DBNull;
            }
            
            public bool IsVolumeCategoryIdNull()
            {
                return this.IsNull(this.tableSecurity.VolumeCategoryIdColumn);
            }
            
            public void SetVolumeCategoryIdNull()
            {
                this[this.tableSecurity.VolumeCategoryIdColumn] = System.Convert.DBNull;
            }
            
            public AccountBaseRow[] GetAccountBaseRows()
            {
                return ((AccountBaseRow[])(this.GetChildRows(this.Table.ChildRelations["SecurityAccountBase"])));
            }
            
            public AllocationRow[] GetAllocationRowsBySecurityAllocationSecurityId()
            {
                return ((AllocationRow[])(this.GetChildRows(this.Table.ChildRelations["SecurityAllocationSecurityId"])));
            }
            
            public AllocationRow[] GetAllocationRowsBySecurityAllocationSettlementId()
            {
                return ((AllocationRow[])(this.GetChildRows(this.Table.ChildRelations["SecurityAllocationSettlementId"])));
            }
            
            public CurrencyRow[] GetCurrencyRows()
            {
                return ((CurrencyRow[])(this.GetChildRows(this.Table.ChildRelations["SecurityCurrency"])));
            }
            
            public DebtRow[] GetDebtRowsBySecurityDebtDebtId()
            {
                return ((DebtRow[])(this.GetChildRows(this.Table.ChildRelations["SecurityDebtDebtId"])));
            }
            
            public DebtRow[] GetDebtRowsBySecurityDebtSettlementId()
            {
                return ((DebtRow[])(this.GetChildRows(this.Table.ChildRelations["SecurityDebtSettlementId"])));
            }
            
            public EquityRow[] GetEquityRowsBySecurityEquityEquityId()
            {
                return ((EquityRow[])(this.GetChildRows(this.Table.ChildRelations["SecurityEquityEquityId"])));
            }
            
            public EquityRow[] GetEquityRowsBySecurityEquitySettlementId()
            {
                return ((EquityRow[])(this.GetChildRows(this.Table.ChildRelations["SecurityEquitySettlementId"])));
            }
            
            public PositionRow[] GetPositionRows()
            {
                return ((PositionRow[])(this.GetChildRows(this.Table.ChildRelations["SecurityPosition"])));
            }
            
            public PriceRow[] GetPriceRows()
            {
                return ((PriceRow[])(this.GetChildRows(this.Table.ChildRelations["SecurityPrice"])));
            }
            
            public SourceOrderRow[] GetSourceOrderRowsBySecuritySourceOrderSecurityId()
            {
                return ((SourceOrderRow[])(this.GetChildRows(this.Table.ChildRelations["SecuritySourceOrderSecurityId"])));
            }
            
            public SourceOrderRow[] GetSourceOrderRowsBySecuritySourceOrderSettlementId()
            {
                return ((SourceOrderRow[])(this.GetChildRows(this.Table.ChildRelations["SecuritySourceOrderSettlementId"])));
            }
            
            public TaxLotRow[] GetTaxLotRows()
            {
                return ((TaxLotRow[])(this.GetChildRows(this.Table.ChildRelations["SecurityTaxLot"])));
            }
            
            public WorkingOrderRow[] GetWorkingOrderRowsBySecurityWorkingOrderSecurityId()
            {
                return ((WorkingOrderRow[])(this.GetChildRows(this.Table.ChildRelations["SecurityWorkingOrderSecurityId"])));
            }
            
            public WorkingOrderRow[] GetWorkingOrderRowsBySecurityWorkingOrderSettlementId()
            {
                return ((WorkingOrderRow[])(this.GetChildRows(this.Table.ChildRelations["SecurityWorkingOrderSettlementId"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SecurityRowChangeEvent : EventArgs
        {
            
            private SecurityRow eventRow;
            
            private DataRowAction eventAction;
            
            public SecurityRowChangeEvent(SecurityRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SecurityRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StateDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private Column columnMnemonic;
            
            private Column columnStateCode;
            
            private DataView viewKeyStateExternalId0;
            
            private DataView viewKeyStateExternalId1;
            
            private DataView viewKeyStateExternalId2;
            
            private DataView viewKeyStateExternalId3;
            
            internal StateDataTable() : 
                    base("State")
            {
                this.InitClass();
            }
            
            internal StateDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public Column MnemonicColumn
            {
                get
                {
                    return this.columnMnemonic;
                }
            }
            
            public Column StateCodeColumn
            {
                get
                {
                    return this.columnStateCode;
                }
            }
            
            public DataView KeyStateExternalId0
            {
                get
                {
                    return this.viewKeyStateExternalId0;
                }
            }
            
            public DataView KeyStateExternalId1
            {
                get
                {
                    return this.viewKeyStateExternalId1;
                }
            }
            
            public DataView KeyStateExternalId2
            {
                get
                {
                    return this.viewKeyStateExternalId2;
                }
            }
            
            public DataView KeyStateExternalId3
            {
                get
                {
                    return this.viewKeyStateExternalId3;
                }
            }
            
            public StateRow this[int index]
            {
                get
                {
                    return ((StateRow)(this.Rows[index]));
                }
            }
            
            public event StateRowChangeEventHandler StateRowChanged;
            
            public event StateRowChangeEventHandler StateRowChanging;
            
            public event StateRowChangeEventHandler StateRowDeleted;
            
            public event StateRowChangeEventHandler StateRowDeleting;
            
            public void AddStateRow(StateRow row)
            {
                this.Rows.Add(row);
            }
            
            public StateRow AddStateRow(string Description, string ExternalId0, string ExternalId1, string ExternalId2, string ExternalId3, string Mnemonic, int StateCode)
            {
                StateRow rowStateRow = ((StateRow)(this.NewRow()));
                rowStateRow.ItemArray = new object[] {
                        Description,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3,
                        Mnemonic,
                        StateCode};
                this.Rows.Add(rowStateRow);
                return rowStateRow;
            }
            
            public StateRow FindByStateCode(int StateCode)
            {
                return ((StateRow)(this.Rows.Find(new object[] {
                            StateCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                StateDataTable cln = ((StateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new StateDataTable();
            }
            
            internal void InitVars()
            {
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnStateCode = this.Columns["StateCode"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.columnMnemonic = new Column("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnStateCode = new Column("StateCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateCode);
                this.Constraints.Add(new UniqueConstraint("KeyState", new DataColumn[] {
                                this.columnStateCode}, true));
                this.viewKeyStateExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewKeyStateExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.viewKeyStateExternalId2 = new DataView(this, null, "ExternalId2", DataViewRowState.CurrentRows);
                this.viewKeyStateExternalId3 = new DataView(this, null, "ExternalId3", DataViewRowState.CurrentRows);
                this.columnDescription.AllowDBNull = false;
                this.columnMnemonic.AllowDBNull = false;
                this.columnStateCode.AllowDBNull = false;
                this.columnStateCode.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.StateLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "State"));
                }
            }
            
            public StateRow NewStateRow()
            {
                return ((StateRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new StateRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(StateRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.StateRowChanged != null))
                {
                    this.StateRowChanged(this, new StateRowChangeEvent(((StateRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.StateRowChanging != null))
                {
                    this.StateRowChanging(this, new StateRowChangeEvent(((StateRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.StateRowDeleted != null))
                {
                    this.StateRowDeleted(this, new StateRowChangeEvent(((StateRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.StateRowDeleting != null))
                {
                    this.StateRowDeleting(this, new StateRowChangeEvent(((StateRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveStateRow(StateRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StateRow : Row
        {
            
            private StateDataTable tableState;
            
            internal StateRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableState = ((StateDataTable)(this.Table));
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableState.DescriptionColumn]));
                }
                set
                {
                    this[this.tableState.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableState.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableState.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableState.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableState.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableState.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableState.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableState.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableState.ExternalId3Column] = value;
                }
            }
            
            public string Mnemonic
            {
                get
                {
                    return ((string)(this[this.tableState.MnemonicColumn]));
                }
                set
                {
                    this[this.tableState.MnemonicColumn] = value;
                }
            }
            
            public int StateCode
            {
                get
                {
                    return ((int)(this[this.tableState.StateCodeColumn]));
                }
                set
                {
                    this[this.tableState.StateCodeColumn] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableState.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableState.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableState.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableState.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableState.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableState.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableState.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableState.ExternalId3Column] = System.Convert.DBNull;
            }
            
            public DestinationOrderRow[] GetDestinationOrderRows()
            {
                return ((DestinationOrderRow[])(this.GetChildRows(this.Table.ChildRelations["StateDestinationOrder"])));
            }
            
            public ExecutionRow[] GetExecutionRowsByStateExecutionDestinationStateCode()
            {
                return ((ExecutionRow[])(this.GetChildRows(this.Table.ChildRelations["StateExecutionDestinationStateCode"])));
            }
            
            public ExecutionRow[] GetExecutionRowsByStateExecutionSourceStateCode()
            {
                return ((ExecutionRow[])(this.GetChildRows(this.Table.ChildRelations["StateExecutionSourceStateCode"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StateRowChangeEvent : EventArgs
        {
            
            private StateRow eventRow;
            
            private DataRowAction eventAction;
            
            public StateRowChangeEvent(StateRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public StateRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SourceDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnBuyMarketValueThreshold;
            
            private Column columnBuyQuantityThreshold;
            
            private Column columnSellMarketValueThreshold;
            
            private Column columnSellQuantityThreshold;
            
            private Column columnShortName;
            
            private Column columnSourceId;
            
            internal SourceDataTable() : 
                    base("Source")
            {
                this.InitClass();
            }
            
            internal SourceDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column BuyMarketValueThresholdColumn
            {
                get
                {
                    return this.columnBuyMarketValueThreshold;
                }
            }
            
            public Column BuyQuantityThresholdColumn
            {
                get
                {
                    return this.columnBuyQuantityThreshold;
                }
            }
            
            public Column SellMarketValueThresholdColumn
            {
                get
                {
                    return this.columnSellMarketValueThreshold;
                }
            }
            
            public Column SellQuantityThresholdColumn
            {
                get
                {
                    return this.columnSellQuantityThreshold;
                }
            }
            
            public Column ShortNameColumn
            {
                get
                {
                    return this.columnShortName;
                }
            }
            
            public Column SourceIdColumn
            {
                get
                {
                    return this.columnSourceId;
                }
            }
            
            public SourceRow this[int index]
            {
                get
                {
                    return ((SourceRow)(this.Rows[index]));
                }
            }
            
            public event SourceRowChangeEventHandler SourceRowChanged;
            
            public event SourceRowChangeEventHandler SourceRowChanging;
            
            public event SourceRowChangeEventHandler SourceRowDeleted;
            
            public event SourceRowChangeEventHandler SourceRowDeleting;
            
            public void AddSourceRow(SourceRow row)
            {
                this.Rows.Add(row);
            }
            
            public SourceRow AddSourceRow(decimal BuyMarketValueThreshold, decimal BuyQuantityThreshold, decimal SellMarketValueThreshold, decimal SellQuantityThreshold, string ShortName, BlotterRow parentBlotterRowByBlotterSource)
            {
                SourceRow rowSourceRow = ((SourceRow)(this.NewRow()));
                rowSourceRow.ItemArray = new object[] {
                        BuyMarketValueThreshold,
                        BuyQuantityThreshold,
                        SellMarketValueThreshold,
                        SellQuantityThreshold,
                        ShortName,
                        parentBlotterRowByBlotterSource[18]};
                this.Rows.Add(rowSourceRow);
                return rowSourceRow;
            }
            
            public SourceRow FindBySourceId(int SourceId)
            {
                return ((SourceRow)(this.Rows.Find(new object[] {
                            SourceId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                SourceDataTable cln = ((SourceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new SourceDataTable();
            }
            
            internal void InitVars()
            {
                this.columnBuyMarketValueThreshold = this.Columns["BuyMarketValueThreshold"];
                this.columnBuyQuantityThreshold = this.Columns["BuyQuantityThreshold"];
                this.columnSellMarketValueThreshold = this.Columns["SellMarketValueThreshold"];
                this.columnSellQuantityThreshold = this.Columns["SellQuantityThreshold"];
                this.columnShortName = this.Columns["ShortName"];
                this.columnSourceId = this.Columns["SourceId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnBuyMarketValueThreshold = new Column("BuyMarketValueThreshold", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBuyMarketValueThreshold);
                this.columnBuyQuantityThreshold = new Column("BuyQuantityThreshold", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBuyQuantityThreshold);
                this.columnSellMarketValueThreshold = new Column("SellMarketValueThreshold", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSellMarketValueThreshold);
                this.columnSellQuantityThreshold = new Column("SellQuantityThreshold", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSellQuantityThreshold);
                this.columnShortName = new Column("ShortName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnShortName);
                this.columnSourceId = new Column("SourceId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSourceId);
                this.Constraints.Add(new UniqueConstraint("KeySource", new DataColumn[] {
                                this.columnSourceId}, true));
                this.columnShortName.AllowDBNull = false;
                this.columnSourceId.AllowDBNull = false;
                this.columnSourceId.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.SourceLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Source"));
                }
            }
            
            public SourceRow NewSourceRow()
            {
                return ((SourceRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new SourceRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(SourceRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.SourceRowChanged != null))
                {
                    this.SourceRowChanged(this, new SourceRowChangeEvent(((SourceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.SourceRowChanging != null))
                {
                    this.SourceRowChanging(this, new SourceRowChangeEvent(((SourceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.SourceRowDeleted != null))
                {
                    this.SourceRowDeleted(this, new SourceRowChangeEvent(((SourceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.SourceRowDeleting != null))
                {
                    this.SourceRowDeleting(this, new SourceRowChangeEvent(((SourceRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSourceRow(SourceRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SourceRow : Row
        {
            
            private SourceDataTable tableSource;
            
            internal SourceRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableSource = ((SourceDataTable)(this.Table));
            }
            
            public decimal BuyMarketValueThreshold
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableSource.BuyMarketValueThresholdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSource.BuyMarketValueThresholdColumn] = value;
                }
            }
            
            public decimal BuyQuantityThreshold
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableSource.BuyQuantityThresholdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSource.BuyQuantityThresholdColumn] = value;
                }
            }
            
            public decimal SellMarketValueThreshold
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableSource.SellMarketValueThresholdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSource.SellMarketValueThresholdColumn] = value;
                }
            }
            
            public decimal SellQuantityThreshold
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableSource.SellQuantityThresholdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSource.SellQuantityThresholdColumn] = value;
                }
            }
            
            public string ShortName
            {
                get
                {
                    return ((string)(this[this.tableSource.ShortNameColumn]));
                }
                set
                {
                    this[this.tableSource.ShortNameColumn] = value;
                }
            }
            
            public int SourceId
            {
                get
                {
                    return ((int)(this[this.tableSource.SourceIdColumn]));
                }
                set
                {
                    this[this.tableSource.SourceIdColumn] = value;
                }
            }
            
            public BlotterRow BlotterRow
            {
                get
                {
                    if ((DataSetMarket.lockBlotter.IsReaderLockHeld || DataSetMarket.lockBlotter.IsWriterLockHeld))
                    {
                        return ((BlotterRow)(this.GetParentRow(this.Table.ParentRelations["BlotterSource"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Blotter"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["BlotterSource"]);
                }
            }
            
            public bool IsBuyMarketValueThresholdNull()
            {
                return this.IsNull(this.tableSource.BuyMarketValueThresholdColumn);
            }
            
            public void SetBuyMarketValueThresholdNull()
            {
                this[this.tableSource.BuyMarketValueThresholdColumn] = System.Convert.DBNull;
            }
            
            public bool IsBuyQuantityThresholdNull()
            {
                return this.IsNull(this.tableSource.BuyQuantityThresholdColumn);
            }
            
            public void SetBuyQuantityThresholdNull()
            {
                this[this.tableSource.BuyQuantityThresholdColumn] = System.Convert.DBNull;
            }
            
            public bool IsSellMarketValueThresholdNull()
            {
                return this.IsNull(this.tableSource.SellMarketValueThresholdColumn);
            }
            
            public void SetSellMarketValueThresholdNull()
            {
                this[this.tableSource.SellMarketValueThresholdColumn] = System.Convert.DBNull;
            }
            
            public bool IsSellQuantityThresholdNull()
            {
                return this.IsNull(this.tableSource.SellQuantityThresholdColumn);
            }
            
            public void SetSellQuantityThresholdNull()
            {
                this[this.tableSource.SellQuantityThresholdColumn] = System.Convert.DBNull;
            }
            
            public BrokerRow[] GetBrokerRows()
            {
                return ((BrokerRow[])(this.GetChildRows(this.Table.ChildRelations["SourceBroker"])));
            }
            
            public InstitutionRow[] GetInstitutionRows()
            {
                return ((InstitutionRow[])(this.GetChildRows(this.Table.ChildRelations["SourceInstitution"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SourceRowChangeEvent : EventArgs
        {
            
            private SourceRow eventRow;
            
            private DataRowAction eventAction;
            
            public SourceRowChangeEvent(SourceRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SourceRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SourceOrderDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnCreatedTime;
            
            private Column columnCreatedUserId;
            
            private Column columnDestinationId;
            
            private Column columnExternalId0;
            
            private Column columnIsAdvertised;
            
            private Column columnIsAutoExecute;
            
            private Column columnIsCanceled;
            
            private Column columnIsHeld;
            
            private Column columnIsSteppedIn;
            
            private Column columnIsSubmitted;
            
            private Column columnLimitPrice;
            
            private Column columnMaximumVolatility;
            
            private Column columnModifiedTime;
            
            private Column columnModifiedUserId;
            
            private Column columnNewsFreeTime;
            
            private Column columnOrderTypeCode;
            
            private Column columnOrderedQuantity;
            
            private Column columnPriceTypeCode;
            
            private Column columnReceivedTime;
            
            private Column columnSecurityId;
            
            private Column columnSettlementId;
            
            private Column columnSourceOrderId;
            
            private Column columnStartTime;
            
            private Column columnStatusCode;
            
            private Column columnStopPrice;
            
            private Column columnStopTime;
            
            private Column columnSubmittedQuantity;
            
            private Column columnSubmittedTime;
            
            private Column columnTargetPrice;
            
            private Column columnTimeInForceCode;
            
            private Column columnWorkingOrderId;
            
            private DataView viewKeySourceOrderExternalId0;
            
            internal SourceOrderDataTable() : 
                    base("SourceOrder")
            {
                this.InitClass();
            }
            
            internal SourceOrderDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column CreatedTimeColumn
            {
                get
                {
                    return this.columnCreatedTime;
                }
            }
            
            public Column CreatedUserIdColumn
            {
                get
                {
                    return this.columnCreatedUserId;
                }
            }
            
            public Column DestinationIdColumn
            {
                get
                {
                    return this.columnDestinationId;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column IsAdvertisedColumn
            {
                get
                {
                    return this.columnIsAdvertised;
                }
            }
            
            public Column IsAutoExecuteColumn
            {
                get
                {
                    return this.columnIsAutoExecute;
                }
            }
            
            public Column IsCanceledColumn
            {
                get
                {
                    return this.columnIsCanceled;
                }
            }
            
            public Column IsHeldColumn
            {
                get
                {
                    return this.columnIsHeld;
                }
            }
            
            public Column IsSteppedInColumn
            {
                get
                {
                    return this.columnIsSteppedIn;
                }
            }
            
            public Column IsSubmittedColumn
            {
                get
                {
                    return this.columnIsSubmitted;
                }
            }
            
            public Column LimitPriceColumn
            {
                get
                {
                    return this.columnLimitPrice;
                }
            }
            
            public Column MaximumVolatilityColumn
            {
                get
                {
                    return this.columnMaximumVolatility;
                }
            }
            
            public Column ModifiedTimeColumn
            {
                get
                {
                    return this.columnModifiedTime;
                }
            }
            
            public Column ModifiedUserIdColumn
            {
                get
                {
                    return this.columnModifiedUserId;
                }
            }
            
            public Column NewsFreeTimeColumn
            {
                get
                {
                    return this.columnNewsFreeTime;
                }
            }
            
            public Column OrderTypeCodeColumn
            {
                get
                {
                    return this.columnOrderTypeCode;
                }
            }
            
            public Column OrderedQuantityColumn
            {
                get
                {
                    return this.columnOrderedQuantity;
                }
            }
            
            public Column PriceTypeCodeColumn
            {
                get
                {
                    return this.columnPriceTypeCode;
                }
            }
            
            public Column ReceivedTimeColumn
            {
                get
                {
                    return this.columnReceivedTime;
                }
            }
            
            public Column SecurityIdColumn
            {
                get
                {
                    return this.columnSecurityId;
                }
            }
            
            public Column SettlementIdColumn
            {
                get
                {
                    return this.columnSettlementId;
                }
            }
            
            public Column SourceOrderIdColumn
            {
                get
                {
                    return this.columnSourceOrderId;
                }
            }
            
            public Column StartTimeColumn
            {
                get
                {
                    return this.columnStartTime;
                }
            }
            
            public Column StatusCodeColumn
            {
                get
                {
                    return this.columnStatusCode;
                }
            }
            
            public Column StopPriceColumn
            {
                get
                {
                    return this.columnStopPrice;
                }
            }
            
            public Column StopTimeColumn
            {
                get
                {
                    return this.columnStopTime;
                }
            }
            
            public Column SubmittedQuantityColumn
            {
                get
                {
                    return this.columnSubmittedQuantity;
                }
            }
            
            public Column SubmittedTimeColumn
            {
                get
                {
                    return this.columnSubmittedTime;
                }
            }
            
            public Column TargetPriceColumn
            {
                get
                {
                    return this.columnTargetPrice;
                }
            }
            
            public Column TimeInForceCodeColumn
            {
                get
                {
                    return this.columnTimeInForceCode;
                }
            }
            
            public Column WorkingOrderIdColumn
            {
                get
                {
                    return this.columnWorkingOrderId;
                }
            }
            
            public DataView KeySourceOrderExternalId0
            {
                get
                {
                    return this.viewKeySourceOrderExternalId0;
                }
            }
            
            public SourceOrderRow this[int index]
            {
                get
                {
                    return ((SourceOrderRow)(this.Rows[index]));
                }
            }
            
            public event SourceOrderRowChangeEventHandler SourceOrderRowChanged;
            
            public event SourceOrderRowChangeEventHandler SourceOrderRowChanging;
            
            public event SourceOrderRowChangeEventHandler SourceOrderRowDeleted;
            
            public event SourceOrderRowChangeEventHandler SourceOrderRowDeleting;
            
            public void AddSourceOrderRow(SourceOrderRow row)
            {
                this.Rows.Add(row);
            }
            
            public SourceOrderRow AddSourceOrderRow(
                        System.DateTime CreatedTime, 
                        UserRow parentUserRowByUserSourceOrderCreatedUserId, 
                        DestinationRow parentDestinationRowByDestinationSourceOrder, 
                        string ExternalId0, 
                        bool IsAdvertised, 
                        bool IsAutoExecute, 
                        bool IsCanceled, 
                        bool IsHeld, 
                        bool IsSteppedIn, 
                        bool IsSubmitted, 
                        decimal LimitPrice, 
                        decimal MaximumVolatility, 
                        System.DateTime ModifiedTime, 
                        UserRow parentUserRowByUserSourceOrderModifiedUserId, 
                        int NewsFreeTime, 
                        OrderTypeRow parentOrderTypeRowByOrderTypeSourceOrder, 
                        decimal OrderedQuantity, 
                        PriceTypeRow parentPriceTypeRowByPriceTypeSourceOrder, 
                        string ReceivedTime, 
                        SecurityRow parentSecurityRowBySecuritySourceOrderSecurityId, 
                        SecurityRow parentSecurityRowBySecuritySourceOrderSettlementId, 
                        System.DateTime StartTime, 
                        StatusRow parentStatusRowByStatusSourceOrder, 
                        decimal StopPrice, 
                        System.DateTime StopTime, 
                        decimal SubmittedQuantity, 
                        string SubmittedTime, 
                        decimal TargetPrice, 
                        TimeInForceRow parentTimeInForceRowByTimeInForceSourceOrder, 
                        WorkingOrderRow parentWorkingOrderRowByWorkingOrderSourceOrder)
            {
                SourceOrderRow rowSourceOrderRow = ((SourceOrderRow)(this.NewRow()));
                rowSourceOrderRow.ItemArray = new object[] {
                        CreatedTime,
                        parentUserRowByUserSourceOrderCreatedUserId[20],
                        parentDestinationRowByDestinationSourceOrder[2],
                        ExternalId0,
                        IsAdvertised,
                        IsAutoExecute,
                        IsCanceled,
                        IsHeld,
                        IsSteppedIn,
                        IsSubmitted,
                        LimitPrice,
                        MaximumVolatility,
                        ModifiedTime,
                        parentUserRowByUserSourceOrderModifiedUserId[20],
                        NewsFreeTime,
                        parentOrderTypeRowByOrderTypeSourceOrder[7],
                        OrderedQuantity,
                        parentPriceTypeRowByPriceTypeSourceOrder[6],
                        ReceivedTime,
                        parentSecurityRowBySecuritySourceOrderSecurityId[23],
                        parentSecurityRowBySecuritySourceOrderSettlementId[23],
                        null,
                        StartTime,
                        parentStatusRowByStatusSourceOrder[6],
                        StopPrice,
                        StopTime,
                        SubmittedQuantity,
                        SubmittedTime,
                        TargetPrice,
                        parentTimeInForceRowByTimeInForceSourceOrder[6],
                        parentWorkingOrderRowByWorkingOrderSourceOrder[31]};
                this.Rows.Add(rowSourceOrderRow);
                return rowSourceOrderRow;
            }
            
            public SourceOrderRow FindBySourceOrderId(int SourceOrderId)
            {
                return ((SourceOrderRow)(this.Rows.Find(new object[] {
                            SourceOrderId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                SourceOrderDataTable cln = ((SourceOrderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new SourceOrderDataTable();
            }
            
            internal void InitVars()
            {
                this.columnCreatedTime = this.Columns["CreatedTime"];
                this.columnCreatedUserId = this.Columns["CreatedUserId"];
                this.columnDestinationId = this.Columns["DestinationId"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnIsAdvertised = this.Columns["IsAdvertised"];
                this.columnIsAutoExecute = this.Columns["IsAutoExecute"];
                this.columnIsCanceled = this.Columns["IsCanceled"];
                this.columnIsHeld = this.Columns["IsHeld"];
                this.columnIsSteppedIn = this.Columns["IsSteppedIn"];
                this.columnIsSubmitted = this.Columns["IsSubmitted"];
                this.columnLimitPrice = this.Columns["LimitPrice"];
                this.columnMaximumVolatility = this.Columns["MaximumVolatility"];
                this.columnModifiedTime = this.Columns["ModifiedTime"];
                this.columnModifiedUserId = this.Columns["ModifiedUserId"];
                this.columnNewsFreeTime = this.Columns["NewsFreeTime"];
                this.columnOrderTypeCode = this.Columns["OrderTypeCode"];
                this.columnOrderedQuantity = this.Columns["OrderedQuantity"];
                this.columnPriceTypeCode = this.Columns["PriceTypeCode"];
                this.columnReceivedTime = this.Columns["ReceivedTime"];
                this.columnSecurityId = this.Columns["SecurityId"];
                this.columnSettlementId = this.Columns["SettlementId"];
                this.columnSourceOrderId = this.Columns["SourceOrderId"];
                this.columnStartTime = this.Columns["StartTime"];
                this.columnStatusCode = this.Columns["StatusCode"];
                this.columnStopPrice = this.Columns["StopPrice"];
                this.columnStopTime = this.Columns["StopTime"];
                this.columnSubmittedQuantity = this.Columns["SubmittedQuantity"];
                this.columnSubmittedTime = this.Columns["SubmittedTime"];
                this.columnTargetPrice = this.Columns["TargetPrice"];
                this.columnTimeInForceCode = this.Columns["TimeInForceCode"];
                this.columnWorkingOrderId = this.Columns["WorkingOrderId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnCreatedTime = new Column("CreatedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedTime);
                this.columnCreatedUserId = new Column("CreatedUserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedUserId);
                this.columnDestinationId = new Column("DestinationId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDestinationId);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnIsAdvertised = new Column("IsAdvertised", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsAdvertised);
                this.columnIsAutoExecute = new Column("IsAutoExecute", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsAutoExecute);
                this.columnIsCanceled = new Column("IsCanceled", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsCanceled);
                this.columnIsHeld = new Column("IsHeld", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsHeld);
                this.columnIsSteppedIn = new Column("IsSteppedIn", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsSteppedIn);
                this.columnIsSubmitted = new Column("IsSubmitted", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsSubmitted);
                this.columnLimitPrice = new Column("LimitPrice", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLimitPrice);
                this.columnMaximumVolatility = new Column("MaximumVolatility", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaximumVolatility);
                this.columnModifiedTime = new Column("ModifiedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedTime);
                this.columnModifiedUserId = new Column("ModifiedUserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedUserId);
                this.columnNewsFreeTime = new Column("NewsFreeTime", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNewsFreeTime);
                this.columnOrderTypeCode = new Column("OrderTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrderTypeCode);
                this.columnOrderedQuantity = new Column("OrderedQuantity", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrderedQuantity);
                this.columnPriceTypeCode = new Column("PriceTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPriceTypeCode);
                this.columnReceivedTime = new Column("ReceivedTime", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReceivedTime);
                this.columnSecurityId = new Column("SecurityId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityId);
                this.columnSettlementId = new Column("SettlementId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSettlementId);
                this.columnSourceOrderId = new Column("SourceOrderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSourceOrderId);
                this.columnStartTime = new Column("StartTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStartTime);
                this.columnStatusCode = new Column("StatusCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStatusCode);
                this.columnStopPrice = new Column("StopPrice", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStopPrice);
                this.columnStopTime = new Column("StopTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStopTime);
                this.columnSubmittedQuantity = new Column("SubmittedQuantity", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSubmittedQuantity);
                this.columnSubmittedTime = new Column("SubmittedTime", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSubmittedTime);
                this.columnTargetPrice = new Column("TargetPrice", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTargetPrice);
                this.columnTimeInForceCode = new Column("TimeInForceCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeInForceCode);
                this.columnWorkingOrderId = new Column("WorkingOrderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWorkingOrderId);
                this.Constraints.Add(new UniqueConstraint("KeySourceOrder", new DataColumn[] {
                                this.columnSourceOrderId}, true));
                this.viewKeySourceOrderExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.columnCreatedTime.AllowDBNull = false;
                this.columnCreatedUserId.AllowDBNull = false;
                this.columnIsAdvertised.AllowDBNull = false;
                this.columnIsAdvertised.DefaultValue = false;
                this.columnIsAutoExecute.AllowDBNull = false;
                this.columnIsAutoExecute.DefaultValue = false;
                this.columnIsCanceled.AllowDBNull = false;
                this.columnIsCanceled.DefaultValue = false;
                this.columnIsHeld.AllowDBNull = false;
                this.columnIsHeld.DefaultValue = false;
                this.columnIsSteppedIn.AllowDBNull = false;
                this.columnIsSteppedIn.DefaultValue = false;
                this.columnIsSubmitted.AllowDBNull = false;
                this.columnIsSubmitted.DefaultValue = false;
                this.columnModifiedTime.AllowDBNull = false;
                this.columnModifiedUserId.AllowDBNull = false;
                this.columnOrderTypeCode.AllowDBNull = false;
                this.columnOrderedQuantity.AllowDBNull = false;
                this.columnPriceTypeCode.AllowDBNull = false;
                this.columnSecurityId.AllowDBNull = false;
                this.columnSourceOrderId.AutoIncrement = true;
                this.columnSourceOrderId.AllowDBNull = false;
                this.columnSourceOrderId.Unique = true;
                this.columnStatusCode.AllowDBNull = false;
                this.columnSubmittedQuantity.AllowDBNull = false;
                this.columnSubmittedQuantity.DefaultValue = 0.0m;
                this.columnTimeInForceCode.AllowDBNull = false;
                this.columnWorkingOrderId.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.SourceOrderLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "SourceOrder"));
                }
            }
            
            public SourceOrderRow NewSourceOrderRow()
            {
                return ((SourceOrderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new SourceOrderRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(SourceOrderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.SourceOrderRowChanged != null))
                {
                    this.SourceOrderRowChanged(this, new SourceOrderRowChangeEvent(((SourceOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.SourceOrderRowChanging != null))
                {
                    this.SourceOrderRowChanging(this, new SourceOrderRowChangeEvent(((SourceOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.SourceOrderRowDeleted != null))
                {
                    this.SourceOrderRowDeleted(this, new SourceOrderRowChangeEvent(((SourceOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.SourceOrderRowDeleting != null))
                {
                    this.SourceOrderRowDeleting(this, new SourceOrderRowChangeEvent(((SourceOrderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSourceOrderRow(SourceOrderRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SourceOrderRow : Row
        {
            
            private SourceOrderDataTable tableSourceOrder;
            
            internal SourceOrderRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableSourceOrder = ((SourceOrderDataTable)(this.Table));
            }
            
            public System.DateTime CreatedTime
            {
                get
                {
                    return ((System.DateTime)(this[this.tableSourceOrder.CreatedTimeColumn]));
                }
                set
                {
                    this[this.tableSourceOrder.CreatedTimeColumn] = value;
                }
            }
            
            public int CreatedUserId
            {
                get
                {
                    return ((int)(this[this.tableSourceOrder.CreatedUserIdColumn]));
                }
                set
                {
                    this[this.tableSourceOrder.CreatedUserIdColumn] = value;
                }
            }
            
            public int DestinationId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableSourceOrder.DestinationIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSourceOrder.DestinationIdColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSourceOrder.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSourceOrder.ExternalId0Column] = value;
                }
            }
            
            public bool IsAdvertised
            {
                get
                {
                    return ((bool)(this[this.tableSourceOrder.IsAdvertisedColumn]));
                }
                set
                {
                    this[this.tableSourceOrder.IsAdvertisedColumn] = value;
                }
            }
            
            public bool IsAutoExecute
            {
                get
                {
                    return ((bool)(this[this.tableSourceOrder.IsAutoExecuteColumn]));
                }
                set
                {
                    this[this.tableSourceOrder.IsAutoExecuteColumn] = value;
                }
            }
            
            public bool IsCanceled
            {
                get
                {
                    return ((bool)(this[this.tableSourceOrder.IsCanceledColumn]));
                }
                set
                {
                    this[this.tableSourceOrder.IsCanceledColumn] = value;
                }
            }
            
            public bool IsHeld
            {
                get
                {
                    return ((bool)(this[this.tableSourceOrder.IsHeldColumn]));
                }
                set
                {
                    this[this.tableSourceOrder.IsHeldColumn] = value;
                }
            }
            
            public bool IsSteppedIn
            {
                get
                {
                    return ((bool)(this[this.tableSourceOrder.IsSteppedInColumn]));
                }
                set
                {
                    this[this.tableSourceOrder.IsSteppedInColumn] = value;
                }
            }
            
            public bool IsSubmitted
            {
                get
                {
                    return ((bool)(this[this.tableSourceOrder.IsSubmittedColumn]));
                }
                set
                {
                    this[this.tableSourceOrder.IsSubmittedColumn] = value;
                }
            }
            
            public decimal LimitPrice
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableSourceOrder.LimitPriceColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSourceOrder.LimitPriceColumn] = value;
                }
            }
            
            public decimal MaximumVolatility
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableSourceOrder.MaximumVolatilityColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSourceOrder.MaximumVolatilityColumn] = value;
                }
            }
            
            public System.DateTime ModifiedTime
            {
                get
                {
                    return ((System.DateTime)(this[this.tableSourceOrder.ModifiedTimeColumn]));
                }
                set
                {
                    this[this.tableSourceOrder.ModifiedTimeColumn] = value;
                }
            }
            
            public int ModifiedUserId
            {
                get
                {
                    return ((int)(this[this.tableSourceOrder.ModifiedUserIdColumn]));
                }
                set
                {
                    this[this.tableSourceOrder.ModifiedUserIdColumn] = value;
                }
            }
            
            public int NewsFreeTime
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableSourceOrder.NewsFreeTimeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSourceOrder.NewsFreeTimeColumn] = value;
                }
            }
            
            public int OrderTypeCode
            {
                get
                {
                    return ((int)(this[this.tableSourceOrder.OrderTypeCodeColumn]));
                }
                set
                {
                    this[this.tableSourceOrder.OrderTypeCodeColumn] = value;
                }
            }
            
            public decimal OrderedQuantity
            {
                get
                {
                    return ((decimal)(this[this.tableSourceOrder.OrderedQuantityColumn]));
                }
                set
                {
                    this[this.tableSourceOrder.OrderedQuantityColumn] = value;
                }
            }
            
            public int PriceTypeCode
            {
                get
                {
                    return ((int)(this[this.tableSourceOrder.PriceTypeCodeColumn]));
                }
                set
                {
                    this[this.tableSourceOrder.PriceTypeCodeColumn] = value;
                }
            }
            
            public string ReceivedTime
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSourceOrder.ReceivedTimeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSourceOrder.ReceivedTimeColumn] = value;
                }
            }
            
            public int SecurityId
            {
                get
                {
                    return ((int)(this[this.tableSourceOrder.SecurityIdColumn]));
                }
                set
                {
                    this[this.tableSourceOrder.SecurityIdColumn] = value;
                }
            }
            
            public int SettlementId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableSourceOrder.SettlementIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSourceOrder.SettlementIdColumn] = value;
                }
            }
            
            public int SourceOrderId
            {
                get
                {
                    return ((int)(this[this.tableSourceOrder.SourceOrderIdColumn]));
                }
                set
                {
                    this[this.tableSourceOrder.SourceOrderIdColumn] = value;
                }
            }
            
            public System.DateTime StartTime
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(this[this.tableSourceOrder.StartTimeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSourceOrder.StartTimeColumn] = value;
                }
            }
            
            public int StatusCode
            {
                get
                {
                    return ((int)(this[this.tableSourceOrder.StatusCodeColumn]));
                }
                set
                {
                    this[this.tableSourceOrder.StatusCodeColumn] = value;
                }
            }
            
            public decimal StopPrice
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableSourceOrder.StopPriceColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSourceOrder.StopPriceColumn] = value;
                }
            }
            
            public System.DateTime StopTime
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(this[this.tableSourceOrder.StopTimeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSourceOrder.StopTimeColumn] = value;
                }
            }
            
            public decimal SubmittedQuantity
            {
                get
                {
                    return ((decimal)(this[this.tableSourceOrder.SubmittedQuantityColumn]));
                }
                set
                {
                    this[this.tableSourceOrder.SubmittedQuantityColumn] = value;
                }
            }
            
            public string SubmittedTime
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSourceOrder.SubmittedTimeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSourceOrder.SubmittedTimeColumn] = value;
                }
            }
            
            public decimal TargetPrice
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableSourceOrder.TargetPriceColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSourceOrder.TargetPriceColumn] = value;
                }
            }
            
            public int TimeInForceCode
            {
                get
                {
                    return ((int)(this[this.tableSourceOrder.TimeInForceCodeColumn]));
                }
                set
                {
                    this[this.tableSourceOrder.TimeInForceCodeColumn] = value;
                }
            }
            
            public int WorkingOrderId
            {
                get
                {
                    return ((int)(this[this.tableSourceOrder.WorkingOrderIdColumn]));
                }
                set
                {
                    this[this.tableSourceOrder.WorkingOrderIdColumn] = value;
                }
            }
            
            public DestinationRow DestinationRow
            {
                get
                {
                    if ((DataSetMarket.lockDestination.IsReaderLockHeld || DataSetMarket.lockDestination.IsWriterLockHeld))
                    {
                        return ((DestinationRow)(this.GetParentRow(this.Table.ParentRelations["DestinationSourceOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Destination"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["DestinationSourceOrder"]);
                }
            }
            
            public OrderTypeRow OrderTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockOrderType.IsReaderLockHeld || DataSetMarket.lockOrderType.IsWriterLockHeld))
                    {
                        return ((OrderTypeRow)(this.GetParentRow(this.Table.ParentRelations["OrderTypeSourceOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "OrderType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["OrderTypeSourceOrder"]);
                }
            }
            
            public PriceTypeRow PriceTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockPriceType.IsReaderLockHeld || DataSetMarket.lockPriceType.IsWriterLockHeld))
                    {
                        return ((PriceTypeRow)(this.GetParentRow(this.Table.ParentRelations["PriceTypeSourceOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "PriceType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["PriceTypeSourceOrder"]);
                }
            }
            
            public SecurityRow SecurityRowBySecuritySourceOrderSecurityId
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["SecuritySourceOrderSecurityId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["SecuritySourceOrderSecurityId"]);
                }
            }
            
            public SecurityRow SecurityRowBySecuritySourceOrderSettlementId
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["SecuritySourceOrderSettlementId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["SecuritySourceOrderSettlementId"]);
                }
            }
            
            public StatusRow StatusRow
            {
                get
                {
                    if ((DataSetMarket.lockStatus.IsReaderLockHeld || DataSetMarket.lockStatus.IsWriterLockHeld))
                    {
                        return ((StatusRow)(this.GetParentRow(this.Table.ParentRelations["StatusSourceOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Status"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["StatusSourceOrder"]);
                }
            }
            
            public TimeInForceRow TimeInForceRow
            {
                get
                {
                    if ((DataSetMarket.lockTimeInForce.IsReaderLockHeld || DataSetMarket.lockTimeInForce.IsWriterLockHeld))
                    {
                        return ((TimeInForceRow)(this.GetParentRow(this.Table.ParentRelations["TimeInForceSourceOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "TimeInForce"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["TimeInForceSourceOrder"]);
                }
            }
            
            public UserRow UserRowByUserSourceOrderCreatedUserId
            {
                get
                {
                    if ((DataSetMarket.lockUser.IsReaderLockHeld || DataSetMarket.lockUser.IsWriterLockHeld))
                    {
                        return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["UserSourceOrderCreatedUserId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "User"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["UserSourceOrderCreatedUserId"]);
                }
            }
            
            public UserRow UserRowByUserSourceOrderModifiedUserId
            {
                get
                {
                    if ((DataSetMarket.lockUser.IsReaderLockHeld || DataSetMarket.lockUser.IsWriterLockHeld))
                    {
                        return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["UserSourceOrderModifiedUserId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "User"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["UserSourceOrderModifiedUserId"]);
                }
            }
            
            public WorkingOrderRow WorkingOrderRow
            {
                get
                {
                    if ((DataSetMarket.lockWorkingOrder.IsReaderLockHeld || DataSetMarket.lockWorkingOrder.IsWriterLockHeld))
                    {
                        return ((WorkingOrderRow)(this.GetParentRow(this.Table.ParentRelations["WorkingOrderSourceOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "WorkingOrder"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["WorkingOrderSourceOrder"]);
                }
            }
            
            public bool IsDestinationIdNull()
            {
                return this.IsNull(this.tableSourceOrder.DestinationIdColumn);
            }
            
            public void SetDestinationIdNull()
            {
                this[this.tableSourceOrder.DestinationIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableSourceOrder.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableSourceOrder.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsLimitPriceNull()
            {
                return this.IsNull(this.tableSourceOrder.LimitPriceColumn);
            }
            
            public void SetLimitPriceNull()
            {
                this[this.tableSourceOrder.LimitPriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsMaximumVolatilityNull()
            {
                return this.IsNull(this.tableSourceOrder.MaximumVolatilityColumn);
            }
            
            public void SetMaximumVolatilityNull()
            {
                this[this.tableSourceOrder.MaximumVolatilityColumn] = System.Convert.DBNull;
            }
            
            public bool IsNewsFreeTimeNull()
            {
                return this.IsNull(this.tableSourceOrder.NewsFreeTimeColumn);
            }
            
            public void SetNewsFreeTimeNull()
            {
                this[this.tableSourceOrder.NewsFreeTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsReceivedTimeNull()
            {
                return this.IsNull(this.tableSourceOrder.ReceivedTimeColumn);
            }
            
            public void SetReceivedTimeNull()
            {
                this[this.tableSourceOrder.ReceivedTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsSettlementIdNull()
            {
                return this.IsNull(this.tableSourceOrder.SettlementIdColumn);
            }
            
            public void SetSettlementIdNull()
            {
                this[this.tableSourceOrder.SettlementIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsStartTimeNull()
            {
                return this.IsNull(this.tableSourceOrder.StartTimeColumn);
            }
            
            public void SetStartTimeNull()
            {
                this[this.tableSourceOrder.StartTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsStopPriceNull()
            {
                return this.IsNull(this.tableSourceOrder.StopPriceColumn);
            }
            
            public void SetStopPriceNull()
            {
                this[this.tableSourceOrder.StopPriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsStopTimeNull()
            {
                return this.IsNull(this.tableSourceOrder.StopTimeColumn);
            }
            
            public void SetStopTimeNull()
            {
                this[this.tableSourceOrder.StopTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsSubmittedTimeNull()
            {
                return this.IsNull(this.tableSourceOrder.SubmittedTimeColumn);
            }
            
            public void SetSubmittedTimeNull()
            {
                this[this.tableSourceOrder.SubmittedTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsTargetPriceNull()
            {
                return this.IsNull(this.tableSourceOrder.TargetPriceColumn);
            }
            
            public void SetTargetPriceNull()
            {
                this[this.tableSourceOrder.TargetPriceColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SourceOrderRowChangeEvent : EventArgs
        {
            
            private SourceOrderRow eventRow;
            
            private DataRowAction eventAction;
            
            public SourceOrderRowChangeEvent(SourceOrderRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SourceOrderRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StatusDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private Column columnMnemonic;
            
            private Column columnStatusCode;
            
            private DataView viewKeyStatusExternalId0;
            
            private DataView viewKeyStatusExternalId1;
            
            private DataView viewKeyStatusExternalId2;
            
            private DataView viewKeyStatusExternalId3;
            
            internal StatusDataTable() : 
                    base("Status")
            {
                this.InitClass();
            }
            
            internal StatusDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public Column MnemonicColumn
            {
                get
                {
                    return this.columnMnemonic;
                }
            }
            
            public Column StatusCodeColumn
            {
                get
                {
                    return this.columnStatusCode;
                }
            }
            
            public DataView KeyStatusExternalId0
            {
                get
                {
                    return this.viewKeyStatusExternalId0;
                }
            }
            
            public DataView KeyStatusExternalId1
            {
                get
                {
                    return this.viewKeyStatusExternalId1;
                }
            }
            
            public DataView KeyStatusExternalId2
            {
                get
                {
                    return this.viewKeyStatusExternalId2;
                }
            }
            
            public DataView KeyStatusExternalId3
            {
                get
                {
                    return this.viewKeyStatusExternalId3;
                }
            }
            
            public StatusRow this[int index]
            {
                get
                {
                    return ((StatusRow)(this.Rows[index]));
                }
            }
            
            public event StatusRowChangeEventHandler StatusRowChanged;
            
            public event StatusRowChangeEventHandler StatusRowChanging;
            
            public event StatusRowChangeEventHandler StatusRowDeleted;
            
            public event StatusRowChangeEventHandler StatusRowDeleting;
            
            public void AddStatusRow(StatusRow row)
            {
                this.Rows.Add(row);
            }
            
            public StatusRow AddStatusRow(string Description, string ExternalId0, string ExternalId1, string ExternalId2, string ExternalId3, string Mnemonic, int StatusCode)
            {
                StatusRow rowStatusRow = ((StatusRow)(this.NewRow()));
                rowStatusRow.ItemArray = new object[] {
                        Description,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3,
                        Mnemonic,
                        StatusCode};
                this.Rows.Add(rowStatusRow);
                return rowStatusRow;
            }
            
            public StatusRow FindByStatusCode(int StatusCode)
            {
                return ((StatusRow)(this.Rows.Find(new object[] {
                            StatusCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                StatusDataTable cln = ((StatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new StatusDataTable();
            }
            
            internal void InitVars()
            {
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnStatusCode = this.Columns["StatusCode"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.columnMnemonic = new Column("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnStatusCode = new Column("StatusCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStatusCode);
                this.Constraints.Add(new UniqueConstraint("KeyStatus", new DataColumn[] {
                                this.columnStatusCode}, true));
                this.viewKeyStatusExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewKeyStatusExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.viewKeyStatusExternalId2 = new DataView(this, null, "ExternalId2", DataViewRowState.CurrentRows);
                this.viewKeyStatusExternalId3 = new DataView(this, null, "ExternalId3", DataViewRowState.CurrentRows);
                this.columnDescription.AllowDBNull = false;
                this.columnMnemonic.AllowDBNull = false;
                this.columnStatusCode.AllowDBNull = false;
                this.columnStatusCode.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.StatusLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Status"));
                }
            }
            
            public StatusRow NewStatusRow()
            {
                return ((StatusRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new StatusRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(StatusRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.StatusRowChanged != null))
                {
                    this.StatusRowChanged(this, new StatusRowChangeEvent(((StatusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.StatusRowChanging != null))
                {
                    this.StatusRowChanging(this, new StatusRowChangeEvent(((StatusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.StatusRowDeleted != null))
                {
                    this.StatusRowDeleted(this, new StatusRowChangeEvent(((StatusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.StatusRowDeleting != null))
                {
                    this.StatusRowDeleting(this, new StatusRowChangeEvent(((StatusRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveStatusRow(StatusRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StatusRow : Row
        {
            
            private StatusDataTable tableStatus;
            
            internal StatusRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableStatus = ((StatusDataTable)(this.Table));
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableStatus.DescriptionColumn]));
                }
                set
                {
                    this[this.tableStatus.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStatus.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStatus.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStatus.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStatus.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStatus.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStatus.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStatus.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStatus.ExternalId3Column] = value;
                }
            }
            
            public string Mnemonic
            {
                get
                {
                    return ((string)(this[this.tableStatus.MnemonicColumn]));
                }
                set
                {
                    this[this.tableStatus.MnemonicColumn] = value;
                }
            }
            
            public int StatusCode
            {
                get
                {
                    return ((int)(this[this.tableStatus.StatusCodeColumn]));
                }
                set
                {
                    this[this.tableStatus.StatusCodeColumn] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableStatus.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableStatus.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableStatus.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableStatus.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableStatus.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableStatus.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableStatus.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableStatus.ExternalId3Column] = System.Convert.DBNull;
            }
            
            public DestinationOrderRow[] GetDestinationOrderRows()
            {
                return ((DestinationOrderRow[])(this.GetChildRows(this.Table.ChildRelations["StatusDestinationOrder"])));
            }
            
            public MatchRow[] GetMatchRows()
            {
                return ((MatchRow[])(this.GetChildRows(this.Table.ChildRelations["StatusMatch"])));
            }
            
            public NegotiationRow[] GetNegotiationRows()
            {
                return ((NegotiationRow[])(this.GetChildRows(this.Table.ChildRelations["StatusNegotiation"])));
            }
            
            public SourceOrderRow[] GetSourceOrderRows()
            {
                return ((SourceOrderRow[])(this.GetChildRows(this.Table.ChildRelations["StatusSourceOrder"])));
            }
            
            public WorkingOrderRow[] GetWorkingOrderRows()
            {
                return ((WorkingOrderRow[])(this.GetChildRows(this.Table.ChildRelations["StatusWorkingOrder"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StatusRowChangeEvent : EventArgs
        {
            
            private StatusRow eventRow;
            
            private DataRowAction eventAction;
            
            public StatusRowChangeEvent(StatusRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public StatusRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StylesheetDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnName;
            
            private Column columnStylesheetId;
            
            private Column columnStylesheetTypeCode;
            
            private Column columnText;
            
            private DataView viewKeyStylesheetExternalId0;
            
            private DataView viewKeyStylesheetExternalId1;
            
            internal StylesheetDataTable() : 
                    base("Stylesheet")
            {
                this.InitClass();
            }
            
            internal StylesheetDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column NameColumn
            {
                get
                {
                    return this.columnName;
                }
            }
            
            public Column StylesheetIdColumn
            {
                get
                {
                    return this.columnStylesheetId;
                }
            }
            
            public Column StylesheetTypeCodeColumn
            {
                get
                {
                    return this.columnStylesheetTypeCode;
                }
            }
            
            public Column TextColumn
            {
                get
                {
                    return this.columnText;
                }
            }
            
            public DataView KeyStylesheetExternalId0
            {
                get
                {
                    return this.viewKeyStylesheetExternalId0;
                }
            }
            
            public DataView KeyStylesheetExternalId1
            {
                get
                {
                    return this.viewKeyStylesheetExternalId1;
                }
            }
            
            public StylesheetRow this[int index]
            {
                get
                {
                    return ((StylesheetRow)(this.Rows[index]));
                }
            }
            
            public event StylesheetRowChangeEventHandler StylesheetRowChanged;
            
            public event StylesheetRowChangeEventHandler StylesheetRowChanging;
            
            public event StylesheetRowChangeEventHandler StylesheetRowDeleted;
            
            public event StylesheetRowChangeEventHandler StylesheetRowDeleting;
            
            public void AddStylesheetRow(StylesheetRow row)
            {
                this.Rows.Add(row);
            }
            
            public StylesheetRow AddStylesheetRow(string ExternalId0, string ExternalId1, string Name, StylesheetTypeRow parentStylesheetTypeRowByStylesheetTypeStylesheet, string Text)
            {
                StylesheetRow rowStylesheetRow = ((StylesheetRow)(this.NewRow()));
                rowStylesheetRow.ItemArray = new object[] {
                        ExternalId0,
                        ExternalId1,
                        Name,
                        null,
                        parentStylesheetTypeRowByStylesheetTypeStylesheet[4],
                        Text};
                this.Rows.Add(rowStylesheetRow);
                return rowStylesheetRow;
            }
            
            public StylesheetRow FindByStylesheetId(int StylesheetId)
            {
                return ((StylesheetRow)(this.Rows.Find(new object[] {
                            StylesheetId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                StylesheetDataTable cln = ((StylesheetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new StylesheetDataTable();
            }
            
            internal void InitVars()
            {
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnName = this.Columns["Name"];
                this.columnStylesheetId = this.Columns["StylesheetId"];
                this.columnStylesheetTypeCode = this.Columns["StylesheetTypeCode"];
                this.columnText = this.Columns["Text"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnName = new Column("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnStylesheetId = new Column("StylesheetId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStylesheetId);
                this.columnStylesheetTypeCode = new Column("StylesheetTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStylesheetTypeCode);
                this.columnText = new Column("Text", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnText);
                this.Constraints.Add(new UniqueConstraint("KeyStylesheet", new DataColumn[] {
                                this.columnStylesheetId}, true));
                this.viewKeyStylesheetExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewKeyStylesheetExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.columnName.AllowDBNull = false;
                this.columnStylesheetId.AutoIncrement = true;
                this.columnStylesheetId.AllowDBNull = false;
                this.columnStylesheetId.Unique = true;
                this.columnStylesheetTypeCode.AllowDBNull = false;
                this.columnText.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.StylesheetLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Stylesheet"));
                }
            }
            
            public StylesheetRow NewStylesheetRow()
            {
                return ((StylesheetRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new StylesheetRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(StylesheetRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.StylesheetRowChanged != null))
                {
                    this.StylesheetRowChanged(this, new StylesheetRowChangeEvent(((StylesheetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.StylesheetRowChanging != null))
                {
                    this.StylesheetRowChanging(this, new StylesheetRowChangeEvent(((StylesheetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.StylesheetRowDeleted != null))
                {
                    this.StylesheetRowDeleted(this, new StylesheetRowChangeEvent(((StylesheetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.StylesheetRowDeleting != null))
                {
                    this.StylesheetRowDeleting(this, new StylesheetRowChangeEvent(((StylesheetRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveStylesheetRow(StylesheetRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StylesheetRow : Row
        {
            
            private StylesheetDataTable tableStylesheet;
            
            internal StylesheetRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableStylesheet = ((StylesheetDataTable)(this.Table));
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStylesheet.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStylesheet.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStylesheet.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStylesheet.ExternalId1Column] = value;
                }
            }
            
            public string Name
            {
                get
                {
                    return ((string)(this[this.tableStylesheet.NameColumn]));
                }
                set
                {
                    this[this.tableStylesheet.NameColumn] = value;
                }
            }
            
            public int StylesheetId
            {
                get
                {
                    return ((int)(this[this.tableStylesheet.StylesheetIdColumn]));
                }
                set
                {
                    this[this.tableStylesheet.StylesheetIdColumn] = value;
                }
            }
            
            public int StylesheetTypeCode
            {
                get
                {
                    return ((int)(this[this.tableStylesheet.StylesheetTypeCodeColumn]));
                }
                set
                {
                    this[this.tableStylesheet.StylesheetTypeCodeColumn] = value;
                }
            }
            
            public string Text
            {
                get
                {
                    return ((string)(this[this.tableStylesheet.TextColumn]));
                }
                set
                {
                    this[this.tableStylesheet.TextColumn] = value;
                }
            }
            
            public StylesheetTypeRow StylesheetTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockStylesheetType.IsReaderLockHeld || DataSetMarket.lockStylesheetType.IsWriterLockHeld))
                    {
                        return ((StylesheetTypeRow)(this.GetParentRow(this.Table.ParentRelations["StylesheetTypeStylesheet"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "StylesheetType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["StylesheetTypeStylesheet"]);
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableStylesheet.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableStylesheet.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableStylesheet.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableStylesheet.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public BlotterRow[] GetBlotterRowsByStylesheetBlotterAdvertisementStylesheetId()
            {
                return ((BlotterRow[])(this.GetChildRows(this.Table.ChildRelations["StylesheetBlotterAdvertisementStylesheetId"])));
            }
            
            public BlotterRow[] GetBlotterRowsByStylesheetBlotterDestinationOrderDetailStylesheetId()
            {
                return ((BlotterRow[])(this.GetChildRows(this.Table.ChildRelations["StylesheetBlotterDestinationOrderDetailStylesheetId"])));
            }
            
            public BlotterRow[] GetBlotterRowsByStylesheetBlotterDestinationOrderStylesheetId()
            {
                return ((BlotterRow[])(this.GetChildRows(this.Table.ChildRelations["StylesheetBlotterDestinationOrderStylesheetId"])));
            }
            
            public BlotterRow[] GetBlotterRowsByStylesheetBlotterExecutionDetailStylesheetId()
            {
                return ((BlotterRow[])(this.GetChildRows(this.Table.ChildRelations["StylesheetBlotterExecutionDetailStylesheetId"])));
            }
            
            public BlotterRow[] GetBlotterRowsByStylesheetBlotterExecutionStylesheetId()
            {
                return ((BlotterRow[])(this.GetChildRows(this.Table.ChildRelations["StylesheetBlotterExecutionStylesheetId"])));
            }
            
            public BlotterRow[] GetBlotterRowsByStylesheetBlotterMatchStylesheetId()
            {
                return ((BlotterRow[])(this.GetChildRows(this.Table.ChildRelations["StylesheetBlotterMatchStylesheetId"])));
            }
            
            public BlotterRow[] GetBlotterRowsByStylesheetBlotterMatchHistoryStylesheetId()
            {
                return ((BlotterRow[])(this.GetChildRows(this.Table.ChildRelations["StylesheetBlotterMatchHistoryStylesheetId"])));
            }
            
            public BlotterRow[] GetBlotterRowsByStylesheetBlotterSourceOrderDetailStylesheetId()
            {
                return ((BlotterRow[])(this.GetChildRows(this.Table.ChildRelations["StylesheetBlotterSourceOrderDetailStylesheetId"])));
            }
            
            public BlotterRow[] GetBlotterRowsByStylesheetBlotterSourceOrderStylesheetId()
            {
                return ((BlotterRow[])(this.GetChildRows(this.Table.ChildRelations["StylesheetBlotterSourceOrderStylesheetId"])));
            }
            
            public BlotterRow[] GetBlotterRowsByStylesheetBlotterWorkingOrderStylesheetId()
            {
                return ((BlotterRow[])(this.GetChildRows(this.Table.ChildRelations["StylesheetBlotterWorkingOrderStylesheetId"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StylesheetRowChangeEvent : EventArgs
        {
            
            private StylesheetRow eventRow;
            
            private DataRowAction eventAction;
            
            public StylesheetRowChangeEvent(StylesheetRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public StylesheetRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StylesheetTypeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnName;
            
            private Column columnStylesheetTypeCode;
            
            private DataView viewKeyStylesheetTypeExternalId0;
            
            private DataView viewKeyStylesheetTypeExternalId1;
            
            internal StylesheetTypeDataTable() : 
                    base("StylesheetType")
            {
                this.InitClass();
            }
            
            internal StylesheetTypeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column NameColumn
            {
                get
                {
                    return this.columnName;
                }
            }
            
            public Column StylesheetTypeCodeColumn
            {
                get
                {
                    return this.columnStylesheetTypeCode;
                }
            }
            
            public DataView KeyStylesheetTypeExternalId0
            {
                get
                {
                    return this.viewKeyStylesheetTypeExternalId0;
                }
            }
            
            public DataView KeyStylesheetTypeExternalId1
            {
                get
                {
                    return this.viewKeyStylesheetTypeExternalId1;
                }
            }
            
            public StylesheetTypeRow this[int index]
            {
                get
                {
                    return ((StylesheetTypeRow)(this.Rows[index]));
                }
            }
            
            public event StylesheetTypeRowChangeEventHandler StylesheetTypeRowChanged;
            
            public event StylesheetTypeRowChangeEventHandler StylesheetTypeRowChanging;
            
            public event StylesheetTypeRowChangeEventHandler StylesheetTypeRowDeleted;
            
            public event StylesheetTypeRowChangeEventHandler StylesheetTypeRowDeleting;
            
            public void AddStylesheetTypeRow(StylesheetTypeRow row)
            {
                this.Rows.Add(row);
            }
            
            public StylesheetTypeRow AddStylesheetTypeRow(string Description, string ExternalId0, string ExternalId1, string Name, int StylesheetTypeCode)
            {
                StylesheetTypeRow rowStylesheetTypeRow = ((StylesheetTypeRow)(this.NewRow()));
                rowStylesheetTypeRow.ItemArray = new object[] {
                        Description,
                        ExternalId0,
                        ExternalId1,
                        Name,
                        StylesheetTypeCode};
                this.Rows.Add(rowStylesheetTypeRow);
                return rowStylesheetTypeRow;
            }
            
            public StylesheetTypeRow FindByStylesheetTypeCode(int StylesheetTypeCode)
            {
                return ((StylesheetTypeRow)(this.Rows.Find(new object[] {
                            StylesheetTypeCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                StylesheetTypeDataTable cln = ((StylesheetTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new StylesheetTypeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnName = this.Columns["Name"];
                this.columnStylesheetTypeCode = this.Columns["StylesheetTypeCode"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnName = new Column("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnStylesheetTypeCode = new Column("StylesheetTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStylesheetTypeCode);
                this.Constraints.Add(new UniqueConstraint("KeyStylesheetType", new DataColumn[] {
                                this.columnStylesheetTypeCode}, true));
                this.viewKeyStylesheetTypeExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewKeyStylesheetTypeExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.columnStylesheetTypeCode.AllowDBNull = false;
                this.columnStylesheetTypeCode.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.StylesheetTypeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "StylesheetType"));
                }
            }
            
            public StylesheetTypeRow NewStylesheetTypeRow()
            {
                return ((StylesheetTypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new StylesheetTypeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(StylesheetTypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.StylesheetTypeRowChanged != null))
                {
                    this.StylesheetTypeRowChanged(this, new StylesheetTypeRowChangeEvent(((StylesheetTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.StylesheetTypeRowChanging != null))
                {
                    this.StylesheetTypeRowChanging(this, new StylesheetTypeRowChangeEvent(((StylesheetTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.StylesheetTypeRowDeleted != null))
                {
                    this.StylesheetTypeRowDeleted(this, new StylesheetTypeRowChangeEvent(((StylesheetTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.StylesheetTypeRowDeleting != null))
                {
                    this.StylesheetTypeRowDeleting(this, new StylesheetTypeRowChangeEvent(((StylesheetTypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveStylesheetTypeRow(StylesheetTypeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StylesheetTypeRow : Row
        {
            
            private StylesheetTypeDataTable tableStylesheetType;
            
            internal StylesheetTypeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableStylesheetType = ((StylesheetTypeDataTable)(this.Table));
            }
            
            public string Description
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStylesheetType.DescriptionColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStylesheetType.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStylesheetType.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStylesheetType.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStylesheetType.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStylesheetType.ExternalId1Column] = value;
                }
            }
            
            public string Name
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStylesheetType.NameColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStylesheetType.NameColumn] = value;
                }
            }
            
            public int StylesheetTypeCode
            {
                get
                {
                    return ((int)(this[this.tableStylesheetType.StylesheetTypeCodeColumn]));
                }
                set
                {
                    this[this.tableStylesheetType.StylesheetTypeCodeColumn] = value;
                }
            }
            
            public bool IsDescriptionNull()
            {
                return this.IsNull(this.tableStylesheetType.DescriptionColumn);
            }
            
            public void SetDescriptionNull()
            {
                this[this.tableStylesheetType.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableStylesheetType.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableStylesheetType.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableStylesheetType.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableStylesheetType.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsNameNull()
            {
                return this.IsNull(this.tableStylesheetType.NameColumn);
            }
            
            public void SetNameNull()
            {
                this[this.tableStylesheetType.NameColumn] = System.Convert.DBNull;
            }
            
            public StylesheetRow[] GetStylesheetRows()
            {
                return ((StylesheetRow[])(this.GetChildRows(this.Table.ChildRelations["StylesheetTypeStylesheet"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StylesheetTypeRowChangeEvent : EventArgs
        {
            
            private StylesheetTypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public StylesheetTypeRowChangeEvent(StylesheetTypeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public StylesheetTypeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SubmissionTypeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnMnemonic;
            
            private Column columnSubmissionTypeCode;
            
            private DataView viewKeySubmissionTypeExternalId0;
            
            private DataView viewKeySubmissionTypeExternalId1;
            
            internal SubmissionTypeDataTable() : 
                    base("SubmissionType")
            {
                this.InitClass();
            }
            
            internal SubmissionTypeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column MnemonicColumn
            {
                get
                {
                    return this.columnMnemonic;
                }
            }
            
            public Column SubmissionTypeCodeColumn
            {
                get
                {
                    return this.columnSubmissionTypeCode;
                }
            }
            
            public DataView KeySubmissionTypeExternalId0
            {
                get
                {
                    return this.viewKeySubmissionTypeExternalId0;
                }
            }
            
            public DataView KeySubmissionTypeExternalId1
            {
                get
                {
                    return this.viewKeySubmissionTypeExternalId1;
                }
            }
            
            public SubmissionTypeRow this[int index]
            {
                get
                {
                    return ((SubmissionTypeRow)(this.Rows[index]));
                }
            }
            
            public event SubmissionTypeRowChangeEventHandler SubmissionTypeRowChanged;
            
            public event SubmissionTypeRowChangeEventHandler SubmissionTypeRowChanging;
            
            public event SubmissionTypeRowChangeEventHandler SubmissionTypeRowDeleted;
            
            public event SubmissionTypeRowChangeEventHandler SubmissionTypeRowDeleting;
            
            public void AddSubmissionTypeRow(SubmissionTypeRow row)
            {
                this.Rows.Add(row);
            }
            
            public SubmissionTypeRow AddSubmissionTypeRow(string Description, string ExternalId0, string ExternalId1, string Mnemonic, int SubmissionTypeCode)
            {
                SubmissionTypeRow rowSubmissionTypeRow = ((SubmissionTypeRow)(this.NewRow()));
                rowSubmissionTypeRow.ItemArray = new object[] {
                        Description,
                        ExternalId0,
                        ExternalId1,
                        Mnemonic,
                        SubmissionTypeCode};
                this.Rows.Add(rowSubmissionTypeRow);
                return rowSubmissionTypeRow;
            }
            
            public SubmissionTypeRow FindBySubmissionTypeCode(int SubmissionTypeCode)
            {
                return ((SubmissionTypeRow)(this.Rows.Find(new object[] {
                            SubmissionTypeCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                SubmissionTypeDataTable cln = ((SubmissionTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new SubmissionTypeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnSubmissionTypeCode = this.Columns["SubmissionTypeCode"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnMnemonic = new Column("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnSubmissionTypeCode = new Column("SubmissionTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSubmissionTypeCode);
                this.Constraints.Add(new UniqueConstraint("KeySubmissionType", new DataColumn[] {
                                this.columnSubmissionTypeCode}, true));
                this.viewKeySubmissionTypeExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewKeySubmissionTypeExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.columnDescription.AllowDBNull = false;
                this.columnMnemonic.AllowDBNull = false;
                this.columnSubmissionTypeCode.AllowDBNull = false;
                this.columnSubmissionTypeCode.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.SubmissionTypeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "SubmissionType"));
                }
            }
            
            public SubmissionTypeRow NewSubmissionTypeRow()
            {
                return ((SubmissionTypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new SubmissionTypeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(SubmissionTypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.SubmissionTypeRowChanged != null))
                {
                    this.SubmissionTypeRowChanged(this, new SubmissionTypeRowChangeEvent(((SubmissionTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.SubmissionTypeRowChanging != null))
                {
                    this.SubmissionTypeRowChanging(this, new SubmissionTypeRowChangeEvent(((SubmissionTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.SubmissionTypeRowDeleted != null))
                {
                    this.SubmissionTypeRowDeleted(this, new SubmissionTypeRowChangeEvent(((SubmissionTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.SubmissionTypeRowDeleting != null))
                {
                    this.SubmissionTypeRowDeleting(this, new SubmissionTypeRowChangeEvent(((SubmissionTypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSubmissionTypeRow(SubmissionTypeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SubmissionTypeRow : Row
        {
            
            private SubmissionTypeDataTable tableSubmissionType;
            
            internal SubmissionTypeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableSubmissionType = ((SubmissionTypeDataTable)(this.Table));
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableSubmissionType.DescriptionColumn]));
                }
                set
                {
                    this[this.tableSubmissionType.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSubmissionType.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSubmissionType.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSubmissionType.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSubmissionType.ExternalId1Column] = value;
                }
            }
            
            public string Mnemonic
            {
                get
                {
                    return ((string)(this[this.tableSubmissionType.MnemonicColumn]));
                }
                set
                {
                    this[this.tableSubmissionType.MnemonicColumn] = value;
                }
            }
            
            public int SubmissionTypeCode
            {
                get
                {
                    return ((int)(this[this.tableSubmissionType.SubmissionTypeCodeColumn]));
                }
                set
                {
                    this[this.tableSubmissionType.SubmissionTypeCodeColumn] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableSubmissionType.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableSubmissionType.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableSubmissionType.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableSubmissionType.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public WorkingOrderRow[] GetWorkingOrderRows()
            {
                return ((WorkingOrderRow[])(this.GetChildRows(this.Table.ChildRelations["SubmissionTypeWorkingOrder"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SubmissionTypeRowChangeEvent : EventArgs
        {
            
            private SubmissionTypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public SubmissionTypeRowChangeEvent(SubmissionTypeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SubmissionTypeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SystemFolderDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnSystemFolderId;
            
            internal SystemFolderDataTable() : 
                    base("SystemFolder")
            {
                this.InitClass();
            }
            
            internal SystemFolderDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column SystemFolderIdColumn
            {
                get
                {
                    return this.columnSystemFolderId;
                }
            }
            
            public SystemFolderRow this[int index]
            {
                get
                {
                    return ((SystemFolderRow)(this.Rows[index]));
                }
            }
            
            public event SystemFolderRowChangeEventHandler SystemFolderRowChanged;
            
            public event SystemFolderRowChangeEventHandler SystemFolderRowChanging;
            
            public event SystemFolderRowChangeEventHandler SystemFolderRowDeleted;
            
            public event SystemFolderRowChangeEventHandler SystemFolderRowDeleting;
            
            public void AddSystemFolderRow(SystemFolderRow row)
            {
                this.Rows.Add(row);
            }
            
            public SystemFolderRow AddSystemFolderRow(FolderRow parentFolderRowByFolderSystemFolder)
            {
                SystemFolderRow rowSystemFolderRow = ((SystemFolderRow)(this.NewRow()));
                rowSystemFolderRow.ItemArray = new object[] {
                        parentFolderRowByFolderSystemFolder[17]};
                this.Rows.Add(rowSystemFolderRow);
                return rowSystemFolderRow;
            }
            
            public SystemFolderRow FindBySystemFolderId(int SystemFolderId)
            {
                return ((SystemFolderRow)(this.Rows.Find(new object[] {
                            SystemFolderId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                SystemFolderDataTable cln = ((SystemFolderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new SystemFolderDataTable();
            }
            
            internal void InitVars()
            {
                this.columnSystemFolderId = this.Columns["SystemFolderId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnSystemFolderId = new Column("SystemFolderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSystemFolderId);
                this.Constraints.Add(new UniqueConstraint("KeySystemFolder", new DataColumn[] {
                                this.columnSystemFolderId}, true));
                this.columnSystemFolderId.AllowDBNull = false;
                this.columnSystemFolderId.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.SystemFolderLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "SystemFolder"));
                }
            }
            
            public SystemFolderRow NewSystemFolderRow()
            {
                return ((SystemFolderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new SystemFolderRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(SystemFolderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.SystemFolderRowChanged != null))
                {
                    this.SystemFolderRowChanged(this, new SystemFolderRowChangeEvent(((SystemFolderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.SystemFolderRowChanging != null))
                {
                    this.SystemFolderRowChanging(this, new SystemFolderRowChangeEvent(((SystemFolderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.SystemFolderRowDeleted != null))
                {
                    this.SystemFolderRowDeleted(this, new SystemFolderRowChangeEvent(((SystemFolderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.SystemFolderRowDeleting != null))
                {
                    this.SystemFolderRowDeleting(this, new SystemFolderRowChangeEvent(((SystemFolderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSystemFolderRow(SystemFolderRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SystemFolderRow : Row
        {
            
            private SystemFolderDataTable tableSystemFolder;
            
            internal SystemFolderRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableSystemFolder = ((SystemFolderDataTable)(this.Table));
            }
            
            public int SystemFolderId
            {
                get
                {
                    return ((int)(this[this.tableSystemFolder.SystemFolderIdColumn]));
                }
                set
                {
                    this[this.tableSystemFolder.SystemFolderIdColumn] = value;
                }
            }
            
            public FolderRow FolderRow
            {
                get
                {
                    if ((DataSetMarket.lockFolder.IsReaderLockHeld || DataSetMarket.lockFolder.IsWriterLockHeld))
                    {
                        return ((FolderRow)(this.GetParentRow(this.Table.ParentRelations["FolderSystemFolder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Folder"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FolderSystemFolder"]);
                }
            }
            
            public UserRow[] GetUserRows()
            {
                return ((UserRow[])(this.GetChildRows(this.Table.ChildRelations["SystemFolderUser"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SystemFolderRowChangeEvent : EventArgs
        {
            
            private SystemFolderRow eventRow;
            
            private DataRowAction eventAction;
            
            public SystemFolderRowChangeEvent(SystemFolderRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SystemFolderRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TaxLotDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnAccountId;
            
            private Column columnCost;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private Column columnLocalCost;
            
            private Column columnPositionTypeCode;
            
            private Column columnQuantity;
            
            private Column columnSecurityId;
            
            private Column columnSettlementDate;
            
            private Column columnTaxLotId;
            
            private Column columnTradeDate;
            
            private Column columnUserData0;
            
            private Column columnUserData1;
            
            private Column columnUserData2;
            
            private Column columnUserData3;
            
            private Column columnUserData4;
            
            private Column columnUserData5;
            
            private Column columnUserData6;
            
            private Column columnUserData7;
            
            private DataView viewKeyTaxLotAccountIdSecurityIdPositionTypeCode;
            
            private DataView viewKeyTaxLotExternalId0;
            
            private DataView viewKeyTaxLotExternalId1;
            
            private DataView viewKeyTaxLotExternalId2;
            
            private DataView viewKeyTaxLotExternalId3;
            
            internal TaxLotDataTable() : 
                    base("TaxLot")
            {
                this.InitClass();
            }
            
            internal TaxLotDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column AccountIdColumn
            {
                get
                {
                    return this.columnAccountId;
                }
            }
            
            public Column CostColumn
            {
                get
                {
                    return this.columnCost;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public Column LocalCostColumn
            {
                get
                {
                    return this.columnLocalCost;
                }
            }
            
            public Column PositionTypeCodeColumn
            {
                get
                {
                    return this.columnPositionTypeCode;
                }
            }
            
            public Column QuantityColumn
            {
                get
                {
                    return this.columnQuantity;
                }
            }
            
            public Column SecurityIdColumn
            {
                get
                {
                    return this.columnSecurityId;
                }
            }
            
            public Column SettlementDateColumn
            {
                get
                {
                    return this.columnSettlementDate;
                }
            }
            
            public Column TaxLotIdColumn
            {
                get
                {
                    return this.columnTaxLotId;
                }
            }
            
            public Column TradeDateColumn
            {
                get
                {
                    return this.columnTradeDate;
                }
            }
            
            public Column UserData0Column
            {
                get
                {
                    return this.columnUserData0;
                }
            }
            
            public Column UserData1Column
            {
                get
                {
                    return this.columnUserData1;
                }
            }
            
            public Column UserData2Column
            {
                get
                {
                    return this.columnUserData2;
                }
            }
            
            public Column UserData3Column
            {
                get
                {
                    return this.columnUserData3;
                }
            }
            
            public Column UserData4Column
            {
                get
                {
                    return this.columnUserData4;
                }
            }
            
            public Column UserData5Column
            {
                get
                {
                    return this.columnUserData5;
                }
            }
            
            public Column UserData6Column
            {
                get
                {
                    return this.columnUserData6;
                }
            }
            
            public Column UserData7Column
            {
                get
                {
                    return this.columnUserData7;
                }
            }
            
            public DataView KeyTaxLotAccountIdSecurityIdPositionTypeCode
            {
                get
                {
                    return this.viewKeyTaxLotAccountIdSecurityIdPositionTypeCode;
                }
            }
            
            public DataView KeyTaxLotExternalId0
            {
                get
                {
                    return this.viewKeyTaxLotExternalId0;
                }
            }
            
            public DataView KeyTaxLotExternalId1
            {
                get
                {
                    return this.viewKeyTaxLotExternalId1;
                }
            }
            
            public DataView KeyTaxLotExternalId2
            {
                get
                {
                    return this.viewKeyTaxLotExternalId2;
                }
            }
            
            public DataView KeyTaxLotExternalId3
            {
                get
                {
                    return this.viewKeyTaxLotExternalId3;
                }
            }
            
            public TaxLotRow this[int index]
            {
                get
                {
                    return ((TaxLotRow)(this.Rows[index]));
                }
            }
            
            public event TaxLotRowChangeEventHandler TaxLotRowChanged;
            
            public event TaxLotRowChangeEventHandler TaxLotRowChanging;
            
            public event TaxLotRowChangeEventHandler TaxLotRowDeleted;
            
            public event TaxLotRowChangeEventHandler TaxLotRowDeleting;
            
            public void AddTaxLotRow(TaxLotRow row)
            {
                this.Rows.Add(row);
            }
            
            public TaxLotRow AddTaxLotRow(
                        AccountRow parentAccountRowByAccountTaxLot, 
                        decimal Cost, 
                        string ExternalId0, 
                        string ExternalId1, 
                        string ExternalId2, 
                        string ExternalId3, 
                        decimal LocalCost, 
                        PositionTypeRow parentPositionTypeRowByPositionTypeTaxLot, 
                        decimal Quantity, 
                        SecurityRow parentSecurityRowBySecurityTaxLot, 
                        System.DateTime SettlementDate, 
                        System.DateTime TradeDate, 
                        decimal UserData0, 
                        decimal UserData1, 
                        decimal UserData2, 
                        decimal UserData3, 
                        decimal UserData4, 
                        decimal UserData5, 
                        decimal UserData6, 
                        decimal UserData7)
            {
                TaxLotRow rowTaxLotRow = ((TaxLotRow)(this.NewRow()));
                rowTaxLotRow.ItemArray = new object[] {
                        parentAccountRowByAccountTaxLot[36],
                        Cost,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3,
                        LocalCost,
                        parentPositionTypeRowByPositionTypeTaxLot[5],
                        Quantity,
                        parentSecurityRowBySecurityTaxLot[23],
                        SettlementDate,
                        null,
                        TradeDate,
                        UserData0,
                        UserData1,
                        UserData2,
                        UserData3,
                        UserData4,
                        UserData5,
                        UserData6,
                        UserData7};
                this.Rows.Add(rowTaxLotRow);
                return rowTaxLotRow;
            }
            
            public TaxLotRow FindByTaxLotId(int TaxLotId)
            {
                return ((TaxLotRow)(this.Rows.Find(new object[] {
                            TaxLotId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                TaxLotDataTable cln = ((TaxLotDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new TaxLotDataTable();
            }
            
            internal void InitVars()
            {
                this.columnAccountId = this.Columns["AccountId"];
                this.columnCost = this.Columns["Cost"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
                this.columnLocalCost = this.Columns["LocalCost"];
                this.columnPositionTypeCode = this.Columns["PositionTypeCode"];
                this.columnQuantity = this.Columns["Quantity"];
                this.columnSecurityId = this.Columns["SecurityId"];
                this.columnSettlementDate = this.Columns["SettlementDate"];
                this.columnTaxLotId = this.Columns["TaxLotId"];
                this.columnTradeDate = this.Columns["TradeDate"];
                this.columnUserData0 = this.Columns["UserData0"];
                this.columnUserData1 = this.Columns["UserData1"];
                this.columnUserData2 = this.Columns["UserData2"];
                this.columnUserData3 = this.Columns["UserData3"];
                this.columnUserData4 = this.Columns["UserData4"];
                this.columnUserData5 = this.Columns["UserData5"];
                this.columnUserData6 = this.Columns["UserData6"];
                this.columnUserData7 = this.Columns["UserData7"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnAccountId = new Column("AccountId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountId);
                this.columnCost = new Column("Cost", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCost);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.columnLocalCost = new Column("LocalCost", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocalCost);
                this.columnPositionTypeCode = new Column("PositionTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPositionTypeCode);
                this.columnQuantity = new Column("Quantity", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQuantity);
                this.columnSecurityId = new Column("SecurityId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityId);
                this.columnSettlementDate = new Column("SettlementDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSettlementDate);
                this.columnTaxLotId = new Column("TaxLotId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTaxLotId);
                this.columnTradeDate = new Column("TradeDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTradeDate);
                this.columnUserData0 = new Column("UserData0", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData0);
                this.columnUserData1 = new Column("UserData1", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData1);
                this.columnUserData2 = new Column("UserData2", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData2);
                this.columnUserData3 = new Column("UserData3", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData3);
                this.columnUserData4 = new Column("UserData4", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData4);
                this.columnUserData5 = new Column("UserData5", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData5);
                this.columnUserData6 = new Column("UserData6", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData6);
                this.columnUserData7 = new Column("UserData7", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData7);
                this.Constraints.Add(new UniqueConstraint("KeyTaxLot", new DataColumn[] {
                                this.columnTaxLotId}, true));
                this.viewKeyTaxLotAccountIdSecurityIdPositionTypeCode = new DataView(this, null, "AccountId,SecurityId,PositionTypeCode", DataViewRowState.CurrentRows);
                this.viewKeyTaxLotExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewKeyTaxLotExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.viewKeyTaxLotExternalId2 = new DataView(this, null, "ExternalId2", DataViewRowState.CurrentRows);
                this.viewKeyTaxLotExternalId3 = new DataView(this, null, "ExternalId3", DataViewRowState.CurrentRows);
                this.columnAccountId.AllowDBNull = false;
                this.columnCost.AllowDBNull = false;
                this.columnLocalCost.AllowDBNull = false;
                this.columnLocalCost.DefaultValue = 0.0m;
                this.columnPositionTypeCode.AllowDBNull = false;
                this.columnQuantity.AllowDBNull = false;
                this.columnSecurityId.AllowDBNull = false;
                this.columnTaxLotId.AutoIncrement = true;
                this.columnTaxLotId.AllowDBNull = false;
                this.columnTaxLotId.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.TaxLotLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "TaxLot"));
                }
            }
            
            public TaxLotRow NewTaxLotRow()
            {
                return ((TaxLotRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new TaxLotRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(TaxLotRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.TaxLotRowChanged != null))
                {
                    this.TaxLotRowChanged(this, new TaxLotRowChangeEvent(((TaxLotRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.TaxLotRowChanging != null))
                {
                    this.TaxLotRowChanging(this, new TaxLotRowChangeEvent(((TaxLotRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.TaxLotRowDeleted != null))
                {
                    this.TaxLotRowDeleted(this, new TaxLotRowChangeEvent(((TaxLotRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.TaxLotRowDeleting != null))
                {
                    this.TaxLotRowDeleting(this, new TaxLotRowChangeEvent(((TaxLotRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTaxLotRow(TaxLotRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TaxLotRow : Row
        {
            
            private TaxLotDataTable tableTaxLot;
            
            internal TaxLotRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableTaxLot = ((TaxLotDataTable)(this.Table));
            }
            
            public int AccountId
            {
                get
                {
                    return ((int)(this[this.tableTaxLot.AccountIdColumn]));
                }
                set
                {
                    this[this.tableTaxLot.AccountIdColumn] = value;
                }
            }
            
            public decimal Cost
            {
                get
                {
                    return ((decimal)(this[this.tableTaxLot.CostColumn]));
                }
                set
                {
                    this[this.tableTaxLot.CostColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTaxLot.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTaxLot.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTaxLot.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTaxLot.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.ExternalId3Column] = value;
                }
            }
            
            public decimal LocalCost
            {
                get
                {
                    return ((decimal)(this[this.tableTaxLot.LocalCostColumn]));
                }
                set
                {
                    this[this.tableTaxLot.LocalCostColumn] = value;
                }
            }
            
            public int PositionTypeCode
            {
                get
                {
                    return ((int)(this[this.tableTaxLot.PositionTypeCodeColumn]));
                }
                set
                {
                    this[this.tableTaxLot.PositionTypeCodeColumn] = value;
                }
            }
            
            public decimal Quantity
            {
                get
                {
                    return ((decimal)(this[this.tableTaxLot.QuantityColumn]));
                }
                set
                {
                    this[this.tableTaxLot.QuantityColumn] = value;
                }
            }
            
            public int SecurityId
            {
                get
                {
                    return ((int)(this[this.tableTaxLot.SecurityIdColumn]));
                }
                set
                {
                    this[this.tableTaxLot.SecurityIdColumn] = value;
                }
            }
            
            public System.DateTime SettlementDate
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(this[this.tableTaxLot.SettlementDateColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.SettlementDateColumn] = value;
                }
            }
            
            public int TaxLotId
            {
                get
                {
                    return ((int)(this[this.tableTaxLot.TaxLotIdColumn]));
                }
                set
                {
                    this[this.tableTaxLot.TaxLotIdColumn] = value;
                }
            }
            
            public System.DateTime TradeDate
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(this[this.tableTaxLot.TradeDateColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.TradeDateColumn] = value;
                }
            }
            
            public decimal UserData0
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableTaxLot.UserData0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.UserData0Column] = value;
                }
            }
            
            public decimal UserData1
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableTaxLot.UserData1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.UserData1Column] = value;
                }
            }
            
            public decimal UserData2
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableTaxLot.UserData2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.UserData2Column] = value;
                }
            }
            
            public decimal UserData3
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableTaxLot.UserData3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.UserData3Column] = value;
                }
            }
            
            public decimal UserData4
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableTaxLot.UserData4Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.UserData4Column] = value;
                }
            }
            
            public decimal UserData5
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableTaxLot.UserData5Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.UserData5Column] = value;
                }
            }
            
            public decimal UserData6
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableTaxLot.UserData6Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.UserData6Column] = value;
                }
            }
            
            public decimal UserData7
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableTaxLot.UserData7Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.UserData7Column] = value;
                }
            }
            
            public AccountRow AccountRow
            {
                get
                {
                    if ((DataSetMarket.lockAccount.IsReaderLockHeld || DataSetMarket.lockAccount.IsWriterLockHeld))
                    {
                        return ((AccountRow)(this.GetParentRow(this.Table.ParentRelations["AccountTaxLot"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Account"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["AccountTaxLot"]);
                }
            }
            
            public PositionTypeRow PositionTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockPositionType.IsReaderLockHeld || DataSetMarket.lockPositionType.IsWriterLockHeld))
                    {
                        return ((PositionTypeRow)(this.GetParentRow(this.Table.ParentRelations["PositionTypeTaxLot"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "PositionType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["PositionTypeTaxLot"]);
                }
            }
            
            public SecurityRow SecurityRow
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["SecurityTaxLot"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["SecurityTaxLot"]);
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableTaxLot.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableTaxLot.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableTaxLot.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableTaxLot.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableTaxLot.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableTaxLot.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableTaxLot.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableTaxLot.ExternalId3Column] = System.Convert.DBNull;
            }
            
            public bool IsSettlementDateNull()
            {
                return this.IsNull(this.tableTaxLot.SettlementDateColumn);
            }
            
            public void SetSettlementDateNull()
            {
                this[this.tableTaxLot.SettlementDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsTradeDateNull()
            {
                return this.IsNull(this.tableTaxLot.TradeDateColumn);
            }
            
            public void SetTradeDateNull()
            {
                this[this.tableTaxLot.TradeDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserData0Null()
            {
                return this.IsNull(this.tableTaxLot.UserData0Column);
            }
            
            public void SetUserData0Null()
            {
                this[this.tableTaxLot.UserData0Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData1Null()
            {
                return this.IsNull(this.tableTaxLot.UserData1Column);
            }
            
            public void SetUserData1Null()
            {
                this[this.tableTaxLot.UserData1Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData2Null()
            {
                return this.IsNull(this.tableTaxLot.UserData2Column);
            }
            
            public void SetUserData2Null()
            {
                this[this.tableTaxLot.UserData2Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData3Null()
            {
                return this.IsNull(this.tableTaxLot.UserData3Column);
            }
            
            public void SetUserData3Null()
            {
                this[this.tableTaxLot.UserData3Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData4Null()
            {
                return this.IsNull(this.tableTaxLot.UserData4Column);
            }
            
            public void SetUserData4Null()
            {
                this[this.tableTaxLot.UserData4Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData5Null()
            {
                return this.IsNull(this.tableTaxLot.UserData5Column);
            }
            
            public void SetUserData5Null()
            {
                this[this.tableTaxLot.UserData5Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData6Null()
            {
                return this.IsNull(this.tableTaxLot.UserData6Column);
            }
            
            public void SetUserData6Null()
            {
                this[this.tableTaxLot.UserData6Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData7Null()
            {
                return this.IsNull(this.tableTaxLot.UserData7Column);
            }
            
            public void SetUserData7Null()
            {
                this[this.tableTaxLot.UserData7Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TaxLotRowChangeEvent : EventArgs
        {
            
            private TaxLotRow eventRow;
            
            private DataRowAction eventAction;
            
            public TaxLotRowChangeEvent(TaxLotRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TaxLotRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimeInForceDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private Column columnMnemonic;
            
            private Column columnTimeInForceCode;
            
            private DataView viewKeyTimeInForceExternalId0;
            
            private DataView viewKeyTimeInForceExternalId1;
            
            private DataView viewKeyTimeInForceExternalId2;
            
            private DataView viewKeyTimeInForceExternalId3;
            
            internal TimeInForceDataTable() : 
                    base("TimeInForce")
            {
                this.InitClass();
            }
            
            internal TimeInForceDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public Column MnemonicColumn
            {
                get
                {
                    return this.columnMnemonic;
                }
            }
            
            public Column TimeInForceCodeColumn
            {
                get
                {
                    return this.columnTimeInForceCode;
                }
            }
            
            public DataView KeyTimeInForceExternalId0
            {
                get
                {
                    return this.viewKeyTimeInForceExternalId0;
                }
            }
            
            public DataView KeyTimeInForceExternalId1
            {
                get
                {
                    return this.viewKeyTimeInForceExternalId1;
                }
            }
            
            public DataView KeyTimeInForceExternalId2
            {
                get
                {
                    return this.viewKeyTimeInForceExternalId2;
                }
            }
            
            public DataView KeyTimeInForceExternalId3
            {
                get
                {
                    return this.viewKeyTimeInForceExternalId3;
                }
            }
            
            public TimeInForceRow this[int index]
            {
                get
                {
                    return ((TimeInForceRow)(this.Rows[index]));
                }
            }
            
            public event TimeInForceRowChangeEventHandler TimeInForceRowChanged;
            
            public event TimeInForceRowChangeEventHandler TimeInForceRowChanging;
            
            public event TimeInForceRowChangeEventHandler TimeInForceRowDeleted;
            
            public event TimeInForceRowChangeEventHandler TimeInForceRowDeleting;
            
            public void AddTimeInForceRow(TimeInForceRow row)
            {
                this.Rows.Add(row);
            }
            
            public TimeInForceRow AddTimeInForceRow(string Description, string ExternalId0, string ExternalId1, string ExternalId2, string ExternalId3, string Mnemonic, int TimeInForceCode)
            {
                TimeInForceRow rowTimeInForceRow = ((TimeInForceRow)(this.NewRow()));
                rowTimeInForceRow.ItemArray = new object[] {
                        Description,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3,
                        Mnemonic,
                        TimeInForceCode};
                this.Rows.Add(rowTimeInForceRow);
                return rowTimeInForceRow;
            }
            
            public TimeInForceRow FindByTimeInForceCode(int TimeInForceCode)
            {
                return ((TimeInForceRow)(this.Rows.Find(new object[] {
                            TimeInForceCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                TimeInForceDataTable cln = ((TimeInForceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new TimeInForceDataTable();
            }
            
            internal void InitVars()
            {
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnTimeInForceCode = this.Columns["TimeInForceCode"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.columnMnemonic = new Column("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnTimeInForceCode = new Column("TimeInForceCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeInForceCode);
                this.Constraints.Add(new UniqueConstraint("KeyTimeInForce", new DataColumn[] {
                                this.columnTimeInForceCode}, true));
                this.viewKeyTimeInForceExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewKeyTimeInForceExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.viewKeyTimeInForceExternalId2 = new DataView(this, null, "ExternalId2", DataViewRowState.CurrentRows);
                this.viewKeyTimeInForceExternalId3 = new DataView(this, null, "ExternalId3", DataViewRowState.CurrentRows);
                this.columnDescription.AllowDBNull = false;
                this.columnMnemonic.AllowDBNull = false;
                this.columnTimeInForceCode.AllowDBNull = false;
                this.columnTimeInForceCode.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.TimeInForceLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "TimeInForce"));
                }
            }
            
            public TimeInForceRow NewTimeInForceRow()
            {
                return ((TimeInForceRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new TimeInForceRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(TimeInForceRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.TimeInForceRowChanged != null))
                {
                    this.TimeInForceRowChanged(this, new TimeInForceRowChangeEvent(((TimeInForceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.TimeInForceRowChanging != null))
                {
                    this.TimeInForceRowChanging(this, new TimeInForceRowChangeEvent(((TimeInForceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.TimeInForceRowDeleted != null))
                {
                    this.TimeInForceRowDeleted(this, new TimeInForceRowChangeEvent(((TimeInForceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.TimeInForceRowDeleting != null))
                {
                    this.TimeInForceRowDeleting(this, new TimeInForceRowChangeEvent(((TimeInForceRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTimeInForceRow(TimeInForceRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimeInForceRow : Row
        {
            
            private TimeInForceDataTable tableTimeInForce;
            
            internal TimeInForceRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableTimeInForce = ((TimeInForceDataTable)(this.Table));
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableTimeInForce.DescriptionColumn]));
                }
                set
                {
                    this[this.tableTimeInForce.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTimeInForce.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTimeInForce.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTimeInForce.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTimeInForce.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTimeInForce.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTimeInForce.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTimeInForce.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTimeInForce.ExternalId3Column] = value;
                }
            }
            
            public string Mnemonic
            {
                get
                {
                    return ((string)(this[this.tableTimeInForce.MnemonicColumn]));
                }
                set
                {
                    this[this.tableTimeInForce.MnemonicColumn] = value;
                }
            }
            
            public int TimeInForceCode
            {
                get
                {
                    return ((int)(this[this.tableTimeInForce.TimeInForceCodeColumn]));
                }
                set
                {
                    this[this.tableTimeInForce.TimeInForceCodeColumn] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableTimeInForce.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableTimeInForce.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableTimeInForce.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableTimeInForce.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableTimeInForce.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableTimeInForce.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableTimeInForce.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableTimeInForce.ExternalId3Column] = System.Convert.DBNull;
            }
            
            public DestinationOrderRow[] GetDestinationOrderRows()
            {
                return ((DestinationOrderRow[])(this.GetChildRows(this.Table.ChildRelations["TimeInForceDestinationOrder"])));
            }
            
            public SourceOrderRow[] GetSourceOrderRows()
            {
                return ((SourceOrderRow[])(this.GetChildRows(this.Table.ChildRelations["TimeInForceSourceOrder"])));
            }
            
            public WorkingOrderRow[] GetWorkingOrderRows()
            {
                return ((WorkingOrderRow[])(this.GetChildRows(this.Table.ChildRelations["TimeInForceWorkingOrder"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimeInForceRowChangeEvent : EventArgs
        {
            
            private TimeInForceRow eventRow;
            
            private DataRowAction eventAction;
            
            public TimeInForceRowChangeEvent(TimeInForceRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TimeInForceRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimerDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnCurrentTime;
            
            private Column columnExternalId0;
            
            private Column columnIsActive;
            
            private Column columnStopTime;
            
            private Column columnTimerId;
            
            private Column columnUpdateTime;
            
            private DataView viewKeyTimerExternalId0;
            
            internal TimerDataTable() : 
                    base("Timer")
            {
                this.InitClass();
            }
            
            internal TimerDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column CurrentTimeColumn
            {
                get
                {
                    return this.columnCurrentTime;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column IsActiveColumn
            {
                get
                {
                    return this.columnIsActive;
                }
            }
            
            public Column StopTimeColumn
            {
                get
                {
                    return this.columnStopTime;
                }
            }
            
            public Column TimerIdColumn
            {
                get
                {
                    return this.columnTimerId;
                }
            }
            
            public Column UpdateTimeColumn
            {
                get
                {
                    return this.columnUpdateTime;
                }
            }
            
            public DataView KeyTimerExternalId0
            {
                get
                {
                    return this.viewKeyTimerExternalId0;
                }
            }
            
            public TimerRow this[int index]
            {
                get
                {
                    return ((TimerRow)(this.Rows[index]));
                }
            }
            
            public event TimerRowChangeEventHandler TimerRowChanged;
            
            public event TimerRowChangeEventHandler TimerRowChanging;
            
            public event TimerRowChangeEventHandler TimerRowDeleted;
            
            public event TimerRowChangeEventHandler TimerRowDeleting;
            
            public void AddTimerRow(TimerRow row)
            {
                this.Rows.Add(row);
            }
            
            public TimerRow AddTimerRow(System.DateTime CurrentTime, string ExternalId0, bool IsActive, System.DateTime StopTime, int UpdateTime)
            {
                TimerRow rowTimerRow = ((TimerRow)(this.NewRow()));
                rowTimerRow.ItemArray = new object[] {
                        CurrentTime,
                        ExternalId0,
                        IsActive,
                        StopTime,
                        null,
                        UpdateTime};
                this.Rows.Add(rowTimerRow);
                return rowTimerRow;
            }
            
            public TimerRow FindByTimerId(int TimerId)
            {
                return ((TimerRow)(this.Rows.Find(new object[] {
                            TimerId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                TimerDataTable cln = ((TimerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new TimerDataTable();
            }
            
            internal void InitVars()
            {
                this.columnCurrentTime = this.Columns["CurrentTime"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnIsActive = this.Columns["IsActive"];
                this.columnStopTime = this.Columns["StopTime"];
                this.columnTimerId = this.Columns["TimerId"];
                this.columnUpdateTime = this.Columns["UpdateTime"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnCurrentTime = new Column("CurrentTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrentTime);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnIsActive = new Column("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsActive);
                this.columnStopTime = new Column("StopTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStopTime);
                this.columnTimerId = new Column("TimerId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimerId);
                this.columnUpdateTime = new Column("UpdateTime", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUpdateTime);
                this.Constraints.Add(new UniqueConstraint("KeyTimer", new DataColumn[] {
                                this.columnTimerId}, true));
                this.viewKeyTimerExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.columnCurrentTime.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
                this.columnStopTime.AllowDBNull = false;
                this.columnTimerId.AutoIncrement = true;
                this.columnTimerId.AllowDBNull = false;
                this.columnTimerId.Unique = true;
                this.columnUpdateTime.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.TimerLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Timer"));
                }
            }
            
            public TimerRow NewTimerRow()
            {
                return ((TimerRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new TimerRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(TimerRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.TimerRowChanged != null))
                {
                    this.TimerRowChanged(this, new TimerRowChangeEvent(((TimerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.TimerRowChanging != null))
                {
                    this.TimerRowChanging(this, new TimerRowChangeEvent(((TimerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.TimerRowDeleted != null))
                {
                    this.TimerRowDeleted(this, new TimerRowChangeEvent(((TimerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.TimerRowDeleting != null))
                {
                    this.TimerRowDeleting(this, new TimerRowChangeEvent(((TimerRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTimerRow(TimerRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimerRow : Row
        {
            
            private TimerDataTable tableTimer;
            
            internal TimerRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableTimer = ((TimerDataTable)(this.Table));
            }
            
            public System.DateTime CurrentTime
            {
                get
                {
                    return ((System.DateTime)(this[this.tableTimer.CurrentTimeColumn]));
                }
                set
                {
                    this[this.tableTimer.CurrentTimeColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTimer.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTimer.ExternalId0Column] = value;
                }
            }
            
            public bool IsActive
            {
                get
                {
                    return ((bool)(this[this.tableTimer.IsActiveColumn]));
                }
                set
                {
                    this[this.tableTimer.IsActiveColumn] = value;
                }
            }
            
            public System.DateTime StopTime
            {
                get
                {
                    return ((System.DateTime)(this[this.tableTimer.StopTimeColumn]));
                }
                set
                {
                    this[this.tableTimer.StopTimeColumn] = value;
                }
            }
            
            public int TimerId
            {
                get
                {
                    return ((int)(this[this.tableTimer.TimerIdColumn]));
                }
                set
                {
                    this[this.tableTimer.TimerIdColumn] = value;
                }
            }
            
            public int UpdateTime
            {
                get
                {
                    return ((int)(this[this.tableTimer.UpdateTimeColumn]));
                }
                set
                {
                    this[this.tableTimer.UpdateTimeColumn] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableTimer.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableTimer.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public MatchRow[] GetMatchRows()
            {
                return ((MatchRow[])(this.GetChildRows(this.Table.ChildRelations["TimerMatch"])));
            }
            
            public WorkingOrderRow[] GetWorkingOrderRows()
            {
                return ((WorkingOrderRow[])(this.GetChildRows(this.Table.ChildRelations["TimerWorkingOrder"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimerRowChangeEvent : EventArgs
        {
            
            private TimerRow eventRow;
            
            private DataRowAction eventAction;
            
            public TimerRowChangeEvent(TimerRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TimerRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TraderDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnAccountIdDefault;
            
            private Column columnAddress1;
            
            private Column columnAddress2;
            
            private Column columnAddress3;
            
            private Column columnBlotterIdDefault;
            
            private Column columnCommissionMaximum;
            
            private Column columnCommissionMinimum;
            
            private Column columnCommissionRate;
            
            private Column columnCommissionRateTypeCode;
            
            private Column columnEmailAddress;
            
            private Column columnFixAccountId;
            
            private Column columnIsAgencyMatch;
            
            private Column columnIsBrokerMatch;
            
            private Column columnIsCommissionChangeAllowed;
            
            private Column columnIsEditExecutionsAllowed;
            
            private Column columnIsHedgeMatch;
            
            private Column columnIsHeld;
            
            private Column columnIsInstitutionMatch;
            
            private Column columnLastDeletedOrder;
            
            private Column columnLastFilledOrder;
            
            private Column columnLastFilledSourceOrder;
            
            private Column columnLastTrade;
            
            private Column columnLotSizeDefault;
            
            private Column columnMarketSleep;
            
            private Column columnMaximumVolatilityDefault;
            
            private Column columnNewsFreeTimeDefault;
            
            private Column columnOatsAccountType;
            
            private Column columnOatsOrigDeptId;
            
            private Column columnOrderMaximumLimitDelta;
            
            private Column columnOrderMaximumMarketValue;
            
            private Column columnOrderMaximumQuantity;
            
            private Column columnOrderWarningMarketValue;
            
            private Column columnOrderWarningQuantity;
            
            private Column columnPhone;
            
            private Column columnReviewWindow;
            
            private Column columnScraperConfigurationString;
            
            private Column columnStartTimeDefault;
            
            private Column columnStopTimeDefault;
            
            private Column columnSubmissionTypeCode;
            
            private Column columnTagId;
            
            private Column columnTraderId;
            
            internal TraderDataTable() : 
                    base("Trader")
            {
                this.InitClass();
            }
            
            internal TraderDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column AccountIdDefaultColumn
            {
                get
                {
                    return this.columnAccountIdDefault;
                }
            }
            
            public Column Address1Column
            {
                get
                {
                    return this.columnAddress1;
                }
            }
            
            public Column Address2Column
            {
                get
                {
                    return this.columnAddress2;
                }
            }
            
            public Column Address3Column
            {
                get
                {
                    return this.columnAddress3;
                }
            }
            
            public Column BlotterIdDefaultColumn
            {
                get
                {
                    return this.columnBlotterIdDefault;
                }
            }
            
            public Column CommissionMaximumColumn
            {
                get
                {
                    return this.columnCommissionMaximum;
                }
            }
            
            public Column CommissionMinimumColumn
            {
                get
                {
                    return this.columnCommissionMinimum;
                }
            }
            
            public Column CommissionRateColumn
            {
                get
                {
                    return this.columnCommissionRate;
                }
            }
            
            public Column CommissionRateTypeCodeColumn
            {
                get
                {
                    return this.columnCommissionRateTypeCode;
                }
            }
            
            public Column EmailAddressColumn
            {
                get
                {
                    return this.columnEmailAddress;
                }
            }
            
            public Column FixAccountIdColumn
            {
                get
                {
                    return this.columnFixAccountId;
                }
            }
            
            public Column IsAgencyMatchColumn
            {
                get
                {
                    return this.columnIsAgencyMatch;
                }
            }
            
            public Column IsBrokerMatchColumn
            {
                get
                {
                    return this.columnIsBrokerMatch;
                }
            }
            
            public Column IsCommissionChangeAllowedColumn
            {
                get
                {
                    return this.columnIsCommissionChangeAllowed;
                }
            }
            
            public Column IsEditExecutionsAllowedColumn
            {
                get
                {
                    return this.columnIsEditExecutionsAllowed;
                }
            }
            
            public Column IsHedgeMatchColumn
            {
                get
                {
                    return this.columnIsHedgeMatch;
                }
            }
            
            public Column IsHeldColumn
            {
                get
                {
                    return this.columnIsHeld;
                }
            }
            
            public Column IsInstitutionMatchColumn
            {
                get
                {
                    return this.columnIsInstitutionMatch;
                }
            }
            
            public Column LastDeletedOrderColumn
            {
                get
                {
                    return this.columnLastDeletedOrder;
                }
            }
            
            public Column LastFilledOrderColumn
            {
                get
                {
                    return this.columnLastFilledOrder;
                }
            }
            
            public Column LastFilledSourceOrderColumn
            {
                get
                {
                    return this.columnLastFilledSourceOrder;
                }
            }
            
            public Column LastTradeColumn
            {
                get
                {
                    return this.columnLastTrade;
                }
            }
            
            public Column LotSizeDefaultColumn
            {
                get
                {
                    return this.columnLotSizeDefault;
                }
            }
            
            public Column MarketSleepColumn
            {
                get
                {
                    return this.columnMarketSleep;
                }
            }
            
            public Column MaximumVolatilityDefaultColumn
            {
                get
                {
                    return this.columnMaximumVolatilityDefault;
                }
            }
            
            public Column NewsFreeTimeDefaultColumn
            {
                get
                {
                    return this.columnNewsFreeTimeDefault;
                }
            }
            
            public Column OatsAccountTypeColumn
            {
                get
                {
                    return this.columnOatsAccountType;
                }
            }
            
            public Column OatsOrigDeptIdColumn
            {
                get
                {
                    return this.columnOatsOrigDeptId;
                }
            }
            
            public Column OrderMaximumLimitDeltaColumn
            {
                get
                {
                    return this.columnOrderMaximumLimitDelta;
                }
            }
            
            public Column OrderMaximumMarketValueColumn
            {
                get
                {
                    return this.columnOrderMaximumMarketValue;
                }
            }
            
            public Column OrderMaximumQuantityColumn
            {
                get
                {
                    return this.columnOrderMaximumQuantity;
                }
            }
            
            public Column OrderWarningMarketValueColumn
            {
                get
                {
                    return this.columnOrderWarningMarketValue;
                }
            }
            
            public Column OrderWarningQuantityColumn
            {
                get
                {
                    return this.columnOrderWarningQuantity;
                }
            }
            
            public Column PhoneColumn
            {
                get
                {
                    return this.columnPhone;
                }
            }
            
            public Column ReviewWindowColumn
            {
                get
                {
                    return this.columnReviewWindow;
                }
            }
            
            public Column ScraperConfigurationStringColumn
            {
                get
                {
                    return this.columnScraperConfigurationString;
                }
            }
            
            public Column StartTimeDefaultColumn
            {
                get
                {
                    return this.columnStartTimeDefault;
                }
            }
            
            public Column StopTimeDefaultColumn
            {
                get
                {
                    return this.columnStopTimeDefault;
                }
            }
            
            public Column SubmissionTypeCodeColumn
            {
                get
                {
                    return this.columnSubmissionTypeCode;
                }
            }
            
            public Column TagIdColumn
            {
                get
                {
                    return this.columnTagId;
                }
            }
            
            public Column TraderIdColumn
            {
                get
                {
                    return this.columnTraderId;
                }
            }
            
            public TraderRow this[int index]
            {
                get
                {
                    return ((TraderRow)(this.Rows[index]));
                }
            }
            
            public event TraderRowChangeEventHandler TraderRowChanged;
            
            public event TraderRowChangeEventHandler TraderRowChanging;
            
            public event TraderRowChangeEventHandler TraderRowDeleted;
            
            public event TraderRowChangeEventHandler TraderRowDeleting;
            
            public void AddTraderRow(TraderRow row)
            {
                this.Rows.Add(row);
            }
            
            public TraderRow AddTraderRow(
                        int AccountIdDefault, 
                        string Address1, 
                        string Address2, 
                        string Address3, 
                        BlotterRow parentBlotterRowByBlotterTrader, 
                        decimal CommissionMaximum, 
                        decimal CommissionMinimum, 
                        decimal CommissionRate, 
                        int CommissionRateTypeCode, 
                        string EmailAddress, 
                        string FixAccountId, 
                        bool IsAgencyMatch, 
                        bool IsBrokerMatch, 
                        bool IsCommissionChangeAllowed, 
                        bool IsEditExecutionsAllowed, 
                        bool IsHedgeMatch, 
                        bool IsHeld, 
                        bool IsInstitutionMatch, 
                        System.DateTime LastDeletedOrder, 
                        System.DateTime LastFilledOrder, 
                        System.DateTime LastFilledSourceOrder, 
                        System.DateTime LastTrade, 
                        int LotSizeDefault, 
                        int MarketSleep, 
                        decimal MaximumVolatilityDefault, 
                        int NewsFreeTimeDefault, 
                        string OatsAccountType, 
                        string OatsOrigDeptId, 
                        decimal OrderMaximumLimitDelta, 
                        decimal OrderMaximumMarketValue, 
                        decimal OrderMaximumQuantity, 
                        decimal OrderWarningMarketValue, 
                        decimal OrderWarningQuantity, 
                        string Phone, 
                        int ReviewWindow, 
                        string ScraperConfigurationString, 
                        System.DateTime StartTimeDefault, 
                        System.DateTime StopTimeDefault, 
                        int SubmissionTypeCode, 
                        string TagId, 
                        UserRow parentUserRowByUserTrader)
            {
                TraderRow rowTraderRow = ((TraderRow)(this.NewRow()));
                rowTraderRow.ItemArray = new object[] {
                        AccountIdDefault,
                        Address1,
                        Address2,
                        Address3,
                        parentBlotterRowByBlotterTrader[18],
                        CommissionMaximum,
                        CommissionMinimum,
                        CommissionRate,
                        CommissionRateTypeCode,
                        EmailAddress,
                        FixAccountId,
                        IsAgencyMatch,
                        IsBrokerMatch,
                        IsCommissionChangeAllowed,
                        IsEditExecutionsAllowed,
                        IsHedgeMatch,
                        IsHeld,
                        IsInstitutionMatch,
                        LastDeletedOrder,
                        LastFilledOrder,
                        LastFilledSourceOrder,
                        LastTrade,
                        LotSizeDefault,
                        MarketSleep,
                        MaximumVolatilityDefault,
                        NewsFreeTimeDefault,
                        OatsAccountType,
                        OatsOrigDeptId,
                        OrderMaximumLimitDelta,
                        OrderMaximumMarketValue,
                        OrderMaximumQuantity,
                        OrderWarningMarketValue,
                        OrderWarningQuantity,
                        Phone,
                        ReviewWindow,
                        ScraperConfigurationString,
                        StartTimeDefault,
                        StopTimeDefault,
                        SubmissionTypeCode,
                        TagId,
                        parentUserRowByUserTrader[20]};
                this.Rows.Add(rowTraderRow);
                return rowTraderRow;
            }
            
            public TraderRow FindByTraderId(int TraderId)
            {
                return ((TraderRow)(this.Rows.Find(new object[] {
                            TraderId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                TraderDataTable cln = ((TraderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new TraderDataTable();
            }
            
            internal void InitVars()
            {
                this.columnAccountIdDefault = this.Columns["AccountIdDefault"];
                this.columnAddress1 = this.Columns["Address1"];
                this.columnAddress2 = this.Columns["Address2"];
                this.columnAddress3 = this.Columns["Address3"];
                this.columnBlotterIdDefault = this.Columns["BlotterIdDefault"];
                this.columnCommissionMaximum = this.Columns["CommissionMaximum"];
                this.columnCommissionMinimum = this.Columns["CommissionMinimum"];
                this.columnCommissionRate = this.Columns["CommissionRate"];
                this.columnCommissionRateTypeCode = this.Columns["CommissionRateTypeCode"];
                this.columnEmailAddress = this.Columns["EmailAddress"];
                this.columnFixAccountId = this.Columns["FixAccountId"];
                this.columnIsAgencyMatch = this.Columns["IsAgencyMatch"];
                this.columnIsBrokerMatch = this.Columns["IsBrokerMatch"];
                this.columnIsCommissionChangeAllowed = this.Columns["IsCommissionChangeAllowed"];
                this.columnIsEditExecutionsAllowed = this.Columns["IsEditExecutionsAllowed"];
                this.columnIsHedgeMatch = this.Columns["IsHedgeMatch"];
                this.columnIsHeld = this.Columns["IsHeld"];
                this.columnIsInstitutionMatch = this.Columns["IsInstitutionMatch"];
                this.columnLastDeletedOrder = this.Columns["LastDeletedOrder"];
                this.columnLastFilledOrder = this.Columns["LastFilledOrder"];
                this.columnLastFilledSourceOrder = this.Columns["LastFilledSourceOrder"];
                this.columnLastTrade = this.Columns["LastTrade"];
                this.columnLotSizeDefault = this.Columns["LotSizeDefault"];
                this.columnMarketSleep = this.Columns["MarketSleep"];
                this.columnMaximumVolatilityDefault = this.Columns["MaximumVolatilityDefault"];
                this.columnNewsFreeTimeDefault = this.Columns["NewsFreeTimeDefault"];
                this.columnOatsAccountType = this.Columns["OatsAccountType"];
                this.columnOatsOrigDeptId = this.Columns["OatsOrigDeptId"];
                this.columnOrderMaximumLimitDelta = this.Columns["OrderMaximumLimitDelta"];
                this.columnOrderMaximumMarketValue = this.Columns["OrderMaximumMarketValue"];
                this.columnOrderMaximumQuantity = this.Columns["OrderMaximumQuantity"];
                this.columnOrderWarningMarketValue = this.Columns["OrderWarningMarketValue"];
                this.columnOrderWarningQuantity = this.Columns["OrderWarningQuantity"];
                this.columnPhone = this.Columns["Phone"];
                this.columnReviewWindow = this.Columns["ReviewWindow"];
                this.columnScraperConfigurationString = this.Columns["ScraperConfigurationString"];
                this.columnStartTimeDefault = this.Columns["StartTimeDefault"];
                this.columnStopTimeDefault = this.Columns["StopTimeDefault"];
                this.columnSubmissionTypeCode = this.Columns["SubmissionTypeCode"];
                this.columnTagId = this.Columns["TagId"];
                this.columnTraderId = this.Columns["TraderId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnAccountIdDefault = new Column("AccountIdDefault", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountIdDefault);
                this.columnAddress1 = new Column("Address1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new Column("Address2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress2);
                this.columnAddress3 = new Column("Address3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress3);
                this.columnBlotterIdDefault = new Column("BlotterIdDefault", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlotterIdDefault);
                this.columnCommissionMaximum = new Column("CommissionMaximum", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCommissionMaximum);
                this.columnCommissionMinimum = new Column("CommissionMinimum", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCommissionMinimum);
                this.columnCommissionRate = new Column("CommissionRate", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCommissionRate);
                this.columnCommissionRateTypeCode = new Column("CommissionRateTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCommissionRateTypeCode);
                this.columnEmailAddress = new Column("EmailAddress", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmailAddress);
                this.columnFixAccountId = new Column("FixAccountId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFixAccountId);
                this.columnIsAgencyMatch = new Column("IsAgencyMatch", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsAgencyMatch);
                this.columnIsBrokerMatch = new Column("IsBrokerMatch", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsBrokerMatch);
                this.columnIsCommissionChangeAllowed = new Column("IsCommissionChangeAllowed", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsCommissionChangeAllowed);
                this.columnIsEditExecutionsAllowed = new Column("IsEditExecutionsAllowed", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsEditExecutionsAllowed);
                this.columnIsHedgeMatch = new Column("IsHedgeMatch", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsHedgeMatch);
                this.columnIsHeld = new Column("IsHeld", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsHeld);
                this.columnIsInstitutionMatch = new Column("IsInstitutionMatch", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsInstitutionMatch);
                this.columnLastDeletedOrder = new Column("LastDeletedOrder", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastDeletedOrder);
                this.columnLastFilledOrder = new Column("LastFilledOrder", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastFilledOrder);
                this.columnLastFilledSourceOrder = new Column("LastFilledSourceOrder", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastFilledSourceOrder);
                this.columnLastTrade = new Column("LastTrade", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastTrade);
                this.columnLotSizeDefault = new Column("LotSizeDefault", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLotSizeDefault);
                this.columnMarketSleep = new Column("MarketSleep", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMarketSleep);
                this.columnMaximumVolatilityDefault = new Column("MaximumVolatilityDefault", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaximumVolatilityDefault);
                this.columnNewsFreeTimeDefault = new Column("NewsFreeTimeDefault", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNewsFreeTimeDefault);
                this.columnOatsAccountType = new Column("OatsAccountType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOatsAccountType);
                this.columnOatsOrigDeptId = new Column("OatsOrigDeptId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOatsOrigDeptId);
                this.columnOrderMaximumLimitDelta = new Column("OrderMaximumLimitDelta", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrderMaximumLimitDelta);
                this.columnOrderMaximumMarketValue = new Column("OrderMaximumMarketValue", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrderMaximumMarketValue);
                this.columnOrderMaximumQuantity = new Column("OrderMaximumQuantity", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrderMaximumQuantity);
                this.columnOrderWarningMarketValue = new Column("OrderWarningMarketValue", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrderWarningMarketValue);
                this.columnOrderWarningQuantity = new Column("OrderWarningQuantity", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrderWarningQuantity);
                this.columnPhone = new Column("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.columnReviewWindow = new Column("ReviewWindow", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReviewWindow);
                this.columnScraperConfigurationString = new Column("ScraperConfigurationString", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnScraperConfigurationString);
                this.columnStartTimeDefault = new Column("StartTimeDefault", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStartTimeDefault);
                this.columnStopTimeDefault = new Column("StopTimeDefault", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStopTimeDefault);
                this.columnSubmissionTypeCode = new Column("SubmissionTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSubmissionTypeCode);
                this.columnTagId = new Column("TagId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTagId);
                this.columnTraderId = new Column("TraderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTraderId);
                this.Constraints.Add(new UniqueConstraint("KeyTrader", new DataColumn[] {
                                this.columnTraderId}, true));
                this.columnIsAgencyMatch.AllowDBNull = false;
                this.columnIsAgencyMatch.DefaultValue = false;
                this.columnIsBrokerMatch.AllowDBNull = false;
                this.columnIsBrokerMatch.DefaultValue = false;
                this.columnIsCommissionChangeAllowed.AllowDBNull = false;
                this.columnIsCommissionChangeAllowed.DefaultValue = false;
                this.columnIsEditExecutionsAllowed.AllowDBNull = false;
                this.columnIsEditExecutionsAllowed.DefaultValue = false;
                this.columnIsHedgeMatch.AllowDBNull = false;
                this.columnIsHedgeMatch.DefaultValue = false;
                this.columnIsHeld.AllowDBNull = false;
                this.columnIsHeld.DefaultValue = false;
                this.columnIsInstitutionMatch.AllowDBNull = false;
                this.columnIsInstitutionMatch.DefaultValue = true;
                this.columnLotSizeDefault.AllowDBNull = false;
                this.columnLotSizeDefault.DefaultValue = 100;
                this.columnMarketSleep.AllowDBNull = false;
                this.columnMarketSleep.DefaultValue = 900;
                this.columnReviewWindow.AllowDBNull = false;
                this.columnReviewWindow.DefaultValue = 900;
                this.columnSubmissionTypeCode.AllowDBNull = false;
                this.columnSubmissionTypeCode.DefaultValue = 2;
                this.columnTraderId.AllowDBNull = false;
                this.columnTraderId.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.TraderLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Trader"));
                }
            }
            
            public TraderRow NewTraderRow()
            {
                return ((TraderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new TraderRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(TraderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.TraderRowChanged != null))
                {
                    this.TraderRowChanged(this, new TraderRowChangeEvent(((TraderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.TraderRowChanging != null))
                {
                    this.TraderRowChanging(this, new TraderRowChangeEvent(((TraderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.TraderRowDeleted != null))
                {
                    this.TraderRowDeleted(this, new TraderRowChangeEvent(((TraderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.TraderRowDeleting != null))
                {
                    this.TraderRowDeleting(this, new TraderRowChangeEvent(((TraderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTraderRow(TraderRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TraderRow : Row
        {
            
            private TraderDataTable tableTrader;
            
            internal TraderRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableTrader = ((TraderDataTable)(this.Table));
            }
            
            public int AccountIdDefault
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableTrader.AccountIdDefaultColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.AccountIdDefaultColumn] = value;
                }
            }
            
            public string Address1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTrader.Address1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.Address1Column] = value;
                }
            }
            
            public string Address2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTrader.Address2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.Address2Column] = value;
                }
            }
            
            public string Address3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTrader.Address3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.Address3Column] = value;
                }
            }
            
            public int BlotterIdDefault
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableTrader.BlotterIdDefaultColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.BlotterIdDefaultColumn] = value;
                }
            }
            
            public decimal CommissionMaximum
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableTrader.CommissionMaximumColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.CommissionMaximumColumn] = value;
                }
            }
            
            public decimal CommissionMinimum
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableTrader.CommissionMinimumColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.CommissionMinimumColumn] = value;
                }
            }
            
            public decimal CommissionRate
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableTrader.CommissionRateColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.CommissionRateColumn] = value;
                }
            }
            
            public int CommissionRateTypeCode
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableTrader.CommissionRateTypeCodeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.CommissionRateTypeCodeColumn] = value;
                }
            }
            
            public string EmailAddress
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTrader.EmailAddressColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.EmailAddressColumn] = value;
                }
            }
            
            public string FixAccountId
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTrader.FixAccountIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.FixAccountIdColumn] = value;
                }
            }
            
            public bool IsAgencyMatch
            {
                get
                {
                    return ((bool)(this[this.tableTrader.IsAgencyMatchColumn]));
                }
                set
                {
                    this[this.tableTrader.IsAgencyMatchColumn] = value;
                }
            }
            
            public bool IsBrokerMatch
            {
                get
                {
                    return ((bool)(this[this.tableTrader.IsBrokerMatchColumn]));
                }
                set
                {
                    this[this.tableTrader.IsBrokerMatchColumn] = value;
                }
            }
            
            public bool IsCommissionChangeAllowed
            {
                get
                {
                    return ((bool)(this[this.tableTrader.IsCommissionChangeAllowedColumn]));
                }
                set
                {
                    this[this.tableTrader.IsCommissionChangeAllowedColumn] = value;
                }
            }
            
            public bool IsEditExecutionsAllowed
            {
                get
                {
                    return ((bool)(this[this.tableTrader.IsEditExecutionsAllowedColumn]));
                }
                set
                {
                    this[this.tableTrader.IsEditExecutionsAllowedColumn] = value;
                }
            }
            
            public bool IsHedgeMatch
            {
                get
                {
                    return ((bool)(this[this.tableTrader.IsHedgeMatchColumn]));
                }
                set
                {
                    this[this.tableTrader.IsHedgeMatchColumn] = value;
                }
            }
            
            public bool IsHeld
            {
                get
                {
                    return ((bool)(this[this.tableTrader.IsHeldColumn]));
                }
                set
                {
                    this[this.tableTrader.IsHeldColumn] = value;
                }
            }
            
            public bool IsInstitutionMatch
            {
                get
                {
                    return ((bool)(this[this.tableTrader.IsInstitutionMatchColumn]));
                }
                set
                {
                    this[this.tableTrader.IsInstitutionMatchColumn] = value;
                }
            }
            
            public System.DateTime LastDeletedOrder
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(this[this.tableTrader.LastDeletedOrderColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.LastDeletedOrderColumn] = value;
                }
            }
            
            public System.DateTime LastFilledOrder
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(this[this.tableTrader.LastFilledOrderColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.LastFilledOrderColumn] = value;
                }
            }
            
            public System.DateTime LastFilledSourceOrder
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(this[this.tableTrader.LastFilledSourceOrderColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.LastFilledSourceOrderColumn] = value;
                }
            }
            
            public System.DateTime LastTrade
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(this[this.tableTrader.LastTradeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.LastTradeColumn] = value;
                }
            }
            
            public int LotSizeDefault
            {
                get
                {
                    return ((int)(this[this.tableTrader.LotSizeDefaultColumn]));
                }
                set
                {
                    this[this.tableTrader.LotSizeDefaultColumn] = value;
                }
            }
            
            public int MarketSleep
            {
                get
                {
                    return ((int)(this[this.tableTrader.MarketSleepColumn]));
                }
                set
                {
                    this[this.tableTrader.MarketSleepColumn] = value;
                }
            }
            
            public decimal MaximumVolatilityDefault
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableTrader.MaximumVolatilityDefaultColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.MaximumVolatilityDefaultColumn] = value;
                }
            }
            
            public int NewsFreeTimeDefault
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableTrader.NewsFreeTimeDefaultColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.NewsFreeTimeDefaultColumn] = value;
                }
            }
            
            public string OatsAccountType
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTrader.OatsAccountTypeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.OatsAccountTypeColumn] = value;
                }
            }
            
            public string OatsOrigDeptId
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTrader.OatsOrigDeptIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.OatsOrigDeptIdColumn] = value;
                }
            }
            
            public decimal OrderMaximumLimitDelta
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableTrader.OrderMaximumLimitDeltaColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.OrderMaximumLimitDeltaColumn] = value;
                }
            }
            
            public decimal OrderMaximumMarketValue
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableTrader.OrderMaximumMarketValueColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.OrderMaximumMarketValueColumn] = value;
                }
            }
            
            public decimal OrderMaximumQuantity
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableTrader.OrderMaximumQuantityColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.OrderMaximumQuantityColumn] = value;
                }
            }
            
            public decimal OrderWarningMarketValue
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableTrader.OrderWarningMarketValueColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.OrderWarningMarketValueColumn] = value;
                }
            }
            
            public decimal OrderWarningQuantity
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableTrader.OrderWarningQuantityColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.OrderWarningQuantityColumn] = value;
                }
            }
            
            public string Phone
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTrader.PhoneColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.PhoneColumn] = value;
                }
            }
            
            public int ReviewWindow
            {
                get
                {
                    return ((int)(this[this.tableTrader.ReviewWindowColumn]));
                }
                set
                {
                    this[this.tableTrader.ReviewWindowColumn] = value;
                }
            }
            
            public string ScraperConfigurationString
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTrader.ScraperConfigurationStringColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.ScraperConfigurationStringColumn] = value;
                }
            }
            
            public System.DateTime StartTimeDefault
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(this[this.tableTrader.StartTimeDefaultColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.StartTimeDefaultColumn] = value;
                }
            }
            
            public System.DateTime StopTimeDefault
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(this[this.tableTrader.StopTimeDefaultColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.StopTimeDefaultColumn] = value;
                }
            }
            
            public int SubmissionTypeCode
            {
                get
                {
                    return ((int)(this[this.tableTrader.SubmissionTypeCodeColumn]));
                }
                set
                {
                    this[this.tableTrader.SubmissionTypeCodeColumn] = value;
                }
            }
            
            public string TagId
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTrader.TagIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTrader.TagIdColumn] = value;
                }
            }
            
            public int TraderId
            {
                get
                {
                    return ((int)(this[this.tableTrader.TraderIdColumn]));
                }
                set
                {
                    this[this.tableTrader.TraderIdColumn] = value;
                }
            }
            
            public BlotterRow BlotterRow
            {
                get
                {
                    if ((DataSetMarket.lockBlotter.IsReaderLockHeld || DataSetMarket.lockBlotter.IsWriterLockHeld))
                    {
                        return ((BlotterRow)(this.GetParentRow(this.Table.ParentRelations["BlotterTrader"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Blotter"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["BlotterTrader"]);
                }
            }
            
            public UserRow UserRow
            {
                get
                {
                    if ((DataSetMarket.lockUser.IsReaderLockHeld || DataSetMarket.lockUser.IsWriterLockHeld))
                    {
                        return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["UserTrader"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "User"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["UserTrader"]);
                }
            }
            
            public bool IsAccountIdDefaultNull()
            {
                return this.IsNull(this.tableTrader.AccountIdDefaultColumn);
            }
            
            public void SetAccountIdDefaultNull()
            {
                this[this.tableTrader.AccountIdDefaultColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddress1Null()
            {
                return this.IsNull(this.tableTrader.Address1Column);
            }
            
            public void SetAddress1Null()
            {
                this[this.tableTrader.Address1Column] = System.Convert.DBNull;
            }
            
            public bool IsAddress2Null()
            {
                return this.IsNull(this.tableTrader.Address2Column);
            }
            
            public void SetAddress2Null()
            {
                this[this.tableTrader.Address2Column] = System.Convert.DBNull;
            }
            
            public bool IsAddress3Null()
            {
                return this.IsNull(this.tableTrader.Address3Column);
            }
            
            public void SetAddress3Null()
            {
                this[this.tableTrader.Address3Column] = System.Convert.DBNull;
            }
            
            public bool IsBlotterIdDefaultNull()
            {
                return this.IsNull(this.tableTrader.BlotterIdDefaultColumn);
            }
            
            public void SetBlotterIdDefaultNull()
            {
                this[this.tableTrader.BlotterIdDefaultColumn] = System.Convert.DBNull;
            }
            
            public bool IsCommissionMaximumNull()
            {
                return this.IsNull(this.tableTrader.CommissionMaximumColumn);
            }
            
            public void SetCommissionMaximumNull()
            {
                this[this.tableTrader.CommissionMaximumColumn] = System.Convert.DBNull;
            }
            
            public bool IsCommissionMinimumNull()
            {
                return this.IsNull(this.tableTrader.CommissionMinimumColumn);
            }
            
            public void SetCommissionMinimumNull()
            {
                this[this.tableTrader.CommissionMinimumColumn] = System.Convert.DBNull;
            }
            
            public bool IsCommissionRateNull()
            {
                return this.IsNull(this.tableTrader.CommissionRateColumn);
            }
            
            public void SetCommissionRateNull()
            {
                this[this.tableTrader.CommissionRateColumn] = System.Convert.DBNull;
            }
            
            public bool IsCommissionRateTypeCodeNull()
            {
                return this.IsNull(this.tableTrader.CommissionRateTypeCodeColumn);
            }
            
            public void SetCommissionRateTypeCodeNull()
            {
                this[this.tableTrader.CommissionRateTypeCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailAddressNull()
            {
                return this.IsNull(this.tableTrader.EmailAddressColumn);
            }
            
            public void SetEmailAddressNull()
            {
                this[this.tableTrader.EmailAddressColumn] = System.Convert.DBNull;
            }
            
            public bool IsFixAccountIdNull()
            {
                return this.IsNull(this.tableTrader.FixAccountIdColumn);
            }
            
            public void SetFixAccountIdNull()
            {
                this[this.tableTrader.FixAccountIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastDeletedOrderNull()
            {
                return this.IsNull(this.tableTrader.LastDeletedOrderColumn);
            }
            
            public void SetLastDeletedOrderNull()
            {
                this[this.tableTrader.LastDeletedOrderColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastFilledOrderNull()
            {
                return this.IsNull(this.tableTrader.LastFilledOrderColumn);
            }
            
            public void SetLastFilledOrderNull()
            {
                this[this.tableTrader.LastFilledOrderColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastFilledSourceOrderNull()
            {
                return this.IsNull(this.tableTrader.LastFilledSourceOrderColumn);
            }
            
            public void SetLastFilledSourceOrderNull()
            {
                this[this.tableTrader.LastFilledSourceOrderColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastTradeNull()
            {
                return this.IsNull(this.tableTrader.LastTradeColumn);
            }
            
            public void SetLastTradeNull()
            {
                this[this.tableTrader.LastTradeColumn] = System.Convert.DBNull;
            }
            
            public bool IsMaximumVolatilityDefaultNull()
            {
                return this.IsNull(this.tableTrader.MaximumVolatilityDefaultColumn);
            }
            
            public void SetMaximumVolatilityDefaultNull()
            {
                this[this.tableTrader.MaximumVolatilityDefaultColumn] = System.Convert.DBNull;
            }
            
            public bool IsNewsFreeTimeDefaultNull()
            {
                return this.IsNull(this.tableTrader.NewsFreeTimeDefaultColumn);
            }
            
            public void SetNewsFreeTimeDefaultNull()
            {
                this[this.tableTrader.NewsFreeTimeDefaultColumn] = System.Convert.DBNull;
            }
            
            public bool IsOatsAccountTypeNull()
            {
                return this.IsNull(this.tableTrader.OatsAccountTypeColumn);
            }
            
            public void SetOatsAccountTypeNull()
            {
                this[this.tableTrader.OatsAccountTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsOatsOrigDeptIdNull()
            {
                return this.IsNull(this.tableTrader.OatsOrigDeptIdColumn);
            }
            
            public void SetOatsOrigDeptIdNull()
            {
                this[this.tableTrader.OatsOrigDeptIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrderMaximumLimitDeltaNull()
            {
                return this.IsNull(this.tableTrader.OrderMaximumLimitDeltaColumn);
            }
            
            public void SetOrderMaximumLimitDeltaNull()
            {
                this[this.tableTrader.OrderMaximumLimitDeltaColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrderMaximumMarketValueNull()
            {
                return this.IsNull(this.tableTrader.OrderMaximumMarketValueColumn);
            }
            
            public void SetOrderMaximumMarketValueNull()
            {
                this[this.tableTrader.OrderMaximumMarketValueColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrderMaximumQuantityNull()
            {
                return this.IsNull(this.tableTrader.OrderMaximumQuantityColumn);
            }
            
            public void SetOrderMaximumQuantityNull()
            {
                this[this.tableTrader.OrderMaximumQuantityColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrderWarningMarketValueNull()
            {
                return this.IsNull(this.tableTrader.OrderWarningMarketValueColumn);
            }
            
            public void SetOrderWarningMarketValueNull()
            {
                this[this.tableTrader.OrderWarningMarketValueColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrderWarningQuantityNull()
            {
                return this.IsNull(this.tableTrader.OrderWarningQuantityColumn);
            }
            
            public void SetOrderWarningQuantityNull()
            {
                this[this.tableTrader.OrderWarningQuantityColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull()
            {
                return this.IsNull(this.tableTrader.PhoneColumn);
            }
            
            public void SetPhoneNull()
            {
                this[this.tableTrader.PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsScraperConfigurationStringNull()
            {
                return this.IsNull(this.tableTrader.ScraperConfigurationStringColumn);
            }
            
            public void SetScraperConfigurationStringNull()
            {
                this[this.tableTrader.ScraperConfigurationStringColumn] = System.Convert.DBNull;
            }
            
            public bool IsStartTimeDefaultNull()
            {
                return this.IsNull(this.tableTrader.StartTimeDefaultColumn);
            }
            
            public void SetStartTimeDefaultNull()
            {
                this[this.tableTrader.StartTimeDefaultColumn] = System.Convert.DBNull;
            }
            
            public bool IsStopTimeDefaultNull()
            {
                return this.IsNull(this.tableTrader.StopTimeDefaultColumn);
            }
            
            public void SetStopTimeDefaultNull()
            {
                this[this.tableTrader.StopTimeDefaultColumn] = System.Convert.DBNull;
            }
            
            public bool IsTagIdNull()
            {
                return this.IsNull(this.tableTrader.TagIdColumn);
            }
            
            public void SetTagIdNull()
            {
                this[this.tableTrader.TagIdColumn] = System.Convert.DBNull;
            }
            
            public BrokerAccountRow[] GetBrokerAccountRows()
            {
                return ((BrokerAccountRow[])(this.GetChildRows(this.Table.ChildRelations["TraderBrokerAccount"])));
            }
            
            public DestinationOrderRow[] GetDestinationOrderRows()
            {
                return ((DestinationOrderRow[])(this.GetChildRows(this.Table.ChildRelations["TraderDestinationOrder"])));
            }
            
            public TraderVolumeSettingRow[] GetTraderVolumeSettingRows()
            {
                return ((TraderVolumeSettingRow[])(this.GetChildRows(this.Table.ChildRelations["TraderTraderVolumeSetting"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TraderRowChangeEvent : EventArgs
        {
            
            private TraderRow eventRow;
            
            private DataRowAction eventAction;
            
            public TraderRowChangeEvent(TraderRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TraderRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TraderVolumeSettingDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnExternalId0;
            
            private Column columnAutoExecuteQuantity;
            
            private Column columnThresholdQuantity;
            
            private Column columnTraderVolumeSettingId;
            
            private Column columnTraderId;
            
            private Column columnVolumeCategoryId;
            
            private DataView viewKeyTraderVolumeSettingExternalId0;
            
            internal TraderVolumeSettingDataTable() : 
                    base("TraderVolumeSetting")
            {
                this.InitClass();
            }
            
            internal TraderVolumeSettingDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column AutoExecuteQuantityColumn
            {
                get
                {
                    return this.columnAutoExecuteQuantity;
                }
            }
            
            public Column ThresholdQuantityColumn
            {
                get
                {
                    return this.columnThresholdQuantity;
                }
            }
            
            public Column TraderVolumeSettingIdColumn
            {
                get
                {
                    return this.columnTraderVolumeSettingId;
                }
            }
            
            public Column TraderIdColumn
            {
                get
                {
                    return this.columnTraderId;
                }
            }
            
            public Column VolumeCategoryIdColumn
            {
                get
                {
                    return this.columnVolumeCategoryId;
                }
            }
            
            public DataView KeyTraderVolumeSettingExternalId0
            {
                get
                {
                    return this.viewKeyTraderVolumeSettingExternalId0;
                }
            }
            
            public TraderVolumeSettingRow this[int index]
            {
                get
                {
                    return ((TraderVolumeSettingRow)(this.Rows[index]));
                }
            }
            
            public event TraderVolumeSettingRowChangeEventHandler TraderVolumeSettingRowChanged;
            
            public event TraderVolumeSettingRowChangeEventHandler TraderVolumeSettingRowChanging;
            
            public event TraderVolumeSettingRowChangeEventHandler TraderVolumeSettingRowDeleted;
            
            public event TraderVolumeSettingRowChangeEventHandler TraderVolumeSettingRowDeleting;
            
            public void AddTraderVolumeSettingRow(TraderVolumeSettingRow row)
            {
                this.Rows.Add(row);
            }
            
            public TraderVolumeSettingRow AddTraderVolumeSettingRow(string ExternalId0, decimal AutoExecuteQuantity, decimal ThresholdQuantity, TraderRow parentTraderRowByTraderTraderVolumeSetting, VolumeCategoryRow parentVolumeCategoryRowByVolumeCategoryTraderVolumeSetting)
            {
                TraderVolumeSettingRow rowTraderVolumeSettingRow = ((TraderVolumeSettingRow)(this.NewRow()));
                rowTraderVolumeSettingRow.ItemArray = new object[] {
                        ExternalId0,
                        AutoExecuteQuantity,
                        ThresholdQuantity,
                        null,
                        parentTraderRowByTraderTraderVolumeSetting[61],
                        parentVolumeCategoryRowByVolumeCategoryTraderVolumeSetting[5]};
                this.Rows.Add(rowTraderVolumeSettingRow);
                return rowTraderVolumeSettingRow;
            }
            
            public TraderVolumeSettingRow FindByTraderVolumeSettingId(int TraderVolumeSettingId)
            {
                return ((TraderVolumeSettingRow)(this.Rows.Find(new object[] {
                            TraderVolumeSettingId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                TraderVolumeSettingDataTable cln = ((TraderVolumeSettingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new TraderVolumeSettingDataTable();
            }
            
            internal void InitVars()
            {
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnAutoExecuteQuantity = this.Columns["AutoExecuteQuantity"];
                this.columnThresholdQuantity = this.Columns["ThresholdQuantity"];
                this.columnTraderVolumeSettingId = this.Columns["TraderVolumeSettingId"];
                this.columnTraderId = this.Columns["TraderId"];
                this.columnVolumeCategoryId = this.Columns["VolumeCategoryId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnAutoExecuteQuantity = new Column("AutoExecuteQuantity", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAutoExecuteQuantity);
                this.columnThresholdQuantity = new Column("ThresholdQuantity", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnThresholdQuantity);
                this.columnTraderVolumeSettingId = new Column("TraderVolumeSettingId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTraderVolumeSettingId);
                this.columnTraderId = new Column("TraderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTraderId);
                this.columnVolumeCategoryId = new Column("VolumeCategoryId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVolumeCategoryId);
                this.Constraints.Add(new UniqueConstraint("KeyTraderVolumeSetting", new DataColumn[] {
                                this.columnTraderVolumeSettingId}, true));
                this.viewKeyTraderVolumeSettingExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.columnAutoExecuteQuantity.AllowDBNull = false;
                this.columnThresholdQuantity.AllowDBNull = false;
                this.columnTraderVolumeSettingId.AutoIncrement = true;
                this.columnTraderVolumeSettingId.AllowDBNull = false;
                this.columnTraderVolumeSettingId.Unique = true;
                this.columnTraderId.AllowDBNull = false;
                this.columnVolumeCategoryId.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.TraderVolumeSettingLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "TraderVolumeSetting"));
                }
            }
            
            public TraderVolumeSettingRow NewTraderVolumeSettingRow()
            {
                return ((TraderVolumeSettingRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new TraderVolumeSettingRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(TraderVolumeSettingRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.TraderVolumeSettingRowChanged != null))
                {
                    this.TraderVolumeSettingRowChanged(this, new TraderVolumeSettingRowChangeEvent(((TraderVolumeSettingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.TraderVolumeSettingRowChanging != null))
                {
                    this.TraderVolumeSettingRowChanging(this, new TraderVolumeSettingRowChangeEvent(((TraderVolumeSettingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.TraderVolumeSettingRowDeleted != null))
                {
                    this.TraderVolumeSettingRowDeleted(this, new TraderVolumeSettingRowChangeEvent(((TraderVolumeSettingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.TraderVolumeSettingRowDeleting != null))
                {
                    this.TraderVolumeSettingRowDeleting(this, new TraderVolumeSettingRowChangeEvent(((TraderVolumeSettingRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTraderVolumeSettingRow(TraderVolumeSettingRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TraderVolumeSettingRow : Row
        {
            
            private TraderVolumeSettingDataTable tableTraderVolumeSetting;
            
            internal TraderVolumeSettingRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableTraderVolumeSetting = ((TraderVolumeSettingDataTable)(this.Table));
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTraderVolumeSetting.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTraderVolumeSetting.ExternalId0Column] = value;
                }
            }
            
            public decimal AutoExecuteQuantity
            {
                get
                {
                    return ((decimal)(this[this.tableTraderVolumeSetting.AutoExecuteQuantityColumn]));
                }
                set
                {
                    this[this.tableTraderVolumeSetting.AutoExecuteQuantityColumn] = value;
                }
            }
            
            public decimal ThresholdQuantity
            {
                get
                {
                    return ((decimal)(this[this.tableTraderVolumeSetting.ThresholdQuantityColumn]));
                }
                set
                {
                    this[this.tableTraderVolumeSetting.ThresholdQuantityColumn] = value;
                }
            }
            
            public int TraderVolumeSettingId
            {
                get
                {
                    return ((int)(this[this.tableTraderVolumeSetting.TraderVolumeSettingIdColumn]));
                }
                set
                {
                    this[this.tableTraderVolumeSetting.TraderVolumeSettingIdColumn] = value;
                }
            }
            
            public int TraderId
            {
                get
                {
                    return ((int)(this[this.tableTraderVolumeSetting.TraderIdColumn]));
                }
                set
                {
                    this[this.tableTraderVolumeSetting.TraderIdColumn] = value;
                }
            }
            
            public int VolumeCategoryId
            {
                get
                {
                    return ((int)(this[this.tableTraderVolumeSetting.VolumeCategoryIdColumn]));
                }
                set
                {
                    this[this.tableTraderVolumeSetting.VolumeCategoryIdColumn] = value;
                }
            }
            
            public TraderRow TraderRow
            {
                get
                {
                    if ((DataSetMarket.lockTrader.IsReaderLockHeld || DataSetMarket.lockTrader.IsWriterLockHeld))
                    {
                        return ((TraderRow)(this.GetParentRow(this.Table.ParentRelations["TraderTraderVolumeSetting"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Trader"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["TraderTraderVolumeSetting"]);
                }
            }
            
            public VolumeCategoryRow VolumeCategoryRow
            {
                get
                {
                    if ((DataSetMarket.lockVolumeCategory.IsReaderLockHeld || DataSetMarket.lockVolumeCategory.IsWriterLockHeld))
                    {
                        return ((VolumeCategoryRow)(this.GetParentRow(this.Table.ParentRelations["VolumeCategoryTraderVolumeSetting"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "VolumeCategory"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["VolumeCategoryTraderVolumeSetting"]);
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableTraderVolumeSetting.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableTraderVolumeSetting.ExternalId0Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TraderVolumeSettingRowChangeEvent : EventArgs
        {
            
            private TraderVolumeSettingRow eventRow;
            
            private DataRowAction eventAction;
            
            public TraderVolumeSettingRowChangeEvent(TraderVolumeSettingRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TraderVolumeSettingRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TypeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnSpecification;
            
            private Column columnTypeCode;
            
            private DataView viewKeyTypeExternalId0;
            
            internal TypeDataTable() : 
                    base("Type")
            {
                this.InitClass();
            }
            
            internal TypeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column SpecificationColumn
            {
                get
                {
                    return this.columnSpecification;
                }
            }
            
            public Column TypeCodeColumn
            {
                get
                {
                    return this.columnTypeCode;
                }
            }
            
            public DataView KeyTypeExternalId0
            {
                get
                {
                    return this.viewKeyTypeExternalId0;
                }
            }
            
            public TypeRow this[int index]
            {
                get
                {
                    return ((TypeRow)(this.Rows[index]));
                }
            }
            
            public event TypeRowChangeEventHandler TypeRowChanged;
            
            public event TypeRowChangeEventHandler TypeRowChanging;
            
            public event TypeRowChangeEventHandler TypeRowDeleted;
            
            public event TypeRowChangeEventHandler TypeRowDeleting;
            
            public void AddTypeRow(TypeRow row)
            {
                this.Rows.Add(row);
            }
            
            public TypeRow AddTypeRow(string Description, string ExternalId0, string Specification, string TypeCode)
            {
                TypeRow rowTypeRow = ((TypeRow)(this.NewRow()));
                rowTypeRow.ItemArray = new object[] {
                        Description,
                        ExternalId0,
                        Specification,
                        TypeCode};
                this.Rows.Add(rowTypeRow);
                return rowTypeRow;
            }
            
            public TypeRow FindByTypeCode(string TypeCode)
            {
                return ((TypeRow)(this.Rows.Find(new object[] {
                            TypeCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                TypeDataTable cln = ((TypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new TypeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnSpecification = this.Columns["Specification"];
                this.columnTypeCode = this.Columns["TypeCode"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnSpecification = new Column("Specification", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSpecification);
                this.columnTypeCode = new Column("TypeCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTypeCode);
                this.Constraints.Add(new UniqueConstraint("KeyType", new DataColumn[] {
                                this.columnTypeCode}, true));
                this.viewKeyTypeExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.columnDescription.AllowDBNull = false;
                this.columnSpecification.AllowDBNull = false;
                this.columnTypeCode.AllowDBNull = false;
                this.columnTypeCode.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.TypeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Type"));
                }
            }
            
            public TypeRow NewTypeRow()
            {
                return ((TypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new TypeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(TypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.TypeRowChanged != null))
                {
                    this.TypeRowChanged(this, new TypeRowChangeEvent(((TypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.TypeRowChanging != null))
                {
                    this.TypeRowChanging(this, new TypeRowChangeEvent(((TypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.TypeRowDeleted != null))
                {
                    this.TypeRowDeleted(this, new TypeRowChangeEvent(((TypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.TypeRowDeleting != null))
                {
                    this.TypeRowDeleting(this, new TypeRowChangeEvent(((TypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTypeRow(TypeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TypeRow : Row
        {
            
            private TypeDataTable tableType;
            
            internal TypeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableType = ((TypeDataTable)(this.Table));
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableType.DescriptionColumn]));
                }
                set
                {
                    this[this.tableType.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableType.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableType.ExternalId0Column] = value;
                }
            }
            
            public string Specification
            {
                get
                {
                    return ((string)(this[this.tableType.SpecificationColumn]));
                }
                set
                {
                    this[this.tableType.SpecificationColumn] = value;
                }
            }
            
            public string TypeCode
            {
                get
                {
                    return ((string)(this[this.tableType.TypeCodeColumn]));
                }
                set
                {
                    this[this.tableType.TypeCodeColumn] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableType.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableType.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public ObjectRow[] GetObjectRows()
            {
                return ((ObjectRow[])(this.GetChildRows(this.Table.ChildRelations["TypeObject"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TypeRowChangeEvent : EventArgs
        {
            
            private TypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public TypeRowChangeEvent(TypeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TypeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnPreferences;
            
            private Column columnSystemFolderId;
            
            private Column columnUserId;
            
            private Column columnUserName;
            
            private DataView viewKeyUserUserName;
            
            internal UserDataTable() : 
                    base("User")
            {
                this.InitClass();
            }
            
            internal UserDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column PreferencesColumn
            {
                get
                {
                    return this.columnPreferences;
                }
            }
            
            public Column SystemFolderIdColumn
            {
                get
                {
                    return this.columnSystemFolderId;
                }
            }
            
            public Column UserIdColumn
            {
                get
                {
                    return this.columnUserId;
                }
            }
            
            public Column UserNameColumn
            {
                get
                {
                    return this.columnUserName;
                }
            }
            
            public DataView KeyUserUserName
            {
                get
                {
                    return this.viewKeyUserUserName;
                }
            }
            
            public UserRow this[int index]
            {
                get
                {
                    return ((UserRow)(this.Rows[index]));
                }
            }
            
            public event UserRowChangeEventHandler UserRowChanged;
            
            public event UserRowChangeEventHandler UserRowChanging;
            
            public event UserRowChangeEventHandler UserRowDeleted;
            
            public event UserRowChangeEventHandler UserRowDeleting;
            
            public void AddUserRow(UserRow row)
            {
                this.Rows.Add(row);
            }
            
            public UserRow AddUserRow(byte[] Preferences, SystemFolderRow parentSystemFolderRowBySystemFolderUser, ObjectRow parentObjectRowByObjectUser, string UserName)
            {
                UserRow rowUserRow = ((UserRow)(this.NewRow()));
                rowUserRow.ItemArray = new object[] {
                        Preferences,
                        parentSystemFolderRowBySystemFolderUser[18],
                        parentObjectRowByObjectUser[12],
                        UserName};
                this.Rows.Add(rowUserRow);
                return rowUserRow;
            }
            
            public UserRow FindByUserId(int UserId)
            {
                return ((UserRow)(this.Rows.Find(new object[] {
                            UserId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                UserDataTable cln = ((UserDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new UserDataTable();
            }
            
            internal void InitVars()
            {
                this.columnPreferences = this.Columns["Preferences"];
                this.columnSystemFolderId = this.Columns["SystemFolderId"];
                this.columnUserId = this.Columns["UserId"];
                this.columnUserName = this.Columns["UserName"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnPreferences = new Column("Preferences", typeof(byte[]), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferences);
                this.columnSystemFolderId = new Column("SystemFolderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSystemFolderId);
                this.columnUserId = new Column("UserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserId);
                this.columnUserName = new Column("UserName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserName);
                this.Constraints.Add(new UniqueConstraint("KeyUser", new DataColumn[] {
                                this.columnUserId}, true));
                this.viewKeyUserUserName = new DataView(this, null, "UserName", DataViewRowState.CurrentRows);
                this.columnUserId.AllowDBNull = false;
                this.columnUserId.Unique = true;
                this.columnUserName.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.UserLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "User"));
                }
            }
            
            public UserRow NewUserRow()
            {
                return ((UserRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new UserRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(UserRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.UserRowChanged != null))
                {
                    this.UserRowChanged(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.UserRowChanging != null))
                {
                    this.UserRowChanging(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.UserRowDeleted != null))
                {
                    this.UserRowDeleted(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.UserRowDeleting != null))
                {
                    this.UserRowDeleting(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveUserRow(UserRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserRow : Row
        {
            
            private UserDataTable tableUser;
            
            internal UserRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableUser = ((UserDataTable)(this.Table));
            }
            
            public byte[] Preferences
            {
                get
                {
                    try
                    {
                        return ((byte[])(this[this.tableUser.PreferencesColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableUser.PreferencesColumn] = value;
                }
            }
            
            public int SystemFolderId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableUser.SystemFolderIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableUser.SystemFolderIdColumn] = value;
                }
            }
            
            public int UserId
            {
                get
                {
                    return ((int)(this[this.tableUser.UserIdColumn]));
                }
                set
                {
                    this[this.tableUser.UserIdColumn] = value;
                }
            }
            
            public string UserName
            {
                get
                {
                    return ((string)(this[this.tableUser.UserNameColumn]));
                }
                set
                {
                    this[this.tableUser.UserNameColumn] = value;
                }
            }
            
            public ObjectRow ObjectRow
            {
                get
                {
                    if ((DataSetMarket.lockObject.IsReaderLockHeld || DataSetMarket.lockObject.IsWriterLockHeld))
                    {
                        return ((ObjectRow)(this.GetParentRow(this.Table.ParentRelations["ObjectUser"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Object"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["ObjectUser"]);
                }
            }
            
            public SystemFolderRow SystemFolderRow
            {
                get
                {
                    if ((DataSetMarket.lockSystemFolder.IsReaderLockHeld || DataSetMarket.lockSystemFolder.IsWriterLockHeld))
                    {
                        return ((SystemFolderRow)(this.GetParentRow(this.Table.ParentRelations["SystemFolderUser"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "SystemFolder"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["SystemFolderUser"]);
                }
            }
            
            public bool IsPreferencesNull()
            {
                return this.IsNull(this.tableUser.PreferencesColumn);
            }
            
            public void SetPreferencesNull()
            {
                this[this.tableUser.PreferencesColumn] = System.Convert.DBNull;
            }
            
            public bool IsSystemFolderIdNull()
            {
                return this.IsNull(this.tableUser.SystemFolderIdColumn);
            }
            
            public void SetSystemFolderIdNull()
            {
                this[this.tableUser.SystemFolderIdColumn] = System.Convert.DBNull;
            }
            
            public AccountBaseRow[] GetAccountBaseRows()
            {
                return ((AccountBaseRow[])(this.GetChildRows(this.Table.ChildRelations["UserAccountBase"])));
            }
            
            public AllocationRow[] GetAllocationRowsByUserAllocationCreatedUserId()
            {
                return ((AllocationRow[])(this.GetChildRows(this.Table.ChildRelations["UserAllocationCreatedUserId"])));
            }
            
            public AllocationRow[] GetAllocationRowsByUserAllocationModifiedUserId()
            {
                return ((AllocationRow[])(this.GetChildRows(this.Table.ChildRelations["UserAllocationModifiedUserId"])));
            }
            
            public ComplianceOfficerRow[] GetComplianceOfficerRows()
            {
                return ((ComplianceOfficerRow[])(this.GetChildRows(this.Table.ChildRelations["UserComplianceOfficer"])));
            }
            
            public ExecutionRow[] GetExecutionRowsByUserExecutionCreatedUserId()
            {
                return ((ExecutionRow[])(this.GetChildRows(this.Table.ChildRelations["UserExecutionCreatedUserId"])));
            }
            
            public ExecutionRow[] GetExecutionRowsByUserExecutionModifiedUserId()
            {
                return ((ExecutionRow[])(this.GetChildRows(this.Table.ChildRelations["UserExecutionModifiedUserId"])));
            }
            
            public SourceOrderRow[] GetSourceOrderRowsByUserSourceOrderCreatedUserId()
            {
                return ((SourceOrderRow[])(this.GetChildRows(this.Table.ChildRelations["UserSourceOrderCreatedUserId"])));
            }
            
            public SourceOrderRow[] GetSourceOrderRowsByUserSourceOrderModifiedUserId()
            {
                return ((SourceOrderRow[])(this.GetChildRows(this.Table.ChildRelations["UserSourceOrderModifiedUserId"])));
            }
            
            public TraderRow[] GetTraderRows()
            {
                return ((TraderRow[])(this.GetChildRows(this.Table.ChildRelations["UserTrader"])));
            }
            
            public WorkingOrderRow[] GetWorkingOrderRowsByUserWorkingOrderCreatedUserId()
            {
                return ((WorkingOrderRow[])(this.GetChildRows(this.Table.ChildRelations["UserWorkingOrderCreatedUserId"])));
            }
            
            public WorkingOrderRow[] GetWorkingOrderRowsByUserWorkingOrderModifiedUserId()
            {
                return ((WorkingOrderRow[])(this.GetChildRows(this.Table.ChildRelations["UserWorkingOrderModifiedUserId"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserRowChangeEvent : EventArgs
        {
            
            private UserRow eventRow;
            
            private DataRowAction eventAction;
            
            public UserRowChangeEvent(UserRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public UserRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VolumeCategoryDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnHighVolumeRange;
            
            private Column columnLowVolumeRange;
            
            private Column columnMnemonic;
            
            private Column columnVolumeCategoryId;
            
            private DataView viewKeyVolumeCategoryExternalId0;
            
            internal VolumeCategoryDataTable() : 
                    base("VolumeCategory")
            {
                this.InitClass();
            }
            
            internal VolumeCategoryDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column HighVolumeRangeColumn
            {
                get
                {
                    return this.columnHighVolumeRange;
                }
            }
            
            public Column LowVolumeRangeColumn
            {
                get
                {
                    return this.columnLowVolumeRange;
                }
            }
            
            public Column MnemonicColumn
            {
                get
                {
                    return this.columnMnemonic;
                }
            }
            
            public Column VolumeCategoryIdColumn
            {
                get
                {
                    return this.columnVolumeCategoryId;
                }
            }
            
            public DataView KeyVolumeCategoryExternalId0
            {
                get
                {
                    return this.viewKeyVolumeCategoryExternalId0;
                }
            }
            
            public VolumeCategoryRow this[int index]
            {
                get
                {
                    return ((VolumeCategoryRow)(this.Rows[index]));
                }
            }
            
            public event VolumeCategoryRowChangeEventHandler VolumeCategoryRowChanged;
            
            public event VolumeCategoryRowChangeEventHandler VolumeCategoryRowChanging;
            
            public event VolumeCategoryRowChangeEventHandler VolumeCategoryRowDeleted;
            
            public event VolumeCategoryRowChangeEventHandler VolumeCategoryRowDeleting;
            
            public void AddVolumeCategoryRow(VolumeCategoryRow row)
            {
                this.Rows.Add(row);
            }
            
            public VolumeCategoryRow AddVolumeCategoryRow(string Description, string ExternalId0, decimal HighVolumeRange, decimal LowVolumeRange, string Mnemonic)
            {
                VolumeCategoryRow rowVolumeCategoryRow = ((VolumeCategoryRow)(this.NewRow()));
                rowVolumeCategoryRow.ItemArray = new object[] {
                        Description,
                        ExternalId0,
                        HighVolumeRange,
                        LowVolumeRange,
                        Mnemonic,
                        null};
                this.Rows.Add(rowVolumeCategoryRow);
                return rowVolumeCategoryRow;
            }
            
            public VolumeCategoryRow FindByVolumeCategoryId(int VolumeCategoryId)
            {
                return ((VolumeCategoryRow)(this.Rows.Find(new object[] {
                            VolumeCategoryId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                VolumeCategoryDataTable cln = ((VolumeCategoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new VolumeCategoryDataTable();
            }
            
            internal void InitVars()
            {
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnHighVolumeRange = this.Columns["HighVolumeRange"];
                this.columnLowVolumeRange = this.Columns["LowVolumeRange"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnVolumeCategoryId = this.Columns["VolumeCategoryId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnHighVolumeRange = new Column("HighVolumeRange", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHighVolumeRange);
                this.columnLowVolumeRange = new Column("LowVolumeRange", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLowVolumeRange);
                this.columnMnemonic = new Column("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnVolumeCategoryId = new Column("VolumeCategoryId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVolumeCategoryId);
                this.Constraints.Add(new UniqueConstraint("KeyVolumeCategory", new DataColumn[] {
                                this.columnVolumeCategoryId}, true));
                this.viewKeyVolumeCategoryExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.columnLowVolumeRange.AllowDBNull = false;
                this.columnMnemonic.AllowDBNull = false;
                this.columnVolumeCategoryId.AutoIncrement = true;
                this.columnVolumeCategoryId.AllowDBNull = false;
                this.columnVolumeCategoryId.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.VolumeCategoryLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "VolumeCategory"));
                }
            }
            
            public VolumeCategoryRow NewVolumeCategoryRow()
            {
                return ((VolumeCategoryRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new VolumeCategoryRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(VolumeCategoryRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.VolumeCategoryRowChanged != null))
                {
                    this.VolumeCategoryRowChanged(this, new VolumeCategoryRowChangeEvent(((VolumeCategoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.VolumeCategoryRowChanging != null))
                {
                    this.VolumeCategoryRowChanging(this, new VolumeCategoryRowChangeEvent(((VolumeCategoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.VolumeCategoryRowDeleted != null))
                {
                    this.VolumeCategoryRowDeleted(this, new VolumeCategoryRowChangeEvent(((VolumeCategoryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.VolumeCategoryRowDeleting != null))
                {
                    this.VolumeCategoryRowDeleting(this, new VolumeCategoryRowChangeEvent(((VolumeCategoryRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVolumeCategoryRow(VolumeCategoryRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VolumeCategoryRow : Row
        {
            
            private VolumeCategoryDataTable tableVolumeCategory;
            
            internal VolumeCategoryRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableVolumeCategory = ((VolumeCategoryDataTable)(this.Table));
            }
            
            public string Description
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableVolumeCategory.DescriptionColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableVolumeCategory.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableVolumeCategory.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableVolumeCategory.ExternalId0Column] = value;
                }
            }
            
            public decimal HighVolumeRange
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableVolumeCategory.HighVolumeRangeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableVolumeCategory.HighVolumeRangeColumn] = value;
                }
            }
            
            public decimal LowVolumeRange
            {
                get
                {
                    return ((decimal)(this[this.tableVolumeCategory.LowVolumeRangeColumn]));
                }
                set
                {
                    this[this.tableVolumeCategory.LowVolumeRangeColumn] = value;
                }
            }
            
            public string Mnemonic
            {
                get
                {
                    return ((string)(this[this.tableVolumeCategory.MnemonicColumn]));
                }
                set
                {
                    this[this.tableVolumeCategory.MnemonicColumn] = value;
                }
            }
            
            public int VolumeCategoryId
            {
                get
                {
                    return ((int)(this[this.tableVolumeCategory.VolumeCategoryIdColumn]));
                }
                set
                {
                    this[this.tableVolumeCategory.VolumeCategoryIdColumn] = value;
                }
            }
            
            public bool IsDescriptionNull()
            {
                return this.IsNull(this.tableVolumeCategory.DescriptionColumn);
            }
            
            public void SetDescriptionNull()
            {
                this[this.tableVolumeCategory.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableVolumeCategory.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableVolumeCategory.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsHighVolumeRangeNull()
            {
                return this.IsNull(this.tableVolumeCategory.HighVolumeRangeColumn);
            }
            
            public void SetHighVolumeRangeNull()
            {
                this[this.tableVolumeCategory.HighVolumeRangeColumn] = System.Convert.DBNull;
            }
            
            public SecurityRow[] GetSecurityRows()
            {
                return ((SecurityRow[])(this.GetChildRows(this.Table.ChildRelations["VolumeCategorySecurity"])));
            }
            
            public TraderVolumeSettingRow[] GetTraderVolumeSettingRows()
            {
                return ((TraderVolumeSettingRow[])(this.GetChildRows(this.Table.ChildRelations["VolumeCategoryTraderVolumeSetting"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VolumeCategoryRowChangeEvent : EventArgs
        {
            
            private VolumeCategoryRow eventRow;
            
            private DataRowAction eventAction;
            
            public VolumeCategoryRowChangeEvent(VolumeCategoryRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public VolumeCategoryRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WorkingOrderDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnAutomaticQuantity;
            
            private Column columnBlotterId;
            
            private Column columnCreatedTime;
            
            private Column columnCreatedUserId;
            
            private Column columnDestinationId;
            
            private Column columnExternalId0;
            
            private Column columnIsAgencyMatch;
            
            private Column columnIsAutomatic;
            
            private Column columnIsAwake;
            
            private Column columnIsBrokerMatch;
            
            private Column columnIsHedgeMatch;
            
            private Column columnIsInstitutionMatch;
            
            private Column columnLimitPrice;
            
            private Column columnMaximumVolatility;
            
            private Column columnModifiedTime;
            
            private Column columnModifiedUserId;
            
            private Column columnNewsFreeTime;
            
            private Column columnOrderTypeCode;
            
            private Column columnPriceTypeCode;
            
            private Column columnSecurityId;
            
            private Column columnSettlementId;
            
            private Column columnStartTime;
            
            private Column columnStatusCode;
            
            private Column columnStopPrice;
            
            private Column columnStopTime;
            
            private Column columnSubmissionTypeCode;
            
            private Column columnSubmittedQuantity;
            
            private Column columnSubmittedTime;
            
            private Column columnTimeInForceCode;
            
            private Column columnTimerId;
            
            private Column columnUploadedTime;
            
            private Column columnWorkingOrderId;
            
            private DataView viewKeyWorkingOrderExternalId0;
            
            internal WorkingOrderDataTable() : 
                    base("WorkingOrder")
            {
                this.InitClass();
            }
            
            internal WorkingOrderDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column AutomaticQuantityColumn
            {
                get
                {
                    return this.columnAutomaticQuantity;
                }
            }
            
            public Column BlotterIdColumn
            {
                get
                {
                    return this.columnBlotterId;
                }
            }
            
            public Column CreatedTimeColumn
            {
                get
                {
                    return this.columnCreatedTime;
                }
            }
            
            public Column CreatedUserIdColumn
            {
                get
                {
                    return this.columnCreatedUserId;
                }
            }
            
            public Column DestinationIdColumn
            {
                get
                {
                    return this.columnDestinationId;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column IsAgencyMatchColumn
            {
                get
                {
                    return this.columnIsAgencyMatch;
                }
            }
            
            public Column IsAutomaticColumn
            {
                get
                {
                    return this.columnIsAutomatic;
                }
            }
            
            public Column IsAwakeColumn
            {
                get
                {
                    return this.columnIsAwake;
                }
            }
            
            public Column IsBrokerMatchColumn
            {
                get
                {
                    return this.columnIsBrokerMatch;
                }
            }
            
            public Column IsHedgeMatchColumn
            {
                get
                {
                    return this.columnIsHedgeMatch;
                }
            }
            
            public Column IsInstitutionMatchColumn
            {
                get
                {
                    return this.columnIsInstitutionMatch;
                }
            }
            
            public Column LimitPriceColumn
            {
                get
                {
                    return this.columnLimitPrice;
                }
            }
            
            public Column MaximumVolatilityColumn
            {
                get
                {
                    return this.columnMaximumVolatility;
                }
            }
            
            public Column ModifiedTimeColumn
            {
                get
                {
                    return this.columnModifiedTime;
                }
            }
            
            public Column ModifiedUserIdColumn
            {
                get
                {
                    return this.columnModifiedUserId;
                }
            }
            
            public Column NewsFreeTimeColumn
            {
                get
                {
                    return this.columnNewsFreeTime;
                }
            }
            
            public Column OrderTypeCodeColumn
            {
                get
                {
                    return this.columnOrderTypeCode;
                }
            }
            
            public Column PriceTypeCodeColumn
            {
                get
                {
                    return this.columnPriceTypeCode;
                }
            }
            
            public Column SecurityIdColumn
            {
                get
                {
                    return this.columnSecurityId;
                }
            }
            
            public Column SettlementIdColumn
            {
                get
                {
                    return this.columnSettlementId;
                }
            }
            
            public Column StartTimeColumn
            {
                get
                {
                    return this.columnStartTime;
                }
            }
            
            public Column StatusCodeColumn
            {
                get
                {
                    return this.columnStatusCode;
                }
            }
            
            public Column StopPriceColumn
            {
                get
                {
                    return this.columnStopPrice;
                }
            }
            
            public Column StopTimeColumn
            {
                get
                {
                    return this.columnStopTime;
                }
            }
            
            public Column SubmissionTypeCodeColumn
            {
                get
                {
                    return this.columnSubmissionTypeCode;
                }
            }
            
            public Column SubmittedQuantityColumn
            {
                get
                {
                    return this.columnSubmittedQuantity;
                }
            }
            
            public Column SubmittedTimeColumn
            {
                get
                {
                    return this.columnSubmittedTime;
                }
            }
            
            public Column TimeInForceCodeColumn
            {
                get
                {
                    return this.columnTimeInForceCode;
                }
            }
            
            public Column TimerIdColumn
            {
                get
                {
                    return this.columnTimerId;
                }
            }
            
            public Column UploadedTimeColumn
            {
                get
                {
                    return this.columnUploadedTime;
                }
            }
            
            public Column WorkingOrderIdColumn
            {
                get
                {
                    return this.columnWorkingOrderId;
                }
            }
            
            public DataView KeyWorkingOrderExternalId0
            {
                get
                {
                    return this.viewKeyWorkingOrderExternalId0;
                }
            }
            
            public WorkingOrderRow this[int index]
            {
                get
                {
                    return ((WorkingOrderRow)(this.Rows[index]));
                }
            }
            
            public event WorkingOrderRowChangeEventHandler WorkingOrderRowChanged;
            
            public event WorkingOrderRowChangeEventHandler WorkingOrderRowChanging;
            
            public event WorkingOrderRowChangeEventHandler WorkingOrderRowDeleted;
            
            public event WorkingOrderRowChangeEventHandler WorkingOrderRowDeleting;
            
            public void AddWorkingOrderRow(WorkingOrderRow row)
            {
                this.Rows.Add(row);
            }
            
            public WorkingOrderRow AddWorkingOrderRow(
                        decimal AutomaticQuantity, 
                        BlotterRow parentBlotterRowByBlotterWorkingOrder, 
                        System.DateTime CreatedTime, 
                        UserRow parentUserRowByUserWorkingOrderCreatedUserId, 
                        DestinationRow parentDestinationRowByDestinationWorkingOrder, 
                        string ExternalId0, 
                        bool IsAgencyMatch, 
                        bool IsAutomatic, 
                        bool IsAwake, 
                        bool IsBrokerMatch, 
                        bool IsHedgeMatch, 
                        bool IsInstitutionMatch, 
                        decimal LimitPrice, 
                        decimal MaximumVolatility, 
                        System.DateTime ModifiedTime, 
                        UserRow parentUserRowByUserWorkingOrderModifiedUserId, 
                        int NewsFreeTime, 
                        OrderTypeRow parentOrderTypeRowByOrderTypeWorkingOrder, 
                        PriceTypeRow parentPriceTypeRowByPriceTypeWorkingOrder, 
                        PriceRow parentPriceRowByPriceWorkingOrder, 
                        SecurityRow parentSecurityRowBySecurityWorkingOrderSettlementId, 
                        System.DateTime StartTime, 
                        StatusRow parentStatusRowByStatusWorkingOrder, 
                        decimal StopPrice, 
                        System.DateTime StopTime, 
                        SubmissionTypeRow parentSubmissionTypeRowBySubmissionTypeWorkingOrder, 
                        decimal SubmittedQuantity, 
                        System.DateTime SubmittedTime, 
                        TimeInForceRow parentTimeInForceRowByTimeInForceWorkingOrder, 
                        TimerRow parentTimerRowByTimerWorkingOrder, 
                        System.DateTime UploadedTime)
            {
                WorkingOrderRow rowWorkingOrderRow = ((WorkingOrderRow)(this.NewRow()));
                rowWorkingOrderRow.ItemArray = new object[] {
                        AutomaticQuantity,
                        parentBlotterRowByBlotterWorkingOrder[18],
                        CreatedTime,
                        parentUserRowByUserWorkingOrderCreatedUserId[20],
                        parentDestinationRowByDestinationWorkingOrder[2],
                        ExternalId0,
                        IsAgencyMatch,
                        IsAutomatic,
                        IsAwake,
                        IsBrokerMatch,
                        IsHedgeMatch,
                        IsInstitutionMatch,
                        LimitPrice,
                        MaximumVolatility,
                        ModifiedTime,
                        parentUserRowByUserWorkingOrderModifiedUserId[20],
                        NewsFreeTime,
                        parentOrderTypeRowByOrderTypeWorkingOrder[7],
                        parentPriceTypeRowByPriceTypeWorkingOrder[6],
                        parentPriceRowByPriceWorkingOrder[12],
                        parentSecurityRowBySecurityWorkingOrderSettlementId[23],
                        StartTime,
                        parentStatusRowByStatusWorkingOrder[6],
                        StopPrice,
                        StopTime,
                        parentSubmissionTypeRowBySubmissionTypeWorkingOrder[4],
                        SubmittedQuantity,
                        SubmittedTime,
                        parentTimeInForceRowByTimeInForceWorkingOrder[6],
                        parentTimerRowByTimerWorkingOrder[4],
                        UploadedTime,
                        null};
                this.Rows.Add(rowWorkingOrderRow);
                return rowWorkingOrderRow;
            }
            
            public WorkingOrderRow FindByWorkingOrderId(int WorkingOrderId)
            {
                return ((WorkingOrderRow)(this.Rows.Find(new object[] {
                            WorkingOrderId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                WorkingOrderDataTable cln = ((WorkingOrderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new WorkingOrderDataTable();
            }
            
            internal void InitVars()
            {
                this.columnAutomaticQuantity = this.Columns["AutomaticQuantity"];
                this.columnBlotterId = this.Columns["BlotterId"];
                this.columnCreatedTime = this.Columns["CreatedTime"];
                this.columnCreatedUserId = this.Columns["CreatedUserId"];
                this.columnDestinationId = this.Columns["DestinationId"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnIsAgencyMatch = this.Columns["IsAgencyMatch"];
                this.columnIsAutomatic = this.Columns["IsAutomatic"];
                this.columnIsAwake = this.Columns["IsAwake"];
                this.columnIsBrokerMatch = this.Columns["IsBrokerMatch"];
                this.columnIsHedgeMatch = this.Columns["IsHedgeMatch"];
                this.columnIsInstitutionMatch = this.Columns["IsInstitutionMatch"];
                this.columnLimitPrice = this.Columns["LimitPrice"];
                this.columnMaximumVolatility = this.Columns["MaximumVolatility"];
                this.columnModifiedTime = this.Columns["ModifiedTime"];
                this.columnModifiedUserId = this.Columns["ModifiedUserId"];
                this.columnNewsFreeTime = this.Columns["NewsFreeTime"];
                this.columnOrderTypeCode = this.Columns["OrderTypeCode"];
                this.columnPriceTypeCode = this.Columns["PriceTypeCode"];
                this.columnSecurityId = this.Columns["SecurityId"];
                this.columnSettlementId = this.Columns["SettlementId"];
                this.columnStartTime = this.Columns["StartTime"];
                this.columnStatusCode = this.Columns["StatusCode"];
                this.columnStopPrice = this.Columns["StopPrice"];
                this.columnStopTime = this.Columns["StopTime"];
                this.columnSubmissionTypeCode = this.Columns["SubmissionTypeCode"];
                this.columnSubmittedQuantity = this.Columns["SubmittedQuantity"];
                this.columnSubmittedTime = this.Columns["SubmittedTime"];
                this.columnTimeInForceCode = this.Columns["TimeInForceCode"];
                this.columnTimerId = this.Columns["TimerId"];
                this.columnUploadedTime = this.Columns["UploadedTime"];
                this.columnWorkingOrderId = this.Columns["WorkingOrderId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnAutomaticQuantity = new Column("AutomaticQuantity", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAutomaticQuantity);
                this.columnBlotterId = new Column("BlotterId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlotterId);
                this.columnCreatedTime = new Column("CreatedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedTime);
                this.columnCreatedUserId = new Column("CreatedUserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedUserId);
                this.columnDestinationId = new Column("DestinationId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDestinationId);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnIsAgencyMatch = new Column("IsAgencyMatch", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsAgencyMatch);
                this.columnIsAutomatic = new Column("IsAutomatic", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsAutomatic);
                this.columnIsAwake = new Column("IsAwake", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsAwake);
                this.columnIsBrokerMatch = new Column("IsBrokerMatch", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsBrokerMatch);
                this.columnIsHedgeMatch = new Column("IsHedgeMatch", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsHedgeMatch);
                this.columnIsInstitutionMatch = new Column("IsInstitutionMatch", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsInstitutionMatch);
                this.columnLimitPrice = new Column("LimitPrice", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLimitPrice);
                this.columnMaximumVolatility = new Column("MaximumVolatility", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaximumVolatility);
                this.columnModifiedTime = new Column("ModifiedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedTime);
                this.columnModifiedUserId = new Column("ModifiedUserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedUserId);
                this.columnNewsFreeTime = new Column("NewsFreeTime", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNewsFreeTime);
                this.columnOrderTypeCode = new Column("OrderTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrderTypeCode);
                this.columnPriceTypeCode = new Column("PriceTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPriceTypeCode);
                this.columnSecurityId = new Column("SecurityId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityId);
                this.columnSettlementId = new Column("SettlementId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSettlementId);
                this.columnStartTime = new Column("StartTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStartTime);
                this.columnStatusCode = new Column("StatusCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStatusCode);
                this.columnStopPrice = new Column("StopPrice", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStopPrice);
                this.columnStopTime = new Column("StopTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStopTime);
                this.columnSubmissionTypeCode = new Column("SubmissionTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSubmissionTypeCode);
                this.columnSubmittedQuantity = new Column("SubmittedQuantity", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSubmittedQuantity);
                this.columnSubmittedTime = new Column("SubmittedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSubmittedTime);
                this.columnTimeInForceCode = new Column("TimeInForceCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeInForceCode);
                this.columnTimerId = new Column("TimerId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimerId);
                this.columnUploadedTime = new Column("UploadedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUploadedTime);
                this.columnWorkingOrderId = new Column("WorkingOrderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWorkingOrderId);
                this.Constraints.Add(new UniqueConstraint("KeyWorkingOrder", new DataColumn[] {
                                this.columnWorkingOrderId}, true));
                this.viewKeyWorkingOrderExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.columnBlotterId.AllowDBNull = false;
                this.columnCreatedTime.AllowDBNull = false;
                this.columnCreatedUserId.AllowDBNull = false;
                this.columnIsAgencyMatch.AllowDBNull = false;
                this.columnIsAgencyMatch.DefaultValue = false;
                this.columnIsAutomatic.AllowDBNull = false;
                this.columnIsAutomatic.DefaultValue = false;
                this.columnIsAwake.AllowDBNull = false;
                this.columnIsAwake.DefaultValue = true;
                this.columnIsBrokerMatch.AllowDBNull = false;
                this.columnIsBrokerMatch.DefaultValue = false;
                this.columnIsHedgeMatch.AllowDBNull = false;
                this.columnIsHedgeMatch.DefaultValue = false;
                this.columnIsInstitutionMatch.AllowDBNull = false;
                this.columnIsInstitutionMatch.DefaultValue = false;
                this.columnModifiedTime.AllowDBNull = false;
                this.columnModifiedUserId.AllowDBNull = false;
                this.columnOrderTypeCode.AllowDBNull = false;
                this.columnPriceTypeCode.AllowDBNull = false;
                this.columnSecurityId.AllowDBNull = false;
                this.columnStatusCode.AllowDBNull = false;
                this.columnSubmissionTypeCode.AllowDBNull = false;
                this.columnSubmittedQuantity.AllowDBNull = false;
                this.columnSubmittedQuantity.DefaultValue = 0.0m;
                this.columnTimeInForceCode.AllowDBNull = false;
                this.columnWorkingOrderId.AutoIncrement = true;
                this.columnWorkingOrderId.AllowDBNull = false;
                this.columnWorkingOrderId.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.WorkingOrderLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "WorkingOrder"));
                }
            }
            
            public WorkingOrderRow NewWorkingOrderRow()
            {
                return ((WorkingOrderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new WorkingOrderRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(WorkingOrderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.WorkingOrderRowChanged != null))
                {
                    this.WorkingOrderRowChanged(this, new WorkingOrderRowChangeEvent(((WorkingOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.WorkingOrderRowChanging != null))
                {
                    this.WorkingOrderRowChanging(this, new WorkingOrderRowChangeEvent(((WorkingOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.WorkingOrderRowDeleted != null))
                {
                    this.WorkingOrderRowDeleted(this, new WorkingOrderRowChangeEvent(((WorkingOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.WorkingOrderRowDeleting != null))
                {
                    this.WorkingOrderRowDeleting(this, new WorkingOrderRowChangeEvent(((WorkingOrderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveWorkingOrderRow(WorkingOrderRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WorkingOrderRow : Row
        {
            
            private WorkingOrderDataTable tableWorkingOrder;
            
            internal WorkingOrderRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableWorkingOrder = ((WorkingOrderDataTable)(this.Table));
            }
            
            public decimal AutomaticQuantity
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkingOrder.AutomaticQuantityColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkingOrder.AutomaticQuantityColumn] = value;
                }
            }
            
            public int BlotterId
            {
                get
                {
                    return ((int)(this[this.tableWorkingOrder.BlotterIdColumn]));
                }
                set
                {
                    this[this.tableWorkingOrder.BlotterIdColumn] = value;
                }
            }
            
            public System.DateTime CreatedTime
            {
                get
                {
                    return ((System.DateTime)(this[this.tableWorkingOrder.CreatedTimeColumn]));
                }
                set
                {
                    this[this.tableWorkingOrder.CreatedTimeColumn] = value;
                }
            }
            
            public int CreatedUserId
            {
                get
                {
                    return ((int)(this[this.tableWorkingOrder.CreatedUserIdColumn]));
                }
                set
                {
                    this[this.tableWorkingOrder.CreatedUserIdColumn] = value;
                }
            }
            
            public int DestinationId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableWorkingOrder.DestinationIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkingOrder.DestinationIdColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkingOrder.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkingOrder.ExternalId0Column] = value;
                }
            }
            
            public bool IsAgencyMatch
            {
                get
                {
                    return ((bool)(this[this.tableWorkingOrder.IsAgencyMatchColumn]));
                }
                set
                {
                    this[this.tableWorkingOrder.IsAgencyMatchColumn] = value;
                }
            }
            
            public bool IsAutomatic
            {
                get
                {
                    return ((bool)(this[this.tableWorkingOrder.IsAutomaticColumn]));
                }
                set
                {
                    this[this.tableWorkingOrder.IsAutomaticColumn] = value;
                }
            }
            
            public bool IsAwake
            {
                get
                {
                    return ((bool)(this[this.tableWorkingOrder.IsAwakeColumn]));
                }
                set
                {
                    this[this.tableWorkingOrder.IsAwakeColumn] = value;
                }
            }
            
            public bool IsBrokerMatch
            {
                get
                {
                    return ((bool)(this[this.tableWorkingOrder.IsBrokerMatchColumn]));
                }
                set
                {
                    this[this.tableWorkingOrder.IsBrokerMatchColumn] = value;
                }
            }
            
            public bool IsHedgeMatch
            {
                get
                {
                    return ((bool)(this[this.tableWorkingOrder.IsHedgeMatchColumn]));
                }
                set
                {
                    this[this.tableWorkingOrder.IsHedgeMatchColumn] = value;
                }
            }
            
            public bool IsInstitutionMatch
            {
                get
                {
                    return ((bool)(this[this.tableWorkingOrder.IsInstitutionMatchColumn]));
                }
                set
                {
                    this[this.tableWorkingOrder.IsInstitutionMatchColumn] = value;
                }
            }
            
            public decimal LimitPrice
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkingOrder.LimitPriceColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkingOrder.LimitPriceColumn] = value;
                }
            }
            
            public decimal MaximumVolatility
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkingOrder.MaximumVolatilityColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkingOrder.MaximumVolatilityColumn] = value;
                }
            }
            
            public System.DateTime ModifiedTime
            {
                get
                {
                    return ((System.DateTime)(this[this.tableWorkingOrder.ModifiedTimeColumn]));
                }
                set
                {
                    this[this.tableWorkingOrder.ModifiedTimeColumn] = value;
                }
            }
            
            public int ModifiedUserId
            {
                get
                {
                    return ((int)(this[this.tableWorkingOrder.ModifiedUserIdColumn]));
                }
                set
                {
                    this[this.tableWorkingOrder.ModifiedUserIdColumn] = value;
                }
            }
            
            public int NewsFreeTime
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableWorkingOrder.NewsFreeTimeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkingOrder.NewsFreeTimeColumn] = value;
                }
            }
            
            public int OrderTypeCode
            {
                get
                {
                    return ((int)(this[this.tableWorkingOrder.OrderTypeCodeColumn]));
                }
                set
                {
                    this[this.tableWorkingOrder.OrderTypeCodeColumn] = value;
                }
            }
            
            public int PriceTypeCode
            {
                get
                {
                    return ((int)(this[this.tableWorkingOrder.PriceTypeCodeColumn]));
                }
                set
                {
                    this[this.tableWorkingOrder.PriceTypeCodeColumn] = value;
                }
            }
            
            public int SecurityId
            {
                get
                {
                    return ((int)(this[this.tableWorkingOrder.SecurityIdColumn]));
                }
                set
                {
                    this[this.tableWorkingOrder.SecurityIdColumn] = value;
                }
            }
            
            public int SettlementId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableWorkingOrder.SettlementIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkingOrder.SettlementIdColumn] = value;
                }
            }
            
            public System.DateTime StartTime
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(this[this.tableWorkingOrder.StartTimeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkingOrder.StartTimeColumn] = value;
                }
            }
            
            public int StatusCode
            {
                get
                {
                    return ((int)(this[this.tableWorkingOrder.StatusCodeColumn]));
                }
                set
                {
                    this[this.tableWorkingOrder.StatusCodeColumn] = value;
                }
            }
            
            public decimal StopPrice
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkingOrder.StopPriceColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkingOrder.StopPriceColumn] = value;
                }
            }
            
            public System.DateTime StopTime
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(this[this.tableWorkingOrder.StopTimeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkingOrder.StopTimeColumn] = value;
                }
            }
            
            public int SubmissionTypeCode
            {
                get
                {
                    return ((int)(this[this.tableWorkingOrder.SubmissionTypeCodeColumn]));
                }
                set
                {
                    this[this.tableWorkingOrder.SubmissionTypeCodeColumn] = value;
                }
            }
            
            public decimal SubmittedQuantity
            {
                get
                {
                    return ((decimal)(this[this.tableWorkingOrder.SubmittedQuantityColumn]));
                }
                set
                {
                    this[this.tableWorkingOrder.SubmittedQuantityColumn] = value;
                }
            }
            
            public System.DateTime SubmittedTime
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(this[this.tableWorkingOrder.SubmittedTimeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkingOrder.SubmittedTimeColumn] = value;
                }
            }
            
            public int TimeInForceCode
            {
                get
                {
                    return ((int)(this[this.tableWorkingOrder.TimeInForceCodeColumn]));
                }
                set
                {
                    this[this.tableWorkingOrder.TimeInForceCodeColumn] = value;
                }
            }
            
            public int TimerId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableWorkingOrder.TimerIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkingOrder.TimerIdColumn] = value;
                }
            }
            
            public System.DateTime UploadedTime
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(this[this.tableWorkingOrder.UploadedTimeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkingOrder.UploadedTimeColumn] = value;
                }
            }
            
            public int WorkingOrderId
            {
                get
                {
                    return ((int)(this[this.tableWorkingOrder.WorkingOrderIdColumn]));
                }
                set
                {
                    this[this.tableWorkingOrder.WorkingOrderIdColumn] = value;
                }
            }
            
            public BlotterRow BlotterRow
            {
                get
                {
                    if ((DataSetMarket.lockBlotter.IsReaderLockHeld || DataSetMarket.lockBlotter.IsWriterLockHeld))
                    {
                        return ((BlotterRow)(this.GetParentRow(this.Table.ParentRelations["BlotterWorkingOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Blotter"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["BlotterWorkingOrder"]);
                }
            }
            
            public DestinationRow DestinationRow
            {
                get
                {
                    if ((DataSetMarket.lockDestination.IsReaderLockHeld || DataSetMarket.lockDestination.IsWriterLockHeld))
                    {
                        return ((DestinationRow)(this.GetParentRow(this.Table.ParentRelations["DestinationWorkingOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Destination"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["DestinationWorkingOrder"]);
                }
            }
            
            public OrderTypeRow OrderTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockOrderType.IsReaderLockHeld || DataSetMarket.lockOrderType.IsWriterLockHeld))
                    {
                        return ((OrderTypeRow)(this.GetParentRow(this.Table.ParentRelations["OrderTypeWorkingOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "OrderType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["OrderTypeWorkingOrder"]);
                }
            }
            
            public PriceTypeRow PriceTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockPriceType.IsReaderLockHeld || DataSetMarket.lockPriceType.IsWriterLockHeld))
                    {
                        return ((PriceTypeRow)(this.GetParentRow(this.Table.ParentRelations["PriceTypeWorkingOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "PriceType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["PriceTypeWorkingOrder"]);
                }
            }
            
            public PriceRow PriceRow
            {
                get
                {
                    if ((DataSetMarket.lockPrice.IsReaderLockHeld || DataSetMarket.lockPrice.IsWriterLockHeld))
                    {
                        return ((PriceRow)(this.GetParentRow(this.Table.ParentRelations["PriceWorkingOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Price"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["PriceWorkingOrder"]);
                }
            }
            
            public SecurityRow SecurityRowBySecurityWorkingOrderSecurityId
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["SecurityWorkingOrderSecurityId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["SecurityWorkingOrderSecurityId"]);
                }
            }
            
            public SecurityRow SecurityRowBySecurityWorkingOrderSettlementId
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["SecurityWorkingOrderSettlementId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["SecurityWorkingOrderSettlementId"]);
                }
            }
            
            public StatusRow StatusRow
            {
                get
                {
                    if ((DataSetMarket.lockStatus.IsReaderLockHeld || DataSetMarket.lockStatus.IsWriterLockHeld))
                    {
                        return ((StatusRow)(this.GetParentRow(this.Table.ParentRelations["StatusWorkingOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Status"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["StatusWorkingOrder"]);
                }
            }
            
            public SubmissionTypeRow SubmissionTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockSubmissionType.IsReaderLockHeld || DataSetMarket.lockSubmissionType.IsWriterLockHeld))
                    {
                        return ((SubmissionTypeRow)(this.GetParentRow(this.Table.ParentRelations["SubmissionTypeWorkingOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "SubmissionType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["SubmissionTypeWorkingOrder"]);
                }
            }
            
            public TimeInForceRow TimeInForceRow
            {
                get
                {
                    if ((DataSetMarket.lockTimeInForce.IsReaderLockHeld || DataSetMarket.lockTimeInForce.IsWriterLockHeld))
                    {
                        return ((TimeInForceRow)(this.GetParentRow(this.Table.ParentRelations["TimeInForceWorkingOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "TimeInForce"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["TimeInForceWorkingOrder"]);
                }
            }
            
            public TimerRow TimerRow
            {
                get
                {
                    if ((DataSetMarket.lockTimer.IsReaderLockHeld || DataSetMarket.lockTimer.IsWriterLockHeld))
                    {
                        return ((TimerRow)(this.GetParentRow(this.Table.ParentRelations["TimerWorkingOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Timer"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["TimerWorkingOrder"]);
                }
            }
            
            public UserRow UserRowByUserWorkingOrderCreatedUserId
            {
                get
                {
                    if ((DataSetMarket.lockUser.IsReaderLockHeld || DataSetMarket.lockUser.IsWriterLockHeld))
                    {
                        return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["UserWorkingOrderCreatedUserId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "User"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["UserWorkingOrderCreatedUserId"]);
                }
            }
            
            public UserRow UserRowByUserWorkingOrderModifiedUserId
            {
                get
                {
                    if ((DataSetMarket.lockUser.IsReaderLockHeld || DataSetMarket.lockUser.IsWriterLockHeld))
                    {
                        return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["UserWorkingOrderModifiedUserId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "User"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["UserWorkingOrderModifiedUserId"]);
                }
            }
            
            public bool IsAutomaticQuantityNull()
            {
                return this.IsNull(this.tableWorkingOrder.AutomaticQuantityColumn);
            }
            
            public void SetAutomaticQuantityNull()
            {
                this[this.tableWorkingOrder.AutomaticQuantityColumn] = System.Convert.DBNull;
            }
            
            public bool IsDestinationIdNull()
            {
                return this.IsNull(this.tableWorkingOrder.DestinationIdColumn);
            }
            
            public void SetDestinationIdNull()
            {
                this[this.tableWorkingOrder.DestinationIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableWorkingOrder.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableWorkingOrder.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsLimitPriceNull()
            {
                return this.IsNull(this.tableWorkingOrder.LimitPriceColumn);
            }
            
            public void SetLimitPriceNull()
            {
                this[this.tableWorkingOrder.LimitPriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsMaximumVolatilityNull()
            {
                return this.IsNull(this.tableWorkingOrder.MaximumVolatilityColumn);
            }
            
            public void SetMaximumVolatilityNull()
            {
                this[this.tableWorkingOrder.MaximumVolatilityColumn] = System.Convert.DBNull;
            }
            
            public bool IsNewsFreeTimeNull()
            {
                return this.IsNull(this.tableWorkingOrder.NewsFreeTimeColumn);
            }
            
            public void SetNewsFreeTimeNull()
            {
                this[this.tableWorkingOrder.NewsFreeTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsSettlementIdNull()
            {
                return this.IsNull(this.tableWorkingOrder.SettlementIdColumn);
            }
            
            public void SetSettlementIdNull()
            {
                this[this.tableWorkingOrder.SettlementIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsStartTimeNull()
            {
                return this.IsNull(this.tableWorkingOrder.StartTimeColumn);
            }
            
            public void SetStartTimeNull()
            {
                this[this.tableWorkingOrder.StartTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsStopPriceNull()
            {
                return this.IsNull(this.tableWorkingOrder.StopPriceColumn);
            }
            
            public void SetStopPriceNull()
            {
                this[this.tableWorkingOrder.StopPriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsStopTimeNull()
            {
                return this.IsNull(this.tableWorkingOrder.StopTimeColumn);
            }
            
            public void SetStopTimeNull()
            {
                this[this.tableWorkingOrder.StopTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsSubmittedTimeNull()
            {
                return this.IsNull(this.tableWorkingOrder.SubmittedTimeColumn);
            }
            
            public void SetSubmittedTimeNull()
            {
                this[this.tableWorkingOrder.SubmittedTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsTimerIdNull()
            {
                return this.IsNull(this.tableWorkingOrder.TimerIdColumn);
            }
            
            public void SetTimerIdNull()
            {
                this[this.tableWorkingOrder.TimerIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsUploadedTimeNull()
            {
                return this.IsNull(this.tableWorkingOrder.UploadedTimeColumn);
            }
            
            public void SetUploadedTimeNull()
            {
                this[this.tableWorkingOrder.UploadedTimeColumn] = System.Convert.DBNull;
            }
            
            public AllocationRow[] GetAllocationRows()
            {
                return ((AllocationRow[])(this.GetChildRows(this.Table.ChildRelations["WorkingOrderAllocation"])));
            }
            
            public DestinationOrderRow[] GetDestinationOrderRows()
            {
                return ((DestinationOrderRow[])(this.GetChildRows(this.Table.ChildRelations["WorkingOrderDestinationOrder"])));
            }
            
            public MatchRow[] GetMatchRows()
            {
                return ((MatchRow[])(this.GetChildRows(this.Table.ChildRelations["WorkingOrderMatch"])));
            }
            
            public SourceOrderRow[] GetSourceOrderRows()
            {
                return ((SourceOrderRow[])(this.GetChildRows(this.Table.ChildRelations["WorkingOrderSourceOrder"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WorkingOrderRowChangeEvent : EventArgs
        {
            
            private WorkingOrderRow eventRow;
            
            private DataRowAction eventAction;
            
            public WorkingOrderRowChangeEvent(WorkingOrderRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public WorkingOrderRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
    }
}
