//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.288
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Shadows.Quasar.Viewers.Appraisal {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class AddressMapSet : DataSet {
        
        private ColumnIndexMapDataTable tableColumnIndexMap;
        
        private ColumnIdMapDataTable tableColumnIdMap;
        
        private SectorMapDataTable tableSectorMap;
        
        private PositionMapDataTable tablePositionMap;
        
        private SecurityMapDataTable tableSecurityMap;
        
        private LastPriceAddressDataTable tableLastPriceAddress;
        
        private DataRelation relationPriceMapAddress;
        
        public AddressMapSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected AddressMapSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ColumnIndexMap"] != null)) {
                    this.Tables.Add(new ColumnIndexMapDataTable(ds.Tables["ColumnIndexMap"]));
                }
                if ((ds.Tables["ColumnIdMap"] != null)) {
                    this.Tables.Add(new ColumnIdMapDataTable(ds.Tables["ColumnIdMap"]));
                }
                if ((ds.Tables["SectorMap"] != null)) {
                    this.Tables.Add(new SectorMapDataTable(ds.Tables["SectorMap"]));
                }
                if ((ds.Tables["PositionMap"] != null)) {
                    this.Tables.Add(new PositionMapDataTable(ds.Tables["PositionMap"]));
                }
                if ((ds.Tables["SecurityMap"] != null)) {
                    this.Tables.Add(new SecurityMapDataTable(ds.Tables["SecurityMap"]));
                }
                if ((ds.Tables["LastPriceAddress"] != null)) {
                    this.Tables.Add(new LastPriceAddressDataTable(ds.Tables["LastPriceAddress"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ColumnIndexMapDataTable ColumnIndexMap {
            get {
                return this.tableColumnIndexMap;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ColumnIdMapDataTable ColumnIdMap {
            get {
                return this.tableColumnIdMap;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SectorMapDataTable SectorMap {
            get {
                return this.tableSectorMap;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PositionMapDataTable PositionMap {
            get {
                return this.tablePositionMap;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SecurityMapDataTable SecurityMap {
            get {
                return this.tableSecurityMap;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LastPriceAddressDataTable LastPriceAddress {
            get {
                return this.tableLastPriceAddress;
            }
        }
        
        public override DataSet Clone() {
            AddressMapSet cln = ((AddressMapSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["ColumnIndexMap"] != null)) {
                this.Tables.Add(new ColumnIndexMapDataTable(ds.Tables["ColumnIndexMap"]));
            }
            if ((ds.Tables["ColumnIdMap"] != null)) {
                this.Tables.Add(new ColumnIdMapDataTable(ds.Tables["ColumnIdMap"]));
            }
            if ((ds.Tables["SectorMap"] != null)) {
                this.Tables.Add(new SectorMapDataTable(ds.Tables["SectorMap"]));
            }
            if ((ds.Tables["PositionMap"] != null)) {
                this.Tables.Add(new PositionMapDataTable(ds.Tables["PositionMap"]));
            }
            if ((ds.Tables["SecurityMap"] != null)) {
                this.Tables.Add(new SecurityMapDataTable(ds.Tables["SecurityMap"]));
            }
            if ((ds.Tables["LastPriceAddress"] != null)) {
                this.Tables.Add(new LastPriceAddressDataTable(ds.Tables["LastPriceAddress"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableColumnIndexMap = ((ColumnIndexMapDataTable)(this.Tables["ColumnIndexMap"]));
            if ((this.tableColumnIndexMap != null)) {
                this.tableColumnIndexMap.InitVars();
            }
            this.tableColumnIdMap = ((ColumnIdMapDataTable)(this.Tables["ColumnIdMap"]));
            if ((this.tableColumnIdMap != null)) {
                this.tableColumnIdMap.InitVars();
            }
            this.tableSectorMap = ((SectorMapDataTable)(this.Tables["SectorMap"]));
            if ((this.tableSectorMap != null)) {
                this.tableSectorMap.InitVars();
            }
            this.tablePositionMap = ((PositionMapDataTable)(this.Tables["PositionMap"]));
            if ((this.tablePositionMap != null)) {
                this.tablePositionMap.InitVars();
            }
            this.tableSecurityMap = ((SecurityMapDataTable)(this.Tables["SecurityMap"]));
            if ((this.tableSecurityMap != null)) {
                this.tableSecurityMap.InitVars();
            }
            this.tableLastPriceAddress = ((LastPriceAddressDataTable)(this.Tables["LastPriceAddress"]));
            if ((this.tableLastPriceAddress != null)) {
                this.tableLastPriceAddress.InitVars();
            }
            this.relationPriceMapAddress = this.Relations["PriceMapAddress"];
        }
        
        private void InitClass() {
            this.DataSetName = "AddressMapSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/AddressMapSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableColumnIndexMap = new ColumnIndexMapDataTable();
            this.Tables.Add(this.tableColumnIndexMap);
            this.tableColumnIdMap = new ColumnIdMapDataTable();
            this.Tables.Add(this.tableColumnIdMap);
            this.tableSectorMap = new SectorMapDataTable();
            this.Tables.Add(this.tableSectorMap);
            this.tablePositionMap = new PositionMapDataTable();
            this.Tables.Add(this.tablePositionMap);
            this.tableSecurityMap = new SecurityMapDataTable();
            this.Tables.Add(this.tableSecurityMap);
            this.tableLastPriceAddress = new LastPriceAddressDataTable();
            this.Tables.Add(this.tableLastPriceAddress);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("PriceMapAddress", new DataColumn[] {
                        this.tableSecurityMap.SecurityIdColumn}, new DataColumn[] {
                        this.tableLastPriceAddress.SecurityIdColumn});
            this.tableLastPriceAddress.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            this.relationPriceMapAddress = new DataRelation("PriceMapAddress", new DataColumn[] {
                        this.tableSecurityMap.SecurityIdColumn}, new DataColumn[] {
                        this.tableLastPriceAddress.SecurityIdColumn}, false);
            this.Relations.Add(this.relationPriceMapAddress);
        }
        
        private bool ShouldSerializeColumnIndexMap() {
            return false;
        }
        
        private bool ShouldSerializeColumnIdMap() {
            return false;
        }
        
        private bool ShouldSerializeSectorMap() {
            return false;
        }
        
        private bool ShouldSerializePositionMap() {
            return false;
        }
        
        private bool ShouldSerializeSecurityMap() {
            return false;
        }
        
        private bool ShouldSerializeLastPriceAddress() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ColumnIndexMapRowChangeEventHandler(object sender, ColumnIndexMapRowChangeEvent e);
        
        public delegate void ColumnIdMapRowChangeEventHandler(object sender, ColumnIdMapRowChangeEvent e);
        
        public delegate void SectorMapRowChangeEventHandler(object sender, SectorMapRowChangeEvent e);
        
        public delegate void PositionMapRowChangeEventHandler(object sender, PositionMapRowChangeEvent e);
        
        public delegate void SecurityMapRowChangeEventHandler(object sender, SecurityMapRowChangeEvent e);
        
        public delegate void LastPriceAddressRowChangeEventHandler(object sender, LastPriceAddressRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ColumnIndexMapDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnColumnId;
            
            private DataColumn columnColumnIndex;
            
            internal ColumnIndexMapDataTable() : 
                    base("ColumnIndexMap") {
                this.InitClass();
            }
            
            internal ColumnIndexMapDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ColumnIdColumn {
                get {
                    return this.columnColumnId;
                }
            }
            
            internal DataColumn ColumnIndexColumn {
                get {
                    return this.columnColumnIndex;
                }
            }
            
            public ColumnIndexMapRow this[int index] {
                get {
                    return ((ColumnIndexMapRow)(this.Rows[index]));
                }
            }
            
            public event ColumnIndexMapRowChangeEventHandler ColumnIndexMapRowChanged;
            
            public event ColumnIndexMapRowChangeEventHandler ColumnIndexMapRowChanging;
            
            public event ColumnIndexMapRowChangeEventHandler ColumnIndexMapRowDeleted;
            
            public event ColumnIndexMapRowChangeEventHandler ColumnIndexMapRowDeleting;
            
            public void AddColumnIndexMapRow(ColumnIndexMapRow row) {
                this.Rows.Add(row);
            }
            
            public ColumnIndexMapRow AddColumnIndexMapRow(int ColumnId, int ColumnIndex) {
                ColumnIndexMapRow rowColumnIndexMapRow = ((ColumnIndexMapRow)(this.NewRow()));
                rowColumnIndexMapRow.ItemArray = new object[] {
                        ColumnId,
                        ColumnIndex};
                this.Rows.Add(rowColumnIndexMapRow);
                return rowColumnIndexMapRow;
            }
            
            public ColumnIndexMapRow FindByColumnId(int ColumnId) {
                return ((ColumnIndexMapRow)(this.Rows.Find(new object[] {
                            ColumnId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ColumnIndexMapDataTable cln = ((ColumnIndexMapDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ColumnIndexMapDataTable();
            }
            
            internal void InitVars() {
                this.columnColumnId = this.Columns["ColumnId"];
                this.columnColumnIndex = this.Columns["ColumnIndex"];
            }
            
            private void InitClass() {
                this.columnColumnId = new DataColumn("ColumnId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnColumnId);
                this.columnColumnIndex = new DataColumn("ColumnIndex", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnColumnIndex);
                this.Constraints.Add(new UniqueConstraint("ColumnIndexMapKey", new DataColumn[] {
                                this.columnColumnId}, true));
                this.columnColumnId.AllowDBNull = false;
                this.columnColumnId.Unique = true;
                this.columnColumnIndex.AllowDBNull = false;
            }
            
            public ColumnIndexMapRow NewColumnIndexMapRow() {
                return ((ColumnIndexMapRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ColumnIndexMapRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ColumnIndexMapRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ColumnIndexMapRowChanged != null)) {
                    this.ColumnIndexMapRowChanged(this, new ColumnIndexMapRowChangeEvent(((ColumnIndexMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ColumnIndexMapRowChanging != null)) {
                    this.ColumnIndexMapRowChanging(this, new ColumnIndexMapRowChangeEvent(((ColumnIndexMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ColumnIndexMapRowDeleted != null)) {
                    this.ColumnIndexMapRowDeleted(this, new ColumnIndexMapRowChangeEvent(((ColumnIndexMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ColumnIndexMapRowDeleting != null)) {
                    this.ColumnIndexMapRowDeleting(this, new ColumnIndexMapRowChangeEvent(((ColumnIndexMapRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveColumnIndexMapRow(ColumnIndexMapRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ColumnIndexMapRow : DataRow {
            
            private ColumnIndexMapDataTable tableColumnIndexMap;
            
            internal ColumnIndexMapRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableColumnIndexMap = ((ColumnIndexMapDataTable)(this.Table));
            }
            
            public int ColumnId {
                get {
                    return ((int)(this[this.tableColumnIndexMap.ColumnIdColumn]));
                }
                set {
                    this[this.tableColumnIndexMap.ColumnIdColumn] = value;
                }
            }
            
            public int ColumnIndex {
                get {
                    return ((int)(this[this.tableColumnIndexMap.ColumnIndexColumn]));
                }
                set {
                    this[this.tableColumnIndexMap.ColumnIndexColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ColumnIndexMapRowChangeEvent : EventArgs {
            
            private ColumnIndexMapRow eventRow;
            
            private DataRowAction eventAction;
            
            public ColumnIndexMapRowChangeEvent(ColumnIndexMapRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ColumnIndexMapRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ColumnIdMapDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnColumnIndex;
            
            private DataColumn columnColumnId;
            
            internal ColumnIdMapDataTable() : 
                    base("ColumnIdMap") {
                this.InitClass();
            }
            
            internal ColumnIdMapDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ColumnIndexColumn {
                get {
                    return this.columnColumnIndex;
                }
            }
            
            internal DataColumn ColumnIdColumn {
                get {
                    return this.columnColumnId;
                }
            }
            
            public ColumnIdMapRow this[int index] {
                get {
                    return ((ColumnIdMapRow)(this.Rows[index]));
                }
            }
            
            public event ColumnIdMapRowChangeEventHandler ColumnIdMapRowChanged;
            
            public event ColumnIdMapRowChangeEventHandler ColumnIdMapRowChanging;
            
            public event ColumnIdMapRowChangeEventHandler ColumnIdMapRowDeleted;
            
            public event ColumnIdMapRowChangeEventHandler ColumnIdMapRowDeleting;
            
            public void AddColumnIdMapRow(ColumnIdMapRow row) {
                this.Rows.Add(row);
            }
            
            public ColumnIdMapRow AddColumnIdMapRow(int ColumnIndex, int ColumnId) {
                ColumnIdMapRow rowColumnIdMapRow = ((ColumnIdMapRow)(this.NewRow()));
                rowColumnIdMapRow.ItemArray = new object[] {
                        ColumnIndex,
                        ColumnId};
                this.Rows.Add(rowColumnIdMapRow);
                return rowColumnIdMapRow;
            }
            
            public ColumnIdMapRow FindByColumnIndex(int ColumnIndex) {
                return ((ColumnIdMapRow)(this.Rows.Find(new object[] {
                            ColumnIndex})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ColumnIdMapDataTable cln = ((ColumnIdMapDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ColumnIdMapDataTable();
            }
            
            internal void InitVars() {
                this.columnColumnIndex = this.Columns["ColumnIndex"];
                this.columnColumnId = this.Columns["ColumnId"];
            }
            
            private void InitClass() {
                this.columnColumnIndex = new DataColumn("ColumnIndex", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnColumnIndex);
                this.columnColumnId = new DataColumn("ColumnId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnColumnId);
                this.Constraints.Add(new UniqueConstraint("ColumnIdMapKey", new DataColumn[] {
                                this.columnColumnIndex}, true));
                this.columnColumnIndex.AllowDBNull = false;
                this.columnColumnIndex.Unique = true;
                this.columnColumnId.AllowDBNull = false;
            }
            
            public ColumnIdMapRow NewColumnIdMapRow() {
                return ((ColumnIdMapRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ColumnIdMapRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ColumnIdMapRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ColumnIdMapRowChanged != null)) {
                    this.ColumnIdMapRowChanged(this, new ColumnIdMapRowChangeEvent(((ColumnIdMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ColumnIdMapRowChanging != null)) {
                    this.ColumnIdMapRowChanging(this, new ColumnIdMapRowChangeEvent(((ColumnIdMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ColumnIdMapRowDeleted != null)) {
                    this.ColumnIdMapRowDeleted(this, new ColumnIdMapRowChangeEvent(((ColumnIdMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ColumnIdMapRowDeleting != null)) {
                    this.ColumnIdMapRowDeleting(this, new ColumnIdMapRowChangeEvent(((ColumnIdMapRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveColumnIdMapRow(ColumnIdMapRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ColumnIdMapRow : DataRow {
            
            private ColumnIdMapDataTable tableColumnIdMap;
            
            internal ColumnIdMapRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableColumnIdMap = ((ColumnIdMapDataTable)(this.Table));
            }
            
            public int ColumnIndex {
                get {
                    return ((int)(this[this.tableColumnIdMap.ColumnIndexColumn]));
                }
                set {
                    this[this.tableColumnIdMap.ColumnIndexColumn] = value;
                }
            }
            
            public int ColumnId {
                get {
                    return ((int)(this[this.tableColumnIdMap.ColumnIdColumn]));
                }
                set {
                    this[this.tableColumnIdMap.ColumnIdColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ColumnIdMapRowChangeEvent : EventArgs {
            
            private ColumnIdMapRow eventRow;
            
            private DataRowAction eventAction;
            
            public ColumnIdMapRowChangeEvent(ColumnIdMapRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ColumnIdMapRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SectorMapDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSectorId;
            
            private DataColumn columnColumnId;
            
            private DataColumn columnDocumentVersion;
            
            private DataColumn columnRowIndex;
            
            private DataColumn columnColumnIndex;
            
            internal SectorMapDataTable() : 
                    base("SectorMap") {
                this.InitClass();
            }
            
            internal SectorMapDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn SectorIdColumn {
                get {
                    return this.columnSectorId;
                }
            }
            
            internal DataColumn ColumnIdColumn {
                get {
                    return this.columnColumnId;
                }
            }
            
            internal DataColumn DocumentVersionColumn {
                get {
                    return this.columnDocumentVersion;
                }
            }
            
            internal DataColumn RowIndexColumn {
                get {
                    return this.columnRowIndex;
                }
            }
            
            internal DataColumn ColumnIndexColumn {
                get {
                    return this.columnColumnIndex;
                }
            }
            
            public SectorMapRow this[int index] {
                get {
                    return ((SectorMapRow)(this.Rows[index]));
                }
            }
            
            public event SectorMapRowChangeEventHandler SectorMapRowChanged;
            
            public event SectorMapRowChangeEventHandler SectorMapRowChanging;
            
            public event SectorMapRowChangeEventHandler SectorMapRowDeleted;
            
            public event SectorMapRowChangeEventHandler SectorMapRowDeleting;
            
            public void AddSectorMapRow(SectorMapRow row) {
                this.Rows.Add(row);
            }
            
            public SectorMapRow AddSectorMapRow(int SectorId, int ColumnId, int DocumentVersion, int RowIndex, int ColumnIndex) {
                SectorMapRow rowSectorMapRow = ((SectorMapRow)(this.NewRow()));
                rowSectorMapRow.ItemArray = new object[] {
                        SectorId,
                        ColumnId,
                        DocumentVersion,
                        RowIndex,
                        ColumnIndex};
                this.Rows.Add(rowSectorMapRow);
                return rowSectorMapRow;
            }
            
            public SectorMapRow FindBySectorIdColumnId(int SectorId, int ColumnId) {
                return ((SectorMapRow)(this.Rows.Find(new object[] {
                            SectorId,
                            ColumnId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SectorMapDataTable cln = ((SectorMapDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SectorMapDataTable();
            }
            
            internal void InitVars() {
                this.columnSectorId = this.Columns["SectorId"];
                this.columnColumnId = this.Columns["ColumnId"];
                this.columnDocumentVersion = this.Columns["DocumentVersion"];
                this.columnRowIndex = this.Columns["RowIndex"];
                this.columnColumnIndex = this.Columns["ColumnIndex"];
            }
            
            private void InitClass() {
                this.columnSectorId = new DataColumn("SectorId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSectorId);
                this.columnColumnId = new DataColumn("ColumnId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnColumnId);
                this.columnDocumentVersion = new DataColumn("DocumentVersion", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDocumentVersion);
                this.columnRowIndex = new DataColumn("RowIndex", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowIndex);
                this.columnColumnIndex = new DataColumn("ColumnIndex", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnColumnIndex);
                this.Constraints.Add(new UniqueConstraint("SectorMapKey", new DataColumn[] {
                                this.columnSectorId,
                                this.columnColumnId}, true));
                this.columnSectorId.AllowDBNull = false;
                this.columnColumnId.AllowDBNull = false;
                this.columnDocumentVersion.AllowDBNull = false;
                this.columnRowIndex.AllowDBNull = false;
                this.columnColumnIndex.AllowDBNull = false;
            }
            
            public SectorMapRow NewSectorMapRow() {
                return ((SectorMapRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SectorMapRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SectorMapRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SectorMapRowChanged != null)) {
                    this.SectorMapRowChanged(this, new SectorMapRowChangeEvent(((SectorMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SectorMapRowChanging != null)) {
                    this.SectorMapRowChanging(this, new SectorMapRowChangeEvent(((SectorMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SectorMapRowDeleted != null)) {
                    this.SectorMapRowDeleted(this, new SectorMapRowChangeEvent(((SectorMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SectorMapRowDeleting != null)) {
                    this.SectorMapRowDeleting(this, new SectorMapRowChangeEvent(((SectorMapRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSectorMapRow(SectorMapRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SectorMapRow : DataRow {
            
            private SectorMapDataTable tableSectorMap;
            
            internal SectorMapRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSectorMap = ((SectorMapDataTable)(this.Table));
            }
            
            public int SectorId {
                get {
                    return ((int)(this[this.tableSectorMap.SectorIdColumn]));
                }
                set {
                    this[this.tableSectorMap.SectorIdColumn] = value;
                }
            }
            
            public int ColumnId {
                get {
                    return ((int)(this[this.tableSectorMap.ColumnIdColumn]));
                }
                set {
                    this[this.tableSectorMap.ColumnIdColumn] = value;
                }
            }
            
            public int DocumentVersion {
                get {
                    return ((int)(this[this.tableSectorMap.DocumentVersionColumn]));
                }
                set {
                    this[this.tableSectorMap.DocumentVersionColumn] = value;
                }
            }
            
            public int RowIndex {
                get {
                    return ((int)(this[this.tableSectorMap.RowIndexColumn]));
                }
                set {
                    this[this.tableSectorMap.RowIndexColumn] = value;
                }
            }
            
            public int ColumnIndex {
                get {
                    return ((int)(this[this.tableSectorMap.ColumnIndexColumn]));
                }
                set {
                    this[this.tableSectorMap.ColumnIndexColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SectorMapRowChangeEvent : EventArgs {
            
            private SectorMapRow eventRow;
            
            private DataRowAction eventAction;
            
            public SectorMapRowChangeEvent(SectorMapRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SectorMapRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PositionMapDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSecurityId;
            
            private DataColumn columnPositionTypeCode;
            
            private DataColumn columnColumnId;
            
            private DataColumn columnDocumentVersion;
            
            private DataColumn columnRowIndex;
            
            private DataColumn columnColumnIndex;
            
            internal PositionMapDataTable() : 
                    base("PositionMap") {
                this.InitClass();
            }
            
            internal PositionMapDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn SecurityIdColumn {
                get {
                    return this.columnSecurityId;
                }
            }
            
            internal DataColumn PositionTypeCodeColumn {
                get {
                    return this.columnPositionTypeCode;
                }
            }
            
            internal DataColumn ColumnIdColumn {
                get {
                    return this.columnColumnId;
                }
            }
            
            internal DataColumn DocumentVersionColumn {
                get {
                    return this.columnDocumentVersion;
                }
            }
            
            internal DataColumn RowIndexColumn {
                get {
                    return this.columnRowIndex;
                }
            }
            
            internal DataColumn ColumnIndexColumn {
                get {
                    return this.columnColumnIndex;
                }
            }
            
            public PositionMapRow this[int index] {
                get {
                    return ((PositionMapRow)(this.Rows[index]));
                }
            }
            
            public event PositionMapRowChangeEventHandler PositionMapRowChanged;
            
            public event PositionMapRowChangeEventHandler PositionMapRowChanging;
            
            public event PositionMapRowChangeEventHandler PositionMapRowDeleted;
            
            public event PositionMapRowChangeEventHandler PositionMapRowDeleting;
            
            public void AddPositionMapRow(PositionMapRow row) {
                this.Rows.Add(row);
            }
            
            public PositionMapRow AddPositionMapRow(int SecurityId, int PositionTypeCode, int ColumnId, int DocumentVersion, int RowIndex, int ColumnIndex) {
                PositionMapRow rowPositionMapRow = ((PositionMapRow)(this.NewRow()));
                rowPositionMapRow.ItemArray = new object[] {
                        SecurityId,
                        PositionTypeCode,
                        ColumnId,
                        DocumentVersion,
                        RowIndex,
                        ColumnIndex};
                this.Rows.Add(rowPositionMapRow);
                return rowPositionMapRow;
            }
            
            public PositionMapRow FindBySecurityIdPositionTypeCodeColumnId(int SecurityId, int PositionTypeCode, int ColumnId) {
                return ((PositionMapRow)(this.Rows.Find(new object[] {
                            SecurityId,
                            PositionTypeCode,
                            ColumnId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PositionMapDataTable cln = ((PositionMapDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PositionMapDataTable();
            }
            
            internal void InitVars() {
                this.columnSecurityId = this.Columns["SecurityId"];
                this.columnPositionTypeCode = this.Columns["PositionTypeCode"];
                this.columnColumnId = this.Columns["ColumnId"];
                this.columnDocumentVersion = this.Columns["DocumentVersion"];
                this.columnRowIndex = this.Columns["RowIndex"];
                this.columnColumnIndex = this.Columns["ColumnIndex"];
            }
            
            private void InitClass() {
                this.columnSecurityId = new DataColumn("SecurityId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityId);
                this.columnPositionTypeCode = new DataColumn("PositionTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPositionTypeCode);
                this.columnColumnId = new DataColumn("ColumnId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnColumnId);
                this.columnDocumentVersion = new DataColumn("DocumentVersion", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDocumentVersion);
                this.columnRowIndex = new DataColumn("RowIndex", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowIndex);
                this.columnColumnIndex = new DataColumn("ColumnIndex", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnColumnIndex);
                this.Constraints.Add(new UniqueConstraint("PositionMapKey", new DataColumn[] {
                                this.columnSecurityId,
                                this.columnPositionTypeCode,
                                this.columnColumnId}, true));
                this.columnSecurityId.AllowDBNull = false;
                this.columnPositionTypeCode.AllowDBNull = false;
                this.columnColumnId.AllowDBNull = false;
                this.columnDocumentVersion.AllowDBNull = false;
                this.columnRowIndex.AllowDBNull = false;
                this.columnColumnIndex.AllowDBNull = false;
            }
            
            public PositionMapRow NewPositionMapRow() {
                return ((PositionMapRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PositionMapRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PositionMapRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PositionMapRowChanged != null)) {
                    this.PositionMapRowChanged(this, new PositionMapRowChangeEvent(((PositionMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PositionMapRowChanging != null)) {
                    this.PositionMapRowChanging(this, new PositionMapRowChangeEvent(((PositionMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PositionMapRowDeleted != null)) {
                    this.PositionMapRowDeleted(this, new PositionMapRowChangeEvent(((PositionMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PositionMapRowDeleting != null)) {
                    this.PositionMapRowDeleting(this, new PositionMapRowChangeEvent(((PositionMapRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePositionMapRow(PositionMapRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PositionMapRow : DataRow {
            
            private PositionMapDataTable tablePositionMap;
            
            internal PositionMapRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePositionMap = ((PositionMapDataTable)(this.Table));
            }
            
            public int SecurityId {
                get {
                    return ((int)(this[this.tablePositionMap.SecurityIdColumn]));
                }
                set {
                    this[this.tablePositionMap.SecurityIdColumn] = value;
                }
            }
            
            public int PositionTypeCode {
                get {
                    return ((int)(this[this.tablePositionMap.PositionTypeCodeColumn]));
                }
                set {
                    this[this.tablePositionMap.PositionTypeCodeColumn] = value;
                }
            }
            
            public int ColumnId {
                get {
                    return ((int)(this[this.tablePositionMap.ColumnIdColumn]));
                }
                set {
                    this[this.tablePositionMap.ColumnIdColumn] = value;
                }
            }
            
            public int DocumentVersion {
                get {
                    return ((int)(this[this.tablePositionMap.DocumentVersionColumn]));
                }
                set {
                    this[this.tablePositionMap.DocumentVersionColumn] = value;
                }
            }
            
            public int RowIndex {
                get {
                    return ((int)(this[this.tablePositionMap.RowIndexColumn]));
                }
                set {
                    this[this.tablePositionMap.RowIndexColumn] = value;
                }
            }
            
            public int ColumnIndex {
                get {
                    return ((int)(this[this.tablePositionMap.ColumnIndexColumn]));
                }
                set {
                    this[this.tablePositionMap.ColumnIndexColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PositionMapRowChangeEvent : EventArgs {
            
            private PositionMapRow eventRow;
            
            private DataRowAction eventAction;
            
            public PositionMapRowChangeEvent(PositionMapRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PositionMapRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SecurityMapDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSecurityId;
            
            internal SecurityMapDataTable() : 
                    base("SecurityMap") {
                this.InitClass();
            }
            
            internal SecurityMapDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn SecurityIdColumn {
                get {
                    return this.columnSecurityId;
                }
            }
            
            public SecurityMapRow this[int index] {
                get {
                    return ((SecurityMapRow)(this.Rows[index]));
                }
            }
            
            public event SecurityMapRowChangeEventHandler SecurityMapRowChanged;
            
            public event SecurityMapRowChangeEventHandler SecurityMapRowChanging;
            
            public event SecurityMapRowChangeEventHandler SecurityMapRowDeleted;
            
            public event SecurityMapRowChangeEventHandler SecurityMapRowDeleting;
            
            public void AddSecurityMapRow(SecurityMapRow row) {
                this.Rows.Add(row);
            }
            
            public SecurityMapRow AddSecurityMapRow(int SecurityId) {
                SecurityMapRow rowSecurityMapRow = ((SecurityMapRow)(this.NewRow()));
                rowSecurityMapRow.ItemArray = new object[] {
                        SecurityId};
                this.Rows.Add(rowSecurityMapRow);
                return rowSecurityMapRow;
            }
            
            public SecurityMapRow FindBySecurityId(int SecurityId) {
                return ((SecurityMapRow)(this.Rows.Find(new object[] {
                            SecurityId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SecurityMapDataTable cln = ((SecurityMapDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SecurityMapDataTable();
            }
            
            internal void InitVars() {
                this.columnSecurityId = this.Columns["SecurityId"];
            }
            
            private void InitClass() {
                this.columnSecurityId = new DataColumn("SecurityId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityId);
                this.Constraints.Add(new UniqueConstraint("PriceMapKey", new DataColumn[] {
                                this.columnSecurityId}, true));
                this.columnSecurityId.AllowDBNull = false;
                this.columnSecurityId.Unique = true;
            }
            
            public SecurityMapRow NewSecurityMapRow() {
                return ((SecurityMapRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SecurityMapRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SecurityMapRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SecurityMapRowChanged != null)) {
                    this.SecurityMapRowChanged(this, new SecurityMapRowChangeEvent(((SecurityMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SecurityMapRowChanging != null)) {
                    this.SecurityMapRowChanging(this, new SecurityMapRowChangeEvent(((SecurityMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SecurityMapRowDeleted != null)) {
                    this.SecurityMapRowDeleted(this, new SecurityMapRowChangeEvent(((SecurityMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SecurityMapRowDeleting != null)) {
                    this.SecurityMapRowDeleting(this, new SecurityMapRowChangeEvent(((SecurityMapRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSecurityMapRow(SecurityMapRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SecurityMapRow : DataRow {
            
            private SecurityMapDataTable tableSecurityMap;
            
            internal SecurityMapRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSecurityMap = ((SecurityMapDataTable)(this.Table));
            }
            
            public int SecurityId {
                get {
                    return ((int)(this[this.tableSecurityMap.SecurityIdColumn]));
                }
                set {
                    this[this.tableSecurityMap.SecurityIdColumn] = value;
                }
            }
            
            public LastPriceAddressRow[] GetLastPriceAddressRows() {
                return ((LastPriceAddressRow[])(this.GetChildRows(this.Table.ChildRelations["PriceMapAddress"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SecurityMapRowChangeEvent : EventArgs {
            
            private SecurityMapRow eventRow;
            
            private DataRowAction eventAction;
            
            public SecurityMapRowChangeEvent(SecurityMapRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SecurityMapRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LastPriceAddressDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSecurityId;
            
            private DataColumn columnDocumentVersion;
            
            private DataColumn columnRowIndex;
            
            private DataColumn columnColumnIndex;
            
            internal LastPriceAddressDataTable() : 
                    base("LastPriceAddress") {
                this.InitClass();
            }
            
            internal LastPriceAddressDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn SecurityIdColumn {
                get {
                    return this.columnSecurityId;
                }
            }
            
            internal DataColumn DocumentVersionColumn {
                get {
                    return this.columnDocumentVersion;
                }
            }
            
            internal DataColumn RowIndexColumn {
                get {
                    return this.columnRowIndex;
                }
            }
            
            internal DataColumn ColumnIndexColumn {
                get {
                    return this.columnColumnIndex;
                }
            }
            
            public LastPriceAddressRow this[int index] {
                get {
                    return ((LastPriceAddressRow)(this.Rows[index]));
                }
            }
            
            public event LastPriceAddressRowChangeEventHandler LastPriceAddressRowChanged;
            
            public event LastPriceAddressRowChangeEventHandler LastPriceAddressRowChanging;
            
            public event LastPriceAddressRowChangeEventHandler LastPriceAddressRowDeleted;
            
            public event LastPriceAddressRowChangeEventHandler LastPriceAddressRowDeleting;
            
            public void AddLastPriceAddressRow(LastPriceAddressRow row) {
                this.Rows.Add(row);
            }
            
            public LastPriceAddressRow AddLastPriceAddressRow(SecurityMapRow parentSecurityMapRowByPriceMapAddress, int DocumentVersion, int RowIndex, int ColumnIndex) {
                LastPriceAddressRow rowLastPriceAddressRow = ((LastPriceAddressRow)(this.NewRow()));
                rowLastPriceAddressRow.ItemArray = new object[] {
                        parentSecurityMapRowByPriceMapAddress[0],
                        DocumentVersion,
                        RowIndex,
                        ColumnIndex};
                this.Rows.Add(rowLastPriceAddressRow);
                return rowLastPriceAddressRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                LastPriceAddressDataTable cln = ((LastPriceAddressDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new LastPriceAddressDataTable();
            }
            
            internal void InitVars() {
                this.columnSecurityId = this.Columns["SecurityId"];
                this.columnDocumentVersion = this.Columns["DocumentVersion"];
                this.columnRowIndex = this.Columns["RowIndex"];
                this.columnColumnIndex = this.Columns["ColumnIndex"];
            }
            
            private void InitClass() {
                this.columnSecurityId = new DataColumn("SecurityId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityId);
                this.columnDocumentVersion = new DataColumn("DocumentVersion", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDocumentVersion);
                this.columnRowIndex = new DataColumn("RowIndex", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowIndex);
                this.columnColumnIndex = new DataColumn("ColumnIndex", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnColumnIndex);
                this.columnSecurityId.AllowDBNull = false;
                this.columnDocumentVersion.AllowDBNull = false;
                this.columnRowIndex.AllowDBNull = false;
                this.columnColumnIndex.AllowDBNull = false;
            }
            
            public LastPriceAddressRow NewLastPriceAddressRow() {
                return ((LastPriceAddressRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new LastPriceAddressRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(LastPriceAddressRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LastPriceAddressRowChanged != null)) {
                    this.LastPriceAddressRowChanged(this, new LastPriceAddressRowChangeEvent(((LastPriceAddressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LastPriceAddressRowChanging != null)) {
                    this.LastPriceAddressRowChanging(this, new LastPriceAddressRowChangeEvent(((LastPriceAddressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LastPriceAddressRowDeleted != null)) {
                    this.LastPriceAddressRowDeleted(this, new LastPriceAddressRowChangeEvent(((LastPriceAddressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LastPriceAddressRowDeleting != null)) {
                    this.LastPriceAddressRowDeleting(this, new LastPriceAddressRowChangeEvent(((LastPriceAddressRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveLastPriceAddressRow(LastPriceAddressRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LastPriceAddressRow : DataRow {
            
            private LastPriceAddressDataTable tableLastPriceAddress;
            
            internal LastPriceAddressRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableLastPriceAddress = ((LastPriceAddressDataTable)(this.Table));
            }
            
            public int SecurityId {
                get {
                    return ((int)(this[this.tableLastPriceAddress.SecurityIdColumn]));
                }
                set {
                    this[this.tableLastPriceAddress.SecurityIdColumn] = value;
                }
            }
            
            public int DocumentVersion {
                get {
                    return ((int)(this[this.tableLastPriceAddress.DocumentVersionColumn]));
                }
                set {
                    this[this.tableLastPriceAddress.DocumentVersionColumn] = value;
                }
            }
            
            public int RowIndex {
                get {
                    return ((int)(this[this.tableLastPriceAddress.RowIndexColumn]));
                }
                set {
                    this[this.tableLastPriceAddress.RowIndexColumn] = value;
                }
            }
            
            public int ColumnIndex {
                get {
                    return ((int)(this[this.tableLastPriceAddress.ColumnIndexColumn]));
                }
                set {
                    this[this.tableLastPriceAddress.ColumnIndexColumn] = value;
                }
            }
            
            public SecurityMapRow SecurityMapRow {
                get {
                    return ((SecurityMapRow)(this.GetParentRow(this.Table.ParentRelations["PriceMapAddress"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PriceMapAddress"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LastPriceAddressRowChangeEvent : EventArgs {
            
            private LastPriceAddressRow eventRow;
            
            private DataRowAction eventAction;
            
            public LastPriceAddressRowChangeEvent(LastPriceAddressRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public LastPriceAddressRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
