//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Quasar.Core
{
    using MarkThree.Quasar;
    using MarkThree.Quasar.Server;
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Data.SqlClient;
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    public class Algorithm
    {
        
        /// This value is used to map the object to a persistent storage device.  The parameters for the storage
        /// are found in the configuration file for this service.
        public static string PersistentStore = "Quasar";
        
        /// This member provides access to the in-memory database.
        private static ServerDataModel serverDataModel = new ServerDataModel();
        
        /// <summary>Collects the table lock request(s) for an Insert operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Insert(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for this operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.Algorithm));
        }
        
        /// <summary>Inserts a Algorithm record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Insert(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            int algorithmTypeCode = parameters["algorithmTypeCode"];
            string name = parameters["name"];
            object description = parameters["description"].Value;
            string assembly = parameters["assembly"];
            string type = parameters["type"];
            string method = parameters["method"];
            object externalId0 = parameters["externalId0"].Value;
            object externalId1 = parameters["externalId1"].Value;
            // The rowVersion is passed back to the caller in the event it's needed for additional commands in the batch.
            long rowVersion = long.MinValue;
            // Call the internal method to complete the operation.
            int algorithmId = Algorithm.Insert(adoTransaction, sqlTransaction, ref rowVersion, algorithmTypeCode, name, description, assembly, type, method, externalId0, externalId1);
            // Return values.
            parameters["rowVersion"] = rowVersion;
            parameters.Return = algorithmId;
        }
        
        /// <summary>Inserts a Algorithm record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="algorithmTypeCode">The value for the AlgorithmTypeCode column.</param>
        /// <param name="name">The value for the Name column.</param>
        /// <param name="description">The value for the Description column.</param>
        /// <param name="assembly">The value for the Assembly column.</param>
        /// <param name="type">The value for the Type column.</param>
        /// <param name="method">The value for the Method column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="externalId1">The value for the ExternalId1 column.</param>
        public static int Insert(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, ref long rowVersion, int algorithmTypeCode, string name, object description, string assembly, string type, string method, object externalId0, object externalId1)
        {
            // Accessor for the Algorithm Table.
            ServerDataModel.AlgorithmDataTable algorithmTable = ServerDataModel.Algorithm;
            // Apply Defaults
            if ((description == null))
            {
                description = System.DBNull.Value;
            }
            if ((externalId0 == null))
            {
                externalId0 = System.DBNull.Value;
            }
            if ((externalId1 == null))
            {
                externalId1 = System.DBNull.Value;
            }
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Insert the record into the ADO database.
            ServerDataModel.AlgorithmRow algorithmRow = algorithmTable.NewAlgorithmRow();
            algorithmRow[algorithmTable.RowVersionColumn] = rowVersion;
            algorithmRow[algorithmTable.AlgorithmTypeCodeColumn] = algorithmTypeCode;
            algorithmRow[algorithmTable.NameColumn] = name;
            algorithmRow[algorithmTable.DescriptionColumn] = description;
            algorithmRow[algorithmTable.AssemblyColumn] = assembly;
            algorithmRow[algorithmTable.TypeColumn] = type;
            algorithmRow[algorithmTable.MethodColumn] = method;
            algorithmRow[algorithmTable.ExternalId0Column] = externalId0;
            algorithmRow[algorithmTable.ExternalId1Column] = externalId1;
            algorithmTable.AddAlgorithmRow(algorithmRow);
            adoTransaction.DataRows.Add(algorithmRow);
            // Insert the record into the SQL database.
            SqlCommand sqlCommand = new SqlCommand(@"insert ""Algorithm"" (""rowVersion"",""AlgorithmId"",""AlgorithmTypeCode"",""Name"",""Description"",""Assembly"",""Type"",""Method"",""ExternalId0"",""ExternalId1"") values (@rowVersion,@algorithmId,@algorithmTypeCode,@name,@description,@assembly,@type,@method,@externalId0,@externalId1)");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@algorithmId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, algorithmRow[algorithmTable.AlgorithmIdColumn]));
            sqlCommand.Parameters.Add(new SqlParameter("@algorithmTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, algorithmTypeCode));
            sqlCommand.Parameters.Add(new SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, name));
            sqlCommand.Parameters.Add(new SqlParameter("@description", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, description));
            sqlCommand.Parameters.Add(new SqlParameter("@assembly", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, assembly));
            sqlCommand.Parameters.Add(new SqlParameter("@type", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, type));
            sqlCommand.Parameters.Add(new SqlParameter("@method", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, method));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId1", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId1));
            sqlCommand.ExecuteNonQuery();
            // Return Statements
            return algorithmRow.AlgorithmId;
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Update(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Update' operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.Algorithm));
            Blotter.UpdateChildren(adoTransaction);
            Model.UpdateChildren(adoTransaction);
        }
        
        /// <summary>Inserts a Algorithm record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Update(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int algorithmId = parameters["algorithmId"];
            object algorithmTypeCode = parameters["algorithmTypeCode"].Value;
            object name = parameters["name"].Value;
            object description = parameters["description"].Value;
            object assembly = parameters["assembly"].Value;
            object type = parameters["type"].Value;
            object method = parameters["method"].Value;
            object externalId0 = parameters["externalId0"].Value;
            object externalId1 = parameters["externalId1"].Value;
            // Call the internal method to complete the operation.
            Algorithm.Update(adoTransaction, sqlTransaction, ref rowVersion, algorithmId, algorithmTypeCode, name, description, assembly, type, method, externalId0, externalId1);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Updates a Algorithm record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="rowVersion">The version number of the row</param>
        /// <param name="algorithmId">The value for the AlgorithmId column.</param>
        /// <param name="algorithmTypeCode">The value for the AlgorithmTypeCode column.</param>
        /// <param name="name">The value for the Name column.</param>
        /// <param name="description">The value for the Description column.</param>
        /// <param name="assembly">The value for the Assembly column.</param>
        /// <param name="type">The value for the Type column.</param>
        /// <param name="method">The value for the Method column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="externalId1">The value for the ExternalId1 column.</param>
        public static void Update(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, ref long rowVersion, int algorithmId, object algorithmTypeCode, object name, object description, object assembly, object type, object method, object externalId0, object externalId1)
        {
            // Accessor for the Algorithm Table.
            ServerDataModel.AlgorithmDataTable algorithmTable = ServerDataModel.Algorithm;
            // Rule #1: Make sure the record exists before updating it.
            ServerDataModel.AlgorithmRow algorithmRow = algorithmTable.FindByAlgorithmId(algorithmId);
            if ((algorithmRow == null))
            {
                throw new Exception(string.Format("The Algorithm table does not have an element identified by {0}", algorithmId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((algorithmRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Apply Defaults
            if ((algorithmTypeCode == null))
            {
                algorithmTypeCode = algorithmRow[algorithmTable.AlgorithmTypeCodeColumn];
            }
            if ((name == null))
            {
                name = algorithmRow[algorithmTable.NameColumn];
            }
            if ((description == null))
            {
                description = algorithmRow[algorithmTable.DescriptionColumn];
            }
            if ((assembly == null))
            {
                assembly = algorithmRow[algorithmTable.AssemblyColumn];
            }
            if ((type == null))
            {
                type = algorithmRow[algorithmTable.TypeColumn];
            }
            if ((method == null))
            {
                method = algorithmRow[algorithmTable.MethodColumn];
            }
            if ((externalId0 == null))
            {
                externalId0 = algorithmRow[algorithmTable.ExternalId0Column];
            }
            if ((externalId1 == null))
            {
                externalId1 = algorithmRow[algorithmTable.ExternalId1Column];
            }
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Update the record in the ADO database.
            algorithmRow[algorithmTable.RowVersionColumn] = rowVersion;
            algorithmRow[algorithmTable.AlgorithmTypeCodeColumn] = algorithmTypeCode;
            algorithmRow[algorithmTable.NameColumn] = name;
            algorithmRow[algorithmTable.DescriptionColumn] = description;
            algorithmRow[algorithmTable.AssemblyColumn] = assembly;
            algorithmRow[algorithmTable.TypeColumn] = type;
            algorithmRow[algorithmTable.MethodColumn] = method;
            algorithmRow[algorithmTable.ExternalId0Column] = externalId0;
            algorithmRow[algorithmTable.ExternalId1Column] = externalId1;
            adoTransaction.DataRows.Add(algorithmRow);
            // Update the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand(@"update ""Algorithm"" set ""RowVersion""=@rowVersion,""AlgorithmTypeCode""=@algorithmTypeCode,""Name""=@name,""Description""=@description,""Assembly""=@assembly,""Type""=@type,""Method""=@method,""ExternalId0""=@externalId0,""ExternalId1""=@externalId1 where ""AlgorithmId""=@algorithmId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@algorithmId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, algorithmId));
            sqlCommand.Parameters.Add(new SqlParameter("@algorithmTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, algorithmTypeCode));
            sqlCommand.Parameters.Add(new SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, name));
            sqlCommand.Parameters.Add(new SqlParameter("@description", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, description));
            sqlCommand.Parameters.Add(new SqlParameter("@assembly", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, assembly));
            sqlCommand.Parameters.Add(new SqlParameter("@type", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, type));
            sqlCommand.Parameters.Add(new SqlParameter("@method", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, method));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId1", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId1));
            // Update the record in the SQL database.
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Delete(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Delete' operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.Algorithm));
            Blotter.ArchiveChildren(adoTransaction);
            Model.ArchiveChildren(adoTransaction);
        }
        
        /// <summary>Inserts a Algorithm record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Delete(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int algorithmId = parameters["algorithmId"];
            // Call the internal method to complete the operation.
            Algorithm.Delete(adoTransaction, sqlTransaction, rowVersion, algorithmId);
        }
        
        /// <summary>Deletes a Algorithm record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="algorithmId">The value for the AlgorithmId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Delete(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int algorithmId)
        {
            // Accessor for the Algorithm Table.
            ServerDataModel.AlgorithmDataTable algorithmTable = ServerDataModel.Algorithm;
            // Rule #1: Make sure the record exists before updating it.
            ServerDataModel.AlgorithmRow algorithmRow = algorithmTable.FindByAlgorithmId(algorithmId);
            if ((algorithmRow == null))
            {
                throw new Exception(string.Format("The Algorithm table does not have an element identified by {0}", algorithmId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((algorithmRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Delete the child records.
            for (int index = 0; (index < algorithmRow.GetBlotterRows().Length); index = (index + 1))
            {
                ServerDataModel.BlotterRow childBlotterRow = algorithmRow.GetBlotterRows()[index];
                Blotter.DeleteChildren(adoTransaction, sqlTransaction, childBlotterRow.RowVersion, childBlotterRow.BlotterId);
            }
            for (int index = 0; (index < algorithmRow.GetModelRows().Length); index = (index + 1))
            {
                ServerDataModel.ModelRow childModelRow = algorithmRow.GetModelRows()[index];
                Model.DeleteChildren(adoTransaction, sqlTransaction, childModelRow.RowVersion, childModelRow.ModelId);
            }
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Delete the record in the ADO database.
            algorithmRow[algorithmTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(algorithmRow);
            algorithmRow.Delete();
            // Delete the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Algorithm\" set \"IsDeleted\" = 1 where \"AlgorithmId\"=@algorithmId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@algorithmId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, algorithmId));
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Archive(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Archive' operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.Algorithm));
            Blotter.ArchiveChildren(adoTransaction);
            Model.ArchiveChildren(adoTransaction);
        }
        
        /// <summary>Inserts a Algorithm record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Archive(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int algorithmId = parameters["algorithmId"];
            // Call the internal method to complete the operation.
            Algorithm.Archive(adoTransaction, sqlTransaction, rowVersion, algorithmId);
        }
        
        /// <summary>Archives a Algorithm record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="algorithmId">The value for the AlgorithmId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Archive(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int algorithmId)
        {
            // Accessor for the Algorithm Table.
            ServerDataModel.AlgorithmDataTable algorithmTable = ServerDataModel.Algorithm;
            // Rule #1: Make sure the record exists before updating it.
            ServerDataModel.AlgorithmRow algorithmRow = algorithmTable.FindByAlgorithmId(algorithmId);
            if ((algorithmRow == null))
            {
                throw new Exception(string.Format("The Algorithm table does not have an element identified by {0}", algorithmId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((algorithmRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Archive the child records.
            for (int index = 0; (index < algorithmRow.GetBlotterRows().Length); index = (index + 1))
            {
                ServerDataModel.BlotterRow childBlotterRow = algorithmRow.GetBlotterRows()[index];
                Blotter.ArchiveChildren(adoTransaction, sqlTransaction, childBlotterRow.RowVersion, childBlotterRow.BlotterId);
            }
            for (int index = 0; (index < algorithmRow.GetModelRows().Length); index = (index + 1))
            {
                ServerDataModel.ModelRow childModelRow = algorithmRow.GetModelRows()[index];
                Model.ArchiveChildren(adoTransaction, sqlTransaction, childModelRow.RowVersion, childModelRow.ModelId);
            }
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Delete the record in the ADO database.
            algorithmRow[algorithmTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(algorithmRow);
            algorithmRow.Delete();
            // Archive the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Algorithm\" set \"IsArchived\" = 1 where \"AlgorithmId\"=@algorithmId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@algorithmId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, algorithmId));
            sqlCommand.ExecuteNonQuery();
        }
    }
}
