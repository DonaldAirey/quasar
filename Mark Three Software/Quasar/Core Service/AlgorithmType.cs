//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Quasar.Core
{
    using MarkThree.Quasar;
    using MarkThree.Quasar.Server;
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Data.SqlClient;
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    public class AlgorithmType
    {
        
        /// This value is used to map the object to a persistent storage device.  The parameters for the storage
        /// are found in the configuration file for this service.
        public static string PersistentStore = "Quasar";
        
        /// This member provides access to the in-memory database.
        private static ServerDataModel serverDataModel = new ServerDataModel();
        
        /// <summary>Collects the table lock request(s) for an Insert operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Insert(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for this operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.AlgorithmType));
        }
        
        /// <summary>Inserts a AlgorithmType record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Insert(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            int algorithmTypeCode = parameters["algorithmTypeCode"];
            object name = parameters["name"].Value;
            object description = parameters["description"].Value;
            object externalId0 = parameters["externalId0"].Value;
            object externalId1 = parameters["externalId1"].Value;
            // The rowVersion is passed back to the caller in the event it's needed for additional commands in the batch.
            long rowVersion = long.MinValue;
            // Call the internal method to complete the operation.
            AlgorithmType.Insert(adoTransaction, sqlTransaction, ref rowVersion, algorithmTypeCode, name, description, externalId0, externalId1);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Inserts a AlgorithmType record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="algorithmTypeCode">The value for the AlgorithmTypeCode column.</param>
        /// <param name="name">The value for the Name column.</param>
        /// <param name="description">The value for the Description column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="externalId1">The value for the ExternalId1 column.</param>
        public static void Insert(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, ref long rowVersion, int algorithmTypeCode, object name, object description, object externalId0, object externalId1)
        {
            // Accessor for the AlgorithmType Table.
            ServerDataModel.AlgorithmTypeDataTable algorithmTypeTable = ServerDataModel.AlgorithmType;
            // Apply Defaults
            if ((name == null))
            {
                name = System.DBNull.Value;
            }
            if ((description == null))
            {
                description = System.DBNull.Value;
            }
            if ((externalId0 == null))
            {
                externalId0 = System.DBNull.Value;
            }
            if ((externalId1 == null))
            {
                externalId1 = System.DBNull.Value;
            }
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Insert the record into the ADO database.
            ServerDataModel.AlgorithmTypeRow algorithmTypeRow = algorithmTypeTable.NewAlgorithmTypeRow();
            algorithmTypeRow[algorithmTypeTable.RowVersionColumn] = rowVersion;
            algorithmTypeRow[algorithmTypeTable.AlgorithmTypeCodeColumn] = algorithmTypeCode;
            algorithmTypeRow[algorithmTypeTable.NameColumn] = name;
            algorithmTypeRow[algorithmTypeTable.DescriptionColumn] = description;
            algorithmTypeRow[algorithmTypeTable.ExternalId0Column] = externalId0;
            algorithmTypeRow[algorithmTypeTable.ExternalId1Column] = externalId1;
            algorithmTypeTable.AddAlgorithmTypeRow(algorithmTypeRow);
            adoTransaction.DataRows.Add(algorithmTypeRow);
            // Insert the record into the SQL database.
            SqlCommand sqlCommand = new SqlCommand("insert \"AlgorithmType\" (\"rowVersion\",\"AlgorithmTypeCode\",\"Name\",\"Description\",\"Ex" +
                    "ternalId0\",\"ExternalId1\") values (@rowVersion,@algorithmTypeCode,@name,@descript" +
                    "ion,@externalId0,@externalId1)");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@algorithmTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, algorithmTypeCode));
            sqlCommand.Parameters.Add(new SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, name));
            sqlCommand.Parameters.Add(new SqlParameter("@description", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, description));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId1", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId1));
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Update(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Update' operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.AlgorithmType));
            Algorithm.Update(adoTransaction);
        }
        
        /// <summary>Inserts a AlgorithmType record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Update(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int algorithmTypeCode = parameters["algorithmTypeCode"];
            object name = parameters["name"].Value;
            object description = parameters["description"].Value;
            object externalId0 = parameters["externalId0"].Value;
            object externalId1 = parameters["externalId1"].Value;
            // Call the internal method to complete the operation.
            AlgorithmType.Update(adoTransaction, sqlTransaction, ref rowVersion, algorithmTypeCode, name, description, externalId0, externalId1);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Updates a AlgorithmType record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="rowVersion">The version number of the row</param>
        /// <param name="algorithmTypeCode">The value for the AlgorithmTypeCode column.</param>
        /// <param name="name">The value for the Name column.</param>
        /// <param name="description">The value for the Description column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="externalId1">The value for the ExternalId1 column.</param>
        public static void Update(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, ref long rowVersion, int algorithmTypeCode, object name, object description, object externalId0, object externalId1)
        {
            // Accessor for the AlgorithmType Table.
            ServerDataModel.AlgorithmTypeDataTable algorithmTypeTable = ServerDataModel.AlgorithmType;
            // Rule #1: Make sure the record exists before updating it.
            ServerDataModel.AlgorithmTypeRow algorithmTypeRow = algorithmTypeTable.FindByAlgorithmTypeCode(algorithmTypeCode);
            if ((algorithmTypeRow == null))
            {
                throw new Exception(string.Format("The AlgorithmType table does not have an element identified by {0}", algorithmTypeCode));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((algorithmTypeRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Apply Defaults
            if ((name == null))
            {
                name = algorithmTypeRow[algorithmTypeTable.NameColumn];
            }
            if ((description == null))
            {
                description = algorithmTypeRow[algorithmTypeTable.DescriptionColumn];
            }
            if ((externalId0 == null))
            {
                externalId0 = algorithmTypeRow[algorithmTypeTable.ExternalId0Column];
            }
            if ((externalId1 == null))
            {
                externalId1 = algorithmTypeRow[algorithmTypeTable.ExternalId1Column];
            }
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Update the record in the ADO database.
            algorithmTypeRow[algorithmTypeTable.RowVersionColumn] = rowVersion;
            algorithmTypeRow[algorithmTypeTable.NameColumn] = name;
            algorithmTypeRow[algorithmTypeTable.DescriptionColumn] = description;
            algorithmTypeRow[algorithmTypeTable.ExternalId0Column] = externalId0;
            algorithmTypeRow[algorithmTypeTable.ExternalId1Column] = externalId1;
            adoTransaction.DataRows.Add(algorithmTypeRow);
            // Update the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"AlgorithmType\" set \"RowVersion\"=@rowVersion,\"Name\"=@name,\"Description\"=@d" +
                    "escription,\"ExternalId0\"=@externalId0,\"ExternalId1\"=@externalId1 where \"Algorith" +
                    "mTypeCode\"=@algorithmTypeCode");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@algorithmTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, algorithmTypeCode));
            sqlCommand.Parameters.Add(new SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, name));
            sqlCommand.Parameters.Add(new SqlParameter("@description", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, description));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId1", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId1));
            // Update the record in the SQL database.
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Delete(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Delete' operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.AlgorithmType));
            Algorithm.Archive(adoTransaction);
        }
        
        /// <summary>Inserts a AlgorithmType record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Delete(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int algorithmTypeCode = parameters["algorithmTypeCode"];
            // Call the internal method to complete the operation.
            AlgorithmType.Delete(adoTransaction, sqlTransaction, rowVersion, algorithmTypeCode);
        }
        
        /// <summary>Deletes a AlgorithmType record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="algorithmTypeCode">The value for the AlgorithmTypeCode column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Delete(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int algorithmTypeCode)
        {
            // Accessor for the AlgorithmType Table.
            ServerDataModel.AlgorithmTypeDataTable algorithmTypeTable = ServerDataModel.AlgorithmType;
            // Rule #1: Make sure the record exists before updating it.
            ServerDataModel.AlgorithmTypeRow algorithmTypeRow = algorithmTypeTable.FindByAlgorithmTypeCode(algorithmTypeCode);
            if ((algorithmTypeRow == null))
            {
                throw new Exception(string.Format("The AlgorithmType table does not have an element identified by {0}", algorithmTypeCode));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((algorithmTypeRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Delete the child records.
            for (int index = 0; (index < algorithmTypeRow.GetAlgorithmRows().Length); index = (index + 1))
            {
                ServerDataModel.AlgorithmRow childAlgorithmRow = algorithmTypeRow.GetAlgorithmRows()[index];
                Algorithm.Delete(adoTransaction, sqlTransaction, childAlgorithmRow.RowVersion, childAlgorithmRow.AlgorithmId);
            }
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Delete the record in the ADO database.
            algorithmTypeRow[algorithmTypeTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(algorithmTypeRow);
            algorithmTypeRow.Delete();
            // Delete the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"AlgorithmType\" set \"IsDeleted\" = 1 where \"AlgorithmTypeCode\"=@algorithmTy" +
                    "peCode");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@algorithmTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, algorithmTypeCode));
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Archive(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Archive' operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.AlgorithmType));
            Algorithm.Archive(adoTransaction);
        }
        
        /// <summary>Inserts a AlgorithmType record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Archive(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int algorithmTypeCode = parameters["algorithmTypeCode"];
            // Call the internal method to complete the operation.
            AlgorithmType.Archive(adoTransaction, sqlTransaction, rowVersion, algorithmTypeCode);
        }
        
        /// <summary>Archives a AlgorithmType record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="algorithmTypeCode">The value for the AlgorithmTypeCode column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Archive(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int algorithmTypeCode)
        {
            // Accessor for the AlgorithmType Table.
            ServerDataModel.AlgorithmTypeDataTable algorithmTypeTable = ServerDataModel.AlgorithmType;
            // Rule #1: Make sure the record exists before updating it.
            ServerDataModel.AlgorithmTypeRow algorithmTypeRow = algorithmTypeTable.FindByAlgorithmTypeCode(algorithmTypeCode);
            if ((algorithmTypeRow == null))
            {
                throw new Exception(string.Format("The AlgorithmType table does not have an element identified by {0}", algorithmTypeCode));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((algorithmTypeRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Archive the child records.
            for (int index = 0; (index < algorithmTypeRow.GetAlgorithmRows().Length); index = (index + 1))
            {
                ServerDataModel.AlgorithmRow childAlgorithmRow = algorithmTypeRow.GetAlgorithmRows()[index];
                Algorithm.Archive(adoTransaction, sqlTransaction, childAlgorithmRow.RowVersion, childAlgorithmRow.AlgorithmId);
            }
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Delete the record in the ADO database.
            algorithmTypeRow[algorithmTypeTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(algorithmTypeRow);
            algorithmTypeRow.Delete();
            // Archive the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"AlgorithmType\" set \"IsArchived\" = 1 where \"AlgorithmTypeCode\"=@algorithmT" +
                    "ypeCode");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@algorithmTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, algorithmTypeCode));
            sqlCommand.ExecuteNonQuery();
        }
    }
}
