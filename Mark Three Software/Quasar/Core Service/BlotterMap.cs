//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Quasar.Core
{
    using MarkThree.Quasar;
    using MarkThree.Quasar.Server;
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Data.SqlClient;
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    public class BlotterMap
    {
        
        /// This value is used to map the object to a persistent storage device.  The parameters for the storage
        /// are found in the configuration file for this service.
        public static string PersistentStore = "Quasar";
        
        /// This member provides access to the in-memory database.
        private static ServerDataModel serverDataModel = new ServerDataModel();
        
        /// <summary>Collects the table lock request(s) for an Insert operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Insert(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for this operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.BlotterMap));
        }
        
        /// <summary>Inserts a BlotterMap record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Insert(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            int securityId = parameters["securityId"];
            int blotterId = parameters["blotterId"];
            object minimumQuantity = parameters["minimumQuantity"].Value;
            object maximumQuantity = parameters["maximumQuantity"].Value;
            object externalId0 = parameters["externalId0"].Value;
            object externalId1 = parameters["externalId1"].Value;
            // The rowVersion is passed back to the caller in the event it's needed for additional commands in the batch.
            long rowVersion = long.MinValue;
            // Call the internal method to complete the operation.
            int blotterMapId = BlotterMap.Insert(adoTransaction, sqlTransaction, ref rowVersion, securityId, blotterId, minimumQuantity, maximumQuantity, externalId0, externalId1);
            // Return values.
            parameters["rowVersion"] = rowVersion;
            parameters.Return = blotterMapId;
        }
        
        /// <summary>Inserts a BlotterMap record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="securityId">The value for the SecurityId column.</param>
        /// <param name="blotterId">The value for the BlotterId column.</param>
        /// <param name="minimumQuantity">The value for the MinimumQuantity column.</param>
        /// <param name="maximumQuantity">The value for the MaximumQuantity column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="externalId1">The value for the ExternalId1 column.</param>
        public static int Insert(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, ref long rowVersion, int securityId, int blotterId, object minimumQuantity, object maximumQuantity, object externalId0, object externalId1)
        {
            // Accessor for the BlotterMap Table.
            ServerDataModel.BlotterMapDataTable blotterMapTable = ServerDataModel.BlotterMap;
            // Apply Defaults
            if ((minimumQuantity == null))
            {
                minimumQuantity = 0.0m;
            }
            if ((maximumQuantity == null))
            {
                maximumQuantity = System.DBNull.Value;
            }
            if ((externalId0 == null))
            {
                externalId0 = System.DBNull.Value;
            }
            if ((externalId1 == null))
            {
                externalId1 = System.DBNull.Value;
            }
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Insert the record into the ADO database.
            ServerDataModel.BlotterMapRow blotterMapRow = blotterMapTable.NewBlotterMapRow();
            blotterMapRow[blotterMapTable.RowVersionColumn] = rowVersion;
            blotterMapRow[blotterMapTable.SecurityIdColumn] = securityId;
            blotterMapRow[blotterMapTable.BlotterIdColumn] = blotterId;
            blotterMapRow[blotterMapTable.MinimumQuantityColumn] = minimumQuantity;
            blotterMapRow[blotterMapTable.MaximumQuantityColumn] = maximumQuantity;
            blotterMapRow[blotterMapTable.ExternalId0Column] = externalId0;
            blotterMapRow[blotterMapTable.ExternalId1Column] = externalId1;
            blotterMapTable.AddBlotterMapRow(blotterMapRow);
            adoTransaction.DataRows.Add(blotterMapRow);
            // Insert the record into the SQL database.
            SqlCommand sqlCommand = new SqlCommand(@"insert ""BlotterMap"" (""rowVersion"",""BlotterMapId"",""SecurityId"",""BlotterId"",""MinimumQuantity"",""MaximumQuantity"",""ExternalId0"",""ExternalId1"") values (@rowVersion,@blotterMapId,@securityId,@blotterId,@minimumQuantity,@maximumQuantity,@externalId0,@externalId1)");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@blotterMapId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, blotterMapRow[blotterMapTable.BlotterMapIdColumn]));
            sqlCommand.Parameters.Add(new SqlParameter("@securityId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, securityId));
            sqlCommand.Parameters.Add(new SqlParameter("@blotterId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, blotterId));
            sqlCommand.Parameters.Add(new SqlParameter("@minimumQuantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, minimumQuantity));
            sqlCommand.Parameters.Add(new SqlParameter("@maximumQuantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, maximumQuantity));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId1", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId1));
            sqlCommand.ExecuteNonQuery();
            // Return Statements
            return blotterMapRow.BlotterMapId;
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Update(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Update' operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.BlotterMap));
        }
        
        /// <summary>Inserts a BlotterMap record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Update(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int blotterMapId = parameters["blotterMapId"];
            object securityId = parameters["securityId"].Value;
            object blotterId = parameters["blotterId"].Value;
            object minimumQuantity = parameters["minimumQuantity"].Value;
            object maximumQuantity = parameters["maximumQuantity"].Value;
            object externalId0 = parameters["externalId0"].Value;
            object externalId1 = parameters["externalId1"].Value;
            // Call the internal method to complete the operation.
            BlotterMap.Update(adoTransaction, sqlTransaction, ref rowVersion, blotterMapId, securityId, blotterId, minimumQuantity, maximumQuantity, externalId0, externalId1);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Updates a BlotterMap record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="rowVersion">The version number of the row</param>
        /// <param name="blotterMapId">The value for the BlotterMapId column.</param>
        /// <param name="securityId">The value for the SecurityId column.</param>
        /// <param name="blotterId">The value for the BlotterId column.</param>
        /// <param name="minimumQuantity">The value for the MinimumQuantity column.</param>
        /// <param name="maximumQuantity">The value for the MaximumQuantity column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="externalId1">The value for the ExternalId1 column.</param>
        public static void Update(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, ref long rowVersion, int blotterMapId, object securityId, object blotterId, object minimumQuantity, object maximumQuantity, object externalId0, object externalId1)
        {
            // Accessor for the BlotterMap Table.
            ServerDataModel.BlotterMapDataTable blotterMapTable = ServerDataModel.BlotterMap;
            // Rule #1: Make sure the record exists before updating it.
            ServerDataModel.BlotterMapRow blotterMapRow = blotterMapTable.FindByBlotterMapId(blotterMapId);
            if ((blotterMapRow == null))
            {
                throw new Exception(string.Format("The BlotterMap table does not have an element identified by {0}", blotterMapId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((blotterMapRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Apply Defaults
            if ((securityId == null))
            {
                securityId = blotterMapRow[blotterMapTable.SecurityIdColumn];
            }
            if ((blotterId == null))
            {
                blotterId = blotterMapRow[blotterMapTable.BlotterIdColumn];
            }
            if ((minimumQuantity == null))
            {
                minimumQuantity = blotterMapRow[blotterMapTable.MinimumQuantityColumn];
            }
            if ((maximumQuantity == null))
            {
                maximumQuantity = blotterMapRow[blotterMapTable.MaximumQuantityColumn];
            }
            if ((externalId0 == null))
            {
                externalId0 = blotterMapRow[blotterMapTable.ExternalId0Column];
            }
            if ((externalId1 == null))
            {
                externalId1 = blotterMapRow[blotterMapTable.ExternalId1Column];
            }
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Update the record in the ADO database.
            blotterMapRow[blotterMapTable.RowVersionColumn] = rowVersion;
            blotterMapRow[blotterMapTable.SecurityIdColumn] = securityId;
            blotterMapRow[blotterMapTable.BlotterIdColumn] = blotterId;
            blotterMapRow[blotterMapTable.MinimumQuantityColumn] = minimumQuantity;
            blotterMapRow[blotterMapTable.MaximumQuantityColumn] = maximumQuantity;
            blotterMapRow[blotterMapTable.ExternalId0Column] = externalId0;
            blotterMapRow[blotterMapTable.ExternalId1Column] = externalId1;
            adoTransaction.DataRows.Add(blotterMapRow);
            // Update the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"BlotterMap\" set \"RowVersion\"=@rowVersion,\"SecurityId\"=@securityId,\"Blotte" +
                    "rId\"=@blotterId,\"MinimumQuantity\"=@minimumQuantity,\"MaximumQuantity\"=@maximumQua" +
                    "ntity,\"ExternalId0\"=@externalId0,\"ExternalId1\"=@externalId1 where \"BlotterMapId\"" +
                    "=@blotterMapId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@blotterMapId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, blotterMapId));
            sqlCommand.Parameters.Add(new SqlParameter("@securityId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, securityId));
            sqlCommand.Parameters.Add(new SqlParameter("@blotterId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, blotterId));
            sqlCommand.Parameters.Add(new SqlParameter("@minimumQuantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, minimumQuantity));
            sqlCommand.Parameters.Add(new SqlParameter("@maximumQuantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, maximumQuantity));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId1", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId1));
            // Update the record in the SQL database.
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Delete(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Delete' operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.BlotterMap));
        }
        
        /// <summary>Inserts a BlotterMap record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Delete(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int blotterMapId = parameters["blotterMapId"];
            // Call the internal method to complete the operation.
            BlotterMap.Delete(adoTransaction, sqlTransaction, rowVersion, blotterMapId);
        }
        
        /// <summary>Deletes a BlotterMap record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="blotterMapId">The value for the BlotterMapId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Delete(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int blotterMapId)
        {
            // Accessor for the BlotterMap Table.
            ServerDataModel.BlotterMapDataTable blotterMapTable = ServerDataModel.BlotterMap;
            // Rule #1: Make sure the record exists before updating it.
            ServerDataModel.BlotterMapRow blotterMapRow = blotterMapTable.FindByBlotterMapId(blotterMapId);
            if ((blotterMapRow == null))
            {
                throw new Exception(string.Format("The BlotterMap table does not have an element identified by {0}", blotterMapId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((blotterMapRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Delete the child records.
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Delete the record in the ADO database.
            blotterMapRow[blotterMapTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(blotterMapRow);
            blotterMapRow.Delete();
            // Delete the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"BlotterMap\" set \"IsDeleted\" = 1 where \"BlotterMapId\"=@blotterMapId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@blotterMapId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, blotterMapId));
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Archive(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Archive' operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.BlotterMap));
        }
        
        /// <summary>Inserts a BlotterMap record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Archive(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int blotterMapId = parameters["blotterMapId"];
            // Call the internal method to complete the operation.
            BlotterMap.Archive(adoTransaction, sqlTransaction, rowVersion, blotterMapId);
        }
        
        /// <summary>Archives a BlotterMap record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="blotterMapId">The value for the BlotterMapId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Archive(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int blotterMapId)
        {
            // Accessor for the BlotterMap Table.
            ServerDataModel.BlotterMapDataTable blotterMapTable = ServerDataModel.BlotterMap;
            // Rule #1: Make sure the record exists before updating it.
            ServerDataModel.BlotterMapRow blotterMapRow = blotterMapTable.FindByBlotterMapId(blotterMapId);
            if ((blotterMapRow == null))
            {
                throw new Exception(string.Format("The BlotterMap table does not have an element identified by {0}", blotterMapId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((blotterMapRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Archive the child records.
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Delete the record in the ADO database.
            blotterMapRow[blotterMapTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(blotterMapRow);
            blotterMapRow.Delete();
            // Archive the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"BlotterMap\" set \"IsArchived\" = 1 where \"BlotterMapId\"=@blotterMapId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@blotterMapId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, blotterMapId));
            sqlCommand.ExecuteNonQuery();
        }
    }
}
