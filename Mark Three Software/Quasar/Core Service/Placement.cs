//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Quasar.Core
{
    using MarkThree.Quasar;
    using MarkThree.Quasar.Server;
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Data.SqlClient;
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    public class Placement
    {
        
        /// This value is used to map the object to a persistent storage device.  The parameters for the storage
        /// are found in the configuration file for this service.
        public static string PersistentStore = "Quasar";
        
        /// This member provides access to the in-memory database.
        private static ServerDataModel serverDataModel = new ServerDataModel();
        
        /// <summary>Collects the table lock request(s) for an Insert operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Insert(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for this operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.Placement));
        }
        
        /// <summary>Inserts a Placement record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Insert(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            int blockOrderId = parameters["blockOrderId"];
            int brokerId = parameters["brokerId"];
            int timeInForceCode = parameters["timeInForceCode"];
            int orderTypeCode = parameters["orderTypeCode"];
            object isDeleted = parameters["isDeleted"].Value;
            object isRouted = parameters["isRouted"].Value;
            decimal quantity = parameters["quantity"];
            object price1 = parameters["price1"].Value;
            object price2 = parameters["price2"].Value;
            System.DateTime createdTime = parameters["createdTime"];
            int createdUserId = parameters["createdUserId"];
            System.DateTime modifiedTime = parameters["modifiedTime"];
            int modifiedUserId = parameters["modifiedUserId"];
            // The rowVersion is passed back to the caller in the event it's needed for additional commands in the batch.
            long rowVersion = long.MinValue;
            // Call the internal method to complete the operation.
            int placementId = Placement.Insert(adoTransaction, sqlTransaction, ref rowVersion, blockOrderId, brokerId, timeInForceCode, orderTypeCode, isDeleted, isRouted, quantity, price1, price2, createdTime, createdUserId, modifiedTime, modifiedUserId);
            // Return values.
            parameters["rowVersion"] = rowVersion;
            parameters.Return = placementId;
        }
        
        /// <summary>Inserts a Placement record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="blockOrderId">The value for the BlockOrderId column.</param>
        /// <param name="brokerId">The value for the BrokerId column.</param>
        /// <param name="timeInForceCode">The value for the TimeInForceCode column.</param>
        /// <param name="orderTypeCode">The value for the OrderTypeCode column.</param>
        /// <param name="isDeleted">The value for the IsDeleted column.</param>
        /// <param name="isRouted">The value for the IsRouted column.</param>
        /// <param name="quantity">The value for the Quantity column.</param>
        /// <param name="price1">The value for the Price1 column.</param>
        /// <param name="price2">The value for the Price2 column.</param>
        /// <param name="createdTime">The value for the CreatedTime column.</param>
        /// <param name="createdUserId">The value for the CreatedUserId column.</param>
        /// <param name="modifiedTime">The value for the ModifiedTime column.</param>
        /// <param name="modifiedUserId">The value for the ModifiedUserId column.</param>
        public static int Insert(
                    AdoTransaction adoTransaction, 
                    SqlTransaction sqlTransaction, 
                    ref long rowVersion, 
                    int blockOrderId, 
                    int brokerId, 
                    int timeInForceCode, 
                    int orderTypeCode, 
                    object isDeleted, 
                    object isRouted, 
                    decimal quantity, 
                    object price1, 
                    object price2, 
                    System.DateTime createdTime, 
                    int createdUserId, 
                    System.DateTime modifiedTime, 
                    int modifiedUserId)
        {
            // Accessor for the Placement Table.
            ServerDataModel.PlacementDataTable placementTable = ServerDataModel.Placement;
            // Apply Defaults
            if ((isDeleted == null))
            {
                isDeleted = false;
            }
            if ((isRouted == null))
            {
                isRouted = false;
            }
            if ((price1 == null))
            {
                price1 = System.DBNull.Value;
            }
            if ((price2 == null))
            {
                price2 = System.DBNull.Value;
            }
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Insert the record into the ADO database.
            ServerDataModel.PlacementRow placementRow = placementTable.NewPlacementRow();
            placementRow[placementTable.RowVersionColumn] = rowVersion;
            placementRow[placementTable.BlockOrderIdColumn] = blockOrderId;
            placementRow[placementTable.BrokerIdColumn] = brokerId;
            placementRow[placementTable.TimeInForceCodeColumn] = timeInForceCode;
            placementRow[placementTable.OrderTypeCodeColumn] = orderTypeCode;
            placementRow[placementTable.IsDeletedColumn] = isDeleted;
            placementRow[placementTable.IsRoutedColumn] = isRouted;
            placementRow[placementTable.QuantityColumn] = quantity;
            placementRow[placementTable.Price1Column] = price1;
            placementRow[placementTable.Price2Column] = price2;
            placementRow[placementTable.CreatedTimeColumn] = createdTime;
            placementRow[placementTable.CreatedUserIdColumn] = createdUserId;
            placementRow[placementTable.ModifiedTimeColumn] = modifiedTime;
            placementRow[placementTable.ModifiedUserIdColumn] = modifiedUserId;
            placementTable.AddPlacementRow(placementRow);
            adoTransaction.DataRows.Add(placementRow);
            // Insert the record into the SQL database.
            SqlCommand sqlCommand = new SqlCommand(@"insert ""Placement"" (""rowVersion"",""PlacementId"",""BlockOrderId"",""BrokerId"",""TimeInForceCode"",""OrderTypeCode"",""IsDeleted"",""IsRouted"",""Quantity"",""Price1"",""Price2"",""CreatedTime"",""CreatedUserId"",""ModifiedTime"",""ModifiedUserId"") values (@rowVersion,@placementId,@blockOrderId,@brokerId,@timeInForceCode,@orderTypeCode,@isDeleted,@isRouted,@quantity,@price1,@price2,@createdTime,@createdUserId,@modifiedTime,@modifiedUserId)");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@placementId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, placementRow[placementTable.PlacementIdColumn]));
            sqlCommand.Parameters.Add(new SqlParameter("@blockOrderId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, blockOrderId));
            sqlCommand.Parameters.Add(new SqlParameter("@brokerId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, brokerId));
            sqlCommand.Parameters.Add(new SqlParameter("@timeInForceCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, timeInForceCode));
            sqlCommand.Parameters.Add(new SqlParameter("@orderTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, orderTypeCode));
            sqlCommand.Parameters.Add(new SqlParameter("@isDeleted", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isDeleted));
            sqlCommand.Parameters.Add(new SqlParameter("@isRouted", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isRouted));
            sqlCommand.Parameters.Add(new SqlParameter("@quantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, quantity));
            sqlCommand.Parameters.Add(new SqlParameter("@price1", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, price1));
            sqlCommand.Parameters.Add(new SqlParameter("@price2", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, price2));
            sqlCommand.Parameters.Add(new SqlParameter("@createdTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, createdTime));
            sqlCommand.Parameters.Add(new SqlParameter("@createdUserId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, createdUserId));
            sqlCommand.Parameters.Add(new SqlParameter("@modifiedTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, modifiedTime));
            sqlCommand.Parameters.Add(new SqlParameter("@modifiedUserId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, modifiedUserId));
            sqlCommand.ExecuteNonQuery();
            // Return Statements
            return placementRow.PlacementId;
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Update(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Update' operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.Placement));
        }
        
        /// <summary>Inserts a Placement record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Update(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int placementId = parameters["placementId"];
            object blockOrderId = parameters["blockOrderId"].Value;
            object brokerId = parameters["brokerId"].Value;
            object timeInForceCode = parameters["timeInForceCode"].Value;
            object orderTypeCode = parameters["orderTypeCode"].Value;
            object isDeleted = parameters["isDeleted"].Value;
            object isRouted = parameters["isRouted"].Value;
            object quantity = parameters["quantity"].Value;
            object price1 = parameters["price1"].Value;
            object price2 = parameters["price2"].Value;
            object createdTime = parameters["createdTime"].Value;
            object createdUserId = parameters["createdUserId"].Value;
            object modifiedTime = parameters["modifiedTime"].Value;
            object modifiedUserId = parameters["modifiedUserId"].Value;
            // Call the internal method to complete the operation.
            Placement.Update(adoTransaction, sqlTransaction, ref rowVersion, placementId, blockOrderId, brokerId, timeInForceCode, orderTypeCode, isDeleted, isRouted, quantity, price1, price2, createdTime, createdUserId, modifiedTime, modifiedUserId);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Updates a Placement record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="rowVersion">The version number of the row</param>
        /// <param name="placementId">The value for the PlacementId column.</param>
        /// <param name="blockOrderId">The value for the BlockOrderId column.</param>
        /// <param name="brokerId">The value for the BrokerId column.</param>
        /// <param name="timeInForceCode">The value for the TimeInForceCode column.</param>
        /// <param name="orderTypeCode">The value for the OrderTypeCode column.</param>
        /// <param name="isDeleted">The value for the IsDeleted column.</param>
        /// <param name="isRouted">The value for the IsRouted column.</param>
        /// <param name="quantity">The value for the Quantity column.</param>
        /// <param name="price1">The value for the Price1 column.</param>
        /// <param name="price2">The value for the Price2 column.</param>
        /// <param name="createdTime">The value for the CreatedTime column.</param>
        /// <param name="createdUserId">The value for the CreatedUserId column.</param>
        /// <param name="modifiedTime">The value for the ModifiedTime column.</param>
        /// <param name="modifiedUserId">The value for the ModifiedUserId column.</param>
        public static void Update(
                    AdoTransaction adoTransaction, 
                    SqlTransaction sqlTransaction, 
                    ref long rowVersion, 
                    int placementId, 
                    object blockOrderId, 
                    object brokerId, 
                    object timeInForceCode, 
                    object orderTypeCode, 
                    object isDeleted, 
                    object isRouted, 
                    object quantity, 
                    object price1, 
                    object price2, 
                    object createdTime, 
                    object createdUserId, 
                    object modifiedTime, 
                    object modifiedUserId)
        {
            // Accessor for the Placement Table.
            ServerDataModel.PlacementDataTable placementTable = ServerDataModel.Placement;
            // Rule #1: Make sure the record exists before updating it.
            ServerDataModel.PlacementRow placementRow = placementTable.FindByPlacementId(placementId);
            if ((placementRow == null))
            {
                throw new Exception(string.Format("The Placement table does not have an element identified by {0}", placementId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((placementRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Apply Defaults
            if ((blockOrderId == null))
            {
                blockOrderId = placementRow[placementTable.BlockOrderIdColumn];
            }
            if ((brokerId == null))
            {
                brokerId = placementRow[placementTable.BrokerIdColumn];
            }
            if ((timeInForceCode == null))
            {
                timeInForceCode = placementRow[placementTable.TimeInForceCodeColumn];
            }
            if ((orderTypeCode == null))
            {
                orderTypeCode = placementRow[placementTable.OrderTypeCodeColumn];
            }
            if ((isDeleted == null))
            {
                isDeleted = placementRow[placementTable.IsDeletedColumn];
            }
            if ((isRouted == null))
            {
                isRouted = placementRow[placementTable.IsRoutedColumn];
            }
            if ((quantity == null))
            {
                quantity = placementRow[placementTable.QuantityColumn];
            }
            if ((price1 == null))
            {
                price1 = placementRow[placementTable.Price1Column];
            }
            if ((price2 == null))
            {
                price2 = placementRow[placementTable.Price2Column];
            }
            if ((createdTime == null))
            {
                createdTime = placementRow[placementTable.CreatedTimeColumn];
            }
            if ((createdUserId == null))
            {
                createdUserId = placementRow[placementTable.CreatedUserIdColumn];
            }
            if ((modifiedTime == null))
            {
                modifiedTime = placementRow[placementTable.ModifiedTimeColumn];
            }
            if ((modifiedUserId == null))
            {
                modifiedUserId = placementRow[placementTable.ModifiedUserIdColumn];
            }
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Update the record in the ADO database.
            placementRow[placementTable.RowVersionColumn] = rowVersion;
            placementRow[placementTable.BlockOrderIdColumn] = blockOrderId;
            placementRow[placementTable.BrokerIdColumn] = brokerId;
            placementRow[placementTable.TimeInForceCodeColumn] = timeInForceCode;
            placementRow[placementTable.OrderTypeCodeColumn] = orderTypeCode;
            placementRow[placementTable.IsDeletedColumn] = isDeleted;
            placementRow[placementTable.IsRoutedColumn] = isRouted;
            placementRow[placementTable.QuantityColumn] = quantity;
            placementRow[placementTable.Price1Column] = price1;
            placementRow[placementTable.Price2Column] = price2;
            placementRow[placementTable.CreatedTimeColumn] = createdTime;
            placementRow[placementTable.CreatedUserIdColumn] = createdUserId;
            placementRow[placementTable.ModifiedTimeColumn] = modifiedTime;
            placementRow[placementTable.ModifiedUserIdColumn] = modifiedUserId;
            adoTransaction.DataRows.Add(placementRow);
            // Update the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand(@"update ""Placement"" set ""RowVersion""=@rowVersion,""BlockOrderId""=@blockOrderId,""BrokerId""=@brokerId,""TimeInForceCode""=@timeInForceCode,""OrderTypeCode""=@orderTypeCode,""IsDeleted""=@isDeleted,""IsRouted""=@isRouted,""Quantity""=@quantity,""Price1""=@price1,""Price2""=@price2,""CreatedTime""=@createdTime,""CreatedUserId""=@createdUserId,""ModifiedTime""=@modifiedTime,""ModifiedUserId""=@modifiedUserId where ""PlacementId""=@placementId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@placementId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, placementId));
            sqlCommand.Parameters.Add(new SqlParameter("@blockOrderId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, blockOrderId));
            sqlCommand.Parameters.Add(new SqlParameter("@brokerId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, brokerId));
            sqlCommand.Parameters.Add(new SqlParameter("@timeInForceCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, timeInForceCode));
            sqlCommand.Parameters.Add(new SqlParameter("@orderTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, orderTypeCode));
            sqlCommand.Parameters.Add(new SqlParameter("@isDeleted", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isDeleted));
            sqlCommand.Parameters.Add(new SqlParameter("@isRouted", SqlDbType.Bit, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, isRouted));
            sqlCommand.Parameters.Add(new SqlParameter("@quantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, quantity));
            sqlCommand.Parameters.Add(new SqlParameter("@price1", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, price1));
            sqlCommand.Parameters.Add(new SqlParameter("@price2", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, price2));
            sqlCommand.Parameters.Add(new SqlParameter("@createdTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, createdTime));
            sqlCommand.Parameters.Add(new SqlParameter("@createdUserId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, createdUserId));
            sqlCommand.Parameters.Add(new SqlParameter("@modifiedTime", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, modifiedTime));
            sqlCommand.Parameters.Add(new SqlParameter("@modifiedUserId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, modifiedUserId));
            // Update the record in the SQL database.
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Delete(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Delete' operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.Placement));
        }
        
        /// <summary>Inserts a Placement record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Delete(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int placementId = parameters["placementId"];
            // Call the internal method to complete the operation.
            Placement.Delete(adoTransaction, sqlTransaction, rowVersion, placementId);
        }
        
        /// <summary>Deletes a Placement record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="placementId">The value for the PlacementId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Delete(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int placementId)
        {
            // Accessor for the Placement Table.
            ServerDataModel.PlacementDataTable placementTable = ServerDataModel.Placement;
            // Rule #1: Make sure the record exists before updating it.
            ServerDataModel.PlacementRow placementRow = placementTable.FindByPlacementId(placementId);
            if ((placementRow == null))
            {
                throw new Exception(string.Format("The Placement table does not have an element identified by {0}", placementId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((placementRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Delete the child records.
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Delete the record in the ADO database.
            placementRow[placementTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(placementRow);
            placementRow.Delete();
            // Delete the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Placement\" set \"IsDeleted\" = 1 where \"PlacementId\"=@placementId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@placementId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, placementId));
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Archive(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Archive' operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.Placement));
        }
        
        /// <summary>Inserts a Placement record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Archive(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int placementId = parameters["placementId"];
            // Call the internal method to complete the operation.
            Placement.Archive(adoTransaction, sqlTransaction, rowVersion, placementId);
        }
        
        /// <summary>Archives a Placement record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="placementId">The value for the PlacementId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Archive(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int placementId)
        {
            // Accessor for the Placement Table.
            ServerDataModel.PlacementDataTable placementTable = ServerDataModel.Placement;
            // Rule #1: Make sure the record exists before updating it.
            ServerDataModel.PlacementRow placementRow = placementTable.FindByPlacementId(placementId);
            if ((placementRow == null))
            {
                throw new Exception(string.Format("The Placement table does not have an element identified by {0}", placementId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((placementRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Archive the child records.
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Delete the record in the ADO database.
            placementRow[placementTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(placementRow);
            placementRow.Delete();
            // Archive the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Placement\" set \"IsArchived\" = 1 where \"PlacementId\"=@placementId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@placementId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, placementId));
            sqlCommand.ExecuteNonQuery();
        }
    }
}
