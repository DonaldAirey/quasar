//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Quasar.Core
{
    using MarkThree.Quasar;
    using MarkThree.Quasar.Server;
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Data.SqlClient;
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    public class PositionType
    {
        
        /// This value is used to map the object to a persistent storage device.  The parameters for the storage
        /// are found in the configuration file for this service.
        public static string PersistentStore = "Quasar";
        
        /// This member provides access to the in-memory database.
        private static ServerDataModel serverDataModel = new ServerDataModel();
        
        /// <summary>Collects the table lock request(s) for an Insert operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Insert(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for this operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.PositionType));
        }
        
        /// <summary>Inserts a PositionType record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Insert(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            int positionTypeCode = parameters["positionTypeCode"];
            string mnemonic = parameters["mnemonic"];
            decimal sign = parameters["sign"];
            object externalId0 = parameters["externalId0"].Value;
            object externalId1 = parameters["externalId1"].Value;
            object externalId2 = parameters["externalId2"].Value;
            object externalId3 = parameters["externalId3"].Value;
            // The rowVersion is passed back to the caller in the event it's needed for additional commands in the batch.
            long rowVersion = long.MinValue;
            // Call the internal method to complete the operation.
            PositionType.Insert(adoTransaction, sqlTransaction, ref rowVersion, positionTypeCode, mnemonic, sign, externalId0, externalId1, externalId2, externalId3);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Inserts a PositionType record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="positionTypeCode">The value for the PositionTypeCode column.</param>
        /// <param name="mnemonic">The value for the Mnemonic column.</param>
        /// <param name="sign">The value for the Sign column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="externalId1">The value for the ExternalId1 column.</param>
        /// <param name="externalId2">The value for the ExternalId2 column.</param>
        /// <param name="externalId3">The value for the ExternalId3 column.</param>
        public static void Insert(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, ref long rowVersion, int positionTypeCode, string mnemonic, decimal sign, object externalId0, object externalId1, object externalId2, object externalId3)
        {
            // Accessor for the PositionType Table.
            ServerDataModel.PositionTypeDataTable positionTypeTable = ServerDataModel.PositionType;
            // Apply Defaults
            if ((externalId0 == null))
            {
                externalId0 = System.DBNull.Value;
            }
            if ((externalId1 == null))
            {
                externalId1 = System.DBNull.Value;
            }
            if ((externalId2 == null))
            {
                externalId2 = System.DBNull.Value;
            }
            if ((externalId3 == null))
            {
                externalId3 = System.DBNull.Value;
            }
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Insert the record into the ADO database.
            ServerDataModel.PositionTypeRow positionTypeRow = positionTypeTable.NewPositionTypeRow();
            positionTypeRow[positionTypeTable.RowVersionColumn] = rowVersion;
            positionTypeRow[positionTypeTable.PositionTypeCodeColumn] = positionTypeCode;
            positionTypeRow[positionTypeTable.MnemonicColumn] = mnemonic;
            positionTypeRow[positionTypeTable.SignColumn] = sign;
            positionTypeRow[positionTypeTable.ExternalId0Column] = externalId0;
            positionTypeRow[positionTypeTable.ExternalId1Column] = externalId1;
            positionTypeRow[positionTypeTable.ExternalId2Column] = externalId2;
            positionTypeRow[positionTypeTable.ExternalId3Column] = externalId3;
            positionTypeTable.AddPositionTypeRow(positionTypeRow);
            adoTransaction.DataRows.Add(positionTypeRow);
            // Insert the record into the SQL database.
            SqlCommand sqlCommand = new SqlCommand("insert \"PositionType\" (\"rowVersion\",\"PositionTypeCode\",\"Mnemonic\",\"Sign\",\"Externa" +
                    "lId0\",\"ExternalId1\",\"ExternalId2\",\"ExternalId3\") values (@rowVersion,@positionTy" +
                    "peCode,@mnemonic,@sign,@externalId0,@externalId1,@externalId2,@externalId3)");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@positionTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, positionTypeCode));
            sqlCommand.Parameters.Add(new SqlParameter("@mnemonic", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, mnemonic));
            sqlCommand.Parameters.Add(new SqlParameter("@sign", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, sign));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId1", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId1));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId2", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId2));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId3", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId3));
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Update(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Update' operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.PositionType));
            Position.Update(adoTransaction);
            PositionTarget.Update(adoTransaction);
            TaxLot.Update(adoTransaction);
            Violation.Update(adoTransaction);
        }
        
        /// <summary>Inserts a PositionType record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Update(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int positionTypeCode = parameters["positionTypeCode"];
            object mnemonic = parameters["mnemonic"].Value;
            object sign = parameters["sign"].Value;
            object externalId0 = parameters["externalId0"].Value;
            object externalId1 = parameters["externalId1"].Value;
            object externalId2 = parameters["externalId2"].Value;
            object externalId3 = parameters["externalId3"].Value;
            // Call the internal method to complete the operation.
            PositionType.Update(adoTransaction, sqlTransaction, ref rowVersion, positionTypeCode, mnemonic, sign, externalId0, externalId1, externalId2, externalId3);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Updates a PositionType record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="rowVersion">The version number of the row</param>
        /// <param name="positionTypeCode">The value for the PositionTypeCode column.</param>
        /// <param name="mnemonic">The value for the Mnemonic column.</param>
        /// <param name="sign">The value for the Sign column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="externalId1">The value for the ExternalId1 column.</param>
        /// <param name="externalId2">The value for the ExternalId2 column.</param>
        /// <param name="externalId3">The value for the ExternalId3 column.</param>
        public static void Update(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, ref long rowVersion, int positionTypeCode, object mnemonic, object sign, object externalId0, object externalId1, object externalId2, object externalId3)
        {
            // Accessor for the PositionType Table.
            ServerDataModel.PositionTypeDataTable positionTypeTable = ServerDataModel.PositionType;
            // Rule #1: Make sure the record exists before updating it.
            ServerDataModel.PositionTypeRow positionTypeRow = positionTypeTable.FindByPositionTypeCode(positionTypeCode);
            if ((positionTypeRow == null))
            {
                throw new Exception(string.Format("The PositionType table does not have an element identified by {0}", positionTypeCode));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((positionTypeRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Apply Defaults
            if ((mnemonic == null))
            {
                mnemonic = positionTypeRow[positionTypeTable.MnemonicColumn];
            }
            if ((sign == null))
            {
                sign = positionTypeRow[positionTypeTable.SignColumn];
            }
            if ((externalId0 == null))
            {
                externalId0 = positionTypeRow[positionTypeTable.ExternalId0Column];
            }
            if ((externalId1 == null))
            {
                externalId1 = positionTypeRow[positionTypeTable.ExternalId1Column];
            }
            if ((externalId2 == null))
            {
                externalId2 = positionTypeRow[positionTypeTable.ExternalId2Column];
            }
            if ((externalId3 == null))
            {
                externalId3 = positionTypeRow[positionTypeTable.ExternalId3Column];
            }
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Update the record in the ADO database.
            positionTypeRow[positionTypeTable.RowVersionColumn] = rowVersion;
            positionTypeRow[positionTypeTable.MnemonicColumn] = mnemonic;
            positionTypeRow[positionTypeTable.SignColumn] = sign;
            positionTypeRow[positionTypeTable.ExternalId0Column] = externalId0;
            positionTypeRow[positionTypeTable.ExternalId1Column] = externalId1;
            positionTypeRow[positionTypeTable.ExternalId2Column] = externalId2;
            positionTypeRow[positionTypeTable.ExternalId3Column] = externalId3;
            adoTransaction.DataRows.Add(positionTypeRow);
            // Update the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"PositionType\" set \"RowVersion\"=@rowVersion,\"Mnemonic\"=@mnemonic,\"Sign\"=@s" +
                    "ign,\"ExternalId0\"=@externalId0,\"ExternalId1\"=@externalId1,\"ExternalId2\"=@externa" +
                    "lId2,\"ExternalId3\"=@externalId3 where \"PositionTypeCode\"=@positionTypeCode");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@positionTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, positionTypeCode));
            sqlCommand.Parameters.Add(new SqlParameter("@mnemonic", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, mnemonic));
            sqlCommand.Parameters.Add(new SqlParameter("@sign", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, sign));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId1", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId1));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId2", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId2));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId3", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId3));
            // Update the record in the SQL database.
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Delete(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Delete' operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.PositionType));
            Position.Archive(adoTransaction);
            PositionTarget.Archive(adoTransaction);
            TaxLot.Archive(adoTransaction);
            Violation.Archive(adoTransaction);
        }
        
        /// <summary>Inserts a PositionType record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Delete(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int positionTypeCode = parameters["positionTypeCode"];
            // Call the internal method to complete the operation.
            PositionType.Delete(adoTransaction, sqlTransaction, rowVersion, positionTypeCode);
        }
        
        /// <summary>Deletes a PositionType record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="positionTypeCode">The value for the PositionTypeCode column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Delete(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int positionTypeCode)
        {
            // Accessor for the PositionType Table.
            ServerDataModel.PositionTypeDataTable positionTypeTable = ServerDataModel.PositionType;
            // Rule #1: Make sure the record exists before updating it.
            ServerDataModel.PositionTypeRow positionTypeRow = positionTypeTable.FindByPositionTypeCode(positionTypeCode);
            if ((positionTypeRow == null))
            {
                throw new Exception(string.Format("The PositionType table does not have an element identified by {0}", positionTypeCode));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((positionTypeRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Delete the child records.
            for (int index = 0; (index < positionTypeRow.GetPositionRows().Length); index = (index + 1))
            {
                ServerDataModel.PositionRow childPositionRow = positionTypeRow.GetPositionRows()[index];
                Position.Delete(adoTransaction, sqlTransaction, childPositionRow.RowVersion, childPositionRow.AccountId, childPositionRow.SecurityId, childPositionRow.PositionTypeCode);
            }
            for (int index = 0; (index < positionTypeRow.GetPositionTargetRows().Length); index = (index + 1))
            {
                ServerDataModel.PositionTargetRow childPositionTargetRow = positionTypeRow.GetPositionTargetRows()[index];
                PositionTarget.Delete(adoTransaction, sqlTransaction, childPositionTargetRow.RowVersion, childPositionTargetRow.ModelId, childPositionTargetRow.SecurityId, childPositionTargetRow.PositionTypeCode);
            }
            for (int index = 0; (index < positionTypeRow.GetTaxLotRows().Length); index = (index + 1))
            {
                ServerDataModel.TaxLotRow childTaxLotRow = positionTypeRow.GetTaxLotRows()[index];
                TaxLot.Delete(adoTransaction, sqlTransaction, childTaxLotRow.RowVersion, childTaxLotRow.TaxLotId);
            }
            for (int index = 0; (index < positionTypeRow.GetViolationRows().Length); index = (index + 1))
            {
                ServerDataModel.ViolationRow childViolationRow = positionTypeRow.GetViolationRows()[index];
                Violation.Delete(adoTransaction, sqlTransaction, childViolationRow.RowVersion, childViolationRow.ViolationId);
            }
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Delete the record in the ADO database.
            positionTypeRow[positionTypeTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(positionTypeRow);
            positionTypeRow.Delete();
            // Delete the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"PositionType\" set \"IsDeleted\" = 1 where \"PositionTypeCode\"=@positionTypeC" +
                    "ode");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@positionTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, positionTypeCode));
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Archive(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Archive' operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.PositionType));
            Position.Archive(adoTransaction);
            PositionTarget.Archive(adoTransaction);
            TaxLot.Archive(adoTransaction);
            Violation.Archive(adoTransaction);
        }
        
        /// <summary>Inserts a PositionType record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Archive(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int positionTypeCode = parameters["positionTypeCode"];
            // Call the internal method to complete the operation.
            PositionType.Archive(adoTransaction, sqlTransaction, rowVersion, positionTypeCode);
        }
        
        /// <summary>Archives a PositionType record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="positionTypeCode">The value for the PositionTypeCode column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Archive(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int positionTypeCode)
        {
            // Accessor for the PositionType Table.
            ServerDataModel.PositionTypeDataTable positionTypeTable = ServerDataModel.PositionType;
            // Rule #1: Make sure the record exists before updating it.
            ServerDataModel.PositionTypeRow positionTypeRow = positionTypeTable.FindByPositionTypeCode(positionTypeCode);
            if ((positionTypeRow == null))
            {
                throw new Exception(string.Format("The PositionType table does not have an element identified by {0}", positionTypeCode));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((positionTypeRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Archive the child records.
            for (int index = 0; (index < positionTypeRow.GetPositionRows().Length); index = (index + 1))
            {
                ServerDataModel.PositionRow childPositionRow = positionTypeRow.GetPositionRows()[index];
                Position.Archive(adoTransaction, sqlTransaction, childPositionRow.RowVersion, childPositionRow.AccountId, childPositionRow.SecurityId, childPositionRow.PositionTypeCode);
            }
            for (int index = 0; (index < positionTypeRow.GetPositionTargetRows().Length); index = (index + 1))
            {
                ServerDataModel.PositionTargetRow childPositionTargetRow = positionTypeRow.GetPositionTargetRows()[index];
                PositionTarget.Archive(adoTransaction, sqlTransaction, childPositionTargetRow.RowVersion, childPositionTargetRow.ModelId, childPositionTargetRow.SecurityId, childPositionTargetRow.PositionTypeCode);
            }
            for (int index = 0; (index < positionTypeRow.GetTaxLotRows().Length); index = (index + 1))
            {
                ServerDataModel.TaxLotRow childTaxLotRow = positionTypeRow.GetTaxLotRows()[index];
                TaxLot.Archive(adoTransaction, sqlTransaction, childTaxLotRow.RowVersion, childTaxLotRow.TaxLotId);
            }
            for (int index = 0; (index < positionTypeRow.GetViolationRows().Length); index = (index + 1))
            {
                ServerDataModel.ViolationRow childViolationRow = positionTypeRow.GetViolationRows()[index];
                Violation.Archive(adoTransaction, sqlTransaction, childViolationRow.RowVersion, childViolationRow.ViolationId);
            }
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Delete the record in the ADO database.
            positionTypeRow[positionTypeTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(positionTypeRow);
            positionTypeRow.Delete();
            // Archive the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"PositionType\" set \"IsArchived\" = 1 where \"PositionTypeCode\"=@positionType" +
                    "Code");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@positionTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, positionTypeCode));
            sqlCommand.ExecuteNonQuery();
        }
    }
}
