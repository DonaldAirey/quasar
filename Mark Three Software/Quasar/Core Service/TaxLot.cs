//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Quasar.Core
{
    using MarkThree.Quasar;
    using MarkThree.Quasar.Server;
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Data.SqlClient;
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    public class TaxLot
    {
        
        /// This value is used to map the object to a persistent storage device.  The parameters for the storage
        /// are found in the configuration file for this service.
        public static string PersistentStore = "Quasar";
        
        /// This member provides access to the in-memory database.
        private static ServerDataModel serverDataModel = new ServerDataModel();
        
        /// <summary>Collects the table lock request(s) for an Insert operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Insert(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for this operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.TaxLot));
        }
        
        /// <summary>Inserts a TaxLot record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Insert(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            int securityId = parameters["securityId"];
            int accountId = parameters["accountId"];
            int positionTypeCode = parameters["positionTypeCode"];
            decimal quantity = parameters["quantity"];
            decimal cost = parameters["cost"];
            object localCost = parameters["localCost"].Value;
            object tradeDate = parameters["tradeDate"].Value;
            object settlementDate = parameters["settlementDate"].Value;
            object userData0 = parameters["userData0"].Value;
            object userData1 = parameters["userData1"].Value;
            object userData2 = parameters["userData2"].Value;
            object userData3 = parameters["userData3"].Value;
            object userData4 = parameters["userData4"].Value;
            object userData5 = parameters["userData5"].Value;
            object userData6 = parameters["userData6"].Value;
            object userData7 = parameters["userData7"].Value;
            object externalId0 = parameters["externalId0"].Value;
            object externalId1 = parameters["externalId1"].Value;
            object externalId2 = parameters["externalId2"].Value;
            object externalId3 = parameters["externalId3"].Value;
            // The rowVersion is passed back to the caller in the event it's needed for additional commands in the batch.
            long rowVersion = long.MinValue;
            // Call the internal method to complete the operation.
            int taxLotId = TaxLot.Insert(adoTransaction, sqlTransaction, ref rowVersion, securityId, accountId, positionTypeCode, quantity, cost, localCost, tradeDate, settlementDate, userData0, userData1, userData2, userData3, userData4, userData5, userData6, userData7, externalId0, externalId1, externalId2, externalId3);
            // Return values.
            parameters["rowVersion"] = rowVersion;
            parameters.Return = taxLotId;
        }
        
        /// <summary>Inserts a TaxLot record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="securityId">The value for the SecurityId column.</param>
        /// <param name="accountId">The value for the AccountId column.</param>
        /// <param name="positionTypeCode">The value for the PositionTypeCode column.</param>
        /// <param name="quantity">The value for the Quantity column.</param>
        /// <param name="cost">The value for the Cost column.</param>
        /// <param name="localCost">The value for the LocalCost column.</param>
        /// <param name="tradeDate">The value for the TradeDate column.</param>
        /// <param name="settlementDate">The value for the SettlementDate column.</param>
        /// <param name="userData0">The value for the UserData0 column.</param>
        /// <param name="userData1">The value for the UserData1 column.</param>
        /// <param name="userData2">The value for the UserData2 column.</param>
        /// <param name="userData3">The value for the UserData3 column.</param>
        /// <param name="userData4">The value for the UserData4 column.</param>
        /// <param name="userData5">The value for the UserData5 column.</param>
        /// <param name="userData6">The value for the UserData6 column.</param>
        /// <param name="userData7">The value for the UserData7 column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="externalId1">The value for the ExternalId1 column.</param>
        /// <param name="externalId2">The value for the ExternalId2 column.</param>
        /// <param name="externalId3">The value for the ExternalId3 column.</param>
        public static int Insert(
                    AdoTransaction adoTransaction, 
                    SqlTransaction sqlTransaction, 
                    ref long rowVersion, 
                    int securityId, 
                    int accountId, 
                    int positionTypeCode, 
                    decimal quantity, 
                    decimal cost, 
                    object localCost, 
                    object tradeDate, 
                    object settlementDate, 
                    object userData0, 
                    object userData1, 
                    object userData2, 
                    object userData3, 
                    object userData4, 
                    object userData5, 
                    object userData6, 
                    object userData7, 
                    object externalId0, 
                    object externalId1, 
                    object externalId2, 
                    object externalId3)
        {
            // Accessor for the TaxLot Table.
            ServerDataModel.TaxLotDataTable taxLotTable = ServerDataModel.TaxLot;
            // Apply Defaults
            if ((localCost == null))
            {
                localCost = 0.0m;
            }
            if ((tradeDate == null))
            {
                tradeDate = System.DBNull.Value;
            }
            if ((settlementDate == null))
            {
                settlementDate = System.DBNull.Value;
            }
            if ((userData0 == null))
            {
                userData0 = System.DBNull.Value;
            }
            if ((userData1 == null))
            {
                userData1 = System.DBNull.Value;
            }
            if ((userData2 == null))
            {
                userData2 = System.DBNull.Value;
            }
            if ((userData3 == null))
            {
                userData3 = System.DBNull.Value;
            }
            if ((userData4 == null))
            {
                userData4 = System.DBNull.Value;
            }
            if ((userData5 == null))
            {
                userData5 = System.DBNull.Value;
            }
            if ((userData6 == null))
            {
                userData6 = System.DBNull.Value;
            }
            if ((userData7 == null))
            {
                userData7 = System.DBNull.Value;
            }
            if ((externalId0 == null))
            {
                externalId0 = System.DBNull.Value;
            }
            if ((externalId1 == null))
            {
                externalId1 = System.DBNull.Value;
            }
            if ((externalId2 == null))
            {
                externalId2 = System.DBNull.Value;
            }
            if ((externalId3 == null))
            {
                externalId3 = System.DBNull.Value;
            }
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Insert the record into the ADO database.
            ServerDataModel.TaxLotRow taxLotRow = taxLotTable.NewTaxLotRow();
            taxLotRow[taxLotTable.RowVersionColumn] = rowVersion;
            taxLotRow[taxLotTable.SecurityIdColumn] = securityId;
            taxLotRow[taxLotTable.AccountIdColumn] = accountId;
            taxLotRow[taxLotTable.PositionTypeCodeColumn] = positionTypeCode;
            taxLotRow[taxLotTable.QuantityColumn] = quantity;
            taxLotRow[taxLotTable.CostColumn] = cost;
            taxLotRow[taxLotTable.LocalCostColumn] = localCost;
            taxLotRow[taxLotTable.TradeDateColumn] = tradeDate;
            taxLotRow[taxLotTable.SettlementDateColumn] = settlementDate;
            taxLotRow[taxLotTable.UserData0Column] = userData0;
            taxLotRow[taxLotTable.UserData1Column] = userData1;
            taxLotRow[taxLotTable.UserData2Column] = userData2;
            taxLotRow[taxLotTable.UserData3Column] = userData3;
            taxLotRow[taxLotTable.UserData4Column] = userData4;
            taxLotRow[taxLotTable.UserData5Column] = userData5;
            taxLotRow[taxLotTable.UserData6Column] = userData6;
            taxLotRow[taxLotTable.UserData7Column] = userData7;
            taxLotRow[taxLotTable.ExternalId0Column] = externalId0;
            taxLotRow[taxLotTable.ExternalId1Column] = externalId1;
            taxLotRow[taxLotTable.ExternalId2Column] = externalId2;
            taxLotRow[taxLotTable.ExternalId3Column] = externalId3;
            taxLotTable.AddTaxLotRow(taxLotRow);
            adoTransaction.DataRows.Add(taxLotRow);
            // Insert the record into the SQL database.
            SqlCommand sqlCommand = new SqlCommand(@"insert ""TaxLot"" (""rowVersion"",""TaxLotId"",""SecurityId"",""AccountId"",""PositionTypeCode"",""Quantity"",""Cost"",""LocalCost"",""TradeDate"",""SettlementDate"",""UserData0"",""UserData1"",""UserData2"",""UserData3"",""UserData4"",""UserData5"",""UserData6"",""UserData7"",""ExternalId0"",""ExternalId1"",""ExternalId2"",""ExternalId3"") values (@rowVersion,@taxLotId,@securityId,@accountId,@positionTypeCode,@quantity,@cost,@localCost,@tradeDate,@settlementDate,@userData0,@userData1,@userData2,@userData3,@userData4,@userData5,@userData6,@userData7,@externalId0,@externalId1,@externalId2,@externalId3)");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@taxLotId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, taxLotRow[taxLotTable.TaxLotIdColumn]));
            sqlCommand.Parameters.Add(new SqlParameter("@securityId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, securityId));
            sqlCommand.Parameters.Add(new SqlParameter("@accountId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, accountId));
            sqlCommand.Parameters.Add(new SqlParameter("@positionTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, positionTypeCode));
            sqlCommand.Parameters.Add(new SqlParameter("@quantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, quantity));
            sqlCommand.Parameters.Add(new SqlParameter("@cost", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, cost));
            sqlCommand.Parameters.Add(new SqlParameter("@localCost", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, localCost));
            sqlCommand.Parameters.Add(new SqlParameter("@tradeDate", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, tradeDate));
            sqlCommand.Parameters.Add(new SqlParameter("@settlementDate", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, settlementDate));
            sqlCommand.Parameters.Add(new SqlParameter("@userData0", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, userData0));
            sqlCommand.Parameters.Add(new SqlParameter("@userData1", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, userData1));
            sqlCommand.Parameters.Add(new SqlParameter("@userData2", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, userData2));
            sqlCommand.Parameters.Add(new SqlParameter("@userData3", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, userData3));
            sqlCommand.Parameters.Add(new SqlParameter("@userData4", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, userData4));
            sqlCommand.Parameters.Add(new SqlParameter("@userData5", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, userData5));
            sqlCommand.Parameters.Add(new SqlParameter("@userData6", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, userData6));
            sqlCommand.Parameters.Add(new SqlParameter("@userData7", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, userData7));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId1", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId1));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId2", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId2));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId3", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId3));
            sqlCommand.ExecuteNonQuery();
            // Return Statements
            return taxLotRow.TaxLotId;
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Update(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Update' operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.TaxLot));
        }
        
        /// <summary>Inserts a TaxLot record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Update(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int taxLotId = parameters["taxLotId"];
            object securityId = parameters["securityId"].Value;
            object accountId = parameters["accountId"].Value;
            object positionTypeCode = parameters["positionTypeCode"].Value;
            object quantity = parameters["quantity"].Value;
            object cost = parameters["cost"].Value;
            object localCost = parameters["localCost"].Value;
            object tradeDate = parameters["tradeDate"].Value;
            object settlementDate = parameters["settlementDate"].Value;
            object userData0 = parameters["userData0"].Value;
            object userData1 = parameters["userData1"].Value;
            object userData2 = parameters["userData2"].Value;
            object userData3 = parameters["userData3"].Value;
            object userData4 = parameters["userData4"].Value;
            object userData5 = parameters["userData5"].Value;
            object userData6 = parameters["userData6"].Value;
            object userData7 = parameters["userData7"].Value;
            object externalId0 = parameters["externalId0"].Value;
            object externalId1 = parameters["externalId1"].Value;
            object externalId2 = parameters["externalId2"].Value;
            object externalId3 = parameters["externalId3"].Value;
            // Call the internal method to complete the operation.
            TaxLot.Update(adoTransaction, sqlTransaction, ref rowVersion, taxLotId, securityId, accountId, positionTypeCode, quantity, cost, localCost, tradeDate, settlementDate, userData0, userData1, userData2, userData3, userData4, userData5, userData6, userData7, externalId0, externalId1, externalId2, externalId3);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Updates a TaxLot record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="rowVersion">The version number of the row</param>
        /// <param name="taxLotId">The value for the TaxLotId column.</param>
        /// <param name="securityId">The value for the SecurityId column.</param>
        /// <param name="accountId">The value for the AccountId column.</param>
        /// <param name="positionTypeCode">The value for the PositionTypeCode column.</param>
        /// <param name="quantity">The value for the Quantity column.</param>
        /// <param name="cost">The value for the Cost column.</param>
        /// <param name="localCost">The value for the LocalCost column.</param>
        /// <param name="tradeDate">The value for the TradeDate column.</param>
        /// <param name="settlementDate">The value for the SettlementDate column.</param>
        /// <param name="userData0">The value for the UserData0 column.</param>
        /// <param name="userData1">The value for the UserData1 column.</param>
        /// <param name="userData2">The value for the UserData2 column.</param>
        /// <param name="userData3">The value for the UserData3 column.</param>
        /// <param name="userData4">The value for the UserData4 column.</param>
        /// <param name="userData5">The value for the UserData5 column.</param>
        /// <param name="userData6">The value for the UserData6 column.</param>
        /// <param name="userData7">The value for the UserData7 column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="externalId1">The value for the ExternalId1 column.</param>
        /// <param name="externalId2">The value for the ExternalId2 column.</param>
        /// <param name="externalId3">The value for the ExternalId3 column.</param>
        public static void Update(
                    AdoTransaction adoTransaction, 
                    SqlTransaction sqlTransaction, 
                    ref long rowVersion, 
                    int taxLotId, 
                    object securityId, 
                    object accountId, 
                    object positionTypeCode, 
                    object quantity, 
                    object cost, 
                    object localCost, 
                    object tradeDate, 
                    object settlementDate, 
                    object userData0, 
                    object userData1, 
                    object userData2, 
                    object userData3, 
                    object userData4, 
                    object userData5, 
                    object userData6, 
                    object userData7, 
                    object externalId0, 
                    object externalId1, 
                    object externalId2, 
                    object externalId3)
        {
            // Accessor for the TaxLot Table.
            ServerDataModel.TaxLotDataTable taxLotTable = ServerDataModel.TaxLot;
            // Rule #1: Make sure the record exists before updating it.
            ServerDataModel.TaxLotRow taxLotRow = taxLotTable.FindByTaxLotId(taxLotId);
            if ((taxLotRow == null))
            {
                throw new Exception(string.Format("The TaxLot table does not have an element identified by {0}", taxLotId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((taxLotRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Apply Defaults
            if ((securityId == null))
            {
                securityId = taxLotRow[taxLotTable.SecurityIdColumn];
            }
            if ((accountId == null))
            {
                accountId = taxLotRow[taxLotTable.AccountIdColumn];
            }
            if ((positionTypeCode == null))
            {
                positionTypeCode = taxLotRow[taxLotTable.PositionTypeCodeColumn];
            }
            if ((quantity == null))
            {
                quantity = taxLotRow[taxLotTable.QuantityColumn];
            }
            if ((cost == null))
            {
                cost = taxLotRow[taxLotTable.CostColumn];
            }
            if ((localCost == null))
            {
                localCost = taxLotRow[taxLotTable.LocalCostColumn];
            }
            if ((tradeDate == null))
            {
                tradeDate = taxLotRow[taxLotTable.TradeDateColumn];
            }
            if ((settlementDate == null))
            {
                settlementDate = taxLotRow[taxLotTable.SettlementDateColumn];
            }
            if ((userData0 == null))
            {
                userData0 = taxLotRow[taxLotTable.UserData0Column];
            }
            if ((userData1 == null))
            {
                userData1 = taxLotRow[taxLotTable.UserData1Column];
            }
            if ((userData2 == null))
            {
                userData2 = taxLotRow[taxLotTable.UserData2Column];
            }
            if ((userData3 == null))
            {
                userData3 = taxLotRow[taxLotTable.UserData3Column];
            }
            if ((userData4 == null))
            {
                userData4 = taxLotRow[taxLotTable.UserData4Column];
            }
            if ((userData5 == null))
            {
                userData5 = taxLotRow[taxLotTable.UserData5Column];
            }
            if ((userData6 == null))
            {
                userData6 = taxLotRow[taxLotTable.UserData6Column];
            }
            if ((userData7 == null))
            {
                userData7 = taxLotRow[taxLotTable.UserData7Column];
            }
            if ((externalId0 == null))
            {
                externalId0 = taxLotRow[taxLotTable.ExternalId0Column];
            }
            if ((externalId1 == null))
            {
                externalId1 = taxLotRow[taxLotTable.ExternalId1Column];
            }
            if ((externalId2 == null))
            {
                externalId2 = taxLotRow[taxLotTable.ExternalId2Column];
            }
            if ((externalId3 == null))
            {
                externalId3 = taxLotRow[taxLotTable.ExternalId3Column];
            }
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Update the record in the ADO database.
            taxLotRow[taxLotTable.RowVersionColumn] = rowVersion;
            taxLotRow[taxLotTable.SecurityIdColumn] = securityId;
            taxLotRow[taxLotTable.AccountIdColumn] = accountId;
            taxLotRow[taxLotTable.PositionTypeCodeColumn] = positionTypeCode;
            taxLotRow[taxLotTable.QuantityColumn] = quantity;
            taxLotRow[taxLotTable.CostColumn] = cost;
            taxLotRow[taxLotTable.LocalCostColumn] = localCost;
            taxLotRow[taxLotTable.TradeDateColumn] = tradeDate;
            taxLotRow[taxLotTable.SettlementDateColumn] = settlementDate;
            taxLotRow[taxLotTable.UserData0Column] = userData0;
            taxLotRow[taxLotTable.UserData1Column] = userData1;
            taxLotRow[taxLotTable.UserData2Column] = userData2;
            taxLotRow[taxLotTable.UserData3Column] = userData3;
            taxLotRow[taxLotTable.UserData4Column] = userData4;
            taxLotRow[taxLotTable.UserData5Column] = userData5;
            taxLotRow[taxLotTable.UserData6Column] = userData6;
            taxLotRow[taxLotTable.UserData7Column] = userData7;
            taxLotRow[taxLotTable.ExternalId0Column] = externalId0;
            taxLotRow[taxLotTable.ExternalId1Column] = externalId1;
            taxLotRow[taxLotTable.ExternalId2Column] = externalId2;
            taxLotRow[taxLotTable.ExternalId3Column] = externalId3;
            adoTransaction.DataRows.Add(taxLotRow);
            // Update the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand(@"update ""TaxLot"" set ""RowVersion""=@rowVersion,""SecurityId""=@securityId,""AccountId""=@accountId,""PositionTypeCode""=@positionTypeCode,""Quantity""=@quantity,""Cost""=@cost,""LocalCost""=@localCost,""TradeDate""=@tradeDate,""SettlementDate""=@settlementDate,""UserData0""=@userData0,""UserData1""=@userData1,""UserData2""=@userData2,""UserData3""=@userData3,""UserData4""=@userData4,""UserData5""=@userData5,""UserData6""=@userData6,""UserData7""=@userData7,""ExternalId0""=@externalId0,""ExternalId1""=@externalId1,""ExternalId2""=@externalId2,""ExternalId3""=@externalId3 where ""TaxLotId""=@taxLotId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@taxLotId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, taxLotId));
            sqlCommand.Parameters.Add(new SqlParameter("@securityId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, securityId));
            sqlCommand.Parameters.Add(new SqlParameter("@accountId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, accountId));
            sqlCommand.Parameters.Add(new SqlParameter("@positionTypeCode", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, positionTypeCode));
            sqlCommand.Parameters.Add(new SqlParameter("@quantity", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, quantity));
            sqlCommand.Parameters.Add(new SqlParameter("@cost", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, cost));
            sqlCommand.Parameters.Add(new SqlParameter("@localCost", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, localCost));
            sqlCommand.Parameters.Add(new SqlParameter("@tradeDate", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, tradeDate));
            sqlCommand.Parameters.Add(new SqlParameter("@settlementDate", SqlDbType.DateTime, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, settlementDate));
            sqlCommand.Parameters.Add(new SqlParameter("@userData0", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, userData0));
            sqlCommand.Parameters.Add(new SqlParameter("@userData1", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, userData1));
            sqlCommand.Parameters.Add(new SqlParameter("@userData2", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, userData2));
            sqlCommand.Parameters.Add(new SqlParameter("@userData3", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, userData3));
            sqlCommand.Parameters.Add(new SqlParameter("@userData4", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, userData4));
            sqlCommand.Parameters.Add(new SqlParameter("@userData5", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, userData5));
            sqlCommand.Parameters.Add(new SqlParameter("@userData6", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, userData6));
            sqlCommand.Parameters.Add(new SqlParameter("@userData7", SqlDbType.Decimal, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, userData7));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId1", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId1));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId2", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId2));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId3", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId3));
            // Update the record in the SQL database.
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Delete(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Delete' operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.TaxLot));
        }
        
        /// <summary>Inserts a TaxLot record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Delete(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int taxLotId = parameters["taxLotId"];
            // Call the internal method to complete the operation.
            TaxLot.Delete(adoTransaction, sqlTransaction, rowVersion, taxLotId);
        }
        
        /// <summary>Deletes a TaxLot record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="taxLotId">The value for the TaxLotId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Delete(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int taxLotId)
        {
            // Accessor for the TaxLot Table.
            ServerDataModel.TaxLotDataTable taxLotTable = ServerDataModel.TaxLot;
            // Rule #1: Make sure the record exists before updating it.
            ServerDataModel.TaxLotRow taxLotRow = taxLotTable.FindByTaxLotId(taxLotId);
            if ((taxLotRow == null))
            {
                throw new Exception(string.Format("The TaxLot table does not have an element identified by {0}", taxLotId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((taxLotRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Delete the child records.
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Delete the record in the ADO database.
            taxLotRow[taxLotTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(taxLotRow);
            taxLotRow.Delete();
            // Delete the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"TaxLot\" set \"IsDeleted\" = 1 where \"TaxLotId\"=@taxLotId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@taxLotId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, taxLotId));
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Archive(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Archive' operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.TaxLot));
        }
        
        /// <summary>Inserts a TaxLot record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Archive(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            int taxLotId = parameters["taxLotId"];
            // Call the internal method to complete the operation.
            TaxLot.Archive(adoTransaction, sqlTransaction, rowVersion, taxLotId);
        }
        
        /// <summary>Archives a TaxLot record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="taxLotId">The value for the TaxLotId column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Archive(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, int taxLotId)
        {
            // Accessor for the TaxLot Table.
            ServerDataModel.TaxLotDataTable taxLotTable = ServerDataModel.TaxLot;
            // Rule #1: Make sure the record exists before updating it.
            ServerDataModel.TaxLotRow taxLotRow = taxLotTable.FindByTaxLotId(taxLotId);
            if ((taxLotRow == null))
            {
                throw new Exception(string.Format("The TaxLot table does not have an element identified by {0}", taxLotId));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((taxLotRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Archive the child records.
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Delete the record in the ADO database.
            taxLotRow[taxLotTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(taxLotRow);
            taxLotRow.Delete();
            // Archive the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"TaxLot\" set \"IsArchived\" = 1 where \"TaxLotId\"=@taxLotId");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@taxLotId", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, taxLotId));
            sqlCommand.ExecuteNonQuery();
        }
    }
}
