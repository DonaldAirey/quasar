//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Quasar.Core
{
    using MarkThree.Quasar;
    using MarkThree.Quasar.Server;
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Data.SqlClient;
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    public class Type
    {
        
        /// This value is used to map the object to a persistent storage device.  The parameters for the storage
        /// are found in the configuration file for this service.
        public static string PersistentStore = "Quasar";
        
        /// This member provides access to the in-memory database.
        private static ServerDataModel serverDataModel = new ServerDataModel();
        
        /// <summary>Collects the table lock request(s) for an Insert operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Insert(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for this operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.Type));
        }
        
        /// <summary>Inserts a Type record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Insert(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            string description = parameters["description"];
            object externalId0 = parameters["externalId0"].Value;
            string specification = parameters["specification"];
            string typeCode = parameters["typeCode"];
            // The rowVersion is passed back to the caller in the event it's needed for additional commands in the batch.
            long rowVersion = long.MinValue;
            // Call the internal method to complete the operation.
            Type.Insert(adoTransaction, sqlTransaction, ref rowVersion, description, externalId0, specification, typeCode);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Inserts a Type record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="description">The value for the Description column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="specification">The value for the Specification column.</param>
        /// <param name="typeCode">The value for the TypeCode column.</param>
        public static void Insert(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, ref long rowVersion, string description, object externalId0, string specification, string typeCode)
        {
            // Accessor for the Type Table.
            ServerDataModel.TypeDataTable typeTable = ServerDataModel.Type;
            // Apply Defaults
            if ((externalId0 == null))
            {
                externalId0 = System.DBNull.Value;
            }
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Insert the record into the ADO database.
            ServerDataModel.TypeRow typeRow = typeTable.NewTypeRow();
            typeRow[typeTable.RowVersionColumn] = rowVersion;
            typeRow[typeTable.DescriptionColumn] = description;
            typeRow[typeTable.ExternalId0Column] = externalId0;
            typeRow[typeTable.SpecificationColumn] = specification;
            typeRow[typeTable.TypeCodeColumn] = typeCode;
            typeTable.AddTypeRow(typeRow);
            adoTransaction.DataRows.Add(typeRow);
            // Insert the record into the SQL database.
            SqlCommand sqlCommand = new SqlCommand("insert \"Type\" (\"rowVersion\",\"Description\",\"ExternalId0\",\"Specification\",\"TypeCode" +
                    "\") values (@rowVersion,@description,@externalId0,@specification,@typeCode)");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@description", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, description));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@specification", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, specification));
            sqlCommand.Parameters.Add(new SqlParameter("@typeCode", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, typeCode));
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Update(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Update' operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.Type));
            Object.Update(adoTransaction);
        }
        
        /// <summary>Inserts a Type record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Update(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            object description = parameters["description"].Value;
            object externalId0 = parameters["externalId0"].Value;
            object specification = parameters["specification"].Value;
            string typeCode = parameters["typeCode"];
            // Call the internal method to complete the operation.
            Type.Update(adoTransaction, sqlTransaction, ref rowVersion, description, externalId0, specification, typeCode);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Updates a Type record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="rowVersion">The version number of the row</param>
        /// <param name="description">The value for the Description column.</param>
        /// <param name="externalId0">The value for the ExternalId0 column.</param>
        /// <param name="specification">The value for the Specification column.</param>
        /// <param name="typeCode">The value for the TypeCode column.</param>
        public static void Update(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, ref long rowVersion, object description, object externalId0, object specification, string typeCode)
        {
            // Accessor for the Type Table.
            ServerDataModel.TypeDataTable typeTable = ServerDataModel.Type;
            // Rule #1: Make sure the record exists before updating it.
            ServerDataModel.TypeRow typeRow = typeTable.FindByTypeCode(typeCode);
            if ((typeRow == null))
            {
                throw new Exception(string.Format("The Type table does not have an element identified by {0}", typeCode));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((typeRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Apply Defaults
            if ((description == null))
            {
                description = typeRow[typeTable.DescriptionColumn];
            }
            if ((externalId0 == null))
            {
                externalId0 = typeRow[typeTable.ExternalId0Column];
            }
            if ((specification == null))
            {
                specification = typeRow[typeTable.SpecificationColumn];
            }
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Update the record in the ADO database.
            typeRow[typeTable.RowVersionColumn] = rowVersion;
            typeRow[typeTable.DescriptionColumn] = description;
            typeRow[typeTable.ExternalId0Column] = externalId0;
            typeRow[typeTable.SpecificationColumn] = specification;
            adoTransaction.DataRows.Add(typeRow);
            // Update the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Type\" set \"RowVersion\"=@rowVersion,\"Description\"=@description,\"ExternalId" +
                    "0\"=@externalId0,\"Specification\"=@specification where \"TypeCode\"=@typeCode");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@rowVersion", SqlDbType.BigInt, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, rowVersion));
            sqlCommand.Parameters.Add(new SqlParameter("@description", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, description));
            sqlCommand.Parameters.Add(new SqlParameter("@externalId0", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, externalId0));
            sqlCommand.Parameters.Add(new SqlParameter("@specification", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, specification));
            sqlCommand.Parameters.Add(new SqlParameter("@typeCode", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, typeCode));
            // Update the record in the SQL database.
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Delete(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Delete' operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.Type));
            Object.Archive(adoTransaction);
        }
        
        /// <summary>Inserts a Type record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Delete(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            string typeCode = parameters["typeCode"];
            // Call the internal method to complete the operation.
            Type.Delete(adoTransaction, sqlTransaction, rowVersion, typeCode);
        }
        
        /// <summary>Deletes a Type record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="typeCode">The value for the TypeCode column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Delete(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, string typeCode)
        {
            // Accessor for the Type Table.
            ServerDataModel.TypeDataTable typeTable = ServerDataModel.Type;
            // Rule #1: Make sure the record exists before updating it.
            ServerDataModel.TypeRow typeRow = typeTable.FindByTypeCode(typeCode);
            if ((typeRow == null))
            {
                throw new Exception(string.Format("The Type table does not have an element identified by {0}", typeCode));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((typeRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Delete the child records.
            for (int index = 0; (index < typeRow.GetObjectRows().Length); index = (index + 1))
            {
                ServerDataModel.ObjectRow childObjectRow = typeRow.GetObjectRows()[index];
                Object.Delete(adoTransaction, sqlTransaction, childObjectRow.RowVersion, childObjectRow.ObjectId);
            }
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Delete the record in the ADO database.
            typeRow[typeTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(typeRow);
            typeRow.Delete();
            // Delete the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Type\" set \"IsDeleted\" = 1 where \"TypeCode\"=@typeCode");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@typeCode", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, typeCode));
            sqlCommand.ExecuteNonQuery();
        }
        
        /// <summary>Collects the table lock request(s) for an Update operation</summary>
        /// <param name="adoTransaction">A list of locks required for this operation.</param>
        public static void Archive(AdoTransaction adoTransaction)
        {
            // These table lock(s) are required for the 'Archive' operation.
            adoTransaction.LockRequests.Add(new TableWriterRequest(ServerDataModel.Type));
            Object.Archive(adoTransaction);
        }
        
        /// <summary>Inserts a Type record using Metadata Parameters.</summary>
        /// <param name="parameters">Contains the metadata parameters.</param>
        public static void Archive(ParameterList parameters)
        {
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            long rowVersion = parameters["rowVersion"];
            string typeCode = parameters["typeCode"];
            // Call the internal method to complete the operation.
            Type.Archive(adoTransaction, sqlTransaction, rowVersion, typeCode);
        }
        
        /// <summary>Archives a Type record.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="RowVersion">The version number of this row.</param>
        /// <param name="typeCode">The value for the TypeCode column.</param>
        /// <param name="archive">true to archive the object, false to unarchive it.</param>
        public static void Archive(AdoTransaction adoTransaction, SqlTransaction sqlTransaction, long rowVersion, string typeCode)
        {
            // Accessor for the Type Table.
            ServerDataModel.TypeDataTable typeTable = ServerDataModel.Type;
            // Rule #1: Make sure the record exists before updating it.
            ServerDataModel.TypeRow typeRow = typeTable.FindByTypeCode(typeCode);
            if ((typeRow == null))
            {
                throw new Exception(string.Format("The Type table does not have an element identified by {0}", typeCode));
            }
            // Rule #2: Optimistic Concurrency Check
            if ((typeRow.RowVersion != rowVersion))
            {
                throw new System.Exception("This record is busy.  Please try again later.");
            }
            // Archive the child records.
            for (int index = 0; (index < typeRow.GetObjectRows().Length); index = (index + 1))
            {
                ServerDataModel.ObjectRow childObjectRow = typeRow.GetObjectRows()[index];
                Object.Archive(adoTransaction, sqlTransaction, childObjectRow.RowVersion, childObjectRow.ObjectId);
            }
            // Increment the row version
            rowVersion = ServerDataModel.RowVersion.Increment();
            // Delete the record in the ADO database.
            typeRow[typeTable.RowVersionColumn] = rowVersion;
            adoTransaction.DataRows.Add(typeRow);
            typeRow.Delete();
            // Archive the record in the SQL database.
            SqlCommand sqlCommand = new SqlCommand("update \"Type\" set \"IsArchived\" = 1 where \"TypeCode\"=@typeCode");
            sqlCommand.Connection = sqlTransaction.Connection;
            sqlCommand.Transaction = sqlTransaction;
            sqlCommand.Parameters.Add(new SqlParameter("@typeCode", SqlDbType.NVarChar, 0, ParameterDirection.Input, false, 0, 0, null, DataRowVersion.Current, typeCode));
            sqlCommand.ExecuteNonQuery();
        }
    }
}
