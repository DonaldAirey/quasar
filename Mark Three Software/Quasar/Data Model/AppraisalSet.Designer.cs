//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace MarkThree.Quasar {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("AppraisalSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class AppraisalSet : System.Data.DataSet {
        
        private ObjectDataTable tableObject;
        
        private ObjectTreeDataTable tableObjectTree;
        
        private SchemeDataTable tableScheme;
        
        private SectorDataTable tableSector;
        
        private SecurityDataTable tableSecurity;
        
        private PositionDataTable tablePosition;
        
        private AccountDataTable tableAccount;
        
        private System.Data.DataRelation relationFKObjectObjectTreeParentId;
        
        private System.Data.DataRelation relationFKObjectObjectTreeChildId;
        
        private System.Data.DataRelation relationFKObjectScheme;
        
        private System.Data.DataRelation relationFKObjectSector;
        
        private System.Data.DataRelation relationFKObjectSecurity;
        
        private System.Data.DataRelation relationFKSecurityPosition;
        
        private System.Data.DataRelation relationFKPositionAccount;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AppraisalSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected AppraisalSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Object"] != null)) {
                    base.Tables.Add(new ObjectDataTable(ds.Tables["Object"]));
                }
                if ((ds.Tables["ObjectTree"] != null)) {
                    base.Tables.Add(new ObjectTreeDataTable(ds.Tables["ObjectTree"]));
                }
                if ((ds.Tables["Scheme"] != null)) {
                    base.Tables.Add(new SchemeDataTable(ds.Tables["Scheme"]));
                }
                if ((ds.Tables["Sector"] != null)) {
                    base.Tables.Add(new SectorDataTable(ds.Tables["Sector"]));
                }
                if ((ds.Tables["Security"] != null)) {
                    base.Tables.Add(new SecurityDataTable(ds.Tables["Security"]));
                }
                if ((ds.Tables["Position"] != null)) {
                    base.Tables.Add(new PositionDataTable(ds.Tables["Position"]));
                }
                if ((ds.Tables["Account"] != null)) {
                    base.Tables.Add(new AccountDataTable(ds.Tables["Account"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ObjectDataTable Object {
            get {
                return this.tableObject;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ObjectTreeDataTable ObjectTree {
            get {
                return this.tableObjectTree;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SchemeDataTable Scheme {
            get {
                return this.tableScheme;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SectorDataTable Sector {
            get {
                return this.tableSector;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SecurityDataTable Security {
            get {
                return this.tableSecurity;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PositionDataTable Position {
            get {
                return this.tablePosition;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AccountDataTable Account {
            get {
                return this.tableAccount;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            AppraisalSet cln = ((AppraisalSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Object"] != null)) {
                    base.Tables.Add(new ObjectDataTable(ds.Tables["Object"]));
                }
                if ((ds.Tables["ObjectTree"] != null)) {
                    base.Tables.Add(new ObjectTreeDataTable(ds.Tables["ObjectTree"]));
                }
                if ((ds.Tables["Scheme"] != null)) {
                    base.Tables.Add(new SchemeDataTable(ds.Tables["Scheme"]));
                }
                if ((ds.Tables["Sector"] != null)) {
                    base.Tables.Add(new SectorDataTable(ds.Tables["Sector"]));
                }
                if ((ds.Tables["Security"] != null)) {
                    base.Tables.Add(new SecurityDataTable(ds.Tables["Security"]));
                }
                if ((ds.Tables["Position"] != null)) {
                    base.Tables.Add(new PositionDataTable(ds.Tables["Position"]));
                }
                if ((ds.Tables["Account"] != null)) {
                    base.Tables.Add(new AccountDataTable(ds.Tables["Account"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableObject = ((ObjectDataTable)(base.Tables["Object"]));
            if ((initTable == true)) {
                if ((this.tableObject != null)) {
                    this.tableObject.InitVars();
                }
            }
            this.tableObjectTree = ((ObjectTreeDataTable)(base.Tables["ObjectTree"]));
            if ((initTable == true)) {
                if ((this.tableObjectTree != null)) {
                    this.tableObjectTree.InitVars();
                }
            }
            this.tableScheme = ((SchemeDataTable)(base.Tables["Scheme"]));
            if ((initTable == true)) {
                if ((this.tableScheme != null)) {
                    this.tableScheme.InitVars();
                }
            }
            this.tableSector = ((SectorDataTable)(base.Tables["Sector"]));
            if ((initTable == true)) {
                if ((this.tableSector != null)) {
                    this.tableSector.InitVars();
                }
            }
            this.tableSecurity = ((SecurityDataTable)(base.Tables["Security"]));
            if ((initTable == true)) {
                if ((this.tableSecurity != null)) {
                    this.tableSecurity.InitVars();
                }
            }
            this.tablePosition = ((PositionDataTable)(base.Tables["Position"]));
            if ((initTable == true)) {
                if ((this.tablePosition != null)) {
                    this.tablePosition.InitVars();
                }
            }
            this.tableAccount = ((AccountDataTable)(base.Tables["Account"]));
            if ((initTable == true)) {
                if ((this.tableAccount != null)) {
                    this.tableAccount.InitVars();
                }
            }
            this.relationFKObjectObjectTreeParentId = this.Relations["FKObjectObjectTreeParentId"];
            this.relationFKObjectObjectTreeChildId = this.Relations["FKObjectObjectTreeChildId"];
            this.relationFKObjectScheme = this.Relations["FKObjectScheme"];
            this.relationFKObjectSector = this.Relations["FKObjectSector"];
            this.relationFKObjectSecurity = this.Relations["FKObjectSecurity"];
            this.relationFKSecurityPosition = this.Relations["FKSecurityPosition"];
            this.relationFKPositionAccount = this.Relations["FKPositionAccount"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "AppraisalSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/AppraisalSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableObject = new ObjectDataTable();
            base.Tables.Add(this.tableObject);
            this.tableObjectTree = new ObjectTreeDataTable();
            base.Tables.Add(this.tableObjectTree);
            this.tableScheme = new SchemeDataTable();
            base.Tables.Add(this.tableScheme);
            this.tableSector = new SectorDataTable();
            base.Tables.Add(this.tableSector);
            this.tableSecurity = new SecurityDataTable();
            base.Tables.Add(this.tableSecurity);
            this.tablePosition = new PositionDataTable();
            base.Tables.Add(this.tablePosition);
            this.tableAccount = new AccountDataTable();
            base.Tables.Add(this.tableAccount);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("FKObjectObjectTreeParentId", new System.Data.DataColumn[] {
                        this.tableObject.ObjectIdColumn}, new System.Data.DataColumn[] {
                        this.tableObjectTree.ParentIdColumn});
            this.tableObjectTree.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FKObjectObjectTreeChildId", new System.Data.DataColumn[] {
                        this.tableObject.ObjectIdColumn}, new System.Data.DataColumn[] {
                        this.tableObjectTree.ChildIdColumn});
            this.tableObjectTree.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FKObjectScheme", new System.Data.DataColumn[] {
                        this.tableObject.ObjectIdColumn}, new System.Data.DataColumn[] {
                        this.tableScheme.SchemeIdColumn});
            this.tableScheme.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FKObjectSector", new System.Data.DataColumn[] {
                        this.tableObject.ObjectIdColumn}, new System.Data.DataColumn[] {
                        this.tableSector.SectorIdColumn});
            this.tableSector.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FKObjectSecurity", new System.Data.DataColumn[] {
                        this.tableObject.ObjectIdColumn}, new System.Data.DataColumn[] {
                        this.tableSecurity.SecurityIdColumn});
            this.tableSecurity.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FKSecurityPosition", new System.Data.DataColumn[] {
                        this.tableSecurity.SecurityIdColumn}, new System.Data.DataColumn[] {
                        this.tablePosition.SecurityIdColumn});
            this.tablePosition.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FKPositionAccount", new System.Data.DataColumn[] {
                        this.tablePosition.SecurityIdColumn,
                        this.tablePosition.PositionTypeCodeColumn}, new System.Data.DataColumn[] {
                        this.tableAccount.SecurityIdColumn,
                        this.tableAccount.PositionTypeCodeColumn});
            this.tableAccount.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationFKObjectObjectTreeParentId = new System.Data.DataRelation("FKObjectObjectTreeParentId", new System.Data.DataColumn[] {
                        this.tableObject.ObjectIdColumn}, new System.Data.DataColumn[] {
                        this.tableObjectTree.ParentIdColumn}, false);
            this.Relations.Add(this.relationFKObjectObjectTreeParentId);
            this.relationFKObjectObjectTreeChildId = new System.Data.DataRelation("FKObjectObjectTreeChildId", new System.Data.DataColumn[] {
                        this.tableObject.ObjectIdColumn}, new System.Data.DataColumn[] {
                        this.tableObjectTree.ChildIdColumn}, false);
            this.Relations.Add(this.relationFKObjectObjectTreeChildId);
            this.relationFKObjectScheme = new System.Data.DataRelation("FKObjectScheme", new System.Data.DataColumn[] {
                        this.tableObject.ObjectIdColumn}, new System.Data.DataColumn[] {
                        this.tableScheme.SchemeIdColumn}, false);
            this.Relations.Add(this.relationFKObjectScheme);
            this.relationFKObjectSector = new System.Data.DataRelation("FKObjectSector", new System.Data.DataColumn[] {
                        this.tableObject.ObjectIdColumn}, new System.Data.DataColumn[] {
                        this.tableSector.SectorIdColumn}, false);
            this.Relations.Add(this.relationFKObjectSector);
            this.relationFKObjectSecurity = new System.Data.DataRelation("FKObjectSecurity", new System.Data.DataColumn[] {
                        this.tableObject.ObjectIdColumn}, new System.Data.DataColumn[] {
                        this.tableSecurity.SecurityIdColumn}, false);
            this.Relations.Add(this.relationFKObjectSecurity);
            this.relationFKSecurityPosition = new System.Data.DataRelation("FKSecurityPosition", new System.Data.DataColumn[] {
                        this.tableSecurity.SecurityIdColumn}, new System.Data.DataColumn[] {
                        this.tablePosition.SecurityIdColumn}, false);
            this.Relations.Add(this.relationFKSecurityPosition);
            this.relationFKPositionAccount = new System.Data.DataRelation("FKPositionAccount", new System.Data.DataColumn[] {
                        this.tablePosition.SecurityIdColumn,
                        this.tablePosition.PositionTypeCodeColumn}, new System.Data.DataColumn[] {
                        this.tableAccount.SecurityIdColumn,
                        this.tableAccount.PositionTypeCodeColumn}, false);
            this.Relations.Add(this.relationFKPositionAccount);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeObject() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeObjectTree() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeScheme() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSector() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSecurity() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePosition() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAccount() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            AppraisalSet ds = new AppraisalSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void ObjectRowChangeEventHandler(object sender, ObjectRowChangeEvent e);
        
        public delegate void ObjectTreeRowChangeEventHandler(object sender, ObjectTreeRowChangeEvent e);
        
        public delegate void SchemeRowChangeEventHandler(object sender, SchemeRowChangeEvent e);
        
        public delegate void SectorRowChangeEventHandler(object sender, SectorRowChangeEvent e);
        
        public delegate void SecurityRowChangeEventHandler(object sender, SecurityRowChangeEvent e);
        
        public delegate void PositionRowChangeEventHandler(object sender, PositionRowChangeEvent e);
        
        public delegate void AccountRowChangeEventHandler(object sender, AccountRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ObjectDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnObjectId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectDataTable() {
                this.TableName = "Object";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ObjectDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ObjectDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ObjectIdColumn {
                get {
                    return this.columnObjectId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectRow this[int index] {
                get {
                    return ((ObjectRow)(this.Rows[index]));
                }
            }
            
            public event ObjectRowChangeEventHandler ObjectRowChanging;
            
            public event ObjectRowChangeEventHandler ObjectRowChanged;
            
            public event ObjectRowChangeEventHandler ObjectRowDeleting;
            
            public event ObjectRowChangeEventHandler ObjectRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddObjectRow(ObjectRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectRow AddObjectRow(int ObjectId) {
                ObjectRow rowObjectRow = ((ObjectRow)(this.NewRow()));
                rowObjectRow.ItemArray = new object[] {
                        ObjectId};
                this.Rows.Add(rowObjectRow);
                return rowObjectRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectRow FindByObjectId(int ObjectId) {
                return ((ObjectRow)(this.Rows.Find(new object[] {
                            ObjectId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ObjectDataTable cln = ((ObjectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ObjectDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnObjectId = base.Columns["ObjectId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnObjectId = new System.Data.DataColumn("ObjectId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnObjectId);
                this.Constraints.Add(new System.Data.UniqueConstraint("PKObject", new System.Data.DataColumn[] {
                                this.columnObjectId}, true));
                this.columnObjectId.AllowDBNull = false;
                this.columnObjectId.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectRow NewObjectRow() {
                return ((ObjectRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ObjectRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ObjectRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ObjectRowChanged != null)) {
                    this.ObjectRowChanged(this, new ObjectRowChangeEvent(((ObjectRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ObjectRowChanging != null)) {
                    this.ObjectRowChanging(this, new ObjectRowChangeEvent(((ObjectRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ObjectRowDeleted != null)) {
                    this.ObjectRowDeleted(this, new ObjectRowChangeEvent(((ObjectRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ObjectRowDeleting != null)) {
                    this.ObjectRowDeleting(this, new ObjectRowChangeEvent(((ObjectRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveObjectRow(ObjectRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                AppraisalSet ds = new AppraisalSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ObjectDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ObjectTreeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnParentId;
            
            private System.Data.DataColumn columnChildId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectTreeDataTable() {
                this.TableName = "ObjectTree";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ObjectTreeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ObjectTreeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ParentIdColumn {
                get {
                    return this.columnParentId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ChildIdColumn {
                get {
                    return this.columnChildId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectTreeRow this[int index] {
                get {
                    return ((ObjectTreeRow)(this.Rows[index]));
                }
            }
            
            public event ObjectTreeRowChangeEventHandler ObjectTreeRowChanging;
            
            public event ObjectTreeRowChangeEventHandler ObjectTreeRowChanged;
            
            public event ObjectTreeRowChangeEventHandler ObjectTreeRowDeleting;
            
            public event ObjectTreeRowChangeEventHandler ObjectTreeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddObjectTreeRow(ObjectTreeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectTreeRow AddObjectTreeRow(ObjectRow parentObjectRowByFKObjectObjectTreeParentId, ObjectRow parentObjectRowByFKObjectObjectTreeChildId) {
                ObjectTreeRow rowObjectTreeRow = ((ObjectTreeRow)(this.NewRow()));
                rowObjectTreeRow.ItemArray = new object[] {
                        parentObjectRowByFKObjectObjectTreeParentId[0],
                        parentObjectRowByFKObjectObjectTreeChildId[0]};
                this.Rows.Add(rowObjectTreeRow);
                return rowObjectTreeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectTreeRow FindByParentIdChildId(int ParentId, int ChildId) {
                return ((ObjectTreeRow)(this.Rows.Find(new object[] {
                            ParentId,
                            ChildId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ObjectTreeDataTable cln = ((ObjectTreeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ObjectTreeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParentId = base.Columns["ParentId"];
                this.columnChildId = base.Columns["ChildId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParentId = new System.Data.DataColumn("ParentId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnParentId);
                this.columnChildId = new System.Data.DataColumn("ChildId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnChildId);
                this.Constraints.Add(new System.Data.UniqueConstraint("PKObjectTree", new System.Data.DataColumn[] {
                                this.columnParentId,
                                this.columnChildId}, true));
                this.columnParentId.AllowDBNull = false;
                this.columnChildId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectTreeRow NewObjectTreeRow() {
                return ((ObjectTreeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ObjectTreeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ObjectTreeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ObjectTreeRowChanged != null)) {
                    this.ObjectTreeRowChanged(this, new ObjectTreeRowChangeEvent(((ObjectTreeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ObjectTreeRowChanging != null)) {
                    this.ObjectTreeRowChanging(this, new ObjectTreeRowChangeEvent(((ObjectTreeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ObjectTreeRowDeleted != null)) {
                    this.ObjectTreeRowDeleted(this, new ObjectTreeRowChangeEvent(((ObjectTreeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ObjectTreeRowDeleting != null)) {
                    this.ObjectTreeRowDeleting(this, new ObjectTreeRowChangeEvent(((ObjectTreeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveObjectTreeRow(ObjectTreeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                AppraisalSet ds = new AppraisalSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ObjectTreeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SchemeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSchemeId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemeDataTable() {
                this.TableName = "Scheme";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SchemeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SchemeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SchemeIdColumn {
                get {
                    return this.columnSchemeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemeRow this[int index] {
                get {
                    return ((SchemeRow)(this.Rows[index]));
                }
            }
            
            public event SchemeRowChangeEventHandler SchemeRowChanging;
            
            public event SchemeRowChangeEventHandler SchemeRowChanged;
            
            public event SchemeRowChangeEventHandler SchemeRowDeleting;
            
            public event SchemeRowChangeEventHandler SchemeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSchemeRow(SchemeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemeRow AddSchemeRow(ObjectRow parentObjectRowByFKObjectScheme) {
                SchemeRow rowSchemeRow = ((SchemeRow)(this.NewRow()));
                rowSchemeRow.ItemArray = new object[] {
                        parentObjectRowByFKObjectScheme[0]};
                this.Rows.Add(rowSchemeRow);
                return rowSchemeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemeRow FindBySchemeId(int SchemeId) {
                return ((SchemeRow)(this.Rows.Find(new object[] {
                            SchemeId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SchemeDataTable cln = ((SchemeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SchemeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSchemeId = base.Columns["SchemeId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSchemeId = new System.Data.DataColumn("SchemeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchemeId);
                this.Constraints.Add(new System.Data.UniqueConstraint("PKScheme", new System.Data.DataColumn[] {
                                this.columnSchemeId}, true));
                this.columnSchemeId.AllowDBNull = false;
                this.columnSchemeId.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemeRow NewSchemeRow() {
                return ((SchemeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SchemeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SchemeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SchemeRowChanged != null)) {
                    this.SchemeRowChanged(this, new SchemeRowChangeEvent(((SchemeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SchemeRowChanging != null)) {
                    this.SchemeRowChanging(this, new SchemeRowChangeEvent(((SchemeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SchemeRowDeleted != null)) {
                    this.SchemeRowDeleted(this, new SchemeRowChangeEvent(((SchemeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SchemeRowDeleting != null)) {
                    this.SchemeRowDeleting(this, new SchemeRowChangeEvent(((SchemeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSchemeRow(SchemeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                AppraisalSet ds = new AppraisalSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SchemeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SectorDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSectorId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectorDataTable() {
                this.TableName = "Sector";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SectorDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SectorDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SectorIdColumn {
                get {
                    return this.columnSectorId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectorRow this[int index] {
                get {
                    return ((SectorRow)(this.Rows[index]));
                }
            }
            
            public event SectorRowChangeEventHandler SectorRowChanging;
            
            public event SectorRowChangeEventHandler SectorRowChanged;
            
            public event SectorRowChangeEventHandler SectorRowDeleting;
            
            public event SectorRowChangeEventHandler SectorRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSectorRow(SectorRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectorRow AddSectorRow(ObjectRow parentObjectRowByFKObjectSector) {
                SectorRow rowSectorRow = ((SectorRow)(this.NewRow()));
                rowSectorRow.ItemArray = new object[] {
                        parentObjectRowByFKObjectSector[0]};
                this.Rows.Add(rowSectorRow);
                return rowSectorRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectorRow FindBySectorId(int SectorId) {
                return ((SectorRow)(this.Rows.Find(new object[] {
                            SectorId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SectorDataTable cln = ((SectorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SectorDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSectorId = base.Columns["SectorId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSectorId = new System.Data.DataColumn("SectorId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectorId);
                this.Constraints.Add(new System.Data.UniqueConstraint("PKSector", new System.Data.DataColumn[] {
                                this.columnSectorId}, true));
                this.columnSectorId.AllowDBNull = false;
                this.columnSectorId.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectorRow NewSectorRow() {
                return ((SectorRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SectorRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SectorRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SectorRowChanged != null)) {
                    this.SectorRowChanged(this, new SectorRowChangeEvent(((SectorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SectorRowChanging != null)) {
                    this.SectorRowChanging(this, new SectorRowChangeEvent(((SectorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SectorRowDeleted != null)) {
                    this.SectorRowDeleted(this, new SectorRowChangeEvent(((SectorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SectorRowDeleting != null)) {
                    this.SectorRowDeleting(this, new SectorRowChangeEvent(((SectorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSectorRow(SectorRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                AppraisalSet ds = new AppraisalSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SectorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SecurityDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSecurityId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SecurityDataTable() {
                this.TableName = "Security";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SecurityDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SecurityDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SecurityIdColumn {
                get {
                    return this.columnSecurityId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SecurityRow this[int index] {
                get {
                    return ((SecurityRow)(this.Rows[index]));
                }
            }
            
            public event SecurityRowChangeEventHandler SecurityRowChanging;
            
            public event SecurityRowChangeEventHandler SecurityRowChanged;
            
            public event SecurityRowChangeEventHandler SecurityRowDeleting;
            
            public event SecurityRowChangeEventHandler SecurityRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSecurityRow(SecurityRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SecurityRow AddSecurityRow(ObjectRow parentObjectRowByFKObjectSecurity) {
                SecurityRow rowSecurityRow = ((SecurityRow)(this.NewRow()));
                rowSecurityRow.ItemArray = new object[] {
                        parentObjectRowByFKObjectSecurity[0]};
                this.Rows.Add(rowSecurityRow);
                return rowSecurityRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SecurityRow FindBySecurityId(int SecurityId) {
                return ((SecurityRow)(this.Rows.Find(new object[] {
                            SecurityId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SecurityDataTable cln = ((SecurityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SecurityDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSecurityId = base.Columns["SecurityId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSecurityId = new System.Data.DataColumn("SecurityId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSecurityId);
                this.Constraints.Add(new System.Data.UniqueConstraint("PKSecurity", new System.Data.DataColumn[] {
                                this.columnSecurityId}, true));
                this.columnSecurityId.AllowDBNull = false;
                this.columnSecurityId.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SecurityRow NewSecurityRow() {
                return ((SecurityRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SecurityRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SecurityRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SecurityRowChanged != null)) {
                    this.SecurityRowChanged(this, new SecurityRowChangeEvent(((SecurityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SecurityRowChanging != null)) {
                    this.SecurityRowChanging(this, new SecurityRowChangeEvent(((SecurityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SecurityRowDeleted != null)) {
                    this.SecurityRowDeleted(this, new SecurityRowChangeEvent(((SecurityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SecurityRowDeleting != null)) {
                    this.SecurityRowDeleting(this, new SecurityRowChangeEvent(((SecurityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSecurityRow(SecurityRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                AppraisalSet ds = new AppraisalSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SecurityDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PositionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSecurityId;
            
            private System.Data.DataColumn columnPositionTypeCode;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PositionDataTable() {
                this.TableName = "Position";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PositionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PositionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SecurityIdColumn {
                get {
                    return this.columnSecurityId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PositionTypeCodeColumn {
                get {
                    return this.columnPositionTypeCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PositionRow this[int index] {
                get {
                    return ((PositionRow)(this.Rows[index]));
                }
            }
            
            public event PositionRowChangeEventHandler PositionRowChanging;
            
            public event PositionRowChangeEventHandler PositionRowChanged;
            
            public event PositionRowChangeEventHandler PositionRowDeleting;
            
            public event PositionRowChangeEventHandler PositionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPositionRow(PositionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PositionRow AddPositionRow(SecurityRow parentSecurityRowByFKSecurityPosition, int PositionTypeCode) {
                PositionRow rowPositionRow = ((PositionRow)(this.NewRow()));
                rowPositionRow.ItemArray = new object[] {
                        parentSecurityRowByFKSecurityPosition[0],
                        PositionTypeCode};
                this.Rows.Add(rowPositionRow);
                return rowPositionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PositionRow FindBySecurityIdPositionTypeCode(int SecurityId, int PositionTypeCode) {
                return ((PositionRow)(this.Rows.Find(new object[] {
                            SecurityId,
                            PositionTypeCode})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PositionDataTable cln = ((PositionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PositionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSecurityId = base.Columns["SecurityId"];
                this.columnPositionTypeCode = base.Columns["PositionTypeCode"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSecurityId = new System.Data.DataColumn("SecurityId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSecurityId);
                this.columnPositionTypeCode = new System.Data.DataColumn("PositionTypeCode", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPositionTypeCode);
                this.Constraints.Add(new System.Data.UniqueConstraint("PKPosition", new System.Data.DataColumn[] {
                                this.columnSecurityId,
                                this.columnPositionTypeCode}, true));
                this.columnSecurityId.AllowDBNull = false;
                this.columnPositionTypeCode.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PositionRow NewPositionRow() {
                return ((PositionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PositionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PositionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PositionRowChanged != null)) {
                    this.PositionRowChanged(this, new PositionRowChangeEvent(((PositionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PositionRowChanging != null)) {
                    this.PositionRowChanging(this, new PositionRowChangeEvent(((PositionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PositionRowDeleted != null)) {
                    this.PositionRowDeleted(this, new PositionRowChangeEvent(((PositionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PositionRowDeleting != null)) {
                    this.PositionRowDeleting(this, new PositionRowChangeEvent(((PositionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePositionRow(PositionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                AppraisalSet ds = new AppraisalSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PositionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AccountDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnAccountId;
            
            private System.Data.DataColumn columnSecurityId;
            
            private System.Data.DataColumn columnPositionTypeCode;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountDataTable() {
                this.TableName = "Account";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AccountDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AccountDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AccountIdColumn {
                get {
                    return this.columnAccountId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SecurityIdColumn {
                get {
                    return this.columnSecurityId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PositionTypeCodeColumn {
                get {
                    return this.columnPositionTypeCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountRow this[int index] {
                get {
                    return ((AccountRow)(this.Rows[index]));
                }
            }
            
            public event AccountRowChangeEventHandler AccountRowChanging;
            
            public event AccountRowChangeEventHandler AccountRowChanged;
            
            public event AccountRowChangeEventHandler AccountRowDeleting;
            
            public event AccountRowChangeEventHandler AccountRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAccountRow(AccountRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountRow AddAccountRow(int AccountId, int SecurityId, int PositionTypeCode) {
                AccountRow rowAccountRow = ((AccountRow)(this.NewRow()));
                rowAccountRow.ItemArray = new object[] {
                        AccountId,
                        SecurityId,
                        PositionTypeCode};
                this.Rows.Add(rowAccountRow);
                return rowAccountRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountRow FindByAccountIdSecurityIdPositionTypeCode(int AccountId, int SecurityId, int PositionTypeCode) {
                return ((AccountRow)(this.Rows.Find(new object[] {
                            AccountId,
                            SecurityId,
                            PositionTypeCode})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                AccountDataTable cln = ((AccountDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new AccountDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAccountId = base.Columns["AccountId"];
                this.columnSecurityId = base.Columns["SecurityId"];
                this.columnPositionTypeCode = base.Columns["PositionTypeCode"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAccountId = new System.Data.DataColumn("AccountId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountId);
                this.columnSecurityId = new System.Data.DataColumn("SecurityId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSecurityId);
                this.columnPositionTypeCode = new System.Data.DataColumn("PositionTypeCode", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPositionTypeCode);
                this.Constraints.Add(new System.Data.UniqueConstraint("PKAccount", new System.Data.DataColumn[] {
                                this.columnAccountId,
                                this.columnSecurityId,
                                this.columnPositionTypeCode}, true));
                this.columnAccountId.AllowDBNull = false;
                this.columnSecurityId.AllowDBNull = false;
                this.columnPositionTypeCode.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountRow NewAccountRow() {
                return ((AccountRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AccountRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(AccountRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AccountRowChanged != null)) {
                    this.AccountRowChanged(this, new AccountRowChangeEvent(((AccountRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AccountRowChanging != null)) {
                    this.AccountRowChanging(this, new AccountRowChangeEvent(((AccountRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AccountRowDeleted != null)) {
                    this.AccountRowDeleted(this, new AccountRowChangeEvent(((AccountRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AccountRowDeleting != null)) {
                    this.AccountRowDeleting(this, new AccountRowChangeEvent(((AccountRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAccountRow(AccountRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                AppraisalSet ds = new AppraisalSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AccountDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ObjectRow : System.Data.DataRow {
            
            private ObjectDataTable tableObject;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ObjectRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableObject = ((ObjectDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ObjectId {
                get {
                    return ((int)(this[this.tableObject.ObjectIdColumn]));
                }
                set {
                    this[this.tableObject.ObjectIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectTreeRow[] GetObjectTreeRowsByFKObjectObjectTreeParentId() {
                return ((ObjectTreeRow[])(base.GetChildRows(this.Table.ChildRelations["FKObjectObjectTreeParentId"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectTreeRow[] GetObjectTreeRowsByFKObjectObjectTreeChildId() {
                return ((ObjectTreeRow[])(base.GetChildRows(this.Table.ChildRelations["FKObjectObjectTreeChildId"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemeRow[] GetSchemeRows() {
                return ((SchemeRow[])(base.GetChildRows(this.Table.ChildRelations["FKObjectScheme"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectorRow[] GetSectorRows() {
                return ((SectorRow[])(base.GetChildRows(this.Table.ChildRelations["FKObjectSector"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SecurityRow[] GetSecurityRows() {
                return ((SecurityRow[])(base.GetChildRows(this.Table.ChildRelations["FKObjectSecurity"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ObjectTreeRow : System.Data.DataRow {
            
            private ObjectTreeDataTable tableObjectTree;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ObjectTreeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableObjectTree = ((ObjectTreeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParentId {
                get {
                    return ((int)(this[this.tableObjectTree.ParentIdColumn]));
                }
                set {
                    this[this.tableObjectTree.ParentIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ChildId {
                get {
                    return ((int)(this[this.tableObjectTree.ChildIdColumn]));
                }
                set {
                    this[this.tableObjectTree.ChildIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectRow ObjectRowByFKObjectObjectTreeParentId {
                get {
                    return ((ObjectRow)(this.GetParentRow(this.Table.ParentRelations["FKObjectObjectTreeParentId"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FKObjectObjectTreeParentId"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectRow ObjectRowByFKObjectObjectTreeChildId {
                get {
                    return ((ObjectRow)(this.GetParentRow(this.Table.ParentRelations["FKObjectObjectTreeChildId"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FKObjectObjectTreeChildId"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SchemeRow : System.Data.DataRow {
            
            private SchemeDataTable tableScheme;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SchemeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableScheme = ((SchemeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SchemeId {
                get {
                    return ((int)(this[this.tableScheme.SchemeIdColumn]));
                }
                set {
                    this[this.tableScheme.SchemeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectRow ObjectRow {
                get {
                    return ((ObjectRow)(this.GetParentRow(this.Table.ParentRelations["FKObjectScheme"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FKObjectScheme"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SectorRow : System.Data.DataRow {
            
            private SectorDataTable tableSector;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SectorRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSector = ((SectorDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SectorId {
                get {
                    return ((int)(this[this.tableSector.SectorIdColumn]));
                }
                set {
                    this[this.tableSector.SectorIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectRow ObjectRow {
                get {
                    return ((ObjectRow)(this.GetParentRow(this.Table.ParentRelations["FKObjectSector"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FKObjectSector"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SecurityRow : System.Data.DataRow {
            
            private SecurityDataTable tableSecurity;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SecurityRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSecurity = ((SecurityDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SecurityId {
                get {
                    return ((int)(this[this.tableSecurity.SecurityIdColumn]));
                }
                set {
                    this[this.tableSecurity.SecurityIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectRow ObjectRow {
                get {
                    return ((ObjectRow)(this.GetParentRow(this.Table.ParentRelations["FKObjectSecurity"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FKObjectSecurity"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PositionRow[] GetPositionRows() {
                return ((PositionRow[])(base.GetChildRows(this.Table.ChildRelations["FKSecurityPosition"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PositionRow : System.Data.DataRow {
            
            private PositionDataTable tablePosition;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PositionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePosition = ((PositionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SecurityId {
                get {
                    return ((int)(this[this.tablePosition.SecurityIdColumn]));
                }
                set {
                    this[this.tablePosition.SecurityIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PositionTypeCode {
                get {
                    return ((int)(this[this.tablePosition.PositionTypeCodeColumn]));
                }
                set {
                    this[this.tablePosition.PositionTypeCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SecurityRow SecurityRow {
                get {
                    return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["FKSecurityPosition"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FKSecurityPosition"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountRow[] GetAccountRows() {
                return ((AccountRow[])(base.GetChildRows(this.Table.ChildRelations["FKPositionAccount"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AccountRow : System.Data.DataRow {
            
            private AccountDataTable tableAccount;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AccountRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAccount = ((AccountDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AccountId {
                get {
                    return ((int)(this[this.tableAccount.AccountIdColumn]));
                }
                set {
                    this[this.tableAccount.AccountIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SecurityId {
                get {
                    return ((int)(this[this.tableAccount.SecurityIdColumn]));
                }
                set {
                    this[this.tableAccount.SecurityIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PositionTypeCode {
                get {
                    return ((int)(this[this.tableAccount.PositionTypeCodeColumn]));
                }
                set {
                    this[this.tableAccount.PositionTypeCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PositionRow PositionRowParent {
                get {
                    return ((PositionRow)(this.GetParentRow(this.Table.ParentRelations["FKPositionAccount"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FKPositionAccount"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ObjectRowChangeEvent : System.EventArgs {
            
            private ObjectRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectRowChangeEvent(ObjectRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ObjectTreeRowChangeEvent : System.EventArgs {
            
            private ObjectTreeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectTreeRowChangeEvent(ObjectTreeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ObjectTreeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SchemeRowChangeEvent : System.EventArgs {
            
            private SchemeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemeRowChangeEvent(SchemeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SectorRowChangeEvent : System.EventArgs {
            
            private SectorRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectorRowChangeEvent(SectorRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SecurityRowChangeEvent : System.EventArgs {
            
            private SecurityRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SecurityRowChangeEvent(SecurityRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SecurityRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PositionRowChangeEvent : System.EventArgs {
            
            private PositionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PositionRowChangeEvent(PositionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PositionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AccountRowChangeEvent : System.EventArgs {
            
            private AccountRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountRowChangeEvent(AccountRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591