//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Quasar
{
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Xml;
    using System.Threading;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSetMarket : System.ComponentModel.Component
    {
        
        private static DataSet dataSet;
        
        private static TableLockCollection tableLockCollection;
        
        private static AccountDataTable tableAccount;
        
        private static TableLock lockAccount;
        
        private static AccountTypeDataTable tableAccountType;
        
        private static TableLock lockAccountType;
        
        private static AlgorithmDataTable tableAlgorithm;
        
        private static TableLock lockAlgorithm;
        
        private static AlgorithmTypeDataTable tableAlgorithmType;
        
        private static TableLock lockAlgorithmType;
        
        private static AllocationDataTable tableAllocation;
        
        private static TableLock lockAllocation;
        
        private static BlockOrderDataTable tableBlockOrder;
        
        private static TableLock lockBlockOrder;
        
        private static BlockOrderTreeDataTable tableBlockOrderTree;
        
        private static TableLock lockBlockOrderTree;
        
        private static BlotterDataTable tableBlotter;
        
        private static TableLock lockBlotter;
        
        private static BlotterTypeDataTable tableBlotterType;
        
        private static TableLock lockBlotterType;
        
        private static BlotterMapDataTable tableBlotterMap;
        
        private static TableLock lockBlotterMap;
        
        private static BrokerDataTable tableBroker;
        
        private static TableLock lockBroker;
        
        private static ConditionDataTable tableCondition;
        
        private static TableLock lockCondition;
        
        private static ConfigurationDataTable tableConfiguration;
        
        private static TableLock lockConfiguration;
        
        private static CountryDataTable tableCountry;
        
        private static TableLock lockCountry;
        
        private static CurrencyDataTable tableCurrency;
        
        private static TableLock lockCurrency;
        
        private static DebtDataTable tableDebt;
        
        private static TableLock lockDebt;
        
        private static DebtTypeDataTable tableDebtType;
        
        private static TableLock lockDebtType;
        
        private static EquityDataTable tableEquity;
        
        private static TableLock lockEquity;
        
        private static EquityTypeDataTable tableEquityType;
        
        private static TableLock lockEquityType;
        
        private static ExchangeDataTable tableExchange;
        
        private static TableLock lockExchange;
        
        private static ExecutionDataTable tableExecution;
        
        private static TableLock lockExecution;
        
        private static FolderDataTable tableFolder;
        
        private static TableLock lockFolder;
        
        private static HolidayDataTable tableHoliday;
        
        private static TableLock lockHoliday;
        
        private static HolidayTypeDataTable tableHolidayType;
        
        private static TableLock lockHolidayType;
        
        private static IssuerDataTable tableIssuer;
        
        private static TableLock lockIssuer;
        
        private static IssuerTypeDataTable tableIssuerType;
        
        private static TableLock lockIssuerType;
        
        private static LotHandlingDataTable tableLotHandling;
        
        private static TableLock lockLotHandling;
        
        private static ModelDataTable tableModel;
        
        private static TableLock lockModel;
        
        private static ModelTypeDataTable tableModelType;
        
        private static TableLock lockModelType;
        
        private static ObjectDataTable tableObject;
        
        private static TableLock lockObject;
        
        private static ObjectTreeDataTable tableObjectTree;
        
        private static TableLock lockObjectTree;
        
        private static OrderDataTable tableOrder;
        
        private static TableLock lockOrder;
        
        private static OrderTreeDataTable tableOrderTree;
        
        private static TableLock lockOrderTree;
        
        private static OrderTypeDataTable tableOrderType;
        
        private static TableLock lockOrderType;
        
        private static PlacementDataTable tablePlacement;
        
        private static TableLock lockPlacement;
        
        private static PositionDataTable tablePosition;
        
        private static TableLock lockPosition;
        
        private static PositionTargetDataTable tablePositionTarget;
        
        private static TableLock lockPositionTarget;
        
        private static PositionTypeDataTable tablePositionType;
        
        private static TableLock lockPositionType;
        
        private static PriceDataTable tablePrice;
        
        private static TableLock lockPrice;
        
        private static PropertyDataTable tableProperty;
        
        private static TableLock lockProperty;
        
        private static ProposedOrderDataTable tableProposedOrder;
        
        private static TableLock lockProposedOrder;
        
        private static ProposedOrderTreeDataTable tableProposedOrderTree;
        
        private static TableLock lockProposedOrderTree;
        
        private static ProvinceDataTable tableProvince;
        
        private static TableLock lockProvince;
        
        private static RestrictionDataTable tableRestriction;
        
        private static TableLock lockRestriction;
        
        private static SchemeDataTable tableScheme;
        
        private static TableLock lockScheme;
        
        private static SectorDataTable tableSector;
        
        private static TableLock lockSector;
        
        private static SectorTargetDataTable tableSectorTarget;
        
        private static TableLock lockSectorTarget;
        
        private static SecurityDataTable tableSecurity;
        
        private static TableLock lockSecurity;
        
        private static SecurityTypeDataTable tableSecurityType;
        
        private static TableLock lockSecurityType;
        
        private static StatusDataTable tableStatus;
        
        private static TableLock lockStatus;
        
        private static TaxLotDataTable tableTaxLot;
        
        private static TableLock lockTaxLot;
        
        private static TypeDataTable tableType;
        
        private static TableLock lockType;
        
        private static StylesheetDataTable tableStylesheet;
        
        private static TableLock lockStylesheet;
        
        private static StylesheetTypeDataTable tableStylesheetType;
        
        private static TableLock lockStylesheetType;
        
        private static SystemFolderDataTable tableSystemFolder;
        
        private static TableLock lockSystemFolder;
        
        private static TimeInForceDataTable tableTimeInForce;
        
        private static TableLock lockTimeInForce;
        
        private static TransactionTypeDataTable tableTransactionType;
        
        private static TableLock lockTransactionType;
        
        private static UserDataTable tableUser;
        
        private static TableLock lockUser;
        
        private static ViolationDataTable tableViolation;
        
        private static TableLock lockViolation;
        
        private static Relation relationFolderSystemFolder;
        
        private static Relation relationObjectFolder;
        
        private static Relation relationSystemFolderUser;
        
        private static Relation relationFKAccountTypeAccount;
        
        private static Relation relationFKAccountAllocation;
        
        private static Relation relationFKAccountOrder;
        
        private static Relation relationFKAccountPosition;
        
        private static Relation relationFKAccountProposedOrder;
        
        private static Relation relationFKAccountTaxLot;
        
        private static Relation relationFKAccountViolation;
        
        private static Relation relationFKAlgorithmBlotter;
        
        private static Relation relationFKAlgorithmModel;
        
        private static Relation relationFKAlgorithmTypeAlgorithm;
        
        private static Relation relationFKBlockOrderAllocation;
        
        private static Relation relationFKBlockOrderBlockOrderTreeChildId;
        
        private static Relation relationFKBlockOrderBlockOrderTreeParentId;
        
        private static Relation relationFKBlockOrderExecution;
        
        private static Relation relationFKBlockOrderOrder;
        
        private static Relation relationFKBlockOrderPlacement;
        
        private static Relation relationFKBlotterAccount;
        
        private static Relation relationFKBlotterBlotterMap;
        
        private static Relation relationFKBlotterTypeBlotter;
        
        private static Relation relationFKBlotterBlockOrder;
        
        private static Relation relationFKBrokerExecution;
        
        private static Relation relationFKBrokerPlacement;
        
        private static Relation relationFKCountryAccount;
        
        private static Relation relationFKCountrySecurity;
        
        private static Relation relationFKCountryHoliday;
        
        private static Relation relationFKCountryProvince;
        
        private static Relation relationFKCurrencyAccount;
        
        private static Relation relationFKCurrencyPrice;
        
        private static Relation relationFKDebtTypeDebt;
        
        private static Relation relationFKEquityTypeEquity;
        
        private static Relation relationFKExchangeEquity;
        
        private static Relation relationFKHolidayTypeHoliday;
        
        private static Relation relationFKIssuerTypeIssuer;
        
        private static Relation relationFKIssuerDebt;
        
        private static Relation relationFKUserAllocationCreatedUserId;
        
        private static Relation relationFKUserAllocationModifiedUserId;
        
        private static Relation relationFKUserExecutionCreatedUserId;
        
        private static Relation relationFKUserExecutionModifiedUserId;
        
        private static Relation relationFKUserPlacementCreatedUserId;
        
        private static Relation relationFKUserPlacementModifiedUserId;
        
        private static Relation relationFKLotHandlingAccount;
        
        private static Relation relationFKModelAccount;
        
        private static Relation relationFKModelPositionTarget;
        
        private static Relation relationFKModelTypeModel;
        
        private static Relation relationFKModelSectorTarget;
        
        private static Relation relationFKObjectAccount;
        
        private static Relation relationFKObjectBlotter;
        
        private static Relation relationFKObjectBroker;
        
        private static Relation relationFKObjectIssuer;
        
        private static Relation relationFKObjectUser;
        
        private static Relation relationFKObjectModel;
        
        private static Relation relationFKObjectObjectTreeChildId;
        
        private static Relation relationFKObjectObjectTreeParentId;
        
        private static Relation relationFKTypeObject;
        
        private static Relation relationFKObjectScheme;
        
        private static Relation relationFKObjectSector;
        
        private static Relation relationFKObjectSecurity;
        
        private static Relation relationFKOrderOrderTreeChildId;
        
        private static Relation relationFKOrderOrderTreeParentId;
        
        private static Relation relationFKOrderTypeOrder;
        
        private static Relation relationFKOrderTypePlacement;
        
        private static Relation relationFKPositionTypePosition;
        
        private static Relation relationFKPositionTypePositionTarget;
        
        private static Relation relationFKPositionTypeTaxLot;
        
        private static Relation relationFKPositionTypeViolation;
        
        private static Relation relationFKProposedOrderProposedOrderTreeChildId;
        
        private static Relation relationFKProposedOrderProposedOrderTreeParentId;
        
        private static Relation relationFKProvinceAccount;
        
        private static Relation relationFKRestrictionViolation;
        
        private static Relation relationFKSchemeAccount;
        
        private static Relation relationFKSchemeModel;
        
        private static Relation relationFKSectorSectorTarget;
        
        private static Relation relationFKSecurityAccount;
        
        private static Relation relationFKSecurityAllocationSecurityId;
        
        private static Relation relationFKSecurityAllocationSettlementId;
        
        private static Relation relationFKSecurityBlockOrderSecurityId;
        
        private static Relation relationFKSecurityBlockOrderSettlementId;
        
        private static Relation relationFKSecurityBlotterMap;
        
        private static Relation relationFKSecurityDebtDebtId;
        
        private static Relation relationFKSecurityDebtSettlementId;
        
        private static Relation relationFKSecurityCurrency;
        
        private static Relation relationFKSecurityEquityEquityId;
        
        private static Relation relationFKSecurityEquitySettlementId;
        
        private static Relation relationFKSecurityOrderSecurityId;
        
        private static Relation relationFKSecurityOrderSettlementId;
        
        private static Relation relationFKSecurityPosition;
        
        private static Relation relationFKSecurityPositionTarget;
        
        private static Relation relationFKSecurityPrice;
        
        private static Relation relationFKSecurityProposedOrderSecurityId;
        
        private static Relation relationFKSecurityProposedOrderSettlementId;
        
        private static Relation relationFKSecurityTaxLot;
        
        private static Relation relationFKSecurityViolation;
        
        private static Relation relationFKSecurityTypeSecurity;
        
        private static Relation relationFKStatusBlockOrder;
        
        private static Relation relationFKStylesheetAccount;
        
        private static Relation relationFKStylesheetBlotterBlockOrderStylesheetId;
        
        private static Relation relationFKStylesheetBlotterPlacementStylesheetId;
        
        private static Relation relationFKStylesheetBlotterExecutionStylesheetId;
        
        private static Relation relationFKStylesheetBlotterTicketStylesheetId;
        
        private static Relation relationFKStylesheetTypeStylesheet;
        
        private static Relation relationFKTimeInForceAccount;
        
        private static Relation relationFKTimeInForceOrder;
        
        private static Relation relationFKTimeInForcePlacement;
        
        private static Relation relationFKTransactionTypeAllocation;
        
        private static Relation relationFKTransactionTypeBlockOrder;
        
        private static Relation relationFKTransactionTypeOrder;
        
        private static Relation relationFKTransactionTypeProposedOrder;
        
        static DataSetMarket()
        {
            DataSetMarket.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(DataSetMarket.SchemaChanged);
            DataSetMarket.dataSet.Tables.CollectionChanged += schemaChangedHandler;
            DataSetMarket.dataSet.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static bool EnforceConstraints
        {
            get
            {
                return DataSetMarket.dataSet.EnforceConstraints;
            }
            set
            {
                DataSetMarket.dataSet.EnforceConstraints = value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableCollection Tables
        {
            get
            {
                return new TableCollection(DataSetMarket.dataSet.Tables);
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static RelationCollection Relations
        {
            get
            {
                return new RelationCollection(DataSetMarket.dataSet.Relations);
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLockCollection TableLocks
        {
            get
            {
                return DataSetMarket.tableLockCollection;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static AccountDataTable Account
        {
            get
            {
                if ((DataSetMarket.lockAccount.IsReaderLockHeld || DataSetMarket.lockAccount.IsWriterLockHeld))
                {
                    return DataSetMarket.tableAccount;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Account"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock AccountLock
        {
            get
            {
                return DataSetMarket.lockAccount;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static AccountTypeDataTable AccountType
        {
            get
            {
                if ((DataSetMarket.lockAccountType.IsReaderLockHeld || DataSetMarket.lockAccountType.IsWriterLockHeld))
                {
                    return DataSetMarket.tableAccountType;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "AccountType"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock AccountTypeLock
        {
            get
            {
                return DataSetMarket.lockAccountType;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static AlgorithmDataTable Algorithm
        {
            get
            {
                if ((DataSetMarket.lockAlgorithm.IsReaderLockHeld || DataSetMarket.lockAlgorithm.IsWriterLockHeld))
                {
                    return DataSetMarket.tableAlgorithm;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Algorithm"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock AlgorithmLock
        {
            get
            {
                return DataSetMarket.lockAlgorithm;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static AlgorithmTypeDataTable AlgorithmType
        {
            get
            {
                if ((DataSetMarket.lockAlgorithmType.IsReaderLockHeld || DataSetMarket.lockAlgorithmType.IsWriterLockHeld))
                {
                    return DataSetMarket.tableAlgorithmType;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "AlgorithmType"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock AlgorithmTypeLock
        {
            get
            {
                return DataSetMarket.lockAlgorithmType;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static AllocationDataTable Allocation
        {
            get
            {
                if ((DataSetMarket.lockAllocation.IsReaderLockHeld || DataSetMarket.lockAllocation.IsWriterLockHeld))
                {
                    return DataSetMarket.tableAllocation;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Allocation"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock AllocationLock
        {
            get
            {
                return DataSetMarket.lockAllocation;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static BlockOrderDataTable BlockOrder
        {
            get
            {
                if ((DataSetMarket.lockBlockOrder.IsReaderLockHeld || DataSetMarket.lockBlockOrder.IsWriterLockHeld))
                {
                    return DataSetMarket.tableBlockOrder;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "BlockOrder"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock BlockOrderLock
        {
            get
            {
                return DataSetMarket.lockBlockOrder;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static BlockOrderTreeDataTable BlockOrderTree
        {
            get
            {
                if ((DataSetMarket.lockBlockOrderTree.IsReaderLockHeld || DataSetMarket.lockBlockOrderTree.IsWriterLockHeld))
                {
                    return DataSetMarket.tableBlockOrderTree;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "BlockOrderTree"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock BlockOrderTreeLock
        {
            get
            {
                return DataSetMarket.lockBlockOrderTree;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static BlotterDataTable Blotter
        {
            get
            {
                if ((DataSetMarket.lockBlotter.IsReaderLockHeld || DataSetMarket.lockBlotter.IsWriterLockHeld))
                {
                    return DataSetMarket.tableBlotter;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Blotter"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock BlotterLock
        {
            get
            {
                return DataSetMarket.lockBlotter;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static BlotterTypeDataTable BlotterType
        {
            get
            {
                if ((DataSetMarket.lockBlotterType.IsReaderLockHeld || DataSetMarket.lockBlotterType.IsWriterLockHeld))
                {
                    return DataSetMarket.tableBlotterType;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "BlotterType"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock BlotterTypeLock
        {
            get
            {
                return DataSetMarket.lockBlotterType;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static BlotterMapDataTable BlotterMap
        {
            get
            {
                if ((DataSetMarket.lockBlotterMap.IsReaderLockHeld || DataSetMarket.lockBlotterMap.IsWriterLockHeld))
                {
                    return DataSetMarket.tableBlotterMap;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "BlotterMap"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock BlotterMapLock
        {
            get
            {
                return DataSetMarket.lockBlotterMap;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static BrokerDataTable Broker
        {
            get
            {
                if ((DataSetMarket.lockBroker.IsReaderLockHeld || DataSetMarket.lockBroker.IsWriterLockHeld))
                {
                    return DataSetMarket.tableBroker;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Broker"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock BrokerLock
        {
            get
            {
                return DataSetMarket.lockBroker;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static ConditionDataTable Condition
        {
            get
            {
                if ((DataSetMarket.lockCondition.IsReaderLockHeld || DataSetMarket.lockCondition.IsWriterLockHeld))
                {
                    return DataSetMarket.tableCondition;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Condition"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock ConditionLock
        {
            get
            {
                return DataSetMarket.lockCondition;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static ConfigurationDataTable Configuration
        {
            get
            {
                if ((DataSetMarket.lockConfiguration.IsReaderLockHeld || DataSetMarket.lockConfiguration.IsWriterLockHeld))
                {
                    return DataSetMarket.tableConfiguration;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Configuration"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock ConfigurationLock
        {
            get
            {
                return DataSetMarket.lockConfiguration;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static CountryDataTable Country
        {
            get
            {
                if ((DataSetMarket.lockCountry.IsReaderLockHeld || DataSetMarket.lockCountry.IsWriterLockHeld))
                {
                    return DataSetMarket.tableCountry;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Country"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock CountryLock
        {
            get
            {
                return DataSetMarket.lockCountry;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static CurrencyDataTable Currency
        {
            get
            {
                if ((DataSetMarket.lockCurrency.IsReaderLockHeld || DataSetMarket.lockCurrency.IsWriterLockHeld))
                {
                    return DataSetMarket.tableCurrency;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Currency"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock CurrencyLock
        {
            get
            {
                return DataSetMarket.lockCurrency;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static DebtDataTable Debt
        {
            get
            {
                if ((DataSetMarket.lockDebt.IsReaderLockHeld || DataSetMarket.lockDebt.IsWriterLockHeld))
                {
                    return DataSetMarket.tableDebt;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Debt"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock DebtLock
        {
            get
            {
                return DataSetMarket.lockDebt;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static DebtTypeDataTable DebtType
        {
            get
            {
                if ((DataSetMarket.lockDebtType.IsReaderLockHeld || DataSetMarket.lockDebtType.IsWriterLockHeld))
                {
                    return DataSetMarket.tableDebtType;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "DebtType"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock DebtTypeLock
        {
            get
            {
                return DataSetMarket.lockDebtType;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static EquityDataTable Equity
        {
            get
            {
                if ((DataSetMarket.lockEquity.IsReaderLockHeld || DataSetMarket.lockEquity.IsWriterLockHeld))
                {
                    return DataSetMarket.tableEquity;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Equity"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock EquityLock
        {
            get
            {
                return DataSetMarket.lockEquity;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static EquityTypeDataTable EquityType
        {
            get
            {
                if ((DataSetMarket.lockEquityType.IsReaderLockHeld || DataSetMarket.lockEquityType.IsWriterLockHeld))
                {
                    return DataSetMarket.tableEquityType;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "EquityType"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock EquityTypeLock
        {
            get
            {
                return DataSetMarket.lockEquityType;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static ExchangeDataTable Exchange
        {
            get
            {
                if ((DataSetMarket.lockExchange.IsReaderLockHeld || DataSetMarket.lockExchange.IsWriterLockHeld))
                {
                    return DataSetMarket.tableExchange;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Exchange"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock ExchangeLock
        {
            get
            {
                return DataSetMarket.lockExchange;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static ExecutionDataTable Execution
        {
            get
            {
                if ((DataSetMarket.lockExecution.IsReaderLockHeld || DataSetMarket.lockExecution.IsWriterLockHeld))
                {
                    return DataSetMarket.tableExecution;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Execution"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock ExecutionLock
        {
            get
            {
                return DataSetMarket.lockExecution;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static FolderDataTable Folder
        {
            get
            {
                if ((DataSetMarket.lockFolder.IsReaderLockHeld || DataSetMarket.lockFolder.IsWriterLockHeld))
                {
                    return DataSetMarket.tableFolder;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Folder"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock FolderLock
        {
            get
            {
                return DataSetMarket.lockFolder;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static HolidayDataTable Holiday
        {
            get
            {
                if ((DataSetMarket.lockHoliday.IsReaderLockHeld || DataSetMarket.lockHoliday.IsWriterLockHeld))
                {
                    return DataSetMarket.tableHoliday;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Holiday"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock HolidayLock
        {
            get
            {
                return DataSetMarket.lockHoliday;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static HolidayTypeDataTable HolidayType
        {
            get
            {
                if ((DataSetMarket.lockHolidayType.IsReaderLockHeld || DataSetMarket.lockHolidayType.IsWriterLockHeld))
                {
                    return DataSetMarket.tableHolidayType;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "HolidayType"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock HolidayTypeLock
        {
            get
            {
                return DataSetMarket.lockHolidayType;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static IssuerDataTable Issuer
        {
            get
            {
                if ((DataSetMarket.lockIssuer.IsReaderLockHeld || DataSetMarket.lockIssuer.IsWriterLockHeld))
                {
                    return DataSetMarket.tableIssuer;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Issuer"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock IssuerLock
        {
            get
            {
                return DataSetMarket.lockIssuer;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static IssuerTypeDataTable IssuerType
        {
            get
            {
                if ((DataSetMarket.lockIssuerType.IsReaderLockHeld || DataSetMarket.lockIssuerType.IsWriterLockHeld))
                {
                    return DataSetMarket.tableIssuerType;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "IssuerType"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock IssuerTypeLock
        {
            get
            {
                return DataSetMarket.lockIssuerType;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static LotHandlingDataTable LotHandling
        {
            get
            {
                if ((DataSetMarket.lockLotHandling.IsReaderLockHeld || DataSetMarket.lockLotHandling.IsWriterLockHeld))
                {
                    return DataSetMarket.tableLotHandling;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "LotHandling"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock LotHandlingLock
        {
            get
            {
                return DataSetMarket.lockLotHandling;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static ModelDataTable Model
        {
            get
            {
                if ((DataSetMarket.lockModel.IsReaderLockHeld || DataSetMarket.lockModel.IsWriterLockHeld))
                {
                    return DataSetMarket.tableModel;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Model"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock ModelLock
        {
            get
            {
                return DataSetMarket.lockModel;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static ModelTypeDataTable ModelType
        {
            get
            {
                if ((DataSetMarket.lockModelType.IsReaderLockHeld || DataSetMarket.lockModelType.IsWriterLockHeld))
                {
                    return DataSetMarket.tableModelType;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "ModelType"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock ModelTypeLock
        {
            get
            {
                return DataSetMarket.lockModelType;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static ObjectDataTable Object
        {
            get
            {
                if ((DataSetMarket.lockObject.IsReaderLockHeld || DataSetMarket.lockObject.IsWriterLockHeld))
                {
                    return DataSetMarket.tableObject;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Object"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock ObjectLock
        {
            get
            {
                return DataSetMarket.lockObject;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static ObjectTreeDataTable ObjectTree
        {
            get
            {
                if ((DataSetMarket.lockObjectTree.IsReaderLockHeld || DataSetMarket.lockObjectTree.IsWriterLockHeld))
                {
                    return DataSetMarket.tableObjectTree;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "ObjectTree"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock ObjectTreeLock
        {
            get
            {
                return DataSetMarket.lockObjectTree;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static OrderDataTable Order
        {
            get
            {
                if ((DataSetMarket.lockOrder.IsReaderLockHeld || DataSetMarket.lockOrder.IsWriterLockHeld))
                {
                    return DataSetMarket.tableOrder;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Order"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock OrderLock
        {
            get
            {
                return DataSetMarket.lockOrder;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static OrderTreeDataTable OrderTree
        {
            get
            {
                if ((DataSetMarket.lockOrderTree.IsReaderLockHeld || DataSetMarket.lockOrderTree.IsWriterLockHeld))
                {
                    return DataSetMarket.tableOrderTree;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "OrderTree"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock OrderTreeLock
        {
            get
            {
                return DataSetMarket.lockOrderTree;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static OrderTypeDataTable OrderType
        {
            get
            {
                if ((DataSetMarket.lockOrderType.IsReaderLockHeld || DataSetMarket.lockOrderType.IsWriterLockHeld))
                {
                    return DataSetMarket.tableOrderType;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "OrderType"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock OrderTypeLock
        {
            get
            {
                return DataSetMarket.lockOrderType;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static PlacementDataTable Placement
        {
            get
            {
                if ((DataSetMarket.lockPlacement.IsReaderLockHeld || DataSetMarket.lockPlacement.IsWriterLockHeld))
                {
                    return DataSetMarket.tablePlacement;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Placement"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock PlacementLock
        {
            get
            {
                return DataSetMarket.lockPlacement;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static PositionDataTable Position
        {
            get
            {
                if ((DataSetMarket.lockPosition.IsReaderLockHeld || DataSetMarket.lockPosition.IsWriterLockHeld))
                {
                    return DataSetMarket.tablePosition;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Position"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock PositionLock
        {
            get
            {
                return DataSetMarket.lockPosition;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static PositionTargetDataTable PositionTarget
        {
            get
            {
                if ((DataSetMarket.lockPositionTarget.IsReaderLockHeld || DataSetMarket.lockPositionTarget.IsWriterLockHeld))
                {
                    return DataSetMarket.tablePositionTarget;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "PositionTarget"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock PositionTargetLock
        {
            get
            {
                return DataSetMarket.lockPositionTarget;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static PositionTypeDataTable PositionType
        {
            get
            {
                if ((DataSetMarket.lockPositionType.IsReaderLockHeld || DataSetMarket.lockPositionType.IsWriterLockHeld))
                {
                    return DataSetMarket.tablePositionType;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "PositionType"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock PositionTypeLock
        {
            get
            {
                return DataSetMarket.lockPositionType;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static PriceDataTable Price
        {
            get
            {
                if ((DataSetMarket.lockPrice.IsReaderLockHeld || DataSetMarket.lockPrice.IsWriterLockHeld))
                {
                    return DataSetMarket.tablePrice;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Price"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock PriceLock
        {
            get
            {
                return DataSetMarket.lockPrice;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static PropertyDataTable Property
        {
            get
            {
                if ((DataSetMarket.lockProperty.IsReaderLockHeld || DataSetMarket.lockProperty.IsWriterLockHeld))
                {
                    return DataSetMarket.tableProperty;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Property"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock PropertyLock
        {
            get
            {
                return DataSetMarket.lockProperty;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static ProposedOrderDataTable ProposedOrder
        {
            get
            {
                if ((DataSetMarket.lockProposedOrder.IsReaderLockHeld || DataSetMarket.lockProposedOrder.IsWriterLockHeld))
                {
                    return DataSetMarket.tableProposedOrder;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "ProposedOrder"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock ProposedOrderLock
        {
            get
            {
                return DataSetMarket.lockProposedOrder;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static ProposedOrderTreeDataTable ProposedOrderTree
        {
            get
            {
                if ((DataSetMarket.lockProposedOrderTree.IsReaderLockHeld || DataSetMarket.lockProposedOrderTree.IsWriterLockHeld))
                {
                    return DataSetMarket.tableProposedOrderTree;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "ProposedOrderTree"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock ProposedOrderTreeLock
        {
            get
            {
                return DataSetMarket.lockProposedOrderTree;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static ProvinceDataTable Province
        {
            get
            {
                if ((DataSetMarket.lockProvince.IsReaderLockHeld || DataSetMarket.lockProvince.IsWriterLockHeld))
                {
                    return DataSetMarket.tableProvince;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Province"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock ProvinceLock
        {
            get
            {
                return DataSetMarket.lockProvince;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static RestrictionDataTable Restriction
        {
            get
            {
                if ((DataSetMarket.lockRestriction.IsReaderLockHeld || DataSetMarket.lockRestriction.IsWriterLockHeld))
                {
                    return DataSetMarket.tableRestriction;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Restriction"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock RestrictionLock
        {
            get
            {
                return DataSetMarket.lockRestriction;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static SchemeDataTable Scheme
        {
            get
            {
                if ((DataSetMarket.lockScheme.IsReaderLockHeld || DataSetMarket.lockScheme.IsWriterLockHeld))
                {
                    return DataSetMarket.tableScheme;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Scheme"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock SchemeLock
        {
            get
            {
                return DataSetMarket.lockScheme;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static SectorDataTable Sector
        {
            get
            {
                if ((DataSetMarket.lockSector.IsReaderLockHeld || DataSetMarket.lockSector.IsWriterLockHeld))
                {
                    return DataSetMarket.tableSector;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Sector"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock SectorLock
        {
            get
            {
                return DataSetMarket.lockSector;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static SectorTargetDataTable SectorTarget
        {
            get
            {
                if ((DataSetMarket.lockSectorTarget.IsReaderLockHeld || DataSetMarket.lockSectorTarget.IsWriterLockHeld))
                {
                    return DataSetMarket.tableSectorTarget;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "SectorTarget"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock SectorTargetLock
        {
            get
            {
                return DataSetMarket.lockSectorTarget;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static SecurityDataTable Security
        {
            get
            {
                if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                {
                    return DataSetMarket.tableSecurity;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock SecurityLock
        {
            get
            {
                return DataSetMarket.lockSecurity;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static SecurityTypeDataTable SecurityType
        {
            get
            {
                if ((DataSetMarket.lockSecurityType.IsReaderLockHeld || DataSetMarket.lockSecurityType.IsWriterLockHeld))
                {
                    return DataSetMarket.tableSecurityType;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "SecurityType"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock SecurityTypeLock
        {
            get
            {
                return DataSetMarket.lockSecurityType;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static StatusDataTable Status
        {
            get
            {
                if ((DataSetMarket.lockStatus.IsReaderLockHeld || DataSetMarket.lockStatus.IsWriterLockHeld))
                {
                    return DataSetMarket.tableStatus;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Status"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock StatusLock
        {
            get
            {
                return DataSetMarket.lockStatus;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TaxLotDataTable TaxLot
        {
            get
            {
                if ((DataSetMarket.lockTaxLot.IsReaderLockHeld || DataSetMarket.lockTaxLot.IsWriterLockHeld))
                {
                    return DataSetMarket.tableTaxLot;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "TaxLot"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock TaxLotLock
        {
            get
            {
                return DataSetMarket.lockTaxLot;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TypeDataTable Type
        {
            get
            {
                if ((DataSetMarket.lockType.IsReaderLockHeld || DataSetMarket.lockType.IsWriterLockHeld))
                {
                    return DataSetMarket.tableType;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Type"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock TypeLock
        {
            get
            {
                return DataSetMarket.lockType;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static StylesheetDataTable Stylesheet
        {
            get
            {
                if ((DataSetMarket.lockStylesheet.IsReaderLockHeld || DataSetMarket.lockStylesheet.IsWriterLockHeld))
                {
                    return DataSetMarket.tableStylesheet;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Stylesheet"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock StylesheetLock
        {
            get
            {
                return DataSetMarket.lockStylesheet;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static StylesheetTypeDataTable StylesheetType
        {
            get
            {
                if ((DataSetMarket.lockStylesheetType.IsReaderLockHeld || DataSetMarket.lockStylesheetType.IsWriterLockHeld))
                {
                    return DataSetMarket.tableStylesheetType;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "StylesheetType"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock StylesheetTypeLock
        {
            get
            {
                return DataSetMarket.lockStylesheetType;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static SystemFolderDataTable SystemFolder
        {
            get
            {
                if ((DataSetMarket.lockSystemFolder.IsReaderLockHeld || DataSetMarket.lockSystemFolder.IsWriterLockHeld))
                {
                    return DataSetMarket.tableSystemFolder;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "SystemFolder"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock SystemFolderLock
        {
            get
            {
                return DataSetMarket.lockSystemFolder;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TimeInForceDataTable TimeInForce
        {
            get
            {
                if ((DataSetMarket.lockTimeInForce.IsReaderLockHeld || DataSetMarket.lockTimeInForce.IsWriterLockHeld))
                {
                    return DataSetMarket.tableTimeInForce;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "TimeInForce"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock TimeInForceLock
        {
            get
            {
                return DataSetMarket.lockTimeInForce;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TransactionTypeDataTable TransactionType
        {
            get
            {
                if ((DataSetMarket.lockTransactionType.IsReaderLockHeld || DataSetMarket.lockTransactionType.IsWriterLockHeld))
                {
                    return DataSetMarket.tableTransactionType;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "TransactionType"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock TransactionTypeLock
        {
            get
            {
                return DataSetMarket.lockTransactionType;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static UserDataTable User
        {
            get
            {
                if ((DataSetMarket.lockUser.IsReaderLockHeld || DataSetMarket.lockUser.IsWriterLockHeld))
                {
                    return DataSetMarket.tableUser;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "User"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock UserLock
        {
            get
            {
                return DataSetMarket.lockUser;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static ViolationDataTable Violation
        {
            get
            {
                if ((DataSetMarket.lockViolation.IsReaderLockHeld || DataSetMarket.lockViolation.IsWriterLockHeld))
                {
                    return DataSetMarket.tableViolation;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Violation"));
                }
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public static TableLock ViolationLock
        {
            get
            {
                return DataSetMarket.lockViolation;
            }
        }
        
        public static void Merge(DataSet dataSet)
        {
            DataSetMarket.dataSet.Merge(dataSet);
        }
        
        public static void ReadXml(string fileName)
        {
            DataSetMarket.dataSet.ReadXml(fileName);
        }
        
        public static void AcceptChanges()
        {
            DataSetMarket.dataSet.AcceptChanges();
        }
        
        public static void Clear()
        {
            DataSetMarket.dataSet.Clear();
        }
        
        internal static void InitVars()
        {
            DataSetMarket.tableAccount = ((AccountDataTable)(DataSetMarket.Tables["Account"]));
            if ((DataSetMarket.tableAccount != null))
            {
                DataSetMarket.tableAccount.InitVars();
            }
            DataSetMarket.tableAccountType = ((AccountTypeDataTable)(DataSetMarket.Tables["AccountType"]));
            if ((DataSetMarket.tableAccountType != null))
            {
                DataSetMarket.tableAccountType.InitVars();
            }
            DataSetMarket.tableAlgorithm = ((AlgorithmDataTable)(DataSetMarket.Tables["Algorithm"]));
            if ((DataSetMarket.tableAlgorithm != null))
            {
                DataSetMarket.tableAlgorithm.InitVars();
            }
            DataSetMarket.tableAlgorithmType = ((AlgorithmTypeDataTable)(DataSetMarket.Tables["AlgorithmType"]));
            if ((DataSetMarket.tableAlgorithmType != null))
            {
                DataSetMarket.tableAlgorithmType.InitVars();
            }
            DataSetMarket.tableAllocation = ((AllocationDataTable)(DataSetMarket.Tables["Allocation"]));
            if ((DataSetMarket.tableAllocation != null))
            {
                DataSetMarket.tableAllocation.InitVars();
            }
            DataSetMarket.tableBlockOrder = ((BlockOrderDataTable)(DataSetMarket.Tables["BlockOrder"]));
            if ((DataSetMarket.tableBlockOrder != null))
            {
                DataSetMarket.tableBlockOrder.InitVars();
            }
            DataSetMarket.tableBlockOrderTree = ((BlockOrderTreeDataTable)(DataSetMarket.Tables["BlockOrderTree"]));
            if ((DataSetMarket.tableBlockOrderTree != null))
            {
                DataSetMarket.tableBlockOrderTree.InitVars();
            }
            DataSetMarket.tableBlotter = ((BlotterDataTable)(DataSetMarket.Tables["Blotter"]));
            if ((DataSetMarket.tableBlotter != null))
            {
                DataSetMarket.tableBlotter.InitVars();
            }
            DataSetMarket.tableBlotterType = ((BlotterTypeDataTable)(DataSetMarket.Tables["BlotterType"]));
            if ((DataSetMarket.tableBlotterType != null))
            {
                DataSetMarket.tableBlotterType.InitVars();
            }
            DataSetMarket.tableBlotterMap = ((BlotterMapDataTable)(DataSetMarket.Tables["BlotterMap"]));
            if ((DataSetMarket.tableBlotterMap != null))
            {
                DataSetMarket.tableBlotterMap.InitVars();
            }
            DataSetMarket.tableBroker = ((BrokerDataTable)(DataSetMarket.Tables["Broker"]));
            if ((DataSetMarket.tableBroker != null))
            {
                DataSetMarket.tableBroker.InitVars();
            }
            DataSetMarket.tableCondition = ((ConditionDataTable)(DataSetMarket.Tables["Condition"]));
            if ((DataSetMarket.tableCondition != null))
            {
                DataSetMarket.tableCondition.InitVars();
            }
            DataSetMarket.tableConfiguration = ((ConfigurationDataTable)(DataSetMarket.Tables["Configuration"]));
            if ((DataSetMarket.tableConfiguration != null))
            {
                DataSetMarket.tableConfiguration.InitVars();
            }
            DataSetMarket.tableCountry = ((CountryDataTable)(DataSetMarket.Tables["Country"]));
            if ((DataSetMarket.tableCountry != null))
            {
                DataSetMarket.tableCountry.InitVars();
            }
            DataSetMarket.tableCurrency = ((CurrencyDataTable)(DataSetMarket.Tables["Currency"]));
            if ((DataSetMarket.tableCurrency != null))
            {
                DataSetMarket.tableCurrency.InitVars();
            }
            DataSetMarket.tableDebt = ((DebtDataTable)(DataSetMarket.Tables["Debt"]));
            if ((DataSetMarket.tableDebt != null))
            {
                DataSetMarket.tableDebt.InitVars();
            }
            DataSetMarket.tableDebtType = ((DebtTypeDataTable)(DataSetMarket.Tables["DebtType"]));
            if ((DataSetMarket.tableDebtType != null))
            {
                DataSetMarket.tableDebtType.InitVars();
            }
            DataSetMarket.tableEquity = ((EquityDataTable)(DataSetMarket.Tables["Equity"]));
            if ((DataSetMarket.tableEquity != null))
            {
                DataSetMarket.tableEquity.InitVars();
            }
            DataSetMarket.tableEquityType = ((EquityTypeDataTable)(DataSetMarket.Tables["EquityType"]));
            if ((DataSetMarket.tableEquityType != null))
            {
                DataSetMarket.tableEquityType.InitVars();
            }
            DataSetMarket.tableExchange = ((ExchangeDataTable)(DataSetMarket.Tables["Exchange"]));
            if ((DataSetMarket.tableExchange != null))
            {
                DataSetMarket.tableExchange.InitVars();
            }
            DataSetMarket.tableExecution = ((ExecutionDataTable)(DataSetMarket.Tables["Execution"]));
            if ((DataSetMarket.tableExecution != null))
            {
                DataSetMarket.tableExecution.InitVars();
            }
            DataSetMarket.tableFolder = ((FolderDataTable)(DataSetMarket.Tables["Folder"]));
            if ((DataSetMarket.tableFolder != null))
            {
                DataSetMarket.tableFolder.InitVars();
            }
            DataSetMarket.tableHoliday = ((HolidayDataTable)(DataSetMarket.Tables["Holiday"]));
            if ((DataSetMarket.tableHoliday != null))
            {
                DataSetMarket.tableHoliday.InitVars();
            }
            DataSetMarket.tableHolidayType = ((HolidayTypeDataTable)(DataSetMarket.Tables["HolidayType"]));
            if ((DataSetMarket.tableHolidayType != null))
            {
                DataSetMarket.tableHolidayType.InitVars();
            }
            DataSetMarket.tableIssuer = ((IssuerDataTable)(DataSetMarket.Tables["Issuer"]));
            if ((DataSetMarket.tableIssuer != null))
            {
                DataSetMarket.tableIssuer.InitVars();
            }
            DataSetMarket.tableIssuerType = ((IssuerTypeDataTable)(DataSetMarket.Tables["IssuerType"]));
            if ((DataSetMarket.tableIssuerType != null))
            {
                DataSetMarket.tableIssuerType.InitVars();
            }
            DataSetMarket.tableLotHandling = ((LotHandlingDataTable)(DataSetMarket.Tables["LotHandling"]));
            if ((DataSetMarket.tableLotHandling != null))
            {
                DataSetMarket.tableLotHandling.InitVars();
            }
            DataSetMarket.tableModel = ((ModelDataTable)(DataSetMarket.Tables["Model"]));
            if ((DataSetMarket.tableModel != null))
            {
                DataSetMarket.tableModel.InitVars();
            }
            DataSetMarket.tableModelType = ((ModelTypeDataTable)(DataSetMarket.Tables["ModelType"]));
            if ((DataSetMarket.tableModelType != null))
            {
                DataSetMarket.tableModelType.InitVars();
            }
            DataSetMarket.tableObject = ((ObjectDataTable)(DataSetMarket.Tables["Object"]));
            if ((DataSetMarket.tableObject != null))
            {
                DataSetMarket.tableObject.InitVars();
            }
            DataSetMarket.tableObjectTree = ((ObjectTreeDataTable)(DataSetMarket.Tables["ObjectTree"]));
            if ((DataSetMarket.tableObjectTree != null))
            {
                DataSetMarket.tableObjectTree.InitVars();
            }
            DataSetMarket.tableOrder = ((OrderDataTable)(DataSetMarket.Tables["Order"]));
            if ((DataSetMarket.tableOrder != null))
            {
                DataSetMarket.tableOrder.InitVars();
            }
            DataSetMarket.tableOrderTree = ((OrderTreeDataTable)(DataSetMarket.Tables["OrderTree"]));
            if ((DataSetMarket.tableOrderTree != null))
            {
                DataSetMarket.tableOrderTree.InitVars();
            }
            DataSetMarket.tableOrderType = ((OrderTypeDataTable)(DataSetMarket.Tables["OrderType"]));
            if ((DataSetMarket.tableOrderType != null))
            {
                DataSetMarket.tableOrderType.InitVars();
            }
            DataSetMarket.tablePlacement = ((PlacementDataTable)(DataSetMarket.Tables["Placement"]));
            if ((DataSetMarket.tablePlacement != null))
            {
                DataSetMarket.tablePlacement.InitVars();
            }
            DataSetMarket.tablePosition = ((PositionDataTable)(DataSetMarket.Tables["Position"]));
            if ((DataSetMarket.tablePosition != null))
            {
                DataSetMarket.tablePosition.InitVars();
            }
            DataSetMarket.tablePositionTarget = ((PositionTargetDataTable)(DataSetMarket.Tables["PositionTarget"]));
            if ((DataSetMarket.tablePositionTarget != null))
            {
                DataSetMarket.tablePositionTarget.InitVars();
            }
            DataSetMarket.tablePositionType = ((PositionTypeDataTable)(DataSetMarket.Tables["PositionType"]));
            if ((DataSetMarket.tablePositionType != null))
            {
                DataSetMarket.tablePositionType.InitVars();
            }
            DataSetMarket.tablePrice = ((PriceDataTable)(DataSetMarket.Tables["Price"]));
            if ((DataSetMarket.tablePrice != null))
            {
                DataSetMarket.tablePrice.InitVars();
            }
            DataSetMarket.tableProperty = ((PropertyDataTable)(DataSetMarket.Tables["Property"]));
            if ((DataSetMarket.tableProperty != null))
            {
                DataSetMarket.tableProperty.InitVars();
            }
            DataSetMarket.tableProposedOrder = ((ProposedOrderDataTable)(DataSetMarket.Tables["ProposedOrder"]));
            if ((DataSetMarket.tableProposedOrder != null))
            {
                DataSetMarket.tableProposedOrder.InitVars();
            }
            DataSetMarket.tableProposedOrderTree = ((ProposedOrderTreeDataTable)(DataSetMarket.Tables["ProposedOrderTree"]));
            if ((DataSetMarket.tableProposedOrderTree != null))
            {
                DataSetMarket.tableProposedOrderTree.InitVars();
            }
            DataSetMarket.tableProvince = ((ProvinceDataTable)(DataSetMarket.Tables["Province"]));
            if ((DataSetMarket.tableProvince != null))
            {
                DataSetMarket.tableProvince.InitVars();
            }
            DataSetMarket.tableRestriction = ((RestrictionDataTable)(DataSetMarket.Tables["Restriction"]));
            if ((DataSetMarket.tableRestriction != null))
            {
                DataSetMarket.tableRestriction.InitVars();
            }
            DataSetMarket.tableScheme = ((SchemeDataTable)(DataSetMarket.Tables["Scheme"]));
            if ((DataSetMarket.tableScheme != null))
            {
                DataSetMarket.tableScheme.InitVars();
            }
            DataSetMarket.tableSector = ((SectorDataTable)(DataSetMarket.Tables["Sector"]));
            if ((DataSetMarket.tableSector != null))
            {
                DataSetMarket.tableSector.InitVars();
            }
            DataSetMarket.tableSectorTarget = ((SectorTargetDataTable)(DataSetMarket.Tables["SectorTarget"]));
            if ((DataSetMarket.tableSectorTarget != null))
            {
                DataSetMarket.tableSectorTarget.InitVars();
            }
            DataSetMarket.tableSecurity = ((SecurityDataTable)(DataSetMarket.Tables["Security"]));
            if ((DataSetMarket.tableSecurity != null))
            {
                DataSetMarket.tableSecurity.InitVars();
            }
            DataSetMarket.tableSecurityType = ((SecurityTypeDataTable)(DataSetMarket.Tables["SecurityType"]));
            if ((DataSetMarket.tableSecurityType != null))
            {
                DataSetMarket.tableSecurityType.InitVars();
            }
            DataSetMarket.tableStatus = ((StatusDataTable)(DataSetMarket.Tables["Status"]));
            if ((DataSetMarket.tableStatus != null))
            {
                DataSetMarket.tableStatus.InitVars();
            }
            DataSetMarket.tableTaxLot = ((TaxLotDataTable)(DataSetMarket.Tables["TaxLot"]));
            if ((DataSetMarket.tableTaxLot != null))
            {
                DataSetMarket.tableTaxLot.InitVars();
            }
            DataSetMarket.tableType = ((TypeDataTable)(DataSetMarket.Tables["Type"]));
            if ((DataSetMarket.tableType != null))
            {
                DataSetMarket.tableType.InitVars();
            }
            DataSetMarket.tableStylesheet = ((StylesheetDataTable)(DataSetMarket.Tables["Stylesheet"]));
            if ((DataSetMarket.tableStylesheet != null))
            {
                DataSetMarket.tableStylesheet.InitVars();
            }
            DataSetMarket.tableStylesheetType = ((StylesheetTypeDataTable)(DataSetMarket.Tables["StylesheetType"]));
            if ((DataSetMarket.tableStylesheetType != null))
            {
                DataSetMarket.tableStylesheetType.InitVars();
            }
            DataSetMarket.tableSystemFolder = ((SystemFolderDataTable)(DataSetMarket.Tables["SystemFolder"]));
            if ((DataSetMarket.tableSystemFolder != null))
            {
                DataSetMarket.tableSystemFolder.InitVars();
            }
            DataSetMarket.tableTimeInForce = ((TimeInForceDataTable)(DataSetMarket.Tables["TimeInForce"]));
            if ((DataSetMarket.tableTimeInForce != null))
            {
                DataSetMarket.tableTimeInForce.InitVars();
            }
            DataSetMarket.tableTransactionType = ((TransactionTypeDataTable)(DataSetMarket.Tables["TransactionType"]));
            if ((DataSetMarket.tableTransactionType != null))
            {
                DataSetMarket.tableTransactionType.InitVars();
            }
            DataSetMarket.tableUser = ((UserDataTable)(DataSetMarket.Tables["User"]));
            if ((DataSetMarket.tableUser != null))
            {
                DataSetMarket.tableUser.InitVars();
            }
            DataSetMarket.tableViolation = ((ViolationDataTable)(DataSetMarket.Tables["Violation"]));
            if ((DataSetMarket.tableViolation != null))
            {
                DataSetMarket.tableViolation.InitVars();
            }
            DataSetMarket.relationFolderSystemFolder = DataSetMarket.Relations["FolderSystemFolder"];
            DataSetMarket.relationObjectFolder = DataSetMarket.Relations["ObjectFolder"];
            DataSetMarket.relationSystemFolderUser = DataSetMarket.Relations["SystemFolderUser"];
            DataSetMarket.relationFKAccountTypeAccount = DataSetMarket.Relations["FKAccountTypeAccount"];
            DataSetMarket.relationFKAccountAllocation = DataSetMarket.Relations["FKAccountAllocation"];
            DataSetMarket.relationFKAccountOrder = DataSetMarket.Relations["FKAccountOrder"];
            DataSetMarket.relationFKAccountPosition = DataSetMarket.Relations["FKAccountPosition"];
            DataSetMarket.relationFKAccountProposedOrder = DataSetMarket.Relations["FKAccountProposedOrder"];
            DataSetMarket.relationFKAccountTaxLot = DataSetMarket.Relations["FKAccountTaxLot"];
            DataSetMarket.relationFKAccountViolation = DataSetMarket.Relations["FKAccountViolation"];
            DataSetMarket.relationFKAlgorithmBlotter = DataSetMarket.Relations["FKAlgorithmBlotter"];
            DataSetMarket.relationFKAlgorithmModel = DataSetMarket.Relations["FKAlgorithmModel"];
            DataSetMarket.relationFKAlgorithmTypeAlgorithm = DataSetMarket.Relations["FKAlgorithmTypeAlgorithm"];
            DataSetMarket.relationFKBlockOrderAllocation = DataSetMarket.Relations["FKBlockOrderAllocation"];
            DataSetMarket.relationFKBlockOrderBlockOrderTreeChildId = DataSetMarket.Relations["FKBlockOrderBlockOrderTreeChildId"];
            DataSetMarket.relationFKBlockOrderBlockOrderTreeParentId = DataSetMarket.Relations["FKBlockOrderBlockOrderTreeParentId"];
            DataSetMarket.relationFKBlockOrderExecution = DataSetMarket.Relations["FKBlockOrderExecution"];
            DataSetMarket.relationFKBlockOrderOrder = DataSetMarket.Relations["FKBlockOrderOrder"];
            DataSetMarket.relationFKBlockOrderPlacement = DataSetMarket.Relations["FKBlockOrderPlacement"];
            DataSetMarket.relationFKBlotterAccount = DataSetMarket.Relations["FKBlotterAccount"];
            DataSetMarket.relationFKBlotterBlotterMap = DataSetMarket.Relations["FKBlotterBlotterMap"];
            DataSetMarket.relationFKBlotterTypeBlotter = DataSetMarket.Relations["FKBlotterTypeBlotter"];
            DataSetMarket.relationFKBlotterBlockOrder = DataSetMarket.Relations["FKBlotterBlockOrder"];
            DataSetMarket.relationFKBrokerExecution = DataSetMarket.Relations["FKBrokerExecution"];
            DataSetMarket.relationFKBrokerPlacement = DataSetMarket.Relations["FKBrokerPlacement"];
            DataSetMarket.relationFKCountryAccount = DataSetMarket.Relations["FKCountryAccount"];
            DataSetMarket.relationFKCountrySecurity = DataSetMarket.Relations["FKCountrySecurity"];
            DataSetMarket.relationFKCountryHoliday = DataSetMarket.Relations["FKCountryHoliday"];
            DataSetMarket.relationFKCountryProvince = DataSetMarket.Relations["FKCountryProvince"];
            DataSetMarket.relationFKCurrencyAccount = DataSetMarket.Relations["FKCurrencyAccount"];
            DataSetMarket.relationFKCurrencyPrice = DataSetMarket.Relations["FKCurrencyPrice"];
            DataSetMarket.relationFKDebtTypeDebt = DataSetMarket.Relations["FKDebtTypeDebt"];
            DataSetMarket.relationFKEquityTypeEquity = DataSetMarket.Relations["FKEquityTypeEquity"];
            DataSetMarket.relationFKExchangeEquity = DataSetMarket.Relations["FKExchangeEquity"];
            DataSetMarket.relationFKHolidayTypeHoliday = DataSetMarket.Relations["FKHolidayTypeHoliday"];
            DataSetMarket.relationFKIssuerTypeIssuer = DataSetMarket.Relations["FKIssuerTypeIssuer"];
            DataSetMarket.relationFKIssuerDebt = DataSetMarket.Relations["FKIssuerDebt"];
            DataSetMarket.relationFKUserAllocationCreatedUserId = DataSetMarket.Relations["FKUserAllocationCreatedUserId"];
            DataSetMarket.relationFKUserAllocationModifiedUserId = DataSetMarket.Relations["FKUserAllocationModifiedUserId"];
            DataSetMarket.relationFKUserExecutionCreatedUserId = DataSetMarket.Relations["FKUserExecutionCreatedUserId"];
            DataSetMarket.relationFKUserExecutionModifiedUserId = DataSetMarket.Relations["FKUserExecutionModifiedUserId"];
            DataSetMarket.relationFKUserPlacementCreatedUserId = DataSetMarket.Relations["FKUserPlacementCreatedUserId"];
            DataSetMarket.relationFKUserPlacementModifiedUserId = DataSetMarket.Relations["FKUserPlacementModifiedUserId"];
            DataSetMarket.relationFKLotHandlingAccount = DataSetMarket.Relations["FKLotHandlingAccount"];
            DataSetMarket.relationFKModelAccount = DataSetMarket.Relations["FKModelAccount"];
            DataSetMarket.relationFKModelPositionTarget = DataSetMarket.Relations["FKModelPositionTarget"];
            DataSetMarket.relationFKModelTypeModel = DataSetMarket.Relations["FKModelTypeModel"];
            DataSetMarket.relationFKModelSectorTarget = DataSetMarket.Relations["FKModelSectorTarget"];
            DataSetMarket.relationFKObjectAccount = DataSetMarket.Relations["FKObjectAccount"];
            DataSetMarket.relationFKObjectBlotter = DataSetMarket.Relations["FKObjectBlotter"];
            DataSetMarket.relationFKObjectBroker = DataSetMarket.Relations["FKObjectBroker"];
            DataSetMarket.relationFKObjectIssuer = DataSetMarket.Relations["FKObjectIssuer"];
            DataSetMarket.relationFKObjectUser = DataSetMarket.Relations["FKObjectUser"];
            DataSetMarket.relationFKObjectModel = DataSetMarket.Relations["FKObjectModel"];
            DataSetMarket.relationFKObjectObjectTreeChildId = DataSetMarket.Relations["FKObjectObjectTreeChildId"];
            DataSetMarket.relationFKObjectObjectTreeParentId = DataSetMarket.Relations["FKObjectObjectTreeParentId"];
            DataSetMarket.relationFKTypeObject = DataSetMarket.Relations["FKTypeObject"];
            DataSetMarket.relationFKObjectScheme = DataSetMarket.Relations["FKObjectScheme"];
            DataSetMarket.relationFKObjectSector = DataSetMarket.Relations["FKObjectSector"];
            DataSetMarket.relationFKObjectSecurity = DataSetMarket.Relations["FKObjectSecurity"];
            DataSetMarket.relationFKOrderOrderTreeChildId = DataSetMarket.Relations["FKOrderOrderTreeChildId"];
            DataSetMarket.relationFKOrderOrderTreeParentId = DataSetMarket.Relations["FKOrderOrderTreeParentId"];
            DataSetMarket.relationFKOrderTypeOrder = DataSetMarket.Relations["FKOrderTypeOrder"];
            DataSetMarket.relationFKOrderTypePlacement = DataSetMarket.Relations["FKOrderTypePlacement"];
            DataSetMarket.relationFKPositionTypePosition = DataSetMarket.Relations["FKPositionTypePosition"];
            DataSetMarket.relationFKPositionTypePositionTarget = DataSetMarket.Relations["FKPositionTypePositionTarget"];
            DataSetMarket.relationFKPositionTypeTaxLot = DataSetMarket.Relations["FKPositionTypeTaxLot"];
            DataSetMarket.relationFKPositionTypeViolation = DataSetMarket.Relations["FKPositionTypeViolation"];
            DataSetMarket.relationFKProposedOrderProposedOrderTreeChildId = DataSetMarket.Relations["FKProposedOrderProposedOrderTreeChildId"];
            DataSetMarket.relationFKProposedOrderProposedOrderTreeParentId = DataSetMarket.Relations["FKProposedOrderProposedOrderTreeParentId"];
            DataSetMarket.relationFKProvinceAccount = DataSetMarket.Relations["FKProvinceAccount"];
            DataSetMarket.relationFKRestrictionViolation = DataSetMarket.Relations["FKRestrictionViolation"];
            DataSetMarket.relationFKSchemeAccount = DataSetMarket.Relations["FKSchemeAccount"];
            DataSetMarket.relationFKSchemeModel = DataSetMarket.Relations["FKSchemeModel"];
            DataSetMarket.relationFKSectorSectorTarget = DataSetMarket.Relations["FKSectorSectorTarget"];
            DataSetMarket.relationFKSecurityAccount = DataSetMarket.Relations["FKSecurityAccount"];
            DataSetMarket.relationFKSecurityAllocationSecurityId = DataSetMarket.Relations["FKSecurityAllocationSecurityId"];
            DataSetMarket.relationFKSecurityAllocationSettlementId = DataSetMarket.Relations["FKSecurityAllocationSettlementId"];
            DataSetMarket.relationFKSecurityBlockOrderSecurityId = DataSetMarket.Relations["FKSecurityBlockOrderSecurityId"];
            DataSetMarket.relationFKSecurityBlockOrderSettlementId = DataSetMarket.Relations["FKSecurityBlockOrderSettlementId"];
            DataSetMarket.relationFKSecurityBlotterMap = DataSetMarket.Relations["FKSecurityBlotterMap"];
            DataSetMarket.relationFKSecurityDebtDebtId = DataSetMarket.Relations["FKSecurityDebtDebtId"];
            DataSetMarket.relationFKSecurityDebtSettlementId = DataSetMarket.Relations["FKSecurityDebtSettlementId"];
            DataSetMarket.relationFKSecurityCurrency = DataSetMarket.Relations["FKSecurityCurrency"];
            DataSetMarket.relationFKSecurityEquityEquityId = DataSetMarket.Relations["FKSecurityEquityEquityId"];
            DataSetMarket.relationFKSecurityEquitySettlementId = DataSetMarket.Relations["FKSecurityEquitySettlementId"];
            DataSetMarket.relationFKSecurityOrderSecurityId = DataSetMarket.Relations["FKSecurityOrderSecurityId"];
            DataSetMarket.relationFKSecurityOrderSettlementId = DataSetMarket.Relations["FKSecurityOrderSettlementId"];
            DataSetMarket.relationFKSecurityPosition = DataSetMarket.Relations["FKSecurityPosition"];
            DataSetMarket.relationFKSecurityPositionTarget = DataSetMarket.Relations["FKSecurityPositionTarget"];
            DataSetMarket.relationFKSecurityPrice = DataSetMarket.Relations["FKSecurityPrice"];
            DataSetMarket.relationFKSecurityProposedOrderSecurityId = DataSetMarket.Relations["FKSecurityProposedOrderSecurityId"];
            DataSetMarket.relationFKSecurityProposedOrderSettlementId = DataSetMarket.Relations["FKSecurityProposedOrderSettlementId"];
            DataSetMarket.relationFKSecurityTaxLot = DataSetMarket.Relations["FKSecurityTaxLot"];
            DataSetMarket.relationFKSecurityViolation = DataSetMarket.Relations["FKSecurityViolation"];
            DataSetMarket.relationFKSecurityTypeSecurity = DataSetMarket.Relations["FKSecurityTypeSecurity"];
            DataSetMarket.relationFKStatusBlockOrder = DataSetMarket.Relations["FKStatusBlockOrder"];
            DataSetMarket.relationFKStylesheetAccount = DataSetMarket.Relations["FKStylesheetAccount"];
            DataSetMarket.relationFKStylesheetBlotterBlockOrderStylesheetId = DataSetMarket.Relations["FKStylesheetBlotterBlockOrderStylesheetId"];
            DataSetMarket.relationFKStylesheetBlotterPlacementStylesheetId = DataSetMarket.Relations["FKStylesheetBlotterPlacementStylesheetId"];
            DataSetMarket.relationFKStylesheetBlotterExecutionStylesheetId = DataSetMarket.Relations["FKStylesheetBlotterExecutionStylesheetId"];
            DataSetMarket.relationFKStylesheetBlotterTicketStylesheetId = DataSetMarket.Relations["FKStylesheetBlotterTicketStylesheetId"];
            DataSetMarket.relationFKStylesheetTypeStylesheet = DataSetMarket.Relations["FKStylesheetTypeStylesheet"];
            DataSetMarket.relationFKTimeInForceAccount = DataSetMarket.Relations["FKTimeInForceAccount"];
            DataSetMarket.relationFKTimeInForceOrder = DataSetMarket.Relations["FKTimeInForceOrder"];
            DataSetMarket.relationFKTimeInForcePlacement = DataSetMarket.Relations["FKTimeInForcePlacement"];
            DataSetMarket.relationFKTransactionTypeAllocation = DataSetMarket.Relations["FKTransactionTypeAllocation"];
            DataSetMarket.relationFKTransactionTypeBlockOrder = DataSetMarket.Relations["FKTransactionTypeBlockOrder"];
            DataSetMarket.relationFKTransactionTypeOrder = DataSetMarket.Relations["FKTransactionTypeOrder"];
            DataSetMarket.relationFKTransactionTypeProposedOrder = DataSetMarket.Relations["FKTransactionTypeProposedOrder"];
        }
        
        private static void InitClass()
        {
            DataSetMarket.dataSet = new DataSet();
            DataSetMarket.tableLockCollection = new TableLockCollection();
            DataSetMarket.dataSet.DataSetName = "DataSetMarket";
            DataSetMarket.dataSet.Prefix = "";
            DataSetMarket.dataSet.Namespace = "";
            DataSetMarket.dataSet.Locale = new System.Globalization.CultureInfo("en-US");
            DataSetMarket.dataSet.CaseSensitive = false;
            DataSetMarket.dataSet.EnforceConstraints = true;
            DataSetMarket.tableAccount = new AccountDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableAccount);
            DataSetMarket.lockAccount = new TableLock("Account");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockAccount);
            DataSetMarket.tableAccountType = new AccountTypeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableAccountType);
            DataSetMarket.lockAccountType = new TableLock("AccountType");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockAccountType);
            DataSetMarket.tableAlgorithm = new AlgorithmDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableAlgorithm);
            DataSetMarket.lockAlgorithm = new TableLock("Algorithm");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockAlgorithm);
            DataSetMarket.tableAlgorithmType = new AlgorithmTypeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableAlgorithmType);
            DataSetMarket.lockAlgorithmType = new TableLock("AlgorithmType");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockAlgorithmType);
            DataSetMarket.tableAllocation = new AllocationDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableAllocation);
            DataSetMarket.lockAllocation = new TableLock("Allocation");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockAllocation);
            DataSetMarket.tableBlockOrder = new BlockOrderDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableBlockOrder);
            DataSetMarket.lockBlockOrder = new TableLock("BlockOrder");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockBlockOrder);
            DataSetMarket.tableBlockOrderTree = new BlockOrderTreeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableBlockOrderTree);
            DataSetMarket.lockBlockOrderTree = new TableLock("BlockOrderTree");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockBlockOrderTree);
            DataSetMarket.tableBlotter = new BlotterDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableBlotter);
            DataSetMarket.lockBlotter = new TableLock("Blotter");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockBlotter);
            DataSetMarket.tableBlotterType = new BlotterTypeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableBlotterType);
            DataSetMarket.lockBlotterType = new TableLock("BlotterType");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockBlotterType);
            DataSetMarket.tableBlotterMap = new BlotterMapDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableBlotterMap);
            DataSetMarket.lockBlotterMap = new TableLock("BlotterMap");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockBlotterMap);
            DataSetMarket.tableBroker = new BrokerDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableBroker);
            DataSetMarket.lockBroker = new TableLock("Broker");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockBroker);
            DataSetMarket.tableCondition = new ConditionDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableCondition);
            DataSetMarket.lockCondition = new TableLock("Condition");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockCondition);
            DataSetMarket.tableConfiguration = new ConfigurationDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableConfiguration);
            DataSetMarket.lockConfiguration = new TableLock("Configuration");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockConfiguration);
            DataSetMarket.tableCountry = new CountryDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableCountry);
            DataSetMarket.lockCountry = new TableLock("Country");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockCountry);
            DataSetMarket.tableCurrency = new CurrencyDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableCurrency);
            DataSetMarket.lockCurrency = new TableLock("Currency");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockCurrency);
            DataSetMarket.tableDebt = new DebtDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableDebt);
            DataSetMarket.lockDebt = new TableLock("Debt");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockDebt);
            DataSetMarket.tableDebtType = new DebtTypeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableDebtType);
            DataSetMarket.lockDebtType = new TableLock("DebtType");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockDebtType);
            DataSetMarket.tableEquity = new EquityDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableEquity);
            DataSetMarket.lockEquity = new TableLock("Equity");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockEquity);
            DataSetMarket.tableEquityType = new EquityTypeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableEquityType);
            DataSetMarket.lockEquityType = new TableLock("EquityType");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockEquityType);
            DataSetMarket.tableExchange = new ExchangeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableExchange);
            DataSetMarket.lockExchange = new TableLock("Exchange");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockExchange);
            DataSetMarket.tableExecution = new ExecutionDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableExecution);
            DataSetMarket.lockExecution = new TableLock("Execution");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockExecution);
            DataSetMarket.tableFolder = new FolderDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableFolder);
            DataSetMarket.lockFolder = new TableLock("Folder");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockFolder);
            DataSetMarket.tableHoliday = new HolidayDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableHoliday);
            DataSetMarket.lockHoliday = new TableLock("Holiday");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockHoliday);
            DataSetMarket.tableHolidayType = new HolidayTypeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableHolidayType);
            DataSetMarket.lockHolidayType = new TableLock("HolidayType");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockHolidayType);
            DataSetMarket.tableIssuer = new IssuerDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableIssuer);
            DataSetMarket.lockIssuer = new TableLock("Issuer");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockIssuer);
            DataSetMarket.tableIssuerType = new IssuerTypeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableIssuerType);
            DataSetMarket.lockIssuerType = new TableLock("IssuerType");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockIssuerType);
            DataSetMarket.tableLotHandling = new LotHandlingDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableLotHandling);
            DataSetMarket.lockLotHandling = new TableLock("LotHandling");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockLotHandling);
            DataSetMarket.tableModel = new ModelDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableModel);
            DataSetMarket.lockModel = new TableLock("Model");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockModel);
            DataSetMarket.tableModelType = new ModelTypeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableModelType);
            DataSetMarket.lockModelType = new TableLock("ModelType");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockModelType);
            DataSetMarket.tableObject = new ObjectDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableObject);
            DataSetMarket.lockObject = new TableLock("Object");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockObject);
            DataSetMarket.tableObjectTree = new ObjectTreeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableObjectTree);
            DataSetMarket.lockObjectTree = new TableLock("ObjectTree");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockObjectTree);
            DataSetMarket.tableOrder = new OrderDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableOrder);
            DataSetMarket.lockOrder = new TableLock("Order");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockOrder);
            DataSetMarket.tableOrderTree = new OrderTreeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableOrderTree);
            DataSetMarket.lockOrderTree = new TableLock("OrderTree");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockOrderTree);
            DataSetMarket.tableOrderType = new OrderTypeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableOrderType);
            DataSetMarket.lockOrderType = new TableLock("OrderType");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockOrderType);
            DataSetMarket.tablePlacement = new PlacementDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tablePlacement);
            DataSetMarket.lockPlacement = new TableLock("Placement");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockPlacement);
            DataSetMarket.tablePosition = new PositionDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tablePosition);
            DataSetMarket.lockPosition = new TableLock("Position");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockPosition);
            DataSetMarket.tablePositionTarget = new PositionTargetDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tablePositionTarget);
            DataSetMarket.lockPositionTarget = new TableLock("PositionTarget");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockPositionTarget);
            DataSetMarket.tablePositionType = new PositionTypeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tablePositionType);
            DataSetMarket.lockPositionType = new TableLock("PositionType");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockPositionType);
            DataSetMarket.tablePrice = new PriceDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tablePrice);
            DataSetMarket.lockPrice = new TableLock("Price");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockPrice);
            DataSetMarket.tableProperty = new PropertyDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableProperty);
            DataSetMarket.lockProperty = new TableLock("Property");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockProperty);
            DataSetMarket.tableProposedOrder = new ProposedOrderDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableProposedOrder);
            DataSetMarket.lockProposedOrder = new TableLock("ProposedOrder");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockProposedOrder);
            DataSetMarket.tableProposedOrderTree = new ProposedOrderTreeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableProposedOrderTree);
            DataSetMarket.lockProposedOrderTree = new TableLock("ProposedOrderTree");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockProposedOrderTree);
            DataSetMarket.tableProvince = new ProvinceDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableProvince);
            DataSetMarket.lockProvince = new TableLock("Province");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockProvince);
            DataSetMarket.tableRestriction = new RestrictionDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableRestriction);
            DataSetMarket.lockRestriction = new TableLock("Restriction");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockRestriction);
            DataSetMarket.tableScheme = new SchemeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableScheme);
            DataSetMarket.lockScheme = new TableLock("Scheme");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockScheme);
            DataSetMarket.tableSector = new SectorDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableSector);
            DataSetMarket.lockSector = new TableLock("Sector");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockSector);
            DataSetMarket.tableSectorTarget = new SectorTargetDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableSectorTarget);
            DataSetMarket.lockSectorTarget = new TableLock("SectorTarget");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockSectorTarget);
            DataSetMarket.tableSecurity = new SecurityDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableSecurity);
            DataSetMarket.lockSecurity = new TableLock("Security");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockSecurity);
            DataSetMarket.tableSecurityType = new SecurityTypeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableSecurityType);
            DataSetMarket.lockSecurityType = new TableLock("SecurityType");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockSecurityType);
            DataSetMarket.tableStatus = new StatusDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableStatus);
            DataSetMarket.lockStatus = new TableLock("Status");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockStatus);
            DataSetMarket.tableTaxLot = new TaxLotDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableTaxLot);
            DataSetMarket.lockTaxLot = new TableLock("TaxLot");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockTaxLot);
            DataSetMarket.tableType = new TypeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableType);
            DataSetMarket.lockType = new TableLock("Type");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockType);
            DataSetMarket.tableStylesheet = new StylesheetDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableStylesheet);
            DataSetMarket.lockStylesheet = new TableLock("Stylesheet");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockStylesheet);
            DataSetMarket.tableStylesheetType = new StylesheetTypeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableStylesheetType);
            DataSetMarket.lockStylesheetType = new TableLock("StylesheetType");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockStylesheetType);
            DataSetMarket.tableSystemFolder = new SystemFolderDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableSystemFolder);
            DataSetMarket.lockSystemFolder = new TableLock("SystemFolder");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockSystemFolder);
            DataSetMarket.tableTimeInForce = new TimeInForceDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableTimeInForce);
            DataSetMarket.lockTimeInForce = new TableLock("TimeInForce");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockTimeInForce);
            DataSetMarket.tableTransactionType = new TransactionTypeDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableTransactionType);
            DataSetMarket.lockTransactionType = new TableLock("TransactionType");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockTransactionType);
            DataSetMarket.tableUser = new UserDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableUser);
            DataSetMarket.lockUser = new TableLock("User");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockUser);
            DataSetMarket.tableViolation = new ViolationDataTable();
            DataSetMarket.Tables.Add(DataSetMarket.tableViolation);
            DataSetMarket.lockViolation = new TableLock("Violation");
            DataSetMarket.TableLocks.Add(DataSetMarket.lockViolation);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("FKAccountTypeAccount", new Column[] {
                        DataSetMarket.tableAccountType.AccountTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableAccount.AccountTypeCodeColumn});
            DataSetMarket.tableAccount.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKBlotterAccount", new Column[] {
                        DataSetMarket.tableBlotter.BlotterIdColumn}, new Column[] {
                        DataSetMarket.tableAccount.BlotterIdColumn});
            DataSetMarket.tableAccount.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKCountryAccount", new Column[] {
                        DataSetMarket.tableCountry.CountryIdColumn}, new Column[] {
                        DataSetMarket.tableAccount.CountryIdColumn});
            DataSetMarket.tableAccount.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKCurrencyAccount", new Column[] {
                        DataSetMarket.tableCurrency.CurrencyIdColumn}, new Column[] {
                        DataSetMarket.tableAccount.CurrencyIdColumn});
            DataSetMarket.tableAccount.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKLotHandlingAccount", new Column[] {
                        DataSetMarket.tableLotHandling.LotHandlingCodeColumn}, new Column[] {
                        DataSetMarket.tableAccount.LotHandlingCodeColumn});
            DataSetMarket.tableAccount.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKModelAccount", new Column[] {
                        DataSetMarket.tableModel.ModelIdColumn}, new Column[] {
                        DataSetMarket.tableAccount.ModelIdColumn});
            DataSetMarket.tableAccount.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKObjectAccount", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableAccount.AccountIdColumn});
            DataSetMarket.tableAccount.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKProvinceAccount", new Column[] {
                        DataSetMarket.tableProvince.ProvinceIdColumn}, new Column[] {
                        DataSetMarket.tableAccount.ProvinceIdColumn});
            DataSetMarket.tableAccount.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKSchemeAccount", new Column[] {
                        DataSetMarket.tableScheme.SchemeIdColumn}, new Column[] {
                        DataSetMarket.tableAccount.SchemeIdColumn});
            DataSetMarket.tableAccount.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKSecurityAccount", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableAccount.CurrencyIdColumn});
            DataSetMarket.tableAccount.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKStylesheetAccount", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableAccount.StylesheetIdColumn});
            DataSetMarket.tableAccount.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKTimeInForceAccount", new Column[] {
                        DataSetMarket.tableTimeInForce.TimeInForceCodeColumn}, new Column[] {
                        DataSetMarket.tableAccount.TimeInForceCodeColumn});
            DataSetMarket.tableAccount.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKAlgorithmTypeAlgorithm", new Column[] {
                        DataSetMarket.tableAlgorithmType.AlgorithmTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableAlgorithm.AlgorithmTypeCodeColumn});
            DataSetMarket.tableAlgorithm.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKAccountAllocation", new Column[] {
                        DataSetMarket.tableAccount.AccountIdColumn}, new Column[] {
                        DataSetMarket.tableAllocation.AccountIdColumn});
            DataSetMarket.tableAllocation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKBlockOrderAllocation", new Column[] {
                        DataSetMarket.tableBlockOrder.BlockOrderIdColumn}, new Column[] {
                        DataSetMarket.tableAllocation.BlockOrderIdColumn});
            DataSetMarket.tableAllocation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKUserAllocationCreatedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableAllocation.CreatedUserIdColumn});
            DataSetMarket.tableAllocation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKUserAllocationModifiedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableAllocation.ModifiedUserIdColumn});
            DataSetMarket.tableAllocation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKSecurityAllocationSecurityId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableAllocation.SecurityIdColumn});
            DataSetMarket.tableAllocation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKSecurityAllocationSettlementId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableAllocation.SettlementIdColumn});
            DataSetMarket.tableAllocation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKTransactionTypeAllocation", new Column[] {
                        DataSetMarket.tableTransactionType.TransactionTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableAllocation.TransactionTypeCodeColumn});
            DataSetMarket.tableAllocation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKBlotterBlockOrder", new Column[] {
                        DataSetMarket.tableBlotter.BlotterIdColumn}, new Column[] {
                        DataSetMarket.tableBlockOrder.BlotterIdColumn});
            DataSetMarket.tableBlockOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKSecurityBlockOrderSecurityId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableBlockOrder.SecurityIdColumn});
            DataSetMarket.tableBlockOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKSecurityBlockOrderSettlementId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableBlockOrder.SettlementIdColumn});
            DataSetMarket.tableBlockOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKStatusBlockOrder", new Column[] {
                        DataSetMarket.tableStatus.StatusCodeColumn}, new Column[] {
                        DataSetMarket.tableBlockOrder.StatusCodeColumn});
            DataSetMarket.tableBlockOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKTransactionTypeBlockOrder", new Column[] {
                        DataSetMarket.tableTransactionType.TransactionTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableBlockOrder.TransactionTypeCodeColumn});
            DataSetMarket.tableBlockOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKBlockOrderBlockOrderTreeChildId", new Column[] {
                        DataSetMarket.tableBlockOrder.BlockOrderIdColumn}, new Column[] {
                        DataSetMarket.tableBlockOrderTree.ChildIdColumn});
            DataSetMarket.tableBlockOrderTree.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKBlockOrderBlockOrderTreeParentId", new Column[] {
                        DataSetMarket.tableBlockOrder.BlockOrderIdColumn}, new Column[] {
                        DataSetMarket.tableBlockOrderTree.ParentIdColumn});
            DataSetMarket.tableBlockOrderTree.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKAlgorithmBlotter", new Column[] {
                        DataSetMarket.tableAlgorithm.AlgorithmIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.AlgorithmIdColumn});
            DataSetMarket.tableBlotter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKBlotterTypeBlotter", new Column[] {
                        DataSetMarket.tableBlotterType.BlotterTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableBlotter.BlotterTypeCodeColumn});
            DataSetMarket.tableBlotter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKObjectBlotter", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.BlotterIdColumn});
            DataSetMarket.tableBlotter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKStylesheetBlotterBlockOrderStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.BlockOrderStylesheetIdColumn});
            DataSetMarket.tableBlotter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKStylesheetBlotterPlacementStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.PlacementStylesheetIdColumn});
            DataSetMarket.tableBlotter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKStylesheetBlotterExecutionStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.ExecutionStylesheetIdColumn});
            DataSetMarket.tableBlotter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKStylesheetBlotterTicketStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.TicketStylesheetIdColumn});
            DataSetMarket.tableBlotter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKBlotterBlotterMap", new Column[] {
                        DataSetMarket.tableBlotter.BlotterIdColumn}, new Column[] {
                        DataSetMarket.tableBlotterMap.BlotterIdColumn});
            DataSetMarket.tableBlotterMap.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKSecurityBlotterMap", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableBlotterMap.SecurityIdColumn});
            DataSetMarket.tableBlotterMap.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKObjectBroker", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableBroker.BrokerIdColumn});
            DataSetMarket.tableBroker.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKSecurityCurrency", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableCurrency.CurrencyIdColumn});
            DataSetMarket.tableCurrency.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKDebtTypeDebt", new Column[] {
                        DataSetMarket.tableDebtType.DebtTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableDebt.DebtTypeCodeColumn});
            DataSetMarket.tableDebt.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKIssuerDebt", new Column[] {
                        DataSetMarket.tableIssuer.IssuerIdColumn}, new Column[] {
                        DataSetMarket.tableDebt.IssuerIdColumn});
            DataSetMarket.tableDebt.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKSecurityDebtDebtId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableDebt.DebtIdColumn});
            DataSetMarket.tableDebt.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKSecurityDebtSettlementId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableDebt.SettlementIdColumn});
            DataSetMarket.tableDebt.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKEquityTypeEquity", new Column[] {
                        DataSetMarket.tableEquityType.EquityTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableEquity.EquityTypeCodeColumn});
            DataSetMarket.tableEquity.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKExchangeEquity", new Column[] {
                        DataSetMarket.tableExchange.ExchangeIdColumn}, new Column[] {
                        DataSetMarket.tableEquity.ExchangeIdColumn});
            DataSetMarket.tableEquity.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKSecurityEquityEquityId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableEquity.EquityIdColumn});
            DataSetMarket.tableEquity.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKSecurityEquitySettlementId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableEquity.SettlementIdColumn});
            DataSetMarket.tableEquity.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKBlockOrderExecution", new Column[] {
                        DataSetMarket.tableBlockOrder.BlockOrderIdColumn}, new Column[] {
                        DataSetMarket.tableExecution.BlockOrderIdColumn});
            DataSetMarket.tableExecution.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKBrokerExecution", new Column[] {
                        DataSetMarket.tableBroker.BrokerIdColumn}, new Column[] {
                        DataSetMarket.tableExecution.BrokerIdColumn});
            DataSetMarket.tableExecution.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKUserExecutionCreatedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableExecution.CreatedUserIdColumn});
            DataSetMarket.tableExecution.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKUserExecutionModifiedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableExecution.ModifiedUserIdColumn});
            DataSetMarket.tableExecution.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ObjectFolder", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableFolder.FolderIdColumn});
            DataSetMarket.tableFolder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKCountryHoliday", new Column[] {
                        DataSetMarket.tableCountry.CountryIdColumn}, new Column[] {
                        DataSetMarket.tableHoliday.CountryIdColumn});
            DataSetMarket.tableHoliday.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKHolidayTypeHoliday", new Column[] {
                        DataSetMarket.tableHolidayType.HolidayTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableHoliday.HolidayTypeCodeColumn});
            DataSetMarket.tableHoliday.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKIssuerTypeIssuer", new Column[] {
                        DataSetMarket.tableIssuerType.IssuerTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableIssuer.IssuerTypeCodeColumn});
            DataSetMarket.tableIssuer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKObjectIssuer", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableIssuer.IssuerIdColumn});
            DataSetMarket.tableIssuer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKAlgorithmModel", new Column[] {
                        DataSetMarket.tableAlgorithm.AlgorithmIdColumn}, new Column[] {
                        DataSetMarket.tableModel.AlgorithmIdColumn});
            DataSetMarket.tableModel.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKModelTypeModel", new Column[] {
                        DataSetMarket.tableModelType.ModelTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableModel.ModelTypeCodeColumn});
            DataSetMarket.tableModel.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKObjectModel", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableModel.ModelIdColumn});
            DataSetMarket.tableModel.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKSchemeModel", new Column[] {
                        DataSetMarket.tableScheme.SchemeIdColumn}, new Column[] {
                        DataSetMarket.tableModel.SchemeIdColumn});
            DataSetMarket.tableModel.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKTypeObject", new Column[] {
                        DataSetMarket.tableType.TypeCodeColumn}, new Column[] {
                        DataSetMarket.tableObject.TypeCodeColumn});
            DataSetMarket.tableObject.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKObjectObjectTreeChildId", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableObjectTree.ChildIdColumn});
            DataSetMarket.tableObjectTree.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKObjectObjectTreeParentId", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableObjectTree.ParentIdColumn});
            DataSetMarket.tableObjectTree.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKAccountOrder", new Column[] {
                        DataSetMarket.tableAccount.AccountIdColumn}, new Column[] {
                        DataSetMarket.tableOrder.AccountIdColumn});
            DataSetMarket.tableOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKBlockOrderOrder", new Column[] {
                        DataSetMarket.tableBlockOrder.BlockOrderIdColumn}, new Column[] {
                        DataSetMarket.tableOrder.BlockOrderIdColumn});
            DataSetMarket.tableOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKOrderTypeOrder", new Column[] {
                        DataSetMarket.tableOrderType.OrderTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableOrder.OrderTypeCodeColumn});
            DataSetMarket.tableOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKSecurityOrderSecurityId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableOrder.SecurityIdColumn});
            DataSetMarket.tableOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKSecurityOrderSettlementId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableOrder.SettlementIdColumn});
            DataSetMarket.tableOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKTimeInForceOrder", new Column[] {
                        DataSetMarket.tableTimeInForce.TimeInForceCodeColumn}, new Column[] {
                        DataSetMarket.tableOrder.TimeInForceCodeColumn});
            DataSetMarket.tableOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKTransactionTypeOrder", new Column[] {
                        DataSetMarket.tableTransactionType.TransactionTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableOrder.TransactionTypeCodeColumn});
            DataSetMarket.tableOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKOrderOrderTreeChildId", new Column[] {
                        DataSetMarket.tableOrder.OrderIdColumn}, new Column[] {
                        DataSetMarket.tableOrderTree.ChildIdColumn});
            DataSetMarket.tableOrderTree.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKOrderOrderTreeParentId", new Column[] {
                        DataSetMarket.tableOrder.OrderIdColumn}, new Column[] {
                        DataSetMarket.tableOrderTree.ParentIdColumn});
            DataSetMarket.tableOrderTree.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKBlockOrderPlacement", new Column[] {
                        DataSetMarket.tableBlockOrder.BlockOrderIdColumn}, new Column[] {
                        DataSetMarket.tablePlacement.BlockOrderIdColumn});
            DataSetMarket.tablePlacement.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKBrokerPlacement", new Column[] {
                        DataSetMarket.tableBroker.BrokerIdColumn}, new Column[] {
                        DataSetMarket.tablePlacement.BrokerIdColumn});
            DataSetMarket.tablePlacement.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKUserPlacementCreatedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tablePlacement.CreatedUserIdColumn});
            DataSetMarket.tablePlacement.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKUserPlacementModifiedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tablePlacement.ModifiedUserIdColumn});
            DataSetMarket.tablePlacement.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKOrderTypePlacement", new Column[] {
                        DataSetMarket.tableOrderType.OrderTypeCodeColumn}, new Column[] {
                        DataSetMarket.tablePlacement.OrderTypeCodeColumn});
            DataSetMarket.tablePlacement.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKTimeInForcePlacement", new Column[] {
                        DataSetMarket.tableTimeInForce.TimeInForceCodeColumn}, new Column[] {
                        DataSetMarket.tablePlacement.TimeInForceCodeColumn});
            DataSetMarket.tablePlacement.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKAccountPosition", new Column[] {
                        DataSetMarket.tableAccount.AccountIdColumn}, new Column[] {
                        DataSetMarket.tablePosition.AccountIdColumn});
            DataSetMarket.tablePosition.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKPositionTypePosition", new Column[] {
                        DataSetMarket.tablePositionType.PositionTypeCodeColumn}, new Column[] {
                        DataSetMarket.tablePosition.PositionTypeCodeColumn});
            DataSetMarket.tablePosition.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKSecurityPosition", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tablePosition.SecurityIdColumn});
            DataSetMarket.tablePosition.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKModelPositionTarget", new Column[] {
                        DataSetMarket.tableModel.ModelIdColumn}, new Column[] {
                        DataSetMarket.tablePositionTarget.ModelIdColumn});
            DataSetMarket.tablePositionTarget.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKPositionTypePositionTarget", new Column[] {
                        DataSetMarket.tablePositionType.PositionTypeCodeColumn}, new Column[] {
                        DataSetMarket.tablePositionTarget.PositionTypeCodeColumn});
            DataSetMarket.tablePositionTarget.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKSecurityPositionTarget", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tablePositionTarget.SecurityIdColumn});
            DataSetMarket.tablePositionTarget.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKCurrencyPrice", new Column[] {
                        DataSetMarket.tableCurrency.CurrencyIdColumn}, new Column[] {
                        DataSetMarket.tablePrice.CurrencyIdColumn});
            DataSetMarket.tablePrice.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKSecurityPrice", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tablePrice.SecurityIdColumn});
            DataSetMarket.tablePrice.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKAccountProposedOrder", new Column[] {
                        DataSetMarket.tableAccount.AccountIdColumn}, new Column[] {
                        DataSetMarket.tableProposedOrder.AccountIdColumn});
            DataSetMarket.tableProposedOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKSecurityProposedOrderSecurityId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableProposedOrder.SecurityIdColumn});
            DataSetMarket.tableProposedOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKSecurityProposedOrderSettlementId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableProposedOrder.SettlementIdColumn});
            DataSetMarket.tableProposedOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKTransactionTypeProposedOrder", new Column[] {
                        DataSetMarket.tableTransactionType.TransactionTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableProposedOrder.TransactionTypeCodeColumn});
            DataSetMarket.tableProposedOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKProposedOrderProposedOrderTreeChildId", new Column[] {
                        DataSetMarket.tableProposedOrder.ProposedOrderIdColumn}, new Column[] {
                        DataSetMarket.tableProposedOrderTree.ChildIdColumn});
            DataSetMarket.tableProposedOrderTree.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKProposedOrderProposedOrderTreeParentId", new Column[] {
                        DataSetMarket.tableProposedOrder.ProposedOrderIdColumn}, new Column[] {
                        DataSetMarket.tableProposedOrderTree.ParentIdColumn});
            DataSetMarket.tableProposedOrderTree.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKCountryProvince", new Column[] {
                        DataSetMarket.tableCountry.CountryIdColumn}, new Column[] {
                        DataSetMarket.tableProvince.CountryIdColumn});
            DataSetMarket.tableProvince.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKObjectScheme", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableScheme.SchemeIdColumn});
            DataSetMarket.tableScheme.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKObjectSector", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableSector.SectorIdColumn});
            DataSetMarket.tableSector.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKModelSectorTarget", new Column[] {
                        DataSetMarket.tableModel.ModelIdColumn}, new Column[] {
                        DataSetMarket.tableSectorTarget.ModelIdColumn});
            DataSetMarket.tableSectorTarget.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKSectorSectorTarget", new Column[] {
                        DataSetMarket.tableSector.SectorIdColumn}, new Column[] {
                        DataSetMarket.tableSectorTarget.SectorIdColumn});
            DataSetMarket.tableSectorTarget.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKCountrySecurity", new Column[] {
                        DataSetMarket.tableCountry.CountryIdColumn}, new Column[] {
                        DataSetMarket.tableSecurity.CountryIdColumn});
            DataSetMarket.tableSecurity.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKObjectSecurity", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn});
            DataSetMarket.tableSecurity.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKSecurityTypeSecurity", new Column[] {
                        DataSetMarket.tableSecurityType.SecurityTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableSecurity.SecurityTypeCodeColumn});
            DataSetMarket.tableSecurity.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKAccountTaxLot", new Column[] {
                        DataSetMarket.tableAccount.AccountIdColumn}, new Column[] {
                        DataSetMarket.tableTaxLot.AccountIdColumn});
            DataSetMarket.tableTaxLot.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKPositionTypeTaxLot", new Column[] {
                        DataSetMarket.tablePositionType.PositionTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableTaxLot.PositionTypeCodeColumn});
            DataSetMarket.tableTaxLot.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKSecurityTaxLot", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableTaxLot.SecurityIdColumn});
            DataSetMarket.tableTaxLot.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKStylesheetTypeStylesheet", new Column[] {
                        DataSetMarket.tableStylesheetType.StylesheetTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetTypeCodeColumn});
            DataSetMarket.tableStylesheet.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FolderSystemFolder", new Column[] {
                        DataSetMarket.tableFolder.FolderIdColumn}, new Column[] {
                        DataSetMarket.tableSystemFolder.SystemFolderIdColumn});
            DataSetMarket.tableSystemFolder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SystemFolderUser", new Column[] {
                        DataSetMarket.tableSystemFolder.SystemFolderIdColumn}, new Column[] {
                        DataSetMarket.tableUser.SystemFolderIdColumn});
            DataSetMarket.tableUser.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKObjectUser", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableUser.UserIdColumn});
            DataSetMarket.tableUser.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKAccountViolation", new Column[] {
                        DataSetMarket.tableAccount.AccountIdColumn}, new Column[] {
                        DataSetMarket.tableViolation.AccountIdColumn});
            DataSetMarket.tableViolation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKPositionTypeViolation", new Column[] {
                        DataSetMarket.tablePositionType.PositionTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableViolation.PositionTypeCodeColumn});
            DataSetMarket.tableViolation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKRestrictionViolation", new Column[] {
                        DataSetMarket.tableRestriction.RestrictionIdColumn}, new Column[] {
                        DataSetMarket.tableViolation.RestrictionIdColumn});
            DataSetMarket.tableViolation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("FKSecurityViolation", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableViolation.SecurityIdColumn});
            DataSetMarket.tableViolation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            DataSetMarket.relationFolderSystemFolder = new Relation("FolderSystemFolder", new Column[] {
                        DataSetMarket.tableFolder.FolderIdColumn}, new Column[] {
                        DataSetMarket.tableSystemFolder.SystemFolderIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFolderSystemFolder);
            DataSetMarket.relationObjectFolder = new Relation("ObjectFolder", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableFolder.FolderIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationObjectFolder);
            DataSetMarket.relationSystemFolderUser = new Relation("SystemFolderUser", new Column[] {
                        DataSetMarket.tableSystemFolder.SystemFolderIdColumn}, new Column[] {
                        DataSetMarket.tableUser.SystemFolderIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationSystemFolderUser);
            DataSetMarket.relationFKAccountTypeAccount = new Relation("FKAccountTypeAccount", new Column[] {
                        DataSetMarket.tableAccountType.AccountTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableAccount.AccountTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKAccountTypeAccount);
            DataSetMarket.relationFKAccountAllocation = new Relation("FKAccountAllocation", new Column[] {
                        DataSetMarket.tableAccount.AccountIdColumn}, new Column[] {
                        DataSetMarket.tableAllocation.AccountIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKAccountAllocation);
            DataSetMarket.relationFKAccountOrder = new Relation("FKAccountOrder", new Column[] {
                        DataSetMarket.tableAccount.AccountIdColumn}, new Column[] {
                        DataSetMarket.tableOrder.AccountIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKAccountOrder);
            DataSetMarket.relationFKAccountPosition = new Relation("FKAccountPosition", new Column[] {
                        DataSetMarket.tableAccount.AccountIdColumn}, new Column[] {
                        DataSetMarket.tablePosition.AccountIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKAccountPosition);
            DataSetMarket.relationFKAccountProposedOrder = new Relation("FKAccountProposedOrder", new Column[] {
                        DataSetMarket.tableAccount.AccountIdColumn}, new Column[] {
                        DataSetMarket.tableProposedOrder.AccountIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKAccountProposedOrder);
            DataSetMarket.relationFKAccountTaxLot = new Relation("FKAccountTaxLot", new Column[] {
                        DataSetMarket.tableAccount.AccountIdColumn}, new Column[] {
                        DataSetMarket.tableTaxLot.AccountIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKAccountTaxLot);
            DataSetMarket.relationFKAccountViolation = new Relation("FKAccountViolation", new Column[] {
                        DataSetMarket.tableAccount.AccountIdColumn}, new Column[] {
                        DataSetMarket.tableViolation.AccountIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKAccountViolation);
            DataSetMarket.relationFKAlgorithmBlotter = new Relation("FKAlgorithmBlotter", new Column[] {
                        DataSetMarket.tableAlgorithm.AlgorithmIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.AlgorithmIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKAlgorithmBlotter);
            DataSetMarket.relationFKAlgorithmModel = new Relation("FKAlgorithmModel", new Column[] {
                        DataSetMarket.tableAlgorithm.AlgorithmIdColumn}, new Column[] {
                        DataSetMarket.tableModel.AlgorithmIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKAlgorithmModel);
            DataSetMarket.relationFKAlgorithmTypeAlgorithm = new Relation("FKAlgorithmTypeAlgorithm", new Column[] {
                        DataSetMarket.tableAlgorithmType.AlgorithmTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableAlgorithm.AlgorithmTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKAlgorithmTypeAlgorithm);
            DataSetMarket.relationFKBlockOrderAllocation = new Relation("FKBlockOrderAllocation", new Column[] {
                        DataSetMarket.tableBlockOrder.BlockOrderIdColumn}, new Column[] {
                        DataSetMarket.tableAllocation.BlockOrderIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKBlockOrderAllocation);
            DataSetMarket.relationFKBlockOrderBlockOrderTreeChildId = new Relation("FKBlockOrderBlockOrderTreeChildId", new Column[] {
                        DataSetMarket.tableBlockOrder.BlockOrderIdColumn}, new Column[] {
                        DataSetMarket.tableBlockOrderTree.ChildIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKBlockOrderBlockOrderTreeChildId);
            DataSetMarket.relationFKBlockOrderBlockOrderTreeParentId = new Relation("FKBlockOrderBlockOrderTreeParentId", new Column[] {
                        DataSetMarket.tableBlockOrder.BlockOrderIdColumn}, new Column[] {
                        DataSetMarket.tableBlockOrderTree.ParentIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKBlockOrderBlockOrderTreeParentId);
            DataSetMarket.relationFKBlockOrderExecution = new Relation("FKBlockOrderExecution", new Column[] {
                        DataSetMarket.tableBlockOrder.BlockOrderIdColumn}, new Column[] {
                        DataSetMarket.tableExecution.BlockOrderIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKBlockOrderExecution);
            DataSetMarket.relationFKBlockOrderOrder = new Relation("FKBlockOrderOrder", new Column[] {
                        DataSetMarket.tableBlockOrder.BlockOrderIdColumn}, new Column[] {
                        DataSetMarket.tableOrder.BlockOrderIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKBlockOrderOrder);
            DataSetMarket.relationFKBlockOrderPlacement = new Relation("FKBlockOrderPlacement", new Column[] {
                        DataSetMarket.tableBlockOrder.BlockOrderIdColumn}, new Column[] {
                        DataSetMarket.tablePlacement.BlockOrderIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKBlockOrderPlacement);
            DataSetMarket.relationFKBlotterAccount = new Relation("FKBlotterAccount", new Column[] {
                        DataSetMarket.tableBlotter.BlotterIdColumn}, new Column[] {
                        DataSetMarket.tableAccount.BlotterIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKBlotterAccount);
            DataSetMarket.relationFKBlotterBlotterMap = new Relation("FKBlotterBlotterMap", new Column[] {
                        DataSetMarket.tableBlotter.BlotterIdColumn}, new Column[] {
                        DataSetMarket.tableBlotterMap.BlotterIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKBlotterBlotterMap);
            DataSetMarket.relationFKBlotterTypeBlotter = new Relation("FKBlotterTypeBlotter", new Column[] {
                        DataSetMarket.tableBlotterType.BlotterTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableBlotter.BlotterTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKBlotterTypeBlotter);
            DataSetMarket.relationFKBlotterBlockOrder = new Relation("FKBlotterBlockOrder", new Column[] {
                        DataSetMarket.tableBlotter.BlotterIdColumn}, new Column[] {
                        DataSetMarket.tableBlockOrder.BlotterIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKBlotterBlockOrder);
            DataSetMarket.relationFKBrokerExecution = new Relation("FKBrokerExecution", new Column[] {
                        DataSetMarket.tableBroker.BrokerIdColumn}, new Column[] {
                        DataSetMarket.tableExecution.BrokerIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKBrokerExecution);
            DataSetMarket.relationFKBrokerPlacement = new Relation("FKBrokerPlacement", new Column[] {
                        DataSetMarket.tableBroker.BrokerIdColumn}, new Column[] {
                        DataSetMarket.tablePlacement.BrokerIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKBrokerPlacement);
            DataSetMarket.relationFKCountryAccount = new Relation("FKCountryAccount", new Column[] {
                        DataSetMarket.tableCountry.CountryIdColumn}, new Column[] {
                        DataSetMarket.tableAccount.CountryIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKCountryAccount);
            DataSetMarket.relationFKCountrySecurity = new Relation("FKCountrySecurity", new Column[] {
                        DataSetMarket.tableCountry.CountryIdColumn}, new Column[] {
                        DataSetMarket.tableSecurity.CountryIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKCountrySecurity);
            DataSetMarket.relationFKCountryHoliday = new Relation("FKCountryHoliday", new Column[] {
                        DataSetMarket.tableCountry.CountryIdColumn}, new Column[] {
                        DataSetMarket.tableHoliday.CountryIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKCountryHoliday);
            DataSetMarket.relationFKCountryProvince = new Relation("FKCountryProvince", new Column[] {
                        DataSetMarket.tableCountry.CountryIdColumn}, new Column[] {
                        DataSetMarket.tableProvince.CountryIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKCountryProvince);
            DataSetMarket.relationFKCurrencyAccount = new Relation("FKCurrencyAccount", new Column[] {
                        DataSetMarket.tableCurrency.CurrencyIdColumn}, new Column[] {
                        DataSetMarket.tableAccount.CurrencyIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKCurrencyAccount);
            DataSetMarket.relationFKCurrencyPrice = new Relation("FKCurrencyPrice", new Column[] {
                        DataSetMarket.tableCurrency.CurrencyIdColumn}, new Column[] {
                        DataSetMarket.tablePrice.CurrencyIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKCurrencyPrice);
            DataSetMarket.relationFKDebtTypeDebt = new Relation("FKDebtTypeDebt", new Column[] {
                        DataSetMarket.tableDebtType.DebtTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableDebt.DebtTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKDebtTypeDebt);
            DataSetMarket.relationFKEquityTypeEquity = new Relation("FKEquityTypeEquity", new Column[] {
                        DataSetMarket.tableEquityType.EquityTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableEquity.EquityTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKEquityTypeEquity);
            DataSetMarket.relationFKExchangeEquity = new Relation("FKExchangeEquity", new Column[] {
                        DataSetMarket.tableExchange.ExchangeIdColumn}, new Column[] {
                        DataSetMarket.tableEquity.ExchangeIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKExchangeEquity);
            DataSetMarket.relationFKHolidayTypeHoliday = new Relation("FKHolidayTypeHoliday", new Column[] {
                        DataSetMarket.tableHolidayType.HolidayTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableHoliday.HolidayTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKHolidayTypeHoliday);
            DataSetMarket.relationFKIssuerTypeIssuer = new Relation("FKIssuerTypeIssuer", new Column[] {
                        DataSetMarket.tableIssuerType.IssuerTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableIssuer.IssuerTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKIssuerTypeIssuer);
            DataSetMarket.relationFKIssuerDebt = new Relation("FKIssuerDebt", new Column[] {
                        DataSetMarket.tableIssuer.IssuerIdColumn}, new Column[] {
                        DataSetMarket.tableDebt.IssuerIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKIssuerDebt);
            DataSetMarket.relationFKUserAllocationCreatedUserId = new Relation("FKUserAllocationCreatedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableAllocation.CreatedUserIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKUserAllocationCreatedUserId);
            DataSetMarket.relationFKUserAllocationModifiedUserId = new Relation("FKUserAllocationModifiedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableAllocation.ModifiedUserIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKUserAllocationModifiedUserId);
            DataSetMarket.relationFKUserExecutionCreatedUserId = new Relation("FKUserExecutionCreatedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableExecution.CreatedUserIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKUserExecutionCreatedUserId);
            DataSetMarket.relationFKUserExecutionModifiedUserId = new Relation("FKUserExecutionModifiedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tableExecution.ModifiedUserIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKUserExecutionModifiedUserId);
            DataSetMarket.relationFKUserPlacementCreatedUserId = new Relation("FKUserPlacementCreatedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tablePlacement.CreatedUserIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKUserPlacementCreatedUserId);
            DataSetMarket.relationFKUserPlacementModifiedUserId = new Relation("FKUserPlacementModifiedUserId", new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, new Column[] {
                        DataSetMarket.tablePlacement.ModifiedUserIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKUserPlacementModifiedUserId);
            DataSetMarket.relationFKLotHandlingAccount = new Relation("FKLotHandlingAccount", new Column[] {
                        DataSetMarket.tableLotHandling.LotHandlingCodeColumn}, new Column[] {
                        DataSetMarket.tableAccount.LotHandlingCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKLotHandlingAccount);
            DataSetMarket.relationFKModelAccount = new Relation("FKModelAccount", new Column[] {
                        DataSetMarket.tableModel.ModelIdColumn}, new Column[] {
                        DataSetMarket.tableAccount.ModelIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKModelAccount);
            DataSetMarket.relationFKModelPositionTarget = new Relation("FKModelPositionTarget", new Column[] {
                        DataSetMarket.tableModel.ModelIdColumn}, new Column[] {
                        DataSetMarket.tablePositionTarget.ModelIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKModelPositionTarget);
            DataSetMarket.relationFKModelTypeModel = new Relation("FKModelTypeModel", new Column[] {
                        DataSetMarket.tableModelType.ModelTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableModel.ModelTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKModelTypeModel);
            DataSetMarket.relationFKModelSectorTarget = new Relation("FKModelSectorTarget", new Column[] {
                        DataSetMarket.tableModel.ModelIdColumn}, new Column[] {
                        DataSetMarket.tableSectorTarget.ModelIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKModelSectorTarget);
            DataSetMarket.relationFKObjectAccount = new Relation("FKObjectAccount", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableAccount.AccountIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKObjectAccount);
            DataSetMarket.relationFKObjectBlotter = new Relation("FKObjectBlotter", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.BlotterIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKObjectBlotter);
            DataSetMarket.relationFKObjectBroker = new Relation("FKObjectBroker", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableBroker.BrokerIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKObjectBroker);
            DataSetMarket.relationFKObjectIssuer = new Relation("FKObjectIssuer", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableIssuer.IssuerIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKObjectIssuer);
            DataSetMarket.relationFKObjectUser = new Relation("FKObjectUser", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableUser.UserIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKObjectUser);
            DataSetMarket.relationFKObjectModel = new Relation("FKObjectModel", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableModel.ModelIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKObjectModel);
            DataSetMarket.relationFKObjectObjectTreeChildId = new Relation("FKObjectObjectTreeChildId", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableObjectTree.ChildIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKObjectObjectTreeChildId);
            DataSetMarket.relationFKObjectObjectTreeParentId = new Relation("FKObjectObjectTreeParentId", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableObjectTree.ParentIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKObjectObjectTreeParentId);
            DataSetMarket.relationFKTypeObject = new Relation("FKTypeObject", new Column[] {
                        DataSetMarket.tableType.TypeCodeColumn}, new Column[] {
                        DataSetMarket.tableObject.TypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKTypeObject);
            DataSetMarket.relationFKObjectScheme = new Relation("FKObjectScheme", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableScheme.SchemeIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKObjectScheme);
            DataSetMarket.relationFKObjectSector = new Relation("FKObjectSector", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableSector.SectorIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKObjectSector);
            DataSetMarket.relationFKObjectSecurity = new Relation("FKObjectSecurity", new Column[] {
                        DataSetMarket.tableObject.ObjectIdColumn}, new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKObjectSecurity);
            DataSetMarket.relationFKOrderOrderTreeChildId = new Relation("FKOrderOrderTreeChildId", new Column[] {
                        DataSetMarket.tableOrder.OrderIdColumn}, new Column[] {
                        DataSetMarket.tableOrderTree.ChildIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKOrderOrderTreeChildId);
            DataSetMarket.relationFKOrderOrderTreeParentId = new Relation("FKOrderOrderTreeParentId", new Column[] {
                        DataSetMarket.tableOrder.OrderIdColumn}, new Column[] {
                        DataSetMarket.tableOrderTree.ParentIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKOrderOrderTreeParentId);
            DataSetMarket.relationFKOrderTypeOrder = new Relation("FKOrderTypeOrder", new Column[] {
                        DataSetMarket.tableOrderType.OrderTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableOrder.OrderTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKOrderTypeOrder);
            DataSetMarket.relationFKOrderTypePlacement = new Relation("FKOrderTypePlacement", new Column[] {
                        DataSetMarket.tableOrderType.OrderTypeCodeColumn}, new Column[] {
                        DataSetMarket.tablePlacement.OrderTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKOrderTypePlacement);
            DataSetMarket.relationFKPositionTypePosition = new Relation("FKPositionTypePosition", new Column[] {
                        DataSetMarket.tablePositionType.PositionTypeCodeColumn}, new Column[] {
                        DataSetMarket.tablePosition.PositionTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKPositionTypePosition);
            DataSetMarket.relationFKPositionTypePositionTarget = new Relation("FKPositionTypePositionTarget", new Column[] {
                        DataSetMarket.tablePositionType.PositionTypeCodeColumn}, new Column[] {
                        DataSetMarket.tablePositionTarget.PositionTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKPositionTypePositionTarget);
            DataSetMarket.relationFKPositionTypeTaxLot = new Relation("FKPositionTypeTaxLot", new Column[] {
                        DataSetMarket.tablePositionType.PositionTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableTaxLot.PositionTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKPositionTypeTaxLot);
            DataSetMarket.relationFKPositionTypeViolation = new Relation("FKPositionTypeViolation", new Column[] {
                        DataSetMarket.tablePositionType.PositionTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableViolation.PositionTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKPositionTypeViolation);
            DataSetMarket.relationFKProposedOrderProposedOrderTreeChildId = new Relation("FKProposedOrderProposedOrderTreeChildId", new Column[] {
                        DataSetMarket.tableProposedOrder.ProposedOrderIdColumn}, new Column[] {
                        DataSetMarket.tableProposedOrderTree.ChildIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKProposedOrderProposedOrderTreeChildId);
            DataSetMarket.relationFKProposedOrderProposedOrderTreeParentId = new Relation("FKProposedOrderProposedOrderTreeParentId", new Column[] {
                        DataSetMarket.tableProposedOrder.ProposedOrderIdColumn}, new Column[] {
                        DataSetMarket.tableProposedOrderTree.ParentIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKProposedOrderProposedOrderTreeParentId);
            DataSetMarket.relationFKProvinceAccount = new Relation("FKProvinceAccount", new Column[] {
                        DataSetMarket.tableProvince.ProvinceIdColumn}, new Column[] {
                        DataSetMarket.tableAccount.ProvinceIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKProvinceAccount);
            DataSetMarket.relationFKRestrictionViolation = new Relation("FKRestrictionViolation", new Column[] {
                        DataSetMarket.tableRestriction.RestrictionIdColumn}, new Column[] {
                        DataSetMarket.tableViolation.RestrictionIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKRestrictionViolation);
            DataSetMarket.relationFKSchemeAccount = new Relation("FKSchemeAccount", new Column[] {
                        DataSetMarket.tableScheme.SchemeIdColumn}, new Column[] {
                        DataSetMarket.tableAccount.SchemeIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKSchemeAccount);
            DataSetMarket.relationFKSchemeModel = new Relation("FKSchemeModel", new Column[] {
                        DataSetMarket.tableScheme.SchemeIdColumn}, new Column[] {
                        DataSetMarket.tableModel.SchemeIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKSchemeModel);
            DataSetMarket.relationFKSectorSectorTarget = new Relation("FKSectorSectorTarget", new Column[] {
                        DataSetMarket.tableSector.SectorIdColumn}, new Column[] {
                        DataSetMarket.tableSectorTarget.SectorIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKSectorSectorTarget);
            DataSetMarket.relationFKSecurityAccount = new Relation("FKSecurityAccount", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableAccount.CurrencyIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKSecurityAccount);
            DataSetMarket.relationFKSecurityAllocationSecurityId = new Relation("FKSecurityAllocationSecurityId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableAllocation.SecurityIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKSecurityAllocationSecurityId);
            DataSetMarket.relationFKSecurityAllocationSettlementId = new Relation("FKSecurityAllocationSettlementId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableAllocation.SettlementIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKSecurityAllocationSettlementId);
            DataSetMarket.relationFKSecurityBlockOrderSecurityId = new Relation("FKSecurityBlockOrderSecurityId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableBlockOrder.SecurityIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKSecurityBlockOrderSecurityId);
            DataSetMarket.relationFKSecurityBlockOrderSettlementId = new Relation("FKSecurityBlockOrderSettlementId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableBlockOrder.SettlementIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKSecurityBlockOrderSettlementId);
            DataSetMarket.relationFKSecurityBlotterMap = new Relation("FKSecurityBlotterMap", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableBlotterMap.SecurityIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKSecurityBlotterMap);
            DataSetMarket.relationFKSecurityDebtDebtId = new Relation("FKSecurityDebtDebtId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableDebt.DebtIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKSecurityDebtDebtId);
            DataSetMarket.relationFKSecurityDebtSettlementId = new Relation("FKSecurityDebtSettlementId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableDebt.SettlementIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKSecurityDebtSettlementId);
            DataSetMarket.relationFKSecurityCurrency = new Relation("FKSecurityCurrency", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableCurrency.CurrencyIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKSecurityCurrency);
            DataSetMarket.relationFKSecurityEquityEquityId = new Relation("FKSecurityEquityEquityId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableEquity.EquityIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKSecurityEquityEquityId);
            DataSetMarket.relationFKSecurityEquitySettlementId = new Relation("FKSecurityEquitySettlementId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableEquity.SettlementIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKSecurityEquitySettlementId);
            DataSetMarket.relationFKSecurityOrderSecurityId = new Relation("FKSecurityOrderSecurityId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableOrder.SecurityIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKSecurityOrderSecurityId);
            DataSetMarket.relationFKSecurityOrderSettlementId = new Relation("FKSecurityOrderSettlementId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableOrder.SettlementIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKSecurityOrderSettlementId);
            DataSetMarket.relationFKSecurityPosition = new Relation("FKSecurityPosition", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tablePosition.SecurityIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKSecurityPosition);
            DataSetMarket.relationFKSecurityPositionTarget = new Relation("FKSecurityPositionTarget", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tablePositionTarget.SecurityIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKSecurityPositionTarget);
            DataSetMarket.relationFKSecurityPrice = new Relation("FKSecurityPrice", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tablePrice.SecurityIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKSecurityPrice);
            DataSetMarket.relationFKSecurityProposedOrderSecurityId = new Relation("FKSecurityProposedOrderSecurityId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableProposedOrder.SecurityIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKSecurityProposedOrderSecurityId);
            DataSetMarket.relationFKSecurityProposedOrderSettlementId = new Relation("FKSecurityProposedOrderSettlementId", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableProposedOrder.SettlementIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKSecurityProposedOrderSettlementId);
            DataSetMarket.relationFKSecurityTaxLot = new Relation("FKSecurityTaxLot", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableTaxLot.SecurityIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKSecurityTaxLot);
            DataSetMarket.relationFKSecurityViolation = new Relation("FKSecurityViolation", new Column[] {
                        DataSetMarket.tableSecurity.SecurityIdColumn}, new Column[] {
                        DataSetMarket.tableViolation.SecurityIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKSecurityViolation);
            DataSetMarket.relationFKSecurityTypeSecurity = new Relation("FKSecurityTypeSecurity", new Column[] {
                        DataSetMarket.tableSecurityType.SecurityTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableSecurity.SecurityTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKSecurityTypeSecurity);
            DataSetMarket.relationFKStatusBlockOrder = new Relation("FKStatusBlockOrder", new Column[] {
                        DataSetMarket.tableStatus.StatusCodeColumn}, new Column[] {
                        DataSetMarket.tableBlockOrder.StatusCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKStatusBlockOrder);
            DataSetMarket.relationFKStylesheetAccount = new Relation("FKStylesheetAccount", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableAccount.StylesheetIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKStylesheetAccount);
            DataSetMarket.relationFKStylesheetBlotterBlockOrderStylesheetId = new Relation("FKStylesheetBlotterBlockOrderStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.BlockOrderStylesheetIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKStylesheetBlotterBlockOrderStylesheetId);
            DataSetMarket.relationFKStylesheetBlotterPlacementStylesheetId = new Relation("FKStylesheetBlotterPlacementStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.PlacementStylesheetIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKStylesheetBlotterPlacementStylesheetId);
            DataSetMarket.relationFKStylesheetBlotterExecutionStylesheetId = new Relation("FKStylesheetBlotterExecutionStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.ExecutionStylesheetIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKStylesheetBlotterExecutionStylesheetId);
            DataSetMarket.relationFKStylesheetBlotterTicketStylesheetId = new Relation("FKStylesheetBlotterTicketStylesheetId", new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetIdColumn}, new Column[] {
                        DataSetMarket.tableBlotter.TicketStylesheetIdColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKStylesheetBlotterTicketStylesheetId);
            DataSetMarket.relationFKStylesheetTypeStylesheet = new Relation("FKStylesheetTypeStylesheet", new Column[] {
                        DataSetMarket.tableStylesheetType.StylesheetTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableStylesheet.StylesheetTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKStylesheetTypeStylesheet);
            DataSetMarket.relationFKTimeInForceAccount = new Relation("FKTimeInForceAccount", new Column[] {
                        DataSetMarket.tableTimeInForce.TimeInForceCodeColumn}, new Column[] {
                        DataSetMarket.tableAccount.TimeInForceCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKTimeInForceAccount);
            DataSetMarket.relationFKTimeInForceOrder = new Relation("FKTimeInForceOrder", new Column[] {
                        DataSetMarket.tableTimeInForce.TimeInForceCodeColumn}, new Column[] {
                        DataSetMarket.tableOrder.TimeInForceCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKTimeInForceOrder);
            DataSetMarket.relationFKTimeInForcePlacement = new Relation("FKTimeInForcePlacement", new Column[] {
                        DataSetMarket.tableTimeInForce.TimeInForceCodeColumn}, new Column[] {
                        DataSetMarket.tablePlacement.TimeInForceCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKTimeInForcePlacement);
            DataSetMarket.relationFKTransactionTypeAllocation = new Relation("FKTransactionTypeAllocation", new Column[] {
                        DataSetMarket.tableTransactionType.TransactionTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableAllocation.TransactionTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKTransactionTypeAllocation);
            DataSetMarket.relationFKTransactionTypeBlockOrder = new Relation("FKTransactionTypeBlockOrder", new Column[] {
                        DataSetMarket.tableTransactionType.TransactionTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableBlockOrder.TransactionTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKTransactionTypeBlockOrder);
            DataSetMarket.relationFKTransactionTypeOrder = new Relation("FKTransactionTypeOrder", new Column[] {
                        DataSetMarket.tableTransactionType.TransactionTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableOrder.TransactionTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKTransactionTypeOrder);
            DataSetMarket.relationFKTransactionTypeProposedOrder = new Relation("FKTransactionTypeProposedOrder", new Column[] {
                        DataSetMarket.tableTransactionType.TransactionTypeCodeColumn}, new Column[] {
                        DataSetMarket.tableProposedOrder.TransactionTypeCodeColumn}, false);
            DataSetMarket.Relations.Add(DataSetMarket.relationFKTransactionTypeProposedOrder);
        }
        
        private bool ShouldSerializeAccount()
        {
            return false;
        }
        
        private bool ShouldSerializeAccountType()
        {
            return false;
        }
        
        private bool ShouldSerializeAlgorithm()
        {
            return false;
        }
        
        private bool ShouldSerializeAlgorithmType()
        {
            return false;
        }
        
        private bool ShouldSerializeAllocation()
        {
            return false;
        }
        
        private bool ShouldSerializeBlockOrder()
        {
            return false;
        }
        
        private bool ShouldSerializeBlockOrderTree()
        {
            return false;
        }
        
        private bool ShouldSerializeBlotter()
        {
            return false;
        }
        
        private bool ShouldSerializeBlotterType()
        {
            return false;
        }
        
        private bool ShouldSerializeBlotterMap()
        {
            return false;
        }
        
        private bool ShouldSerializeBroker()
        {
            return false;
        }
        
        private bool ShouldSerializeCondition()
        {
            return false;
        }
        
        private bool ShouldSerializeConfiguration()
        {
            return false;
        }
        
        private bool ShouldSerializeCountry()
        {
            return false;
        }
        
        private bool ShouldSerializeCurrency()
        {
            return false;
        }
        
        private bool ShouldSerializeDebt()
        {
            return false;
        }
        
        private bool ShouldSerializeDebtType()
        {
            return false;
        }
        
        private bool ShouldSerializeEquity()
        {
            return false;
        }
        
        private bool ShouldSerializeEquityType()
        {
            return false;
        }
        
        private bool ShouldSerializeExchange()
        {
            return false;
        }
        
        private bool ShouldSerializeExecution()
        {
            return false;
        }
        
        private bool ShouldSerializeFolder()
        {
            return false;
        }
        
        private bool ShouldSerializeHoliday()
        {
            return false;
        }
        
        private bool ShouldSerializeHolidayType()
        {
            return false;
        }
        
        private bool ShouldSerializeIssuer()
        {
            return false;
        }
        
        private bool ShouldSerializeIssuerType()
        {
            return false;
        }
        
        private bool ShouldSerializeLotHandling()
        {
            return false;
        }
        
        private bool ShouldSerializeModel()
        {
            return false;
        }
        
        private bool ShouldSerializeModelType()
        {
            return false;
        }
        
        private bool ShouldSerializeObject()
        {
            return false;
        }
        
        private bool ShouldSerializeObjectTree()
        {
            return false;
        }
        
        private bool ShouldSerializeOrder()
        {
            return false;
        }
        
        private bool ShouldSerializeOrderTree()
        {
            return false;
        }
        
        private bool ShouldSerializeOrderType()
        {
            return false;
        }
        
        private bool ShouldSerializePlacement()
        {
            return false;
        }
        
        private bool ShouldSerializePosition()
        {
            return false;
        }
        
        private bool ShouldSerializePositionTarget()
        {
            return false;
        }
        
        private bool ShouldSerializePositionType()
        {
            return false;
        }
        
        private bool ShouldSerializePrice()
        {
            return false;
        }
        
        private bool ShouldSerializeProperty()
        {
            return false;
        }
        
        private bool ShouldSerializeProposedOrder()
        {
            return false;
        }
        
        private bool ShouldSerializeProposedOrderTree()
        {
            return false;
        }
        
        private bool ShouldSerializeProvince()
        {
            return false;
        }
        
        private bool ShouldSerializeRestriction()
        {
            return false;
        }
        
        private bool ShouldSerializeScheme()
        {
            return false;
        }
        
        private bool ShouldSerializeSector()
        {
            return false;
        }
        
        private bool ShouldSerializeSectorTarget()
        {
            return false;
        }
        
        private bool ShouldSerializeSecurity()
        {
            return false;
        }
        
        private bool ShouldSerializeSecurityType()
        {
            return false;
        }
        
        private bool ShouldSerializeStatus()
        {
            return false;
        }
        
        private bool ShouldSerializeTaxLot()
        {
            return false;
        }
        
        private bool ShouldSerializeType()
        {
            return false;
        }
        
        private bool ShouldSerializeStylesheet()
        {
            return false;
        }
        
        private bool ShouldSerializeStylesheetType()
        {
            return false;
        }
        
        private bool ShouldSerializeSystemFolder()
        {
            return false;
        }
        
        private bool ShouldSerializeTimeInForce()
        {
            return false;
        }
        
        private bool ShouldSerializeTransactionType()
        {
            return false;
        }
        
        private bool ShouldSerializeUser()
        {
            return false;
        }
        
        private bool ShouldSerializeViolation()
        {
            return false;
        }
        
        private static void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e)
        {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove))
            {
                DataSetMarket.InitVars();
            }
        }
        
        public delegate void AccountRowChangeEventHandler(object sender, AccountRowChangeEvent e);
        
        public delegate void AccountTypeRowChangeEventHandler(object sender, AccountTypeRowChangeEvent e);
        
        public delegate void AlgorithmRowChangeEventHandler(object sender, AlgorithmRowChangeEvent e);
        
        public delegate void AlgorithmTypeRowChangeEventHandler(object sender, AlgorithmTypeRowChangeEvent e);
        
        public delegate void AllocationRowChangeEventHandler(object sender, AllocationRowChangeEvent e);
        
        public delegate void BlockOrderRowChangeEventHandler(object sender, BlockOrderRowChangeEvent e);
        
        public delegate void BlockOrderTreeRowChangeEventHandler(object sender, BlockOrderTreeRowChangeEvent e);
        
        public delegate void BlotterRowChangeEventHandler(object sender, BlotterRowChangeEvent e);
        
        public delegate void BlotterTypeRowChangeEventHandler(object sender, BlotterTypeRowChangeEvent e);
        
        public delegate void BlotterMapRowChangeEventHandler(object sender, BlotterMapRowChangeEvent e);
        
        public delegate void BrokerRowChangeEventHandler(object sender, BrokerRowChangeEvent e);
        
        public delegate void ConditionRowChangeEventHandler(object sender, ConditionRowChangeEvent e);
        
        public delegate void ConfigurationRowChangeEventHandler(object sender, ConfigurationRowChangeEvent e);
        
        public delegate void CountryRowChangeEventHandler(object sender, CountryRowChangeEvent e);
        
        public delegate void CurrencyRowChangeEventHandler(object sender, CurrencyRowChangeEvent e);
        
        public delegate void DebtRowChangeEventHandler(object sender, DebtRowChangeEvent e);
        
        public delegate void DebtTypeRowChangeEventHandler(object sender, DebtTypeRowChangeEvent e);
        
        public delegate void EquityRowChangeEventHandler(object sender, EquityRowChangeEvent e);
        
        public delegate void EquityTypeRowChangeEventHandler(object sender, EquityTypeRowChangeEvent e);
        
        public delegate void ExchangeRowChangeEventHandler(object sender, ExchangeRowChangeEvent e);
        
        public delegate void ExecutionRowChangeEventHandler(object sender, ExecutionRowChangeEvent e);
        
        public delegate void FolderRowChangeEventHandler(object sender, FolderRowChangeEvent e);
        
        public delegate void HolidayRowChangeEventHandler(object sender, HolidayRowChangeEvent e);
        
        public delegate void HolidayTypeRowChangeEventHandler(object sender, HolidayTypeRowChangeEvent e);
        
        public delegate void IssuerRowChangeEventHandler(object sender, IssuerRowChangeEvent e);
        
        public delegate void IssuerTypeRowChangeEventHandler(object sender, IssuerTypeRowChangeEvent e);
        
        public delegate void LotHandlingRowChangeEventHandler(object sender, LotHandlingRowChangeEvent e);
        
        public delegate void ModelRowChangeEventHandler(object sender, ModelRowChangeEvent e);
        
        public delegate void ModelTypeRowChangeEventHandler(object sender, ModelTypeRowChangeEvent e);
        
        public delegate void ObjectRowChangeEventHandler(object sender, ObjectRowChangeEvent e);
        
        public delegate void ObjectTreeRowChangeEventHandler(object sender, ObjectTreeRowChangeEvent e);
        
        public delegate void OrderRowChangeEventHandler(object sender, OrderRowChangeEvent e);
        
        public delegate void OrderTreeRowChangeEventHandler(object sender, OrderTreeRowChangeEvent e);
        
        public delegate void OrderTypeRowChangeEventHandler(object sender, OrderTypeRowChangeEvent e);
        
        public delegate void PlacementRowChangeEventHandler(object sender, PlacementRowChangeEvent e);
        
        public delegate void PositionRowChangeEventHandler(object sender, PositionRowChangeEvent e);
        
        public delegate void PositionTargetRowChangeEventHandler(object sender, PositionTargetRowChangeEvent e);
        
        public delegate void PositionTypeRowChangeEventHandler(object sender, PositionTypeRowChangeEvent e);
        
        public delegate void PriceRowChangeEventHandler(object sender, PriceRowChangeEvent e);
        
        public delegate void PropertyRowChangeEventHandler(object sender, PropertyRowChangeEvent e);
        
        public delegate void ProposedOrderRowChangeEventHandler(object sender, ProposedOrderRowChangeEvent e);
        
        public delegate void ProposedOrderTreeRowChangeEventHandler(object sender, ProposedOrderTreeRowChangeEvent e);
        
        public delegate void ProvinceRowChangeEventHandler(object sender, ProvinceRowChangeEvent e);
        
        public delegate void RestrictionRowChangeEventHandler(object sender, RestrictionRowChangeEvent e);
        
        public delegate void SchemeRowChangeEventHandler(object sender, SchemeRowChangeEvent e);
        
        public delegate void SectorRowChangeEventHandler(object sender, SectorRowChangeEvent e);
        
        public delegate void SectorTargetRowChangeEventHandler(object sender, SectorTargetRowChangeEvent e);
        
        public delegate void SecurityRowChangeEventHandler(object sender, SecurityRowChangeEvent e);
        
        public delegate void SecurityTypeRowChangeEventHandler(object sender, SecurityTypeRowChangeEvent e);
        
        public delegate void StatusRowChangeEventHandler(object sender, StatusRowChangeEvent e);
        
        public delegate void TaxLotRowChangeEventHandler(object sender, TaxLotRowChangeEvent e);
        
        public delegate void TypeRowChangeEventHandler(object sender, TypeRowChangeEvent e);
        
        public delegate void StylesheetRowChangeEventHandler(object sender, StylesheetRowChangeEvent e);
        
        public delegate void StylesheetTypeRowChangeEventHandler(object sender, StylesheetTypeRowChangeEvent e);
        
        public delegate void SystemFolderRowChangeEventHandler(object sender, SystemFolderRowChangeEvent e);
        
        public delegate void TimeInForceRowChangeEventHandler(object sender, TimeInForceRowChangeEvent e);
        
        public delegate void TransactionTypeRowChangeEventHandler(object sender, TransactionTypeRowChangeEvent e);
        
        public delegate void UserRowChangeEventHandler(object sender, UserRowChangeEvent e);
        
        public delegate void ViolationRowChangeEventHandler(object sender, ViolationRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnAccountId;
            
            private Column columnCurrencyId;
            
            private Column columnSchemeId;
            
            private Column columnModelId;
            
            private Column columnBlotterId;
            
            private Column columnStylesheetId;
            
            private Column columnCountryId;
            
            private Column columnProvinceId;
            
            private Column columnAccountTypeCode;
            
            private Column columnLotHandlingCode;
            
            private Column columnTimeInForceCode;
            
            private Column columnMnemonic;
            
            private Column columnAddress0;
            
            private Column columnAddress1;
            
            private Column columnAddress2;
            
            private Column columnCity;
            
            private Column columnPostalCode;
            
            private Column columnUserData0;
            
            private Column columnUserData1;
            
            private Column columnUserData2;
            
            private Column columnUserData3;
            
            private Column columnUserData4;
            
            private Column columnUserData5;
            
            private Column columnUserData6;
            
            private Column columnUserData7;
            
            internal AccountDataTable() : 
                    base("Account")
            {
                this.InitClass();
            }
            
            internal AccountDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column AccountIdColumn
            {
                get
                {
                    return this.columnAccountId;
                }
            }
            
            public Column CurrencyIdColumn
            {
                get
                {
                    return this.columnCurrencyId;
                }
            }
            
            public Column SchemeIdColumn
            {
                get
                {
                    return this.columnSchemeId;
                }
            }
            
            public Column ModelIdColumn
            {
                get
                {
                    return this.columnModelId;
                }
            }
            
            public Column BlotterIdColumn
            {
                get
                {
                    return this.columnBlotterId;
                }
            }
            
            public Column StylesheetIdColumn
            {
                get
                {
                    return this.columnStylesheetId;
                }
            }
            
            public Column CountryIdColumn
            {
                get
                {
                    return this.columnCountryId;
                }
            }
            
            public Column ProvinceIdColumn
            {
                get
                {
                    return this.columnProvinceId;
                }
            }
            
            public Column AccountTypeCodeColumn
            {
                get
                {
                    return this.columnAccountTypeCode;
                }
            }
            
            public Column LotHandlingCodeColumn
            {
                get
                {
                    return this.columnLotHandlingCode;
                }
            }
            
            public Column TimeInForceCodeColumn
            {
                get
                {
                    return this.columnTimeInForceCode;
                }
            }
            
            public Column MnemonicColumn
            {
                get
                {
                    return this.columnMnemonic;
                }
            }
            
            public Column Address0Column
            {
                get
                {
                    return this.columnAddress0;
                }
            }
            
            public Column Address1Column
            {
                get
                {
                    return this.columnAddress1;
                }
            }
            
            public Column Address2Column
            {
                get
                {
                    return this.columnAddress2;
                }
            }
            
            public Column CityColumn
            {
                get
                {
                    return this.columnCity;
                }
            }
            
            public Column PostalCodeColumn
            {
                get
                {
                    return this.columnPostalCode;
                }
            }
            
            public Column UserData0Column
            {
                get
                {
                    return this.columnUserData0;
                }
            }
            
            public Column UserData1Column
            {
                get
                {
                    return this.columnUserData1;
                }
            }
            
            public Column UserData2Column
            {
                get
                {
                    return this.columnUserData2;
                }
            }
            
            public Column UserData3Column
            {
                get
                {
                    return this.columnUserData3;
                }
            }
            
            public Column UserData4Column
            {
                get
                {
                    return this.columnUserData4;
                }
            }
            
            public Column UserData5Column
            {
                get
                {
                    return this.columnUserData5;
                }
            }
            
            public Column UserData6Column
            {
                get
                {
                    return this.columnUserData6;
                }
            }
            
            public Column UserData7Column
            {
                get
                {
                    return this.columnUserData7;
                }
            }
            
            public AccountRow this[int index]
            {
                get
                {
                    return ((AccountRow)(this.Rows[index]));
                }
            }
            
            public event AccountRowChangeEventHandler AccountRowChanged;
            
            public event AccountRowChangeEventHandler AccountRowChanging;
            
            public event AccountRowChangeEventHandler AccountRowDeleted;
            
            public event AccountRowChangeEventHandler AccountRowDeleting;
            
            public void AddAccountRow(AccountRow row)
            {
                this.Rows.Add(row);
            }
            
            public AccountRow AddAccountRow(
                        ObjectRow parentObjectRowByFKObjectAccount, 
                        CurrencyRow parentCurrencyRowByFKCurrencyAccount, 
                        SchemeRow parentSchemeRowByFKSchemeAccount, 
                        ModelRow parentModelRowByFKModelAccount, 
                        BlotterRow parentBlotterRowByFKBlotterAccount, 
                        StylesheetRow parentStylesheetRowByFKStylesheetAccount, 
                        CountryRow parentCountryRowByFKCountryAccount, 
                        ProvinceRow parentProvinceRowByFKProvinceAccount, 
                        AccountTypeRow parentAccountTypeRowByFKAccountTypeAccount, 
                        LotHandlingRow parentLotHandlingRowByFKLotHandlingAccount, 
                        TimeInForceRow parentTimeInForceRowByFKTimeInForceAccount, 
                        string Mnemonic, 
                        string Address0, 
                        string Address1, 
                        string Address2, 
                        string City, 
                        string PostalCode, 
                        decimal UserData0, 
                        decimal UserData1, 
                        decimal UserData2, 
                        decimal UserData3, 
                        string UserData4, 
                        string UserData5, 
                        string UserData6, 
                        string UserData7)
            {
                AccountRow rowAccountRow = ((AccountRow)(this.NewRow()));
                rowAccountRow.ItemArray = new object[] {
                        parentObjectRowByFKObjectAccount[12],
                        parentCurrencyRowByFKCurrencyAccount[21],
                        parentSchemeRowByFKSchemeAccount[17],
                        parentModelRowByFKModelAccount[17],
                        parentBlotterRowByFKBlotterAccount[17],
                        parentStylesheetRowByFKStylesheetAccount[0],
                        parentCountryRowByFKCountryAccount[0],
                        parentProvinceRowByFKProvinceAccount[0],
                        parentAccountTypeRowByFKAccountTypeAccount[0],
                        parentLotHandlingRowByFKLotHandlingAccount[0],
                        parentTimeInForceRowByFKTimeInForceAccount[0],
                        Mnemonic,
                        Address0,
                        Address1,
                        Address2,
                        City,
                        PostalCode,
                        UserData0,
                        UserData1,
                        UserData2,
                        UserData3,
                        UserData4,
                        UserData5,
                        UserData6,
                        UserData7};
                this.Rows.Add(rowAccountRow);
                return rowAccountRow;
            }
            
            public AccountRow FindByAccountId(int AccountId)
            {
                return ((AccountRow)(this.Rows.Find(new object[] {
                            AccountId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                AccountDataTable cln = ((AccountDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new AccountDataTable();
            }
            
            internal void InitVars()
            {
                this.columnAccountId = this.Columns["AccountId"];
                this.columnCurrencyId = this.Columns["CurrencyId"];
                this.columnSchemeId = this.Columns["SchemeId"];
                this.columnModelId = this.Columns["ModelId"];
                this.columnBlotterId = this.Columns["BlotterId"];
                this.columnStylesheetId = this.Columns["StylesheetId"];
                this.columnCountryId = this.Columns["CountryId"];
                this.columnProvinceId = this.Columns["ProvinceId"];
                this.columnAccountTypeCode = this.Columns["AccountTypeCode"];
                this.columnLotHandlingCode = this.Columns["LotHandlingCode"];
                this.columnTimeInForceCode = this.Columns["TimeInForceCode"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnAddress0 = this.Columns["Address0"];
                this.columnAddress1 = this.Columns["Address1"];
                this.columnAddress2 = this.Columns["Address2"];
                this.columnCity = this.Columns["City"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnUserData0 = this.Columns["UserData0"];
                this.columnUserData1 = this.Columns["UserData1"];
                this.columnUserData2 = this.Columns["UserData2"];
                this.columnUserData3 = this.Columns["UserData3"];
                this.columnUserData4 = this.Columns["UserData4"];
                this.columnUserData5 = this.Columns["UserData5"];
                this.columnUserData6 = this.Columns["UserData6"];
                this.columnUserData7 = this.Columns["UserData7"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnAccountId = new Column("AccountId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountId);
                this.columnCurrencyId = new Column("CurrencyId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyId);
                this.columnSchemeId = new Column("SchemeId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSchemeId);
                this.columnModelId = new Column("ModelId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModelId);
                this.columnBlotterId = new Column("BlotterId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlotterId);
                this.columnStylesheetId = new Column("StylesheetId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStylesheetId);
                this.columnCountryId = new Column("CountryId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryId);
                this.columnProvinceId = new Column("ProvinceId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProvinceId);
                this.columnAccountTypeCode = new Column("AccountTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountTypeCode);
                this.columnLotHandlingCode = new Column("LotHandlingCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLotHandlingCode);
                this.columnTimeInForceCode = new Column("TimeInForceCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeInForceCode);
                this.columnMnemonic = new Column("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnAddress0 = new Column("Address0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress0);
                this.columnAddress1 = new Column("Address1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new Column("Address2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress2);
                this.columnCity = new Column("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnPostalCode = new Column("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnUserData0 = new Column("UserData0", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData0);
                this.columnUserData1 = new Column("UserData1", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData1);
                this.columnUserData2 = new Column("UserData2", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData2);
                this.columnUserData3 = new Column("UserData3", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData3);
                this.columnUserData4 = new Column("UserData4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData4);
                this.columnUserData5 = new Column("UserData5", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData5);
                this.columnUserData6 = new Column("UserData6", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData6);
                this.columnUserData7 = new Column("UserData7", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData7);
                this.Constraints.Add(new UniqueConstraint("PKAccount", new DataColumn[] {
                                this.columnAccountId}, true));
                this.columnAccountId.AllowDBNull = false;
                this.columnAccountId.Unique = true;
                this.columnCurrencyId.AllowDBNull = false;
                this.columnStylesheetId.AllowDBNull = false;
                this.columnAccountTypeCode.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.AccountLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Account"));
                }
            }
            
            public AccountRow NewAccountRow()
            {
                return ((AccountRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new AccountRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(AccountRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.AccountRowChanged != null))
                {
                    this.AccountRowChanged(this, new AccountRowChangeEvent(((AccountRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.AccountRowChanging != null))
                {
                    this.AccountRowChanging(this, new AccountRowChangeEvent(((AccountRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.AccountRowDeleted != null))
                {
                    this.AccountRowDeleted(this, new AccountRowChangeEvent(((AccountRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.AccountRowDeleting != null))
                {
                    this.AccountRowDeleting(this, new AccountRowChangeEvent(((AccountRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAccountRow(AccountRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountRow : Row
        {
            
            private AccountDataTable tableAccount;
            
            internal AccountRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableAccount = ((AccountDataTable)(this.Table));
            }
            
            public int AccountId
            {
                get
                {
                    return ((int)(this[this.tableAccount.AccountIdColumn]));
                }
                set
                {
                    this[this.tableAccount.AccountIdColumn] = value;
                }
            }
            
            public int CurrencyId
            {
                get
                {
                    return ((int)(this[this.tableAccount.CurrencyIdColumn]));
                }
                set
                {
                    this[this.tableAccount.CurrencyIdColumn] = value;
                }
            }
            
            public int SchemeId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableAccount.SchemeIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccount.SchemeIdColumn] = value;
                }
            }
            
            public int ModelId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableAccount.ModelIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccount.ModelIdColumn] = value;
                }
            }
            
            public int BlotterId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableAccount.BlotterIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccount.BlotterIdColumn] = value;
                }
            }
            
            public int StylesheetId
            {
                get
                {
                    return ((int)(this[this.tableAccount.StylesheetIdColumn]));
                }
                set
                {
                    this[this.tableAccount.StylesheetIdColumn] = value;
                }
            }
            
            public int CountryId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableAccount.CountryIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccount.CountryIdColumn] = value;
                }
            }
            
            public int ProvinceId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableAccount.ProvinceIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccount.ProvinceIdColumn] = value;
                }
            }
            
            public int AccountTypeCode
            {
                get
                {
                    return ((int)(this[this.tableAccount.AccountTypeCodeColumn]));
                }
                set
                {
                    this[this.tableAccount.AccountTypeCodeColumn] = value;
                }
            }
            
            public int LotHandlingCode
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableAccount.LotHandlingCodeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccount.LotHandlingCodeColumn] = value;
                }
            }
            
            public int TimeInForceCode
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableAccount.TimeInForceCodeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccount.TimeInForceCodeColumn] = value;
                }
            }
            
            public string Mnemonic
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAccount.MnemonicColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccount.MnemonicColumn] = value;
                }
            }
            
            public string Address0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAccount.Address0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccount.Address0Column] = value;
                }
            }
            
            public string Address1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAccount.Address1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccount.Address1Column] = value;
                }
            }
            
            public string Address2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAccount.Address2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccount.Address2Column] = value;
                }
            }
            
            public string City
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAccount.CityColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccount.CityColumn] = value;
                }
            }
            
            public string PostalCode
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAccount.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccount.PostalCodeColumn] = value;
                }
            }
            
            public decimal UserData0
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableAccount.UserData0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccount.UserData0Column] = value;
                }
            }
            
            public decimal UserData1
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableAccount.UserData1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccount.UserData1Column] = value;
                }
            }
            
            public decimal UserData2
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableAccount.UserData2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccount.UserData2Column] = value;
                }
            }
            
            public decimal UserData3
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableAccount.UserData3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccount.UserData3Column] = value;
                }
            }
            
            public string UserData4
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAccount.UserData4Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccount.UserData4Column] = value;
                }
            }
            
            public string UserData5
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAccount.UserData5Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccount.UserData5Column] = value;
                }
            }
            
            public string UserData6
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAccount.UserData6Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccount.UserData6Column] = value;
                }
            }
            
            public string UserData7
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAccount.UserData7Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccount.UserData7Column] = value;
                }
            }
            
            public AccountTypeRow AccountTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockAccountType.IsReaderLockHeld || DataSetMarket.lockAccountType.IsWriterLockHeld))
                    {
                        return ((AccountTypeRow)(this.GetParentRow(this.Table.ParentRelations["FKAccountTypeAccount"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "AccountType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKAccountTypeAccount"]);
                }
            }
            
            public BlotterRow BlotterRow
            {
                get
                {
                    if ((DataSetMarket.lockBlotter.IsReaderLockHeld || DataSetMarket.lockBlotter.IsWriterLockHeld))
                    {
                        return ((BlotterRow)(this.GetParentRow(this.Table.ParentRelations["FKBlotterAccount"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Blotter"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKBlotterAccount"]);
                }
            }
            
            public CountryRow CountryRow
            {
                get
                {
                    if ((DataSetMarket.lockCountry.IsReaderLockHeld || DataSetMarket.lockCountry.IsWriterLockHeld))
                    {
                        return ((CountryRow)(this.GetParentRow(this.Table.ParentRelations["FKCountryAccount"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Country"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKCountryAccount"]);
                }
            }
            
            public CurrencyRow CurrencyRow
            {
                get
                {
                    if ((DataSetMarket.lockCurrency.IsReaderLockHeld || DataSetMarket.lockCurrency.IsWriterLockHeld))
                    {
                        return ((CurrencyRow)(this.GetParentRow(this.Table.ParentRelations["FKCurrencyAccount"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Currency"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKCurrencyAccount"]);
                }
            }
            
            public LotHandlingRow LotHandlingRow
            {
                get
                {
                    if ((DataSetMarket.lockLotHandling.IsReaderLockHeld || DataSetMarket.lockLotHandling.IsWriterLockHeld))
                    {
                        return ((LotHandlingRow)(this.GetParentRow(this.Table.ParentRelations["FKLotHandlingAccount"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "LotHandling"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKLotHandlingAccount"]);
                }
            }
            
            public ModelRow ModelRow
            {
                get
                {
                    if ((DataSetMarket.lockModel.IsReaderLockHeld || DataSetMarket.lockModel.IsWriterLockHeld))
                    {
                        return ((ModelRow)(this.GetParentRow(this.Table.ParentRelations["FKModelAccount"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Model"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKModelAccount"]);
                }
            }
            
            public ObjectRow ObjectRow
            {
                get
                {
                    if ((DataSetMarket.lockObject.IsReaderLockHeld || DataSetMarket.lockObject.IsWriterLockHeld))
                    {
                        return ((ObjectRow)(this.GetParentRow(this.Table.ParentRelations["FKObjectAccount"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Object"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKObjectAccount"]);
                }
            }
            
            public ProvinceRow ProvinceRow
            {
                get
                {
                    if ((DataSetMarket.lockProvince.IsReaderLockHeld || DataSetMarket.lockProvince.IsWriterLockHeld))
                    {
                        return ((ProvinceRow)(this.GetParentRow(this.Table.ParentRelations["FKProvinceAccount"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Province"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKProvinceAccount"]);
                }
            }
            
            public SchemeRow SchemeRow
            {
                get
                {
                    if ((DataSetMarket.lockScheme.IsReaderLockHeld || DataSetMarket.lockScheme.IsWriterLockHeld))
                    {
                        return ((SchemeRow)(this.GetParentRow(this.Table.ParentRelations["FKSchemeAccount"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Scheme"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKSchemeAccount"]);
                }
            }
            
            public SecurityRow SecurityRow
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["FKSecurityAccount"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKSecurityAccount"]);
                }
            }
            
            public StylesheetRow StylesheetRow
            {
                get
                {
                    if ((DataSetMarket.lockStylesheet.IsReaderLockHeld || DataSetMarket.lockStylesheet.IsWriterLockHeld))
                    {
                        return ((StylesheetRow)(this.GetParentRow(this.Table.ParentRelations["FKStylesheetAccount"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Stylesheet"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKStylesheetAccount"]);
                }
            }
            
            public TimeInForceRow TimeInForceRow
            {
                get
                {
                    if ((DataSetMarket.lockTimeInForce.IsReaderLockHeld || DataSetMarket.lockTimeInForce.IsWriterLockHeld))
                    {
                        return ((TimeInForceRow)(this.GetParentRow(this.Table.ParentRelations["FKTimeInForceAccount"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "TimeInForce"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKTimeInForceAccount"]);
                }
            }
            
            public bool IsSchemeIdNull()
            {
                return this.IsNull(this.tableAccount.SchemeIdColumn);
            }
            
            public void SetSchemeIdNull()
            {
                this[this.tableAccount.SchemeIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsModelIdNull()
            {
                return this.IsNull(this.tableAccount.ModelIdColumn);
            }
            
            public void SetModelIdNull()
            {
                this[this.tableAccount.ModelIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsBlotterIdNull()
            {
                return this.IsNull(this.tableAccount.BlotterIdColumn);
            }
            
            public void SetBlotterIdNull()
            {
                this[this.tableAccount.BlotterIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryIdNull()
            {
                return this.IsNull(this.tableAccount.CountryIdColumn);
            }
            
            public void SetCountryIdNull()
            {
                this[this.tableAccount.CountryIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsProvinceIdNull()
            {
                return this.IsNull(this.tableAccount.ProvinceIdColumn);
            }
            
            public void SetProvinceIdNull()
            {
                this[this.tableAccount.ProvinceIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsLotHandlingCodeNull()
            {
                return this.IsNull(this.tableAccount.LotHandlingCodeColumn);
            }
            
            public void SetLotHandlingCodeNull()
            {
                this[this.tableAccount.LotHandlingCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsTimeInForceCodeNull()
            {
                return this.IsNull(this.tableAccount.TimeInForceCodeColumn);
            }
            
            public void SetTimeInForceCodeNull()
            {
                this[this.tableAccount.TimeInForceCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsMnemonicNull()
            {
                return this.IsNull(this.tableAccount.MnemonicColumn);
            }
            
            public void SetMnemonicNull()
            {
                this[this.tableAccount.MnemonicColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddress0Null()
            {
                return this.IsNull(this.tableAccount.Address0Column);
            }
            
            public void SetAddress0Null()
            {
                this[this.tableAccount.Address0Column] = System.Convert.DBNull;
            }
            
            public bool IsAddress1Null()
            {
                return this.IsNull(this.tableAccount.Address1Column);
            }
            
            public void SetAddress1Null()
            {
                this[this.tableAccount.Address1Column] = System.Convert.DBNull;
            }
            
            public bool IsAddress2Null()
            {
                return this.IsNull(this.tableAccount.Address2Column);
            }
            
            public void SetAddress2Null()
            {
                this[this.tableAccount.Address2Column] = System.Convert.DBNull;
            }
            
            public bool IsCityNull()
            {
                return this.IsNull(this.tableAccount.CityColumn);
            }
            
            public void SetCityNull()
            {
                this[this.tableAccount.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull()
            {
                return this.IsNull(this.tableAccount.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull()
            {
                this[this.tableAccount.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserData0Null()
            {
                return this.IsNull(this.tableAccount.UserData0Column);
            }
            
            public void SetUserData0Null()
            {
                this[this.tableAccount.UserData0Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData1Null()
            {
                return this.IsNull(this.tableAccount.UserData1Column);
            }
            
            public void SetUserData1Null()
            {
                this[this.tableAccount.UserData1Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData2Null()
            {
                return this.IsNull(this.tableAccount.UserData2Column);
            }
            
            public void SetUserData2Null()
            {
                this[this.tableAccount.UserData2Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData3Null()
            {
                return this.IsNull(this.tableAccount.UserData3Column);
            }
            
            public void SetUserData3Null()
            {
                this[this.tableAccount.UserData3Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData4Null()
            {
                return this.IsNull(this.tableAccount.UserData4Column);
            }
            
            public void SetUserData4Null()
            {
                this[this.tableAccount.UserData4Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData5Null()
            {
                return this.IsNull(this.tableAccount.UserData5Column);
            }
            
            public void SetUserData5Null()
            {
                this[this.tableAccount.UserData5Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData6Null()
            {
                return this.IsNull(this.tableAccount.UserData6Column);
            }
            
            public void SetUserData6Null()
            {
                this[this.tableAccount.UserData6Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData7Null()
            {
                return this.IsNull(this.tableAccount.UserData7Column);
            }
            
            public void SetUserData7Null()
            {
                this[this.tableAccount.UserData7Column] = System.Convert.DBNull;
            }
            
            public AllocationRow[] GetAllocationRows()
            {
                return ((AllocationRow[])(this.GetChildRows(this.Table.ChildRelations["FKAccountAllocation"])));
            }
            
            public OrderRow[] GetOrderRows()
            {
                return ((OrderRow[])(this.GetChildRows(this.Table.ChildRelations["FKAccountOrder"])));
            }
            
            public PositionRow[] GetPositionRows()
            {
                return ((PositionRow[])(this.GetChildRows(this.Table.ChildRelations["FKAccountPosition"])));
            }
            
            public ProposedOrderRow[] GetProposedOrderRows()
            {
                return ((ProposedOrderRow[])(this.GetChildRows(this.Table.ChildRelations["FKAccountProposedOrder"])));
            }
            
            public TaxLotRow[] GetTaxLotRows()
            {
                return ((TaxLotRow[])(this.GetChildRows(this.Table.ChildRelations["FKAccountTaxLot"])));
            }
            
            public ViolationRow[] GetViolationRows()
            {
                return ((ViolationRow[])(this.GetChildRows(this.Table.ChildRelations["FKAccountViolation"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountRowChangeEvent : EventArgs
        {
            
            private AccountRow eventRow;
            
            private DataRowAction eventAction;
            
            public AccountRowChangeEvent(AccountRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AccountRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountTypeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnAccountTypeCode;
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private DataView viewUKAccountTypeExternalId0;
            
            private DataView viewUKAccountTypeExternalId1;
            
            internal AccountTypeDataTable() : 
                    base("AccountType")
            {
                this.InitClass();
            }
            
            internal AccountTypeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column AccountTypeCodeColumn
            {
                get
                {
                    return this.columnAccountTypeCode;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public DataView UKAccountTypeExternalId0
            {
                get
                {
                    return this.viewUKAccountTypeExternalId0;
                }
            }
            
            public DataView UKAccountTypeExternalId1
            {
                get
                {
                    return this.viewUKAccountTypeExternalId1;
                }
            }
            
            public AccountTypeRow this[int index]
            {
                get
                {
                    return ((AccountTypeRow)(this.Rows[index]));
                }
            }
            
            public event AccountTypeRowChangeEventHandler AccountTypeRowChanged;
            
            public event AccountTypeRowChangeEventHandler AccountTypeRowChanging;
            
            public event AccountTypeRowChangeEventHandler AccountTypeRowDeleted;
            
            public event AccountTypeRowChangeEventHandler AccountTypeRowDeleting;
            
            public void AddAccountTypeRow(AccountTypeRow row)
            {
                this.Rows.Add(row);
            }
            
            public AccountTypeRow AddAccountTypeRow(int AccountTypeCode, string Description, string ExternalId0, string ExternalId1)
            {
                AccountTypeRow rowAccountTypeRow = ((AccountTypeRow)(this.NewRow()));
                rowAccountTypeRow.ItemArray = new object[] {
                        AccountTypeCode,
                        Description,
                        ExternalId0,
                        ExternalId1};
                this.Rows.Add(rowAccountTypeRow);
                return rowAccountTypeRow;
            }
            
            public AccountTypeRow FindByAccountTypeCode(int AccountTypeCode)
            {
                return ((AccountTypeRow)(this.Rows.Find(new object[] {
                            AccountTypeCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                AccountTypeDataTable cln = ((AccountTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new AccountTypeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnAccountTypeCode = this.Columns["AccountTypeCode"];
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnAccountTypeCode = new Column("AccountTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountTypeCode);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.Constraints.Add(new UniqueConstraint("PKAccountType", new DataColumn[] {
                                this.columnAccountTypeCode}, true));
                this.viewUKAccountTypeExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewUKAccountTypeExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.columnAccountTypeCode.AllowDBNull = false;
                this.columnAccountTypeCode.Unique = true;
                this.columnDescription.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.AccountTypeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "AccountType"));
                }
            }
            
            public AccountTypeRow NewAccountTypeRow()
            {
                return ((AccountTypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new AccountTypeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(AccountTypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.AccountTypeRowChanged != null))
                {
                    this.AccountTypeRowChanged(this, new AccountTypeRowChangeEvent(((AccountTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.AccountTypeRowChanging != null))
                {
                    this.AccountTypeRowChanging(this, new AccountTypeRowChangeEvent(((AccountTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.AccountTypeRowDeleted != null))
                {
                    this.AccountTypeRowDeleted(this, new AccountTypeRowChangeEvent(((AccountTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.AccountTypeRowDeleting != null))
                {
                    this.AccountTypeRowDeleting(this, new AccountTypeRowChangeEvent(((AccountTypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAccountTypeRow(AccountTypeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountTypeRow : Row
        {
            
            private AccountTypeDataTable tableAccountType;
            
            internal AccountTypeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableAccountType = ((AccountTypeDataTable)(this.Table));
            }
            
            public int AccountTypeCode
            {
                get
                {
                    return ((int)(this[this.tableAccountType.AccountTypeCodeColumn]));
                }
                set
                {
                    this[this.tableAccountType.AccountTypeCodeColumn] = value;
                }
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableAccountType.DescriptionColumn]));
                }
                set
                {
                    this[this.tableAccountType.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAccountType.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccountType.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAccountType.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAccountType.ExternalId1Column] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableAccountType.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableAccountType.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableAccountType.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableAccountType.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public AccountRow[] GetAccountRows()
            {
                return ((AccountRow[])(this.GetChildRows(this.Table.ChildRelations["FKAccountTypeAccount"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AccountTypeRowChangeEvent : EventArgs
        {
            
            private AccountTypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public AccountTypeRowChangeEvent(AccountTypeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AccountTypeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AlgorithmDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnAlgorithmId;
            
            private Column columnAlgorithmTypeCode;
            
            private Column columnName;
            
            private Column columnDescription;
            
            private Column columnAssembly;
            
            private Column columnType;
            
            private Column columnMethod;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private DataView viewUKAlgorithmExternalId0;
            
            private DataView viewUKAlgorithmExternalId1;
            
            internal AlgorithmDataTable() : 
                    base("Algorithm")
            {
                this.InitClass();
            }
            
            internal AlgorithmDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column AlgorithmIdColumn
            {
                get
                {
                    return this.columnAlgorithmId;
                }
            }
            
            public Column AlgorithmTypeCodeColumn
            {
                get
                {
                    return this.columnAlgorithmTypeCode;
                }
            }
            
            public Column NameColumn
            {
                get
                {
                    return this.columnName;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column AssemblyColumn
            {
                get
                {
                    return this.columnAssembly;
                }
            }
            
            public Column TypeColumn
            {
                get
                {
                    return this.columnType;
                }
            }
            
            public Column MethodColumn
            {
                get
                {
                    return this.columnMethod;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public DataView UKAlgorithmExternalId0
            {
                get
                {
                    return this.viewUKAlgorithmExternalId0;
                }
            }
            
            public DataView UKAlgorithmExternalId1
            {
                get
                {
                    return this.viewUKAlgorithmExternalId1;
                }
            }
            
            public AlgorithmRow this[int index]
            {
                get
                {
                    return ((AlgorithmRow)(this.Rows[index]));
                }
            }
            
            public event AlgorithmRowChangeEventHandler AlgorithmRowChanged;
            
            public event AlgorithmRowChangeEventHandler AlgorithmRowChanging;
            
            public event AlgorithmRowChangeEventHandler AlgorithmRowDeleted;
            
            public event AlgorithmRowChangeEventHandler AlgorithmRowDeleting;
            
            public void AddAlgorithmRow(AlgorithmRow row)
            {
                this.Rows.Add(row);
            }
            
            public AlgorithmRow AddAlgorithmRow(AlgorithmTypeRow parentAlgorithmTypeRowByFKAlgorithmTypeAlgorithm, string Name, string Description, string Assembly, string Type, string Method, string ExternalId0, string ExternalId1)
            {
                AlgorithmRow rowAlgorithmRow = ((AlgorithmRow)(this.NewRow()));
                rowAlgorithmRow.ItemArray = new object[] {
                        null,
                        parentAlgorithmTypeRowByFKAlgorithmTypeAlgorithm[0],
                        Name,
                        Description,
                        Assembly,
                        Type,
                        Method,
                        ExternalId0,
                        ExternalId1};
                this.Rows.Add(rowAlgorithmRow);
                return rowAlgorithmRow;
            }
            
            public AlgorithmRow FindByAlgorithmId(int AlgorithmId)
            {
                return ((AlgorithmRow)(this.Rows.Find(new object[] {
                            AlgorithmId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                AlgorithmDataTable cln = ((AlgorithmDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new AlgorithmDataTable();
            }
            
            internal void InitVars()
            {
                this.columnAlgorithmId = this.Columns["AlgorithmId"];
                this.columnAlgorithmTypeCode = this.Columns["AlgorithmTypeCode"];
                this.columnName = this.Columns["Name"];
                this.columnDescription = this.Columns["Description"];
                this.columnAssembly = this.Columns["Assembly"];
                this.columnType = this.Columns["Type"];
                this.columnMethod = this.Columns["Method"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnAlgorithmId = new Column("AlgorithmId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAlgorithmId);
                this.columnAlgorithmTypeCode = new Column("AlgorithmTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAlgorithmTypeCode);
                this.columnName = new Column("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnAssembly = new Column("Assembly", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAssembly);
                this.columnType = new Column("Type", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnType);
                this.columnMethod = new Column("Method", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMethod);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.Constraints.Add(new UniqueConstraint("PKAlgorithm", new DataColumn[] {
                                this.columnAlgorithmId}, true));
                this.viewUKAlgorithmExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewUKAlgorithmExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.columnAlgorithmId.AutoIncrement = true;
                this.columnAlgorithmId.AllowDBNull = false;
                this.columnAlgorithmId.Unique = true;
                this.columnAlgorithmTypeCode.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnAssembly.AllowDBNull = false;
                this.columnType.AllowDBNull = false;
                this.columnMethod.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.AlgorithmLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Algorithm"));
                }
            }
            
            public AlgorithmRow NewAlgorithmRow()
            {
                return ((AlgorithmRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new AlgorithmRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(AlgorithmRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.AlgorithmRowChanged != null))
                {
                    this.AlgorithmRowChanged(this, new AlgorithmRowChangeEvent(((AlgorithmRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.AlgorithmRowChanging != null))
                {
                    this.AlgorithmRowChanging(this, new AlgorithmRowChangeEvent(((AlgorithmRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.AlgorithmRowDeleted != null))
                {
                    this.AlgorithmRowDeleted(this, new AlgorithmRowChangeEvent(((AlgorithmRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.AlgorithmRowDeleting != null))
                {
                    this.AlgorithmRowDeleting(this, new AlgorithmRowChangeEvent(((AlgorithmRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAlgorithmRow(AlgorithmRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AlgorithmRow : Row
        {
            
            private AlgorithmDataTable tableAlgorithm;
            
            internal AlgorithmRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableAlgorithm = ((AlgorithmDataTable)(this.Table));
            }
            
            public int AlgorithmId
            {
                get
                {
                    return ((int)(this[this.tableAlgorithm.AlgorithmIdColumn]));
                }
                set
                {
                    this[this.tableAlgorithm.AlgorithmIdColumn] = value;
                }
            }
            
            public int AlgorithmTypeCode
            {
                get
                {
                    return ((int)(this[this.tableAlgorithm.AlgorithmTypeCodeColumn]));
                }
                set
                {
                    this[this.tableAlgorithm.AlgorithmTypeCodeColumn] = value;
                }
            }
            
            public string Name
            {
                get
                {
                    return ((string)(this[this.tableAlgorithm.NameColumn]));
                }
                set
                {
                    this[this.tableAlgorithm.NameColumn] = value;
                }
            }
            
            public string Description
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAlgorithm.DescriptionColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAlgorithm.DescriptionColumn] = value;
                }
            }
            
            public string Assembly
            {
                get
                {
                    return ((string)(this[this.tableAlgorithm.AssemblyColumn]));
                }
                set
                {
                    this[this.tableAlgorithm.AssemblyColumn] = value;
                }
            }
            
            public string Type
            {
                get
                {
                    return ((string)(this[this.tableAlgorithm.TypeColumn]));
                }
                set
                {
                    this[this.tableAlgorithm.TypeColumn] = value;
                }
            }
            
            public string Method
            {
                get
                {
                    return ((string)(this[this.tableAlgorithm.MethodColumn]));
                }
                set
                {
                    this[this.tableAlgorithm.MethodColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAlgorithm.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAlgorithm.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAlgorithm.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAlgorithm.ExternalId1Column] = value;
                }
            }
            
            public AlgorithmTypeRow AlgorithmTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockAlgorithmType.IsReaderLockHeld || DataSetMarket.lockAlgorithmType.IsWriterLockHeld))
                    {
                        return ((AlgorithmTypeRow)(this.GetParentRow(this.Table.ParentRelations["FKAlgorithmTypeAlgorithm"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "AlgorithmType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKAlgorithmTypeAlgorithm"]);
                }
            }
            
            public bool IsDescriptionNull()
            {
                return this.IsNull(this.tableAlgorithm.DescriptionColumn);
            }
            
            public void SetDescriptionNull()
            {
                this[this.tableAlgorithm.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableAlgorithm.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableAlgorithm.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableAlgorithm.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableAlgorithm.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public BlotterRow[] GetBlotterRows()
            {
                return ((BlotterRow[])(this.GetChildRows(this.Table.ChildRelations["FKAlgorithmBlotter"])));
            }
            
            public ModelRow[] GetModelRows()
            {
                return ((ModelRow[])(this.GetChildRows(this.Table.ChildRelations["FKAlgorithmModel"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AlgorithmRowChangeEvent : EventArgs
        {
            
            private AlgorithmRow eventRow;
            
            private DataRowAction eventAction;
            
            public AlgorithmRowChangeEvent(AlgorithmRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AlgorithmRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AlgorithmTypeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnAlgorithmTypeCode;
            
            private Column columnName;
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private DataView viewUKAlgorithmTypeExternalId0;
            
            private DataView viewUKAlgorithmTypeExternalId1;
            
            internal AlgorithmTypeDataTable() : 
                    base("AlgorithmType")
            {
                this.InitClass();
            }
            
            internal AlgorithmTypeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column AlgorithmTypeCodeColumn
            {
                get
                {
                    return this.columnAlgorithmTypeCode;
                }
            }
            
            public Column NameColumn
            {
                get
                {
                    return this.columnName;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public DataView UKAlgorithmTypeExternalId0
            {
                get
                {
                    return this.viewUKAlgorithmTypeExternalId0;
                }
            }
            
            public DataView UKAlgorithmTypeExternalId1
            {
                get
                {
                    return this.viewUKAlgorithmTypeExternalId1;
                }
            }
            
            public AlgorithmTypeRow this[int index]
            {
                get
                {
                    return ((AlgorithmTypeRow)(this.Rows[index]));
                }
            }
            
            public event AlgorithmTypeRowChangeEventHandler AlgorithmTypeRowChanged;
            
            public event AlgorithmTypeRowChangeEventHandler AlgorithmTypeRowChanging;
            
            public event AlgorithmTypeRowChangeEventHandler AlgorithmTypeRowDeleted;
            
            public event AlgorithmTypeRowChangeEventHandler AlgorithmTypeRowDeleting;
            
            public void AddAlgorithmTypeRow(AlgorithmTypeRow row)
            {
                this.Rows.Add(row);
            }
            
            public AlgorithmTypeRow AddAlgorithmTypeRow(int AlgorithmTypeCode, string Name, string Description, string ExternalId0, string ExternalId1)
            {
                AlgorithmTypeRow rowAlgorithmTypeRow = ((AlgorithmTypeRow)(this.NewRow()));
                rowAlgorithmTypeRow.ItemArray = new object[] {
                        AlgorithmTypeCode,
                        Name,
                        Description,
                        ExternalId0,
                        ExternalId1};
                this.Rows.Add(rowAlgorithmTypeRow);
                return rowAlgorithmTypeRow;
            }
            
            public AlgorithmTypeRow FindByAlgorithmTypeCode(int AlgorithmTypeCode)
            {
                return ((AlgorithmTypeRow)(this.Rows.Find(new object[] {
                            AlgorithmTypeCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                AlgorithmTypeDataTable cln = ((AlgorithmTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new AlgorithmTypeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnAlgorithmTypeCode = this.Columns["AlgorithmTypeCode"];
                this.columnName = this.Columns["Name"];
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnAlgorithmTypeCode = new Column("AlgorithmTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAlgorithmTypeCode);
                this.columnName = new Column("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.Constraints.Add(new UniqueConstraint("PKAlgorithmType", new DataColumn[] {
                                this.columnAlgorithmTypeCode}, true));
                this.viewUKAlgorithmTypeExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewUKAlgorithmTypeExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.columnAlgorithmTypeCode.AllowDBNull = false;
                this.columnAlgorithmTypeCode.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.AlgorithmTypeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "AlgorithmType"));
                }
            }
            
            public AlgorithmTypeRow NewAlgorithmTypeRow()
            {
                return ((AlgorithmTypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new AlgorithmTypeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(AlgorithmTypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.AlgorithmTypeRowChanged != null))
                {
                    this.AlgorithmTypeRowChanged(this, new AlgorithmTypeRowChangeEvent(((AlgorithmTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.AlgorithmTypeRowChanging != null))
                {
                    this.AlgorithmTypeRowChanging(this, new AlgorithmTypeRowChangeEvent(((AlgorithmTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.AlgorithmTypeRowDeleted != null))
                {
                    this.AlgorithmTypeRowDeleted(this, new AlgorithmTypeRowChangeEvent(((AlgorithmTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.AlgorithmTypeRowDeleting != null))
                {
                    this.AlgorithmTypeRowDeleting(this, new AlgorithmTypeRowChangeEvent(((AlgorithmTypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAlgorithmTypeRow(AlgorithmTypeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AlgorithmTypeRow : Row
        {
            
            private AlgorithmTypeDataTable tableAlgorithmType;
            
            internal AlgorithmTypeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableAlgorithmType = ((AlgorithmTypeDataTable)(this.Table));
            }
            
            public int AlgorithmTypeCode
            {
                get
                {
                    return ((int)(this[this.tableAlgorithmType.AlgorithmTypeCodeColumn]));
                }
                set
                {
                    this[this.tableAlgorithmType.AlgorithmTypeCodeColumn] = value;
                }
            }
            
            public string Name
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAlgorithmType.NameColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAlgorithmType.NameColumn] = value;
                }
            }
            
            public string Description
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAlgorithmType.DescriptionColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAlgorithmType.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAlgorithmType.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAlgorithmType.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAlgorithmType.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAlgorithmType.ExternalId1Column] = value;
                }
            }
            
            public bool IsNameNull()
            {
                return this.IsNull(this.tableAlgorithmType.NameColumn);
            }
            
            public void SetNameNull()
            {
                this[this.tableAlgorithmType.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull()
            {
                return this.IsNull(this.tableAlgorithmType.DescriptionColumn);
            }
            
            public void SetDescriptionNull()
            {
                this[this.tableAlgorithmType.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableAlgorithmType.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableAlgorithmType.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableAlgorithmType.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableAlgorithmType.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public AlgorithmRow[] GetAlgorithmRows()
            {
                return ((AlgorithmRow[])(this.GetChildRows(this.Table.ChildRelations["FKAlgorithmTypeAlgorithm"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AlgorithmTypeRowChangeEvent : EventArgs
        {
            
            private AlgorithmTypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public AlgorithmTypeRowChangeEvent(AlgorithmTypeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AlgorithmTypeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AllocationDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnAllocationId;
            
            private Column columnBlockOrderId;
            
            private Column columnAccountId;
            
            private Column columnSecurityId;
            
            private Column columnSettlementId;
            
            private Column columnPositionTypeCode;
            
            private Column columnTransactionTypeCode;
            
            private Column columnQuantity;
            
            private Column columnPrice;
            
            private Column columnCommission;
            
            private Column columnAccruedInterest;
            
            private Column columnUserFee0;
            
            private Column columnUserFee1;
            
            private Column columnUserFee2;
            
            private Column columnUserFee3;
            
            private Column columnTradeDate;
            
            private Column columnSettlementDate;
            
            private Column columnCreatedTime;
            
            private Column columnCreatedUserId;
            
            private Column columnModifiedTime;
            
            private Column columnModifiedUserId;
            
            private DataView viewUKAllocationAccountIdSecurityIdPositionTypeCode;
            
            internal AllocationDataTable() : 
                    base("Allocation")
            {
                this.InitClass();
            }
            
            internal AllocationDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column AllocationIdColumn
            {
                get
                {
                    return this.columnAllocationId;
                }
            }
            
            public Column BlockOrderIdColumn
            {
                get
                {
                    return this.columnBlockOrderId;
                }
            }
            
            public Column AccountIdColumn
            {
                get
                {
                    return this.columnAccountId;
                }
            }
            
            public Column SecurityIdColumn
            {
                get
                {
                    return this.columnSecurityId;
                }
            }
            
            public Column SettlementIdColumn
            {
                get
                {
                    return this.columnSettlementId;
                }
            }
            
            public Column PositionTypeCodeColumn
            {
                get
                {
                    return this.columnPositionTypeCode;
                }
            }
            
            public Column TransactionTypeCodeColumn
            {
                get
                {
                    return this.columnTransactionTypeCode;
                }
            }
            
            public Column QuantityColumn
            {
                get
                {
                    return this.columnQuantity;
                }
            }
            
            public Column PriceColumn
            {
                get
                {
                    return this.columnPrice;
                }
            }
            
            public Column CommissionColumn
            {
                get
                {
                    return this.columnCommission;
                }
            }
            
            public Column AccruedInterestColumn
            {
                get
                {
                    return this.columnAccruedInterest;
                }
            }
            
            public Column UserFee0Column
            {
                get
                {
                    return this.columnUserFee0;
                }
            }
            
            public Column UserFee1Column
            {
                get
                {
                    return this.columnUserFee1;
                }
            }
            
            public Column UserFee2Column
            {
                get
                {
                    return this.columnUserFee2;
                }
            }
            
            public Column UserFee3Column
            {
                get
                {
                    return this.columnUserFee3;
                }
            }
            
            public Column TradeDateColumn
            {
                get
                {
                    return this.columnTradeDate;
                }
            }
            
            public Column SettlementDateColumn
            {
                get
                {
                    return this.columnSettlementDate;
                }
            }
            
            public Column CreatedTimeColumn
            {
                get
                {
                    return this.columnCreatedTime;
                }
            }
            
            public Column CreatedUserIdColumn
            {
                get
                {
                    return this.columnCreatedUserId;
                }
            }
            
            public Column ModifiedTimeColumn
            {
                get
                {
                    return this.columnModifiedTime;
                }
            }
            
            public Column ModifiedUserIdColumn
            {
                get
                {
                    return this.columnModifiedUserId;
                }
            }
            
            public DataView UKAllocationAccountIdSecurityIdPositionTypeCode
            {
                get
                {
                    return this.viewUKAllocationAccountIdSecurityIdPositionTypeCode;
                }
            }
            
            public AllocationRow this[int index]
            {
                get
                {
                    return ((AllocationRow)(this.Rows[index]));
                }
            }
            
            public event AllocationRowChangeEventHandler AllocationRowChanged;
            
            public event AllocationRowChangeEventHandler AllocationRowChanging;
            
            public event AllocationRowChangeEventHandler AllocationRowDeleted;
            
            public event AllocationRowChangeEventHandler AllocationRowDeleting;
            
            public void AddAllocationRow(AllocationRow row)
            {
                this.Rows.Add(row);
            }
            
            public AllocationRow AddAllocationRow(
                        BlockOrderRow parentBlockOrderRowByFKBlockOrderAllocation, 
                        AccountRow parentAccountRowByFKAccountAllocation, 
                        SecurityRow parentSecurityRowByFKSecurityAllocationSecurityId, 
                        SecurityRow parentSecurityRowByFKSecurityAllocationSettlementId, 
                        int PositionTypeCode, 
                        TransactionTypeRow parentTransactionTypeRowByFKTransactionTypeAllocation, 
                        decimal Quantity, 
                        decimal Price, 
                        decimal Commission, 
                        decimal AccruedInterest, 
                        decimal UserFee0, 
                        decimal UserFee1, 
                        decimal UserFee2, 
                        decimal UserFee3, 
                        System.DateTime TradeDate, 
                        System.DateTime SettlementDate, 
                        System.DateTime CreatedTime, 
                        UserRow parentUserRowByFKUserAllocationCreatedUserId, 
                        System.DateTime ModifiedTime, 
                        UserRow parentUserRowByFKUserAllocationModifiedUserId)
            {
                AllocationRow rowAllocationRow = ((AllocationRow)(this.NewRow()));
                rowAllocationRow.ItemArray = new object[] {
                        null,
                        parentBlockOrderRowByFKBlockOrderAllocation[0],
                        parentAccountRowByFKAccountAllocation[17],
                        parentSecurityRowByFKSecurityAllocationSecurityId[17],
                        parentSecurityRowByFKSecurityAllocationSettlementId[17],
                        PositionTypeCode,
                        parentTransactionTypeRowByFKTransactionTypeAllocation[0],
                        Quantity,
                        Price,
                        Commission,
                        AccruedInterest,
                        UserFee0,
                        UserFee1,
                        UserFee2,
                        UserFee3,
                        TradeDate,
                        SettlementDate,
                        CreatedTime,
                        parentUserRowByFKUserAllocationCreatedUserId[20],
                        ModifiedTime,
                        parentUserRowByFKUserAllocationModifiedUserId[20]};
                this.Rows.Add(rowAllocationRow);
                return rowAllocationRow;
            }
            
            public AllocationRow FindByAllocationId(int AllocationId)
            {
                return ((AllocationRow)(this.Rows.Find(new object[] {
                            AllocationId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                AllocationDataTable cln = ((AllocationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new AllocationDataTable();
            }
            
            internal void InitVars()
            {
                this.columnAllocationId = this.Columns["AllocationId"];
                this.columnBlockOrderId = this.Columns["BlockOrderId"];
                this.columnAccountId = this.Columns["AccountId"];
                this.columnSecurityId = this.Columns["SecurityId"];
                this.columnSettlementId = this.Columns["SettlementId"];
                this.columnPositionTypeCode = this.Columns["PositionTypeCode"];
                this.columnTransactionTypeCode = this.Columns["TransactionTypeCode"];
                this.columnQuantity = this.Columns["Quantity"];
                this.columnPrice = this.Columns["Price"];
                this.columnCommission = this.Columns["Commission"];
                this.columnAccruedInterest = this.Columns["AccruedInterest"];
                this.columnUserFee0 = this.Columns["UserFee0"];
                this.columnUserFee1 = this.Columns["UserFee1"];
                this.columnUserFee2 = this.Columns["UserFee2"];
                this.columnUserFee3 = this.Columns["UserFee3"];
                this.columnTradeDate = this.Columns["TradeDate"];
                this.columnSettlementDate = this.Columns["SettlementDate"];
                this.columnCreatedTime = this.Columns["CreatedTime"];
                this.columnCreatedUserId = this.Columns["CreatedUserId"];
                this.columnModifiedTime = this.Columns["ModifiedTime"];
                this.columnModifiedUserId = this.Columns["ModifiedUserId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnAllocationId = new Column("AllocationId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAllocationId);
                this.columnBlockOrderId = new Column("BlockOrderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlockOrderId);
                this.columnAccountId = new Column("AccountId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountId);
                this.columnSecurityId = new Column("SecurityId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityId);
                this.columnSettlementId = new Column("SettlementId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSettlementId);
                this.columnPositionTypeCode = new Column("PositionTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPositionTypeCode);
                this.columnTransactionTypeCode = new Column("TransactionTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionTypeCode);
                this.columnQuantity = new Column("Quantity", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQuantity);
                this.columnPrice = new Column("Price", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrice);
                this.columnCommission = new Column("Commission", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCommission);
                this.columnAccruedInterest = new Column("AccruedInterest", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccruedInterest);
                this.columnUserFee0 = new Column("UserFee0", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserFee0);
                this.columnUserFee1 = new Column("UserFee1", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserFee1);
                this.columnUserFee2 = new Column("UserFee2", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserFee2);
                this.columnUserFee3 = new Column("UserFee3", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserFee3);
                this.columnTradeDate = new Column("TradeDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTradeDate);
                this.columnSettlementDate = new Column("SettlementDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSettlementDate);
                this.columnCreatedTime = new Column("CreatedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedTime);
                this.columnCreatedUserId = new Column("CreatedUserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedUserId);
                this.columnModifiedTime = new Column("ModifiedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedTime);
                this.columnModifiedUserId = new Column("ModifiedUserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedUserId);
                this.Constraints.Add(new UniqueConstraint("PKAllocation", new DataColumn[] {
                                this.columnAllocationId}, true));
                this.viewUKAllocationAccountIdSecurityIdPositionTypeCode = new DataView(this, null, "AccountId,SecurityId,PositionTypeCode", DataViewRowState.CurrentRows);
                this.columnAllocationId.AutoIncrement = true;
                this.columnAllocationId.AllowDBNull = false;
                this.columnAllocationId.Unique = true;
                this.columnBlockOrderId.AllowDBNull = false;
                this.columnAccountId.AllowDBNull = false;
                this.columnSecurityId.AllowDBNull = false;
                this.columnSettlementId.AllowDBNull = false;
                this.columnPositionTypeCode.AllowDBNull = false;
                this.columnTransactionTypeCode.AllowDBNull = false;
                this.columnQuantity.AllowDBNull = false;
                this.columnPrice.AllowDBNull = false;
                this.columnCommission.AllowDBNull = false;
                this.columnAccruedInterest.AllowDBNull = false;
                this.columnUserFee0.AllowDBNull = false;
                this.columnUserFee1.AllowDBNull = false;
                this.columnUserFee2.AllowDBNull = false;
                this.columnUserFee3.AllowDBNull = false;
                this.columnTradeDate.AllowDBNull = false;
                this.columnSettlementDate.AllowDBNull = false;
                this.columnCreatedTime.AllowDBNull = false;
                this.columnCreatedUserId.AllowDBNull = false;
                this.columnModifiedTime.AllowDBNull = false;
                this.columnModifiedUserId.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.AllocationLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Allocation"));
                }
            }
            
            public AllocationRow NewAllocationRow()
            {
                return ((AllocationRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new AllocationRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(AllocationRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.AllocationRowChanged != null))
                {
                    this.AllocationRowChanged(this, new AllocationRowChangeEvent(((AllocationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.AllocationRowChanging != null))
                {
                    this.AllocationRowChanging(this, new AllocationRowChangeEvent(((AllocationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.AllocationRowDeleted != null))
                {
                    this.AllocationRowDeleted(this, new AllocationRowChangeEvent(((AllocationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.AllocationRowDeleting != null))
                {
                    this.AllocationRowDeleting(this, new AllocationRowChangeEvent(((AllocationRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAllocationRow(AllocationRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AllocationRow : Row
        {
            
            private AllocationDataTable tableAllocation;
            
            internal AllocationRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableAllocation = ((AllocationDataTable)(this.Table));
            }
            
            public int AllocationId
            {
                get
                {
                    return ((int)(this[this.tableAllocation.AllocationIdColumn]));
                }
                set
                {
                    this[this.tableAllocation.AllocationIdColumn] = value;
                }
            }
            
            public int BlockOrderId
            {
                get
                {
                    return ((int)(this[this.tableAllocation.BlockOrderIdColumn]));
                }
                set
                {
                    this[this.tableAllocation.BlockOrderIdColumn] = value;
                }
            }
            
            public int AccountId
            {
                get
                {
                    return ((int)(this[this.tableAllocation.AccountIdColumn]));
                }
                set
                {
                    this[this.tableAllocation.AccountIdColumn] = value;
                }
            }
            
            public int SecurityId
            {
                get
                {
                    return ((int)(this[this.tableAllocation.SecurityIdColumn]));
                }
                set
                {
                    this[this.tableAllocation.SecurityIdColumn] = value;
                }
            }
            
            public int SettlementId
            {
                get
                {
                    return ((int)(this[this.tableAllocation.SettlementIdColumn]));
                }
                set
                {
                    this[this.tableAllocation.SettlementIdColumn] = value;
                }
            }
            
            public int PositionTypeCode
            {
                get
                {
                    return ((int)(this[this.tableAllocation.PositionTypeCodeColumn]));
                }
                set
                {
                    this[this.tableAllocation.PositionTypeCodeColumn] = value;
                }
            }
            
            public int TransactionTypeCode
            {
                get
                {
                    return ((int)(this[this.tableAllocation.TransactionTypeCodeColumn]));
                }
                set
                {
                    this[this.tableAllocation.TransactionTypeCodeColumn] = value;
                }
            }
            
            public decimal Quantity
            {
                get
                {
                    return ((decimal)(this[this.tableAllocation.QuantityColumn]));
                }
                set
                {
                    this[this.tableAllocation.QuantityColumn] = value;
                }
            }
            
            public decimal Price
            {
                get
                {
                    return ((decimal)(this[this.tableAllocation.PriceColumn]));
                }
                set
                {
                    this[this.tableAllocation.PriceColumn] = value;
                }
            }
            
            public decimal Commission
            {
                get
                {
                    return ((decimal)(this[this.tableAllocation.CommissionColumn]));
                }
                set
                {
                    this[this.tableAllocation.CommissionColumn] = value;
                }
            }
            
            public decimal AccruedInterest
            {
                get
                {
                    return ((decimal)(this[this.tableAllocation.AccruedInterestColumn]));
                }
                set
                {
                    this[this.tableAllocation.AccruedInterestColumn] = value;
                }
            }
            
            public decimal UserFee0
            {
                get
                {
                    return ((decimal)(this[this.tableAllocation.UserFee0Column]));
                }
                set
                {
                    this[this.tableAllocation.UserFee0Column] = value;
                }
            }
            
            public decimal UserFee1
            {
                get
                {
                    return ((decimal)(this[this.tableAllocation.UserFee1Column]));
                }
                set
                {
                    this[this.tableAllocation.UserFee1Column] = value;
                }
            }
            
            public decimal UserFee2
            {
                get
                {
                    return ((decimal)(this[this.tableAllocation.UserFee2Column]));
                }
                set
                {
                    this[this.tableAllocation.UserFee2Column] = value;
                }
            }
            
            public decimal UserFee3
            {
                get
                {
                    return ((decimal)(this[this.tableAllocation.UserFee3Column]));
                }
                set
                {
                    this[this.tableAllocation.UserFee3Column] = value;
                }
            }
            
            public System.DateTime TradeDate
            {
                get
                {
                    return ((System.DateTime)(this[this.tableAllocation.TradeDateColumn]));
                }
                set
                {
                    this[this.tableAllocation.TradeDateColumn] = value;
                }
            }
            
            public System.DateTime SettlementDate
            {
                get
                {
                    return ((System.DateTime)(this[this.tableAllocation.SettlementDateColumn]));
                }
                set
                {
                    this[this.tableAllocation.SettlementDateColumn] = value;
                }
            }
            
            public System.DateTime CreatedTime
            {
                get
                {
                    return ((System.DateTime)(this[this.tableAllocation.CreatedTimeColumn]));
                }
                set
                {
                    this[this.tableAllocation.CreatedTimeColumn] = value;
                }
            }
            
            public int CreatedUserId
            {
                get
                {
                    return ((int)(this[this.tableAllocation.CreatedUserIdColumn]));
                }
                set
                {
                    this[this.tableAllocation.CreatedUserIdColumn] = value;
                }
            }
            
            public System.DateTime ModifiedTime
            {
                get
                {
                    return ((System.DateTime)(this[this.tableAllocation.ModifiedTimeColumn]));
                }
                set
                {
                    this[this.tableAllocation.ModifiedTimeColumn] = value;
                }
            }
            
            public int ModifiedUserId
            {
                get
                {
                    return ((int)(this[this.tableAllocation.ModifiedUserIdColumn]));
                }
                set
                {
                    this[this.tableAllocation.ModifiedUserIdColumn] = value;
                }
            }
            
            public AccountRow AccountRow
            {
                get
                {
                    if ((DataSetMarket.lockAccount.IsReaderLockHeld || DataSetMarket.lockAccount.IsWriterLockHeld))
                    {
                        return ((AccountRow)(this.GetParentRow(this.Table.ParentRelations["FKAccountAllocation"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Account"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKAccountAllocation"]);
                }
            }
            
            public BlockOrderRow BlockOrderRow
            {
                get
                {
                    if ((DataSetMarket.lockBlockOrder.IsReaderLockHeld || DataSetMarket.lockBlockOrder.IsWriterLockHeld))
                    {
                        return ((BlockOrderRow)(this.GetParentRow(this.Table.ParentRelations["FKBlockOrderAllocation"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "BlockOrder"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKBlockOrderAllocation"]);
                }
            }
            
            public UserRow UserRowByFKUserAllocationCreatedUserId
            {
                get
                {
                    if ((DataSetMarket.lockUser.IsReaderLockHeld || DataSetMarket.lockUser.IsWriterLockHeld))
                    {
                        return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["FKUserAllocationCreatedUserId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "User"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKUserAllocationCreatedUserId"]);
                }
            }
            
            public UserRow UserRowByFKUserAllocationModifiedUserId
            {
                get
                {
                    if ((DataSetMarket.lockUser.IsReaderLockHeld || DataSetMarket.lockUser.IsWriterLockHeld))
                    {
                        return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["FKUserAllocationModifiedUserId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "User"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKUserAllocationModifiedUserId"]);
                }
            }
            
            public SecurityRow SecurityRowByFKSecurityAllocationSecurityId
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["FKSecurityAllocationSecurityId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKSecurityAllocationSecurityId"]);
                }
            }
            
            public SecurityRow SecurityRowByFKSecurityAllocationSettlementId
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["FKSecurityAllocationSettlementId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKSecurityAllocationSettlementId"]);
                }
            }
            
            public TransactionTypeRow TransactionTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockTransactionType.IsReaderLockHeld || DataSetMarket.lockTransactionType.IsWriterLockHeld))
                    {
                        return ((TransactionTypeRow)(this.GetParentRow(this.Table.ParentRelations["FKTransactionTypeAllocation"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "TransactionType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKTransactionTypeAllocation"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AllocationRowChangeEvent : EventArgs
        {
            
            private AllocationRow eventRow;
            
            private DataRowAction eventAction;
            
            public AllocationRowChangeEvent(AllocationRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AllocationRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BlockOrderDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnBlockOrderId;
            
            private Column columnBlotterId;
            
            private Column columnAccountId;
            
            private Column columnSecurityId;
            
            private Column columnSettlementId;
            
            private Column columnBrokerId;
            
            private Column columnStatusCode;
            
            private Column columnTransactionTypeCode;
            
            private Column columnTimeInForceCode;
            
            private Column columnOrderTypeCode;
            
            private Column columnConditionCode;
            
            private Column columnIsDeleted;
            
            private Column columnIsAgency;
            
            private Column columnQuantityExecuted;
            
            private Column columnQuantityOrdered;
            
            private Column columnPrice1;
            
            private Column columnPrice2;
            
            private Column columnCreatedTime;
            
            private Column columnCreatedUserId;
            
            private Column columnModifiedTime;
            
            private Column columnModifiedUserId;
            
            private DataView viewUKBlockOrderBlotterIdSecurityIdTransactionTypeCode;
            
            internal BlockOrderDataTable() : 
                    base("BlockOrder")
            {
                this.InitClass();
            }
            
            internal BlockOrderDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column BlockOrderIdColumn
            {
                get
                {
                    return this.columnBlockOrderId;
                }
            }
            
            public Column BlotterIdColumn
            {
                get
                {
                    return this.columnBlotterId;
                }
            }
            
            public Column AccountIdColumn
            {
                get
                {
                    return this.columnAccountId;
                }
            }
            
            public Column SecurityIdColumn
            {
                get
                {
                    return this.columnSecurityId;
                }
            }
            
            public Column SettlementIdColumn
            {
                get
                {
                    return this.columnSettlementId;
                }
            }
            
            public Column BrokerIdColumn
            {
                get
                {
                    return this.columnBrokerId;
                }
            }
            
            public Column StatusCodeColumn
            {
                get
                {
                    return this.columnStatusCode;
                }
            }
            
            public Column TransactionTypeCodeColumn
            {
                get
                {
                    return this.columnTransactionTypeCode;
                }
            }
            
            public Column TimeInForceCodeColumn
            {
                get
                {
                    return this.columnTimeInForceCode;
                }
            }
            
            public Column OrderTypeCodeColumn
            {
                get
                {
                    return this.columnOrderTypeCode;
                }
            }
            
            public Column ConditionCodeColumn
            {
                get
                {
                    return this.columnConditionCode;
                }
            }
            
            public Column IsDeletedColumn
            {
                get
                {
                    return this.columnIsDeleted;
                }
            }
            
            public Column IsAgencyColumn
            {
                get
                {
                    return this.columnIsAgency;
                }
            }
            
            public Column QuantityExecutedColumn
            {
                get
                {
                    return this.columnQuantityExecuted;
                }
            }
            
            public Column QuantityOrderedColumn
            {
                get
                {
                    return this.columnQuantityOrdered;
                }
            }
            
            public Column Price1Column
            {
                get
                {
                    return this.columnPrice1;
                }
            }
            
            public Column Price2Column
            {
                get
                {
                    return this.columnPrice2;
                }
            }
            
            public Column CreatedTimeColumn
            {
                get
                {
                    return this.columnCreatedTime;
                }
            }
            
            public Column CreatedUserIdColumn
            {
                get
                {
                    return this.columnCreatedUserId;
                }
            }
            
            public Column ModifiedTimeColumn
            {
                get
                {
                    return this.columnModifiedTime;
                }
            }
            
            public Column ModifiedUserIdColumn
            {
                get
                {
                    return this.columnModifiedUserId;
                }
            }
            
            public DataView UKBlockOrderBlotterIdSecurityIdTransactionTypeCode
            {
                get
                {
                    return this.viewUKBlockOrderBlotterIdSecurityIdTransactionTypeCode;
                }
            }
            
            public BlockOrderRow this[int index]
            {
                get
                {
                    return ((BlockOrderRow)(this.Rows[index]));
                }
            }
            
            public event BlockOrderRowChangeEventHandler BlockOrderRowChanged;
            
            public event BlockOrderRowChangeEventHandler BlockOrderRowChanging;
            
            public event BlockOrderRowChangeEventHandler BlockOrderRowDeleted;
            
            public event BlockOrderRowChangeEventHandler BlockOrderRowDeleting;
            
            public void AddBlockOrderRow(BlockOrderRow row)
            {
                this.Rows.Add(row);
            }
            
            public BlockOrderRow AddBlockOrderRow(
                        BlotterRow parentBlotterRowByFKBlotterBlockOrder, 
                        int AccountId, 
                        SecurityRow parentSecurityRowByFKSecurityBlockOrderSecurityId, 
                        SecurityRow parentSecurityRowByFKSecurityBlockOrderSettlementId, 
                        int BrokerId, 
                        StatusRow parentStatusRowByFKStatusBlockOrder, 
                        TransactionTypeRow parentTransactionTypeRowByFKTransactionTypeBlockOrder, 
                        int TimeInForceCode, 
                        int OrderTypeCode, 
                        int ConditionCode, 
                        bool IsDeleted, 
                        bool IsAgency, 
                        decimal QuantityExecuted, 
                        decimal QuantityOrdered, 
                        decimal Price1, 
                        decimal Price2, 
                        System.DateTime CreatedTime, 
                        int CreatedUserId, 
                        System.DateTime ModifiedTime, 
                        int ModifiedUserId)
            {
                BlockOrderRow rowBlockOrderRow = ((BlockOrderRow)(this.NewRow()));
                rowBlockOrderRow.ItemArray = new object[] {
                        null,
                        parentBlotterRowByFKBlotterBlockOrder[17],
                        AccountId,
                        parentSecurityRowByFKSecurityBlockOrderSecurityId[17],
                        parentSecurityRowByFKSecurityBlockOrderSettlementId[17],
                        BrokerId,
                        parentStatusRowByFKStatusBlockOrder[0],
                        parentTransactionTypeRowByFKTransactionTypeBlockOrder[0],
                        TimeInForceCode,
                        OrderTypeCode,
                        ConditionCode,
                        IsDeleted,
                        IsAgency,
                        QuantityExecuted,
                        QuantityOrdered,
                        Price1,
                        Price2,
                        CreatedTime,
                        CreatedUserId,
                        ModifiedTime,
                        ModifiedUserId};
                this.Rows.Add(rowBlockOrderRow);
                return rowBlockOrderRow;
            }
            
            public BlockOrderRow FindByBlockOrderId(int BlockOrderId)
            {
                return ((BlockOrderRow)(this.Rows.Find(new object[] {
                            BlockOrderId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                BlockOrderDataTable cln = ((BlockOrderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new BlockOrderDataTable();
            }
            
            internal void InitVars()
            {
                this.columnBlockOrderId = this.Columns["BlockOrderId"];
                this.columnBlotterId = this.Columns["BlotterId"];
                this.columnAccountId = this.Columns["AccountId"];
                this.columnSecurityId = this.Columns["SecurityId"];
                this.columnSettlementId = this.Columns["SettlementId"];
                this.columnBrokerId = this.Columns["BrokerId"];
                this.columnStatusCode = this.Columns["StatusCode"];
                this.columnTransactionTypeCode = this.Columns["TransactionTypeCode"];
                this.columnTimeInForceCode = this.Columns["TimeInForceCode"];
                this.columnOrderTypeCode = this.Columns["OrderTypeCode"];
                this.columnConditionCode = this.Columns["ConditionCode"];
                this.columnIsDeleted = this.Columns["IsDeleted"];
                this.columnIsAgency = this.Columns["IsAgency"];
                this.columnQuantityExecuted = this.Columns["QuantityExecuted"];
                this.columnQuantityOrdered = this.Columns["QuantityOrdered"];
                this.columnPrice1 = this.Columns["Price1"];
                this.columnPrice2 = this.Columns["Price2"];
                this.columnCreatedTime = this.Columns["CreatedTime"];
                this.columnCreatedUserId = this.Columns["CreatedUserId"];
                this.columnModifiedTime = this.Columns["ModifiedTime"];
                this.columnModifiedUserId = this.Columns["ModifiedUserId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnBlockOrderId = new Column("BlockOrderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlockOrderId);
                this.columnBlotterId = new Column("BlotterId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlotterId);
                this.columnAccountId = new Column("AccountId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountId);
                this.columnSecurityId = new Column("SecurityId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityId);
                this.columnSettlementId = new Column("SettlementId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSettlementId);
                this.columnBrokerId = new Column("BrokerId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBrokerId);
                this.columnStatusCode = new Column("StatusCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStatusCode);
                this.columnTransactionTypeCode = new Column("TransactionTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionTypeCode);
                this.columnTimeInForceCode = new Column("TimeInForceCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeInForceCode);
                this.columnOrderTypeCode = new Column("OrderTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrderTypeCode);
                this.columnConditionCode = new Column("ConditionCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConditionCode);
                this.columnIsDeleted = new Column("IsDeleted", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsDeleted);
                this.columnIsAgency = new Column("IsAgency", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsAgency);
                this.columnQuantityExecuted = new Column("QuantityExecuted", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQuantityExecuted);
                this.columnQuantityOrdered = new Column("QuantityOrdered", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQuantityOrdered);
                this.columnPrice1 = new Column("Price1", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrice1);
                this.columnPrice2 = new Column("Price2", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrice2);
                this.columnCreatedTime = new Column("CreatedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedTime);
                this.columnCreatedUserId = new Column("CreatedUserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedUserId);
                this.columnModifiedTime = new Column("ModifiedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedTime);
                this.columnModifiedUserId = new Column("ModifiedUserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedUserId);
                this.Constraints.Add(new UniqueConstraint("PKBlockOrder", new DataColumn[] {
                                this.columnBlockOrderId}, true));
                this.viewUKBlockOrderBlotterIdSecurityIdTransactionTypeCode = new DataView(this, null, "BlotterId,SecurityId,TransactionTypeCode", DataViewRowState.CurrentRows);
                this.columnBlockOrderId.AutoIncrement = true;
                this.columnBlockOrderId.AllowDBNull = false;
                this.columnBlockOrderId.Unique = true;
                this.columnBlotterId.AllowDBNull = false;
                this.columnSecurityId.AllowDBNull = false;
                this.columnSettlementId.AllowDBNull = false;
                this.columnStatusCode.AllowDBNull = false;
                this.columnTransactionTypeCode.AllowDBNull = false;
                this.columnIsDeleted.AllowDBNull = false;
                this.columnIsDeleted.DefaultValue = false;
                this.columnIsAgency.AllowDBNull = false;
                this.columnIsAgency.DefaultValue = false;
                this.columnCreatedTime.AllowDBNull = false;
                this.columnCreatedUserId.AllowDBNull = false;
                this.columnModifiedTime.AllowDBNull = false;
                this.columnModifiedUserId.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.BlockOrderLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "BlockOrder"));
                }
            }
            
            public BlockOrderRow NewBlockOrderRow()
            {
                return ((BlockOrderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new BlockOrderRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(BlockOrderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.BlockOrderRowChanged != null))
                {
                    this.BlockOrderRowChanged(this, new BlockOrderRowChangeEvent(((BlockOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.BlockOrderRowChanging != null))
                {
                    this.BlockOrderRowChanging(this, new BlockOrderRowChangeEvent(((BlockOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.BlockOrderRowDeleted != null))
                {
                    this.BlockOrderRowDeleted(this, new BlockOrderRowChangeEvent(((BlockOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.BlockOrderRowDeleting != null))
                {
                    this.BlockOrderRowDeleting(this, new BlockOrderRowChangeEvent(((BlockOrderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBlockOrderRow(BlockOrderRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BlockOrderRow : Row
        {
            
            private BlockOrderDataTable tableBlockOrder;
            
            internal BlockOrderRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableBlockOrder = ((BlockOrderDataTable)(this.Table));
            }
            
            public int BlockOrderId
            {
                get
                {
                    return ((int)(this[this.tableBlockOrder.BlockOrderIdColumn]));
                }
                set
                {
                    this[this.tableBlockOrder.BlockOrderIdColumn] = value;
                }
            }
            
            public int BlotterId
            {
                get
                {
                    return ((int)(this[this.tableBlockOrder.BlotterIdColumn]));
                }
                set
                {
                    this[this.tableBlockOrder.BlotterIdColumn] = value;
                }
            }
            
            public int AccountId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableBlockOrder.AccountIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlockOrder.AccountIdColumn] = value;
                }
            }
            
            public int SecurityId
            {
                get
                {
                    return ((int)(this[this.tableBlockOrder.SecurityIdColumn]));
                }
                set
                {
                    this[this.tableBlockOrder.SecurityIdColumn] = value;
                }
            }
            
            public int SettlementId
            {
                get
                {
                    return ((int)(this[this.tableBlockOrder.SettlementIdColumn]));
                }
                set
                {
                    this[this.tableBlockOrder.SettlementIdColumn] = value;
                }
            }
            
            public int BrokerId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableBlockOrder.BrokerIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlockOrder.BrokerIdColumn] = value;
                }
            }
            
            public int StatusCode
            {
                get
                {
                    return ((int)(this[this.tableBlockOrder.StatusCodeColumn]));
                }
                set
                {
                    this[this.tableBlockOrder.StatusCodeColumn] = value;
                }
            }
            
            public int TransactionTypeCode
            {
                get
                {
                    return ((int)(this[this.tableBlockOrder.TransactionTypeCodeColumn]));
                }
                set
                {
                    this[this.tableBlockOrder.TransactionTypeCodeColumn] = value;
                }
            }
            
            public int TimeInForceCode
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableBlockOrder.TimeInForceCodeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlockOrder.TimeInForceCodeColumn] = value;
                }
            }
            
            public int OrderTypeCode
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableBlockOrder.OrderTypeCodeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlockOrder.OrderTypeCodeColumn] = value;
                }
            }
            
            public int ConditionCode
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableBlockOrder.ConditionCodeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlockOrder.ConditionCodeColumn] = value;
                }
            }
            
            public bool IsDeleted
            {
                get
                {
                    return ((bool)(this[this.tableBlockOrder.IsDeletedColumn]));
                }
                set
                {
                    this[this.tableBlockOrder.IsDeletedColumn] = value;
                }
            }
            
            public bool IsAgency
            {
                get
                {
                    return ((bool)(this[this.tableBlockOrder.IsAgencyColumn]));
                }
                set
                {
                    this[this.tableBlockOrder.IsAgencyColumn] = value;
                }
            }
            
            public decimal QuantityExecuted
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableBlockOrder.QuantityExecutedColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlockOrder.QuantityExecutedColumn] = value;
                }
            }
            
            public decimal QuantityOrdered
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableBlockOrder.QuantityOrderedColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlockOrder.QuantityOrderedColumn] = value;
                }
            }
            
            public decimal Price1
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableBlockOrder.Price1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlockOrder.Price1Column] = value;
                }
            }
            
            public decimal Price2
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableBlockOrder.Price2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlockOrder.Price2Column] = value;
                }
            }
            
            public System.DateTime CreatedTime
            {
                get
                {
                    return ((System.DateTime)(this[this.tableBlockOrder.CreatedTimeColumn]));
                }
                set
                {
                    this[this.tableBlockOrder.CreatedTimeColumn] = value;
                }
            }
            
            public int CreatedUserId
            {
                get
                {
                    return ((int)(this[this.tableBlockOrder.CreatedUserIdColumn]));
                }
                set
                {
                    this[this.tableBlockOrder.CreatedUserIdColumn] = value;
                }
            }
            
            public System.DateTime ModifiedTime
            {
                get
                {
                    return ((System.DateTime)(this[this.tableBlockOrder.ModifiedTimeColumn]));
                }
                set
                {
                    this[this.tableBlockOrder.ModifiedTimeColumn] = value;
                }
            }
            
            public int ModifiedUserId
            {
                get
                {
                    return ((int)(this[this.tableBlockOrder.ModifiedUserIdColumn]));
                }
                set
                {
                    this[this.tableBlockOrder.ModifiedUserIdColumn] = value;
                }
            }
            
            public BlotterRow BlotterRow
            {
                get
                {
                    if ((DataSetMarket.lockBlotter.IsReaderLockHeld || DataSetMarket.lockBlotter.IsWriterLockHeld))
                    {
                        return ((BlotterRow)(this.GetParentRow(this.Table.ParentRelations["FKBlotterBlockOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Blotter"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKBlotterBlockOrder"]);
                }
            }
            
            public SecurityRow SecurityRowByFKSecurityBlockOrderSecurityId
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["FKSecurityBlockOrderSecurityId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKSecurityBlockOrderSecurityId"]);
                }
            }
            
            public SecurityRow SecurityRowByFKSecurityBlockOrderSettlementId
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["FKSecurityBlockOrderSettlementId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKSecurityBlockOrderSettlementId"]);
                }
            }
            
            public StatusRow StatusRow
            {
                get
                {
                    if ((DataSetMarket.lockStatus.IsReaderLockHeld || DataSetMarket.lockStatus.IsWriterLockHeld))
                    {
                        return ((StatusRow)(this.GetParentRow(this.Table.ParentRelations["FKStatusBlockOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Status"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKStatusBlockOrder"]);
                }
            }
            
            public TransactionTypeRow TransactionTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockTransactionType.IsReaderLockHeld || DataSetMarket.lockTransactionType.IsWriterLockHeld))
                    {
                        return ((TransactionTypeRow)(this.GetParentRow(this.Table.ParentRelations["FKTransactionTypeBlockOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "TransactionType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKTransactionTypeBlockOrder"]);
                }
            }
            
            public bool IsAccountIdNull()
            {
                return this.IsNull(this.tableBlockOrder.AccountIdColumn);
            }
            
            public void SetAccountIdNull()
            {
                this[this.tableBlockOrder.AccountIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsBrokerIdNull()
            {
                return this.IsNull(this.tableBlockOrder.BrokerIdColumn);
            }
            
            public void SetBrokerIdNull()
            {
                this[this.tableBlockOrder.BrokerIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsTimeInForceCodeNull()
            {
                return this.IsNull(this.tableBlockOrder.TimeInForceCodeColumn);
            }
            
            public void SetTimeInForceCodeNull()
            {
                this[this.tableBlockOrder.TimeInForceCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrderTypeCodeNull()
            {
                return this.IsNull(this.tableBlockOrder.OrderTypeCodeColumn);
            }
            
            public void SetOrderTypeCodeNull()
            {
                this[this.tableBlockOrder.OrderTypeCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsConditionCodeNull()
            {
                return this.IsNull(this.tableBlockOrder.ConditionCodeColumn);
            }
            
            public void SetConditionCodeNull()
            {
                this[this.tableBlockOrder.ConditionCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsQuantityExecutedNull()
            {
                return this.IsNull(this.tableBlockOrder.QuantityExecutedColumn);
            }
            
            public void SetQuantityExecutedNull()
            {
                this[this.tableBlockOrder.QuantityExecutedColumn] = System.Convert.DBNull;
            }
            
            public bool IsQuantityOrderedNull()
            {
                return this.IsNull(this.tableBlockOrder.QuantityOrderedColumn);
            }
            
            public void SetQuantityOrderedNull()
            {
                this[this.tableBlockOrder.QuantityOrderedColumn] = System.Convert.DBNull;
            }
            
            public bool IsPrice1Null()
            {
                return this.IsNull(this.tableBlockOrder.Price1Column);
            }
            
            public void SetPrice1Null()
            {
                this[this.tableBlockOrder.Price1Column] = System.Convert.DBNull;
            }
            
            public bool IsPrice2Null()
            {
                return this.IsNull(this.tableBlockOrder.Price2Column);
            }
            
            public void SetPrice2Null()
            {
                this[this.tableBlockOrder.Price2Column] = System.Convert.DBNull;
            }
            
            public AllocationRow[] GetAllocationRows()
            {
                return ((AllocationRow[])(this.GetChildRows(this.Table.ChildRelations["FKBlockOrderAllocation"])));
            }
            
            public BlockOrderTreeRow[] GetBlockOrderTreeRowsByFKBlockOrderBlockOrderTreeChildId()
            {
                return ((BlockOrderTreeRow[])(this.GetChildRows(this.Table.ChildRelations["FKBlockOrderBlockOrderTreeChildId"])));
            }
            
            public BlockOrderTreeRow[] GetBlockOrderTreeRowsByFKBlockOrderBlockOrderTreeParentId()
            {
                return ((BlockOrderTreeRow[])(this.GetChildRows(this.Table.ChildRelations["FKBlockOrderBlockOrderTreeParentId"])));
            }
            
            public ExecutionRow[] GetExecutionRows()
            {
                return ((ExecutionRow[])(this.GetChildRows(this.Table.ChildRelations["FKBlockOrderExecution"])));
            }
            
            public OrderRow[] GetOrderRows()
            {
                return ((OrderRow[])(this.GetChildRows(this.Table.ChildRelations["FKBlockOrderOrder"])));
            }
            
            public PlacementRow[] GetPlacementRows()
            {
                return ((PlacementRow[])(this.GetChildRows(this.Table.ChildRelations["FKBlockOrderPlacement"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BlockOrderRowChangeEvent : EventArgs
        {
            
            private BlockOrderRow eventRow;
            
            private DataRowAction eventAction;
            
            public BlockOrderRowChangeEvent(BlockOrderRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BlockOrderRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BlockOrderTreeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnParentId;
            
            private Column columnChildId;
            
            internal BlockOrderTreeDataTable() : 
                    base("BlockOrderTree")
            {
                this.InitClass();
            }
            
            internal BlockOrderTreeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ParentIdColumn
            {
                get
                {
                    return this.columnParentId;
                }
            }
            
            public Column ChildIdColumn
            {
                get
                {
                    return this.columnChildId;
                }
            }
            
            public BlockOrderTreeRow this[int index]
            {
                get
                {
                    return ((BlockOrderTreeRow)(this.Rows[index]));
                }
            }
            
            public event BlockOrderTreeRowChangeEventHandler BlockOrderTreeRowChanged;
            
            public event BlockOrderTreeRowChangeEventHandler BlockOrderTreeRowChanging;
            
            public event BlockOrderTreeRowChangeEventHandler BlockOrderTreeRowDeleted;
            
            public event BlockOrderTreeRowChangeEventHandler BlockOrderTreeRowDeleting;
            
            public void AddBlockOrderTreeRow(BlockOrderTreeRow row)
            {
                this.Rows.Add(row);
            }
            
            public BlockOrderTreeRow AddBlockOrderTreeRow(BlockOrderRow parentBlockOrderRowByFKBlockOrderBlockOrderTreeParentId, BlockOrderRow parentBlockOrderRowByFKBlockOrderBlockOrderTreeChildId)
            {
                BlockOrderTreeRow rowBlockOrderTreeRow = ((BlockOrderTreeRow)(this.NewRow()));
                rowBlockOrderTreeRow.ItemArray = new object[] {
                        parentBlockOrderRowByFKBlockOrderBlockOrderTreeParentId[0],
                        parentBlockOrderRowByFKBlockOrderBlockOrderTreeChildId[0]};
                this.Rows.Add(rowBlockOrderTreeRow);
                return rowBlockOrderTreeRow;
            }
            
            public BlockOrderTreeRow FindByParentIdChildId(int ParentId, int ChildId)
            {
                return ((BlockOrderTreeRow)(this.Rows.Find(new object[] {
                            ParentId,
                            ChildId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                BlockOrderTreeDataTable cln = ((BlockOrderTreeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new BlockOrderTreeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnParentId = this.Columns["ParentId"];
                this.columnChildId = this.Columns["ChildId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnParentId = new Column("ParentId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnParentId);
                this.columnChildId = new Column("ChildId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChildId);
                this.Constraints.Add(new UniqueConstraint("PKBlockOrderTree", new DataColumn[] {
                                this.columnParentId,
                                this.columnChildId}, true));
                this.columnParentId.AllowDBNull = false;
                this.columnChildId.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.BlockOrderTreeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "BlockOrderTree"));
                }
            }
            
            public BlockOrderTreeRow NewBlockOrderTreeRow()
            {
                return ((BlockOrderTreeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new BlockOrderTreeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(BlockOrderTreeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.BlockOrderTreeRowChanged != null))
                {
                    this.BlockOrderTreeRowChanged(this, new BlockOrderTreeRowChangeEvent(((BlockOrderTreeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.BlockOrderTreeRowChanging != null))
                {
                    this.BlockOrderTreeRowChanging(this, new BlockOrderTreeRowChangeEvent(((BlockOrderTreeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.BlockOrderTreeRowDeleted != null))
                {
                    this.BlockOrderTreeRowDeleted(this, new BlockOrderTreeRowChangeEvent(((BlockOrderTreeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.BlockOrderTreeRowDeleting != null))
                {
                    this.BlockOrderTreeRowDeleting(this, new BlockOrderTreeRowChangeEvent(((BlockOrderTreeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBlockOrderTreeRow(BlockOrderTreeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BlockOrderTreeRow : Row
        {
            
            private BlockOrderTreeDataTable tableBlockOrderTree;
            
            internal BlockOrderTreeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableBlockOrderTree = ((BlockOrderTreeDataTable)(this.Table));
            }
            
            public int ParentId
            {
                get
                {
                    return ((int)(this[this.tableBlockOrderTree.ParentIdColumn]));
                }
                set
                {
                    this[this.tableBlockOrderTree.ParentIdColumn] = value;
                }
            }
            
            public int ChildId
            {
                get
                {
                    return ((int)(this[this.tableBlockOrderTree.ChildIdColumn]));
                }
                set
                {
                    this[this.tableBlockOrderTree.ChildIdColumn] = value;
                }
            }
            
            public BlockOrderRow BlockOrderRowByFKBlockOrderBlockOrderTreeChildId
            {
                get
                {
                    if ((DataSetMarket.lockBlockOrder.IsReaderLockHeld || DataSetMarket.lockBlockOrder.IsWriterLockHeld))
                    {
                        return ((BlockOrderRow)(this.GetParentRow(this.Table.ParentRelations["FKBlockOrderBlockOrderTreeChildId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "BlockOrder"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKBlockOrderBlockOrderTreeChildId"]);
                }
            }
            
            public BlockOrderRow BlockOrderRowByFKBlockOrderBlockOrderTreeParentId
            {
                get
                {
                    if ((DataSetMarket.lockBlockOrder.IsReaderLockHeld || DataSetMarket.lockBlockOrder.IsWriterLockHeld))
                    {
                        return ((BlockOrderRow)(this.GetParentRow(this.Table.ParentRelations["FKBlockOrderBlockOrderTreeParentId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "BlockOrder"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKBlockOrderBlockOrderTreeParentId"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BlockOrderTreeRowChangeEvent : EventArgs
        {
            
            private BlockOrderTreeRow eventRow;
            
            private DataRowAction eventAction;
            
            public BlockOrderTreeRowChangeEvent(BlockOrderTreeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BlockOrderTreeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BlotterDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnBlotterId;
            
            private Column columnBlockOrderStylesheetId;
            
            private Column columnPlacementStylesheetId;
            
            private Column columnExecutionStylesheetId;
            
            private Column columnTicketStylesheetId;
            
            private Column columnAlgorithmId;
            
            private Column columnBlotterTypeCode;
            
            private Column columnDefaultBlotter;
            
            internal BlotterDataTable() : 
                    base("Blotter")
            {
                this.InitClass();
            }
            
            internal BlotterDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column BlotterIdColumn
            {
                get
                {
                    return this.columnBlotterId;
                }
            }
            
            public Column BlockOrderStylesheetIdColumn
            {
                get
                {
                    return this.columnBlockOrderStylesheetId;
                }
            }
            
            public Column PlacementStylesheetIdColumn
            {
                get
                {
                    return this.columnPlacementStylesheetId;
                }
            }
            
            public Column ExecutionStylesheetIdColumn
            {
                get
                {
                    return this.columnExecutionStylesheetId;
                }
            }
            
            public Column TicketStylesheetIdColumn
            {
                get
                {
                    return this.columnTicketStylesheetId;
                }
            }
            
            public Column AlgorithmIdColumn
            {
                get
                {
                    return this.columnAlgorithmId;
                }
            }
            
            public Column BlotterTypeCodeColumn
            {
                get
                {
                    return this.columnBlotterTypeCode;
                }
            }
            
            public Column DefaultBlotterColumn
            {
                get
                {
                    return this.columnDefaultBlotter;
                }
            }
            
            public BlotterRow this[int index]
            {
                get
                {
                    return ((BlotterRow)(this.Rows[index]));
                }
            }
            
            public event BlotterRowChangeEventHandler BlotterRowChanged;
            
            public event BlotterRowChangeEventHandler BlotterRowChanging;
            
            public event BlotterRowChangeEventHandler BlotterRowDeleted;
            
            public event BlotterRowChangeEventHandler BlotterRowDeleting;
            
            public void AddBlotterRow(BlotterRow row)
            {
                this.Rows.Add(row);
            }
            
            public BlotterRow AddBlotterRow(ObjectRow parentObjectRowByFKObjectBlotter, StylesheetRow parentStylesheetRowByFKStylesheetBlotterBlockOrderStylesheetId, StylesheetRow parentStylesheetRowByFKStylesheetBlotterPlacementStylesheetId, StylesheetRow parentStylesheetRowByFKStylesheetBlotterExecutionStylesheetId, StylesheetRow parentStylesheetRowByFKStylesheetBlotterTicketStylesheetId, AlgorithmRow parentAlgorithmRowByFKAlgorithmBlotter, BlotterTypeRow parentBlotterTypeRowByFKBlotterTypeBlotter, bool DefaultBlotter)
            {
                BlotterRow rowBlotterRow = ((BlotterRow)(this.NewRow()));
                rowBlotterRow.ItemArray = new object[] {
                        parentObjectRowByFKObjectBlotter[12],
                        parentStylesheetRowByFKStylesheetBlotterBlockOrderStylesheetId[0],
                        parentStylesheetRowByFKStylesheetBlotterPlacementStylesheetId[0],
                        parentStylesheetRowByFKStylesheetBlotterExecutionStylesheetId[0],
                        parentStylesheetRowByFKStylesheetBlotterTicketStylesheetId[0],
                        parentAlgorithmRowByFKAlgorithmBlotter[0],
                        parentBlotterTypeRowByFKBlotterTypeBlotter[0],
                        DefaultBlotter};
                this.Rows.Add(rowBlotterRow);
                return rowBlotterRow;
            }
            
            public BlotterRow FindByBlotterId(int BlotterId)
            {
                return ((BlotterRow)(this.Rows.Find(new object[] {
                            BlotterId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                BlotterDataTable cln = ((BlotterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new BlotterDataTable();
            }
            
            internal void InitVars()
            {
                this.columnBlotterId = this.Columns["BlotterId"];
                this.columnBlockOrderStylesheetId = this.Columns["BlockOrderStylesheetId"];
                this.columnPlacementStylesheetId = this.Columns["PlacementStylesheetId"];
                this.columnExecutionStylesheetId = this.Columns["ExecutionStylesheetId"];
                this.columnTicketStylesheetId = this.Columns["TicketStylesheetId"];
                this.columnAlgorithmId = this.Columns["AlgorithmId"];
                this.columnBlotterTypeCode = this.Columns["BlotterTypeCode"];
                this.columnDefaultBlotter = this.Columns["DefaultBlotter"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnBlotterId = new Column("BlotterId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlotterId);
                this.columnBlockOrderStylesheetId = new Column("BlockOrderStylesheetId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlockOrderStylesheetId);
                this.columnPlacementStylesheetId = new Column("PlacementStylesheetId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPlacementStylesheetId);
                this.columnExecutionStylesheetId = new Column("ExecutionStylesheetId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExecutionStylesheetId);
                this.columnTicketStylesheetId = new Column("TicketStylesheetId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTicketStylesheetId);
                this.columnAlgorithmId = new Column("AlgorithmId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAlgorithmId);
                this.columnBlotterTypeCode = new Column("BlotterTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlotterTypeCode);
                this.columnDefaultBlotter = new Column("DefaultBlotter", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDefaultBlotter);
                this.Constraints.Add(new UniqueConstraint("PKBlotter", new DataColumn[] {
                                this.columnBlotterId}, true));
                this.columnBlotterId.AllowDBNull = false;
                this.columnBlotterId.Unique = true;
                this.columnBlotterTypeCode.AllowDBNull = false;
                this.columnDefaultBlotter.AllowDBNull = false;
                this.columnDefaultBlotter.DefaultValue = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.BlotterLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Blotter"));
                }
            }
            
            public BlotterRow NewBlotterRow()
            {
                return ((BlotterRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new BlotterRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(BlotterRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.BlotterRowChanged != null))
                {
                    this.BlotterRowChanged(this, new BlotterRowChangeEvent(((BlotterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.BlotterRowChanging != null))
                {
                    this.BlotterRowChanging(this, new BlotterRowChangeEvent(((BlotterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.BlotterRowDeleted != null))
                {
                    this.BlotterRowDeleted(this, new BlotterRowChangeEvent(((BlotterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.BlotterRowDeleting != null))
                {
                    this.BlotterRowDeleting(this, new BlotterRowChangeEvent(((BlotterRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBlotterRow(BlotterRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BlotterRow : Row
        {
            
            private BlotterDataTable tableBlotter;
            
            internal BlotterRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableBlotter = ((BlotterDataTable)(this.Table));
            }
            
            public int BlotterId
            {
                get
                {
                    return ((int)(this[this.tableBlotter.BlotterIdColumn]));
                }
                set
                {
                    this[this.tableBlotter.BlotterIdColumn] = value;
                }
            }
            
            public int BlockOrderStylesheetId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableBlotter.BlockOrderStylesheetIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlotter.BlockOrderStylesheetIdColumn] = value;
                }
            }
            
            public int PlacementStylesheetId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableBlotter.PlacementStylesheetIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlotter.PlacementStylesheetIdColumn] = value;
                }
            }
            
            public int ExecutionStylesheetId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableBlotter.ExecutionStylesheetIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlotter.ExecutionStylesheetIdColumn] = value;
                }
            }
            
            public int TicketStylesheetId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableBlotter.TicketStylesheetIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlotter.TicketStylesheetIdColumn] = value;
                }
            }
            
            public int AlgorithmId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableBlotter.AlgorithmIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlotter.AlgorithmIdColumn] = value;
                }
            }
            
            public int BlotterTypeCode
            {
                get
                {
                    return ((int)(this[this.tableBlotter.BlotterTypeCodeColumn]));
                }
                set
                {
                    this[this.tableBlotter.BlotterTypeCodeColumn] = value;
                }
            }
            
            public bool DefaultBlotter
            {
                get
                {
                    return ((bool)(this[this.tableBlotter.DefaultBlotterColumn]));
                }
                set
                {
                    this[this.tableBlotter.DefaultBlotterColumn] = value;
                }
            }
            
            public AlgorithmRow AlgorithmRow
            {
                get
                {
                    if ((DataSetMarket.lockAlgorithm.IsReaderLockHeld || DataSetMarket.lockAlgorithm.IsWriterLockHeld))
                    {
                        return ((AlgorithmRow)(this.GetParentRow(this.Table.ParentRelations["FKAlgorithmBlotter"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Algorithm"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKAlgorithmBlotter"]);
                }
            }
            
            public BlotterTypeRow BlotterTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockBlotterType.IsReaderLockHeld || DataSetMarket.lockBlotterType.IsWriterLockHeld))
                    {
                        return ((BlotterTypeRow)(this.GetParentRow(this.Table.ParentRelations["FKBlotterTypeBlotter"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "BlotterType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKBlotterTypeBlotter"]);
                }
            }
            
            public ObjectRow ObjectRow
            {
                get
                {
                    if ((DataSetMarket.lockObject.IsReaderLockHeld || DataSetMarket.lockObject.IsWriterLockHeld))
                    {
                        return ((ObjectRow)(this.GetParentRow(this.Table.ParentRelations["FKObjectBlotter"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Object"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKObjectBlotter"]);
                }
            }
            
            public StylesheetRow StylesheetRowByFKStylesheetBlotterBlockOrderStylesheetId
            {
                get
                {
                    if ((DataSetMarket.lockStylesheet.IsReaderLockHeld || DataSetMarket.lockStylesheet.IsWriterLockHeld))
                    {
                        return ((StylesheetRow)(this.GetParentRow(this.Table.ParentRelations["FKStylesheetBlotterBlockOrderStylesheetId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Stylesheet"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKStylesheetBlotterBlockOrderStylesheetId"]);
                }
            }
            
            public StylesheetRow StylesheetRowByFKStylesheetBlotterPlacementStylesheetId
            {
                get
                {
                    if ((DataSetMarket.lockStylesheet.IsReaderLockHeld || DataSetMarket.lockStylesheet.IsWriterLockHeld))
                    {
                        return ((StylesheetRow)(this.GetParentRow(this.Table.ParentRelations["FKStylesheetBlotterPlacementStylesheetId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Stylesheet"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKStylesheetBlotterPlacementStylesheetId"]);
                }
            }
            
            public StylesheetRow StylesheetRowByFKStylesheetBlotterExecutionStylesheetId
            {
                get
                {
                    if ((DataSetMarket.lockStylesheet.IsReaderLockHeld || DataSetMarket.lockStylesheet.IsWriterLockHeld))
                    {
                        return ((StylesheetRow)(this.GetParentRow(this.Table.ParentRelations["FKStylesheetBlotterExecutionStylesheetId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Stylesheet"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKStylesheetBlotterExecutionStylesheetId"]);
                }
            }
            
            public StylesheetRow StylesheetRowByFKStylesheetBlotterTicketStylesheetId
            {
                get
                {
                    if ((DataSetMarket.lockStylesheet.IsReaderLockHeld || DataSetMarket.lockStylesheet.IsWriterLockHeld))
                    {
                        return ((StylesheetRow)(this.GetParentRow(this.Table.ParentRelations["FKStylesheetBlotterTicketStylesheetId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Stylesheet"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKStylesheetBlotterTicketStylesheetId"]);
                }
            }
            
            public bool IsBlockOrderStylesheetIdNull()
            {
                return this.IsNull(this.tableBlotter.BlockOrderStylesheetIdColumn);
            }
            
            public void SetBlockOrderStylesheetIdNull()
            {
                this[this.tableBlotter.BlockOrderStylesheetIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsPlacementStylesheetIdNull()
            {
                return this.IsNull(this.tableBlotter.PlacementStylesheetIdColumn);
            }
            
            public void SetPlacementStylesheetIdNull()
            {
                this[this.tableBlotter.PlacementStylesheetIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsExecutionStylesheetIdNull()
            {
                return this.IsNull(this.tableBlotter.ExecutionStylesheetIdColumn);
            }
            
            public void SetExecutionStylesheetIdNull()
            {
                this[this.tableBlotter.ExecutionStylesheetIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsTicketStylesheetIdNull()
            {
                return this.IsNull(this.tableBlotter.TicketStylesheetIdColumn);
            }
            
            public void SetTicketStylesheetIdNull()
            {
                this[this.tableBlotter.TicketStylesheetIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsAlgorithmIdNull()
            {
                return this.IsNull(this.tableBlotter.AlgorithmIdColumn);
            }
            
            public void SetAlgorithmIdNull()
            {
                this[this.tableBlotter.AlgorithmIdColumn] = System.Convert.DBNull;
            }
            
            public AccountRow[] GetAccountRows()
            {
                return ((AccountRow[])(this.GetChildRows(this.Table.ChildRelations["FKBlotterAccount"])));
            }
            
            public BlotterMapRow[] GetBlotterMapRows()
            {
                return ((BlotterMapRow[])(this.GetChildRows(this.Table.ChildRelations["FKBlotterBlotterMap"])));
            }
            
            public BlockOrderRow[] GetBlockOrderRows()
            {
                return ((BlockOrderRow[])(this.GetChildRows(this.Table.ChildRelations["FKBlotterBlockOrder"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BlotterRowChangeEvent : EventArgs
        {
            
            private BlotterRow eventRow;
            
            private DataRowAction eventAction;
            
            public BlotterRowChangeEvent(BlotterRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BlotterRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BlotterTypeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnBlotterTypeCode;
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private DataView viewUKBlotterTypeExternalId0;
            
            private DataView viewUKBlotterTypeExternalId1;
            
            internal BlotterTypeDataTable() : 
                    base("BlotterType")
            {
                this.InitClass();
            }
            
            internal BlotterTypeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column BlotterTypeCodeColumn
            {
                get
                {
                    return this.columnBlotterTypeCode;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public DataView UKBlotterTypeExternalId0
            {
                get
                {
                    return this.viewUKBlotterTypeExternalId0;
                }
            }
            
            public DataView UKBlotterTypeExternalId1
            {
                get
                {
                    return this.viewUKBlotterTypeExternalId1;
                }
            }
            
            public BlotterTypeRow this[int index]
            {
                get
                {
                    return ((BlotterTypeRow)(this.Rows[index]));
                }
            }
            
            public event BlotterTypeRowChangeEventHandler BlotterTypeRowChanged;
            
            public event BlotterTypeRowChangeEventHandler BlotterTypeRowChanging;
            
            public event BlotterTypeRowChangeEventHandler BlotterTypeRowDeleted;
            
            public event BlotterTypeRowChangeEventHandler BlotterTypeRowDeleting;
            
            public void AddBlotterTypeRow(BlotterTypeRow row)
            {
                this.Rows.Add(row);
            }
            
            public BlotterTypeRow AddBlotterTypeRow(int BlotterTypeCode, string Description, string ExternalId0, string ExternalId1)
            {
                BlotterTypeRow rowBlotterTypeRow = ((BlotterTypeRow)(this.NewRow()));
                rowBlotterTypeRow.ItemArray = new object[] {
                        BlotterTypeCode,
                        Description,
                        ExternalId0,
                        ExternalId1};
                this.Rows.Add(rowBlotterTypeRow);
                return rowBlotterTypeRow;
            }
            
            public BlotterTypeRow FindByBlotterTypeCode(int BlotterTypeCode)
            {
                return ((BlotterTypeRow)(this.Rows.Find(new object[] {
                            BlotterTypeCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                BlotterTypeDataTable cln = ((BlotterTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new BlotterTypeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnBlotterTypeCode = this.Columns["BlotterTypeCode"];
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnBlotterTypeCode = new Column("BlotterTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlotterTypeCode);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.Constraints.Add(new UniqueConstraint("PKBlotterType", new DataColumn[] {
                                this.columnBlotterTypeCode}, true));
                this.viewUKBlotterTypeExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewUKBlotterTypeExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.columnBlotterTypeCode.AllowDBNull = false;
                this.columnBlotterTypeCode.Unique = true;
                this.columnDescription.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.BlotterTypeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "BlotterType"));
                }
            }
            
            public BlotterTypeRow NewBlotterTypeRow()
            {
                return ((BlotterTypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new BlotterTypeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(BlotterTypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.BlotterTypeRowChanged != null))
                {
                    this.BlotterTypeRowChanged(this, new BlotterTypeRowChangeEvent(((BlotterTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.BlotterTypeRowChanging != null))
                {
                    this.BlotterTypeRowChanging(this, new BlotterTypeRowChangeEvent(((BlotterTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.BlotterTypeRowDeleted != null))
                {
                    this.BlotterTypeRowDeleted(this, new BlotterTypeRowChangeEvent(((BlotterTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.BlotterTypeRowDeleting != null))
                {
                    this.BlotterTypeRowDeleting(this, new BlotterTypeRowChangeEvent(((BlotterTypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBlotterTypeRow(BlotterTypeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BlotterTypeRow : Row
        {
            
            private BlotterTypeDataTable tableBlotterType;
            
            internal BlotterTypeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableBlotterType = ((BlotterTypeDataTable)(this.Table));
            }
            
            public int BlotterTypeCode
            {
                get
                {
                    return ((int)(this[this.tableBlotterType.BlotterTypeCodeColumn]));
                }
                set
                {
                    this[this.tableBlotterType.BlotterTypeCodeColumn] = value;
                }
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableBlotterType.DescriptionColumn]));
                }
                set
                {
                    this[this.tableBlotterType.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableBlotterType.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlotterType.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableBlotterType.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlotterType.ExternalId1Column] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableBlotterType.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableBlotterType.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableBlotterType.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableBlotterType.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public BlotterRow[] GetBlotterRows()
            {
                return ((BlotterRow[])(this.GetChildRows(this.Table.ChildRelations["FKBlotterTypeBlotter"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BlotterTypeRowChangeEvent : EventArgs
        {
            
            private BlotterTypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public BlotterTypeRowChangeEvent(BlotterTypeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BlotterTypeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BlotterMapDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnBlotterMapId;
            
            private Column columnSecurityId;
            
            private Column columnBlotterId;
            
            private Column columnMinimumQuantity;
            
            private Column columnMaximumQuantity;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private DataView viewUKBlotterMapExternalId0;
            
            private DataView viewUKBlotterMapExternalId1;
            
            internal BlotterMapDataTable() : 
                    base("BlotterMap")
            {
                this.InitClass();
            }
            
            internal BlotterMapDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column BlotterMapIdColumn
            {
                get
                {
                    return this.columnBlotterMapId;
                }
            }
            
            public Column SecurityIdColumn
            {
                get
                {
                    return this.columnSecurityId;
                }
            }
            
            public Column BlotterIdColumn
            {
                get
                {
                    return this.columnBlotterId;
                }
            }
            
            public Column MinimumQuantityColumn
            {
                get
                {
                    return this.columnMinimumQuantity;
                }
            }
            
            public Column MaximumQuantityColumn
            {
                get
                {
                    return this.columnMaximumQuantity;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public DataView UKBlotterMapExternalId0
            {
                get
                {
                    return this.viewUKBlotterMapExternalId0;
                }
            }
            
            public DataView UKBlotterMapExternalId1
            {
                get
                {
                    return this.viewUKBlotterMapExternalId1;
                }
            }
            
            public BlotterMapRow this[int index]
            {
                get
                {
                    return ((BlotterMapRow)(this.Rows[index]));
                }
            }
            
            public event BlotterMapRowChangeEventHandler BlotterMapRowChanged;
            
            public event BlotterMapRowChangeEventHandler BlotterMapRowChanging;
            
            public event BlotterMapRowChangeEventHandler BlotterMapRowDeleted;
            
            public event BlotterMapRowChangeEventHandler BlotterMapRowDeleting;
            
            public void AddBlotterMapRow(BlotterMapRow row)
            {
                this.Rows.Add(row);
            }
            
            public BlotterMapRow AddBlotterMapRow(SecurityRow parentSecurityRowByFKSecurityBlotterMap, BlotterRow parentBlotterRowByFKBlotterBlotterMap, decimal MinimumQuantity, decimal MaximumQuantity, string ExternalId0, string ExternalId1)
            {
                BlotterMapRow rowBlotterMapRow = ((BlotterMapRow)(this.NewRow()));
                rowBlotterMapRow.ItemArray = new object[] {
                        null,
                        parentSecurityRowByFKSecurityBlotterMap[17],
                        parentBlotterRowByFKBlotterBlotterMap[17],
                        MinimumQuantity,
                        MaximumQuantity,
                        ExternalId0,
                        ExternalId1};
                this.Rows.Add(rowBlotterMapRow);
                return rowBlotterMapRow;
            }
            
            public BlotterMapRow FindByBlotterMapId(int BlotterMapId)
            {
                return ((BlotterMapRow)(this.Rows.Find(new object[] {
                            BlotterMapId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                BlotterMapDataTable cln = ((BlotterMapDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new BlotterMapDataTable();
            }
            
            internal void InitVars()
            {
                this.columnBlotterMapId = this.Columns["BlotterMapId"];
                this.columnSecurityId = this.Columns["SecurityId"];
                this.columnBlotterId = this.Columns["BlotterId"];
                this.columnMinimumQuantity = this.Columns["MinimumQuantity"];
                this.columnMaximumQuantity = this.Columns["MaximumQuantity"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnBlotterMapId = new Column("BlotterMapId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlotterMapId);
                this.columnSecurityId = new Column("SecurityId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityId);
                this.columnBlotterId = new Column("BlotterId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlotterId);
                this.columnMinimumQuantity = new Column("MinimumQuantity", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMinimumQuantity);
                this.columnMaximumQuantity = new Column("MaximumQuantity", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaximumQuantity);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.Constraints.Add(new UniqueConstraint("PKBlotterMap", new DataColumn[] {
                                this.columnBlotterMapId}, true));
                this.viewUKBlotterMapExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewUKBlotterMapExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.columnBlotterMapId.AutoIncrement = true;
                this.columnBlotterMapId.AllowDBNull = false;
                this.columnBlotterMapId.Unique = true;
                this.columnSecurityId.AllowDBNull = false;
                this.columnBlotterId.AllowDBNull = false;
                this.columnMinimumQuantity.AllowDBNull = false;
                this.columnMinimumQuantity.DefaultValue = 0.0m;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.BlotterMapLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "BlotterMap"));
                }
            }
            
            public BlotterMapRow NewBlotterMapRow()
            {
                return ((BlotterMapRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new BlotterMapRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(BlotterMapRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.BlotterMapRowChanged != null))
                {
                    this.BlotterMapRowChanged(this, new BlotterMapRowChangeEvent(((BlotterMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.BlotterMapRowChanging != null))
                {
                    this.BlotterMapRowChanging(this, new BlotterMapRowChangeEvent(((BlotterMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.BlotterMapRowDeleted != null))
                {
                    this.BlotterMapRowDeleted(this, new BlotterMapRowChangeEvent(((BlotterMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.BlotterMapRowDeleting != null))
                {
                    this.BlotterMapRowDeleting(this, new BlotterMapRowChangeEvent(((BlotterMapRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBlotterMapRow(BlotterMapRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BlotterMapRow : Row
        {
            
            private BlotterMapDataTable tableBlotterMap;
            
            internal BlotterMapRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableBlotterMap = ((BlotterMapDataTable)(this.Table));
            }
            
            public int BlotterMapId
            {
                get
                {
                    return ((int)(this[this.tableBlotterMap.BlotterMapIdColumn]));
                }
                set
                {
                    this[this.tableBlotterMap.BlotterMapIdColumn] = value;
                }
            }
            
            public int SecurityId
            {
                get
                {
                    return ((int)(this[this.tableBlotterMap.SecurityIdColumn]));
                }
                set
                {
                    this[this.tableBlotterMap.SecurityIdColumn] = value;
                }
            }
            
            public int BlotterId
            {
                get
                {
                    return ((int)(this[this.tableBlotterMap.BlotterIdColumn]));
                }
                set
                {
                    this[this.tableBlotterMap.BlotterIdColumn] = value;
                }
            }
            
            public decimal MinimumQuantity
            {
                get
                {
                    return ((decimal)(this[this.tableBlotterMap.MinimumQuantityColumn]));
                }
                set
                {
                    this[this.tableBlotterMap.MinimumQuantityColumn] = value;
                }
            }
            
            public decimal MaximumQuantity
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableBlotterMap.MaximumQuantityColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlotterMap.MaximumQuantityColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableBlotterMap.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlotterMap.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableBlotterMap.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBlotterMap.ExternalId1Column] = value;
                }
            }
            
            public BlotterRow BlotterRow
            {
                get
                {
                    if ((DataSetMarket.lockBlotter.IsReaderLockHeld || DataSetMarket.lockBlotter.IsWriterLockHeld))
                    {
                        return ((BlotterRow)(this.GetParentRow(this.Table.ParentRelations["FKBlotterBlotterMap"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Blotter"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKBlotterBlotterMap"]);
                }
            }
            
            public SecurityRow SecurityRow
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["FKSecurityBlotterMap"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKSecurityBlotterMap"]);
                }
            }
            
            public bool IsMaximumQuantityNull()
            {
                return this.IsNull(this.tableBlotterMap.MaximumQuantityColumn);
            }
            
            public void SetMaximumQuantityNull()
            {
                this[this.tableBlotterMap.MaximumQuantityColumn] = System.Convert.DBNull;
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableBlotterMap.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableBlotterMap.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableBlotterMap.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableBlotterMap.ExternalId1Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BlotterMapRowChangeEvent : EventArgs
        {
            
            private BlotterMapRow eventRow;
            
            private DataRowAction eventAction;
            
            public BlotterMapRowChangeEvent(BlotterMapRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BlotterMapRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BrokerDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnBrokerId;
            
            private Column columnConnected;
            
            private Column columnSymbol;
            
            private Column columnPhone;
            
            internal BrokerDataTable() : 
                    base("Broker")
            {
                this.InitClass();
            }
            
            internal BrokerDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column BrokerIdColumn
            {
                get
                {
                    return this.columnBrokerId;
                }
            }
            
            public Column ConnectedColumn
            {
                get
                {
                    return this.columnConnected;
                }
            }
            
            public Column SymbolColumn
            {
                get
                {
                    return this.columnSymbol;
                }
            }
            
            public Column PhoneColumn
            {
                get
                {
                    return this.columnPhone;
                }
            }
            
            public BrokerRow this[int index]
            {
                get
                {
                    return ((BrokerRow)(this.Rows[index]));
                }
            }
            
            public event BrokerRowChangeEventHandler BrokerRowChanged;
            
            public event BrokerRowChangeEventHandler BrokerRowChanging;
            
            public event BrokerRowChangeEventHandler BrokerRowDeleted;
            
            public event BrokerRowChangeEventHandler BrokerRowDeleting;
            
            public void AddBrokerRow(BrokerRow row)
            {
                this.Rows.Add(row);
            }
            
            public BrokerRow AddBrokerRow(ObjectRow parentObjectRowByFKObjectBroker, bool Connected, string Symbol, string Phone)
            {
                BrokerRow rowBrokerRow = ((BrokerRow)(this.NewRow()));
                rowBrokerRow.ItemArray = new object[] {
                        parentObjectRowByFKObjectBroker[12],
                        Connected,
                        Symbol,
                        Phone};
                this.Rows.Add(rowBrokerRow);
                return rowBrokerRow;
            }
            
            public BrokerRow FindByBrokerId(int BrokerId)
            {
                return ((BrokerRow)(this.Rows.Find(new object[] {
                            BrokerId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                BrokerDataTable cln = ((BrokerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new BrokerDataTable();
            }
            
            internal void InitVars()
            {
                this.columnBrokerId = this.Columns["BrokerId"];
                this.columnConnected = this.Columns["Connected"];
                this.columnSymbol = this.Columns["Symbol"];
                this.columnPhone = this.Columns["Phone"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnBrokerId = new Column("BrokerId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBrokerId);
                this.columnConnected = new Column("Connected", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConnected);
                this.columnSymbol = new Column("Symbol", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSymbol);
                this.columnPhone = new Column("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhone);
                this.Constraints.Add(new UniqueConstraint("PKBroker", new DataColumn[] {
                                this.columnBrokerId}, true));
                this.columnBrokerId.AllowDBNull = false;
                this.columnBrokerId.Unique = true;
                this.columnConnected.AllowDBNull = false;
                this.columnConnected.DefaultValue = false;
                this.columnSymbol.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.BrokerLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Broker"));
                }
            }
            
            public BrokerRow NewBrokerRow()
            {
                return ((BrokerRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new BrokerRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(BrokerRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.BrokerRowChanged != null))
                {
                    this.BrokerRowChanged(this, new BrokerRowChangeEvent(((BrokerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.BrokerRowChanging != null))
                {
                    this.BrokerRowChanging(this, new BrokerRowChangeEvent(((BrokerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.BrokerRowDeleted != null))
                {
                    this.BrokerRowDeleted(this, new BrokerRowChangeEvent(((BrokerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.BrokerRowDeleting != null))
                {
                    this.BrokerRowDeleting(this, new BrokerRowChangeEvent(((BrokerRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBrokerRow(BrokerRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BrokerRow : Row
        {
            
            private BrokerDataTable tableBroker;
            
            internal BrokerRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableBroker = ((BrokerDataTable)(this.Table));
            }
            
            public int BrokerId
            {
                get
                {
                    return ((int)(this[this.tableBroker.BrokerIdColumn]));
                }
                set
                {
                    this[this.tableBroker.BrokerIdColumn] = value;
                }
            }
            
            public bool Connected
            {
                get
                {
                    return ((bool)(this[this.tableBroker.ConnectedColumn]));
                }
                set
                {
                    this[this.tableBroker.ConnectedColumn] = value;
                }
            }
            
            public string Symbol
            {
                get
                {
                    return ((string)(this[this.tableBroker.SymbolColumn]));
                }
                set
                {
                    this[this.tableBroker.SymbolColumn] = value;
                }
            }
            
            public string Phone
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableBroker.PhoneColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableBroker.PhoneColumn] = value;
                }
            }
            
            public ObjectRow ObjectRow
            {
                get
                {
                    if ((DataSetMarket.lockObject.IsReaderLockHeld || DataSetMarket.lockObject.IsWriterLockHeld))
                    {
                        return ((ObjectRow)(this.GetParentRow(this.Table.ParentRelations["FKObjectBroker"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Object"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKObjectBroker"]);
                }
            }
            
            public bool IsPhoneNull()
            {
                return this.IsNull(this.tableBroker.PhoneColumn);
            }
            
            public void SetPhoneNull()
            {
                this[this.tableBroker.PhoneColumn] = System.Convert.DBNull;
            }
            
            public ExecutionRow[] GetExecutionRows()
            {
                return ((ExecutionRow[])(this.GetChildRows(this.Table.ChildRelations["FKBrokerExecution"])));
            }
            
            public PlacementRow[] GetPlacementRows()
            {
                return ((PlacementRow[])(this.GetChildRows(this.Table.ChildRelations["FKBrokerPlacement"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BrokerRowChangeEvent : EventArgs
        {
            
            private BrokerRow eventRow;
            
            private DataRowAction eventAction;
            
            public BrokerRowChangeEvent(BrokerRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BrokerRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConditionDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnConditionCode;
            
            private Column columnMnemonic;
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            internal ConditionDataTable() : 
                    base("Condition")
            {
                this.InitClass();
            }
            
            internal ConditionDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ConditionCodeColumn
            {
                get
                {
                    return this.columnConditionCode;
                }
            }
            
            public Column MnemonicColumn
            {
                get
                {
                    return this.columnMnemonic;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public ConditionRow this[int index]
            {
                get
                {
                    return ((ConditionRow)(this.Rows[index]));
                }
            }
            
            public event ConditionRowChangeEventHandler ConditionRowChanged;
            
            public event ConditionRowChangeEventHandler ConditionRowChanging;
            
            public event ConditionRowChangeEventHandler ConditionRowDeleted;
            
            public event ConditionRowChangeEventHandler ConditionRowDeleting;
            
            public void AddConditionRow(ConditionRow row)
            {
                this.Rows.Add(row);
            }
            
            public ConditionRow AddConditionRow(int ConditionCode, string Mnemonic, string Description, string ExternalId0, string ExternalId1, string ExternalId2, string ExternalId3)
            {
                ConditionRow rowConditionRow = ((ConditionRow)(this.NewRow()));
                rowConditionRow.ItemArray = new object[] {
                        ConditionCode,
                        Mnemonic,
                        Description,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3};
                this.Rows.Add(rowConditionRow);
                return rowConditionRow;
            }
            
            public ConditionRow FindByConditionCode(int ConditionCode)
            {
                return ((ConditionRow)(this.Rows.Find(new object[] {
                            ConditionCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                ConditionDataTable cln = ((ConditionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new ConditionDataTable();
            }
            
            internal void InitVars()
            {
                this.columnConditionCode = this.Columns["ConditionCode"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnConditionCode = new Column("ConditionCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConditionCode);
                this.columnMnemonic = new Column("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.Constraints.Add(new UniqueConstraint("PKCondition", new DataColumn[] {
                                this.columnConditionCode}, true));
                this.columnConditionCode.AllowDBNull = false;
                this.columnConditionCode.Unique = true;
                this.columnMnemonic.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.ConditionLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Condition"));
                }
            }
            
            public ConditionRow NewConditionRow()
            {
                return ((ConditionRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ConditionRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(ConditionRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ConditionRowChanged != null))
                {
                    this.ConditionRowChanged(this, new ConditionRowChangeEvent(((ConditionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ConditionRowChanging != null))
                {
                    this.ConditionRowChanging(this, new ConditionRowChangeEvent(((ConditionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ConditionRowDeleted != null))
                {
                    this.ConditionRowDeleted(this, new ConditionRowChangeEvent(((ConditionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ConditionRowDeleting != null))
                {
                    this.ConditionRowDeleting(this, new ConditionRowChangeEvent(((ConditionRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveConditionRow(ConditionRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConditionRow : Row
        {
            
            private ConditionDataTable tableCondition;
            
            internal ConditionRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableCondition = ((ConditionDataTable)(this.Table));
            }
            
            public int ConditionCode
            {
                get
                {
                    return ((int)(this[this.tableCondition.ConditionCodeColumn]));
                }
                set
                {
                    this[this.tableCondition.ConditionCodeColumn] = value;
                }
            }
            
            public string Mnemonic
            {
                get
                {
                    return ((string)(this[this.tableCondition.MnemonicColumn]));
                }
                set
                {
                    this[this.tableCondition.MnemonicColumn] = value;
                }
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableCondition.DescriptionColumn]));
                }
                set
                {
                    this[this.tableCondition.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCondition.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCondition.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCondition.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCondition.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCondition.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCondition.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCondition.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCondition.ExternalId3Column] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableCondition.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableCondition.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableCondition.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableCondition.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableCondition.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableCondition.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableCondition.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableCondition.ExternalId3Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConditionRowChangeEvent : EventArgs
        {
            
            private ConditionRow eventRow;
            
            private DataRowAction eventAction;
            
            public ConditionRowChangeEvent(ConditionRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ConditionRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConfigurationDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnConfigurationId;
            
            private Column columnParameterId;
            
            private Column columnColumnIndex;
            
            internal ConfigurationDataTable() : 
                    base("Configuration")
            {
                this.InitClass();
            }
            
            internal ConfigurationDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ConfigurationIdColumn
            {
                get
                {
                    return this.columnConfigurationId;
                }
            }
            
            public Column ParameterIdColumn
            {
                get
                {
                    return this.columnParameterId;
                }
            }
            
            public Column ColumnIndexColumn
            {
                get
                {
                    return this.columnColumnIndex;
                }
            }
            
            public ConfigurationRow this[int index]
            {
                get
                {
                    return ((ConfigurationRow)(this.Rows[index]));
                }
            }
            
            public event ConfigurationRowChangeEventHandler ConfigurationRowChanged;
            
            public event ConfigurationRowChangeEventHandler ConfigurationRowChanging;
            
            public event ConfigurationRowChangeEventHandler ConfigurationRowDeleted;
            
            public event ConfigurationRowChangeEventHandler ConfigurationRowDeleting;
            
            public void AddConfigurationRow(ConfigurationRow row)
            {
                this.Rows.Add(row);
            }
            
            public ConfigurationRow AddConfigurationRow(string ConfigurationId, string ParameterId, int ColumnIndex)
            {
                ConfigurationRow rowConfigurationRow = ((ConfigurationRow)(this.NewRow()));
                rowConfigurationRow.ItemArray = new object[] {
                        ConfigurationId,
                        ParameterId,
                        ColumnIndex};
                this.Rows.Add(rowConfigurationRow);
                return rowConfigurationRow;
            }
            
            public ConfigurationRow FindByConfigurationIdParameterId(string ConfigurationId, string ParameterId)
            {
                return ((ConfigurationRow)(this.Rows.Find(new object[] {
                            ConfigurationId,
                            ParameterId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                ConfigurationDataTable cln = ((ConfigurationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new ConfigurationDataTable();
            }
            
            internal void InitVars()
            {
                this.columnConfigurationId = this.Columns["ConfigurationId"];
                this.columnParameterId = this.Columns["ParameterId"];
                this.columnColumnIndex = this.Columns["ColumnIndex"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnConfigurationId = new Column("ConfigurationId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConfigurationId);
                this.columnParameterId = new Column("ParameterId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnParameterId);
                this.columnColumnIndex = new Column("ColumnIndex", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnColumnIndex);
                this.Constraints.Add(new UniqueConstraint("PKConfiguration", new DataColumn[] {
                                this.columnConfigurationId,
                                this.columnParameterId}, true));
                this.columnConfigurationId.AllowDBNull = false;
                this.columnParameterId.AllowDBNull = false;
                this.columnColumnIndex.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.ConfigurationLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Configuration"));
                }
            }
            
            public ConfigurationRow NewConfigurationRow()
            {
                return ((ConfigurationRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ConfigurationRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(ConfigurationRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ConfigurationRowChanged != null))
                {
                    this.ConfigurationRowChanged(this, new ConfigurationRowChangeEvent(((ConfigurationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ConfigurationRowChanging != null))
                {
                    this.ConfigurationRowChanging(this, new ConfigurationRowChangeEvent(((ConfigurationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ConfigurationRowDeleted != null))
                {
                    this.ConfigurationRowDeleted(this, new ConfigurationRowChangeEvent(((ConfigurationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ConfigurationRowDeleting != null))
                {
                    this.ConfigurationRowDeleting(this, new ConfigurationRowChangeEvent(((ConfigurationRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveConfigurationRow(ConfigurationRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConfigurationRow : Row
        {
            
            private ConfigurationDataTable tableConfiguration;
            
            internal ConfigurationRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableConfiguration = ((ConfigurationDataTable)(this.Table));
            }
            
            public string ConfigurationId
            {
                get
                {
                    return ((string)(this[this.tableConfiguration.ConfigurationIdColumn]));
                }
                set
                {
                    this[this.tableConfiguration.ConfigurationIdColumn] = value;
                }
            }
            
            public string ParameterId
            {
                get
                {
                    return ((string)(this[this.tableConfiguration.ParameterIdColumn]));
                }
                set
                {
                    this[this.tableConfiguration.ParameterIdColumn] = value;
                }
            }
            
            public int ColumnIndex
            {
                get
                {
                    return ((int)(this[this.tableConfiguration.ColumnIndexColumn]));
                }
                set
                {
                    this[this.tableConfiguration.ColumnIndexColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConfigurationRowChangeEvent : EventArgs
        {
            
            private ConfigurationRow eventRow;
            
            private DataRowAction eventAction;
            
            public ConfigurationRowChangeEvent(ConfigurationRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ConfigurationRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CountryDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnCountryId;
            
            private Column columnName;
            
            private Column columnAbbreviation;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private DataView viewUKCountryExternalId0;
            
            private DataView viewUKCountryExternalId1;
            
            internal CountryDataTable() : 
                    base("Country")
            {
                this.InitClass();
            }
            
            internal CountryDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column CountryIdColumn
            {
                get
                {
                    return this.columnCountryId;
                }
            }
            
            public Column NameColumn
            {
                get
                {
                    return this.columnName;
                }
            }
            
            public Column AbbreviationColumn
            {
                get
                {
                    return this.columnAbbreviation;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public DataView UKCountryExternalId0
            {
                get
                {
                    return this.viewUKCountryExternalId0;
                }
            }
            
            public DataView UKCountryExternalId1
            {
                get
                {
                    return this.viewUKCountryExternalId1;
                }
            }
            
            public CountryRow this[int index]
            {
                get
                {
                    return ((CountryRow)(this.Rows[index]));
                }
            }
            
            public event CountryRowChangeEventHandler CountryRowChanged;
            
            public event CountryRowChangeEventHandler CountryRowChanging;
            
            public event CountryRowChangeEventHandler CountryRowDeleted;
            
            public event CountryRowChangeEventHandler CountryRowDeleting;
            
            public void AddCountryRow(CountryRow row)
            {
                this.Rows.Add(row);
            }
            
            public CountryRow AddCountryRow(string Name, string Abbreviation, string ExternalId0, string ExternalId1)
            {
                CountryRow rowCountryRow = ((CountryRow)(this.NewRow()));
                rowCountryRow.ItemArray = new object[] {
                        null,
                        Name,
                        Abbreviation,
                        ExternalId0,
                        ExternalId1};
                this.Rows.Add(rowCountryRow);
                return rowCountryRow;
            }
            
            public CountryRow FindByCountryId(int CountryId)
            {
                return ((CountryRow)(this.Rows.Find(new object[] {
                            CountryId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                CountryDataTable cln = ((CountryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new CountryDataTable();
            }
            
            internal void InitVars()
            {
                this.columnCountryId = this.Columns["CountryId"];
                this.columnName = this.Columns["Name"];
                this.columnAbbreviation = this.Columns["Abbreviation"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnCountryId = new Column("CountryId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryId);
                this.columnName = new Column("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnAbbreviation = new Column("Abbreviation", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAbbreviation);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.Constraints.Add(new UniqueConstraint("PKCountry", new DataColumn[] {
                                this.columnCountryId}, true));
                this.viewUKCountryExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewUKCountryExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.columnCountryId.AutoIncrement = true;
                this.columnCountryId.AllowDBNull = false;
                this.columnCountryId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnAbbreviation.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.CountryLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Country"));
                }
            }
            
            public CountryRow NewCountryRow()
            {
                return ((CountryRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CountryRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(CountryRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.CountryRowChanged != null))
                {
                    this.CountryRowChanged(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.CountryRowChanging != null))
                {
                    this.CountryRowChanging(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.CountryRowDeleted != null))
                {
                    this.CountryRowDeleted(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.CountryRowDeleting != null))
                {
                    this.CountryRowDeleting(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCountryRow(CountryRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CountryRow : Row
        {
            
            private CountryDataTable tableCountry;
            
            internal CountryRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableCountry = ((CountryDataTable)(this.Table));
            }
            
            public int CountryId
            {
                get
                {
                    return ((int)(this[this.tableCountry.CountryIdColumn]));
                }
                set
                {
                    this[this.tableCountry.CountryIdColumn] = value;
                }
            }
            
            public string Name
            {
                get
                {
                    return ((string)(this[this.tableCountry.NameColumn]));
                }
                set
                {
                    this[this.tableCountry.NameColumn] = value;
                }
            }
            
            public string Abbreviation
            {
                get
                {
                    return ((string)(this[this.tableCountry.AbbreviationColumn]));
                }
                set
                {
                    this[this.tableCountry.AbbreviationColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCountry.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCountry.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCountry.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCountry.ExternalId1Column] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableCountry.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableCountry.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableCountry.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableCountry.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public AccountRow[] GetAccountRows()
            {
                return ((AccountRow[])(this.GetChildRows(this.Table.ChildRelations["FKCountryAccount"])));
            }
            
            public SecurityRow[] GetSecurityRows()
            {
                return ((SecurityRow[])(this.GetChildRows(this.Table.ChildRelations["FKCountrySecurity"])));
            }
            
            public HolidayRow[] GetHolidayRows()
            {
                return ((HolidayRow[])(this.GetChildRows(this.Table.ChildRelations["FKCountryHoliday"])));
            }
            
            public ProvinceRow[] GetProvinceRows()
            {
                return ((ProvinceRow[])(this.GetChildRows(this.Table.ChildRelations["FKCountryProvince"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CountryRowChangeEvent : EventArgs
        {
            
            private CountryRow eventRow;
            
            private DataRowAction eventAction;
            
            public CountryRowChangeEvent(CountryRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CountryRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CurrencyDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnCurrencyId;
            
            internal CurrencyDataTable() : 
                    base("Currency")
            {
                this.InitClass();
            }
            
            internal CurrencyDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column CurrencyIdColumn
            {
                get
                {
                    return this.columnCurrencyId;
                }
            }
            
            public CurrencyRow this[int index]
            {
                get
                {
                    return ((CurrencyRow)(this.Rows[index]));
                }
            }
            
            public event CurrencyRowChangeEventHandler CurrencyRowChanged;
            
            public event CurrencyRowChangeEventHandler CurrencyRowChanging;
            
            public event CurrencyRowChangeEventHandler CurrencyRowDeleted;
            
            public event CurrencyRowChangeEventHandler CurrencyRowDeleting;
            
            public void AddCurrencyRow(CurrencyRow row)
            {
                this.Rows.Add(row);
            }
            
            public CurrencyRow AddCurrencyRow(SecurityRow parentSecurityRowByFKSecurityCurrency)
            {
                CurrencyRow rowCurrencyRow = ((CurrencyRow)(this.NewRow()));
                rowCurrencyRow.ItemArray = new object[] {
                        parentSecurityRowByFKSecurityCurrency[17]};
                this.Rows.Add(rowCurrencyRow);
                return rowCurrencyRow;
            }
            
            public CurrencyRow FindByCurrencyId(int CurrencyId)
            {
                return ((CurrencyRow)(this.Rows.Find(new object[] {
                            CurrencyId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                CurrencyDataTable cln = ((CurrencyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new CurrencyDataTable();
            }
            
            internal void InitVars()
            {
                this.columnCurrencyId = this.Columns["CurrencyId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnCurrencyId = new Column("CurrencyId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyId);
                this.Constraints.Add(new UniqueConstraint("PKCurrency", new DataColumn[] {
                                this.columnCurrencyId}, true));
                this.columnCurrencyId.AllowDBNull = false;
                this.columnCurrencyId.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.CurrencyLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Currency"));
                }
            }
            
            public CurrencyRow NewCurrencyRow()
            {
                return ((CurrencyRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CurrencyRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(CurrencyRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.CurrencyRowChanged != null))
                {
                    this.CurrencyRowChanged(this, new CurrencyRowChangeEvent(((CurrencyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.CurrencyRowChanging != null))
                {
                    this.CurrencyRowChanging(this, new CurrencyRowChangeEvent(((CurrencyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.CurrencyRowDeleted != null))
                {
                    this.CurrencyRowDeleted(this, new CurrencyRowChangeEvent(((CurrencyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.CurrencyRowDeleting != null))
                {
                    this.CurrencyRowDeleting(this, new CurrencyRowChangeEvent(((CurrencyRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCurrencyRow(CurrencyRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CurrencyRow : Row
        {
            
            private CurrencyDataTable tableCurrency;
            
            internal CurrencyRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableCurrency = ((CurrencyDataTable)(this.Table));
            }
            
            public int CurrencyId
            {
                get
                {
                    return ((int)(this[this.tableCurrency.CurrencyIdColumn]));
                }
                set
                {
                    this[this.tableCurrency.CurrencyIdColumn] = value;
                }
            }
            
            public SecurityRow SecurityRow
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["FKSecurityCurrency"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKSecurityCurrency"]);
                }
            }
            
            public AccountRow[] GetAccountRows()
            {
                return ((AccountRow[])(this.GetChildRows(this.Table.ChildRelations["FKCurrencyAccount"])));
            }
            
            public PriceRow[] GetPriceRows()
            {
                return ((PriceRow[])(this.GetChildRows(this.Table.ChildRelations["FKCurrencyPrice"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CurrencyRowChangeEvent : EventArgs
        {
            
            private CurrencyRow eventRow;
            
            private DataRowAction eventAction;
            
            public CurrencyRowChangeEvent(CurrencyRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CurrencyRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DebtDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnDebtId;
            
            private Column columnIssuerId;
            
            private Column columnSettlementId;
            
            private Column columnDebtTypeCode;
            
            private Column columnFaceOutstanding;
            
            private Column columnCoupon;
            
            private Column columnMaturityDate;
            
            private Column columnDatedDate;
            
            private Column columnFirstCoupon;
            
            private Column columnFrequency;
            
            private Column columnRedemptionValue;
            
            private Column columnIncomeTaxRate;
            
            private Column columnCapitalGainsTaxRate;
            
            private Column columnCutoffPeriod;
            
            private Column columnIssuePrice;
            
            private Column columnTrueYield;
            
            private Column columnWeekendCode;
            
            private Column columnExdividendDays;
            
            private Column columnRating0;
            
            private Column columnRating1;
            
            private Column columnRating2;
            
            private Column columnRating3;
            
            internal DebtDataTable() : 
                    base("Debt")
            {
                this.InitClass();
            }
            
            internal DebtDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column DebtIdColumn
            {
                get
                {
                    return this.columnDebtId;
                }
            }
            
            public Column IssuerIdColumn
            {
                get
                {
                    return this.columnIssuerId;
                }
            }
            
            public Column SettlementIdColumn
            {
                get
                {
                    return this.columnSettlementId;
                }
            }
            
            public Column DebtTypeCodeColumn
            {
                get
                {
                    return this.columnDebtTypeCode;
                }
            }
            
            public Column FaceOutstandingColumn
            {
                get
                {
                    return this.columnFaceOutstanding;
                }
            }
            
            public Column CouponColumn
            {
                get
                {
                    return this.columnCoupon;
                }
            }
            
            public Column MaturityDateColumn
            {
                get
                {
                    return this.columnMaturityDate;
                }
            }
            
            public Column DatedDateColumn
            {
                get
                {
                    return this.columnDatedDate;
                }
            }
            
            public Column FirstCouponColumn
            {
                get
                {
                    return this.columnFirstCoupon;
                }
            }
            
            public Column FrequencyColumn
            {
                get
                {
                    return this.columnFrequency;
                }
            }
            
            public Column RedemptionValueColumn
            {
                get
                {
                    return this.columnRedemptionValue;
                }
            }
            
            public Column IncomeTaxRateColumn
            {
                get
                {
                    return this.columnIncomeTaxRate;
                }
            }
            
            public Column CapitalGainsTaxRateColumn
            {
                get
                {
                    return this.columnCapitalGainsTaxRate;
                }
            }
            
            public Column CutoffPeriodColumn
            {
                get
                {
                    return this.columnCutoffPeriod;
                }
            }
            
            public Column IssuePriceColumn
            {
                get
                {
                    return this.columnIssuePrice;
                }
            }
            
            public Column TrueYieldColumn
            {
                get
                {
                    return this.columnTrueYield;
                }
            }
            
            public Column WeekendCodeColumn
            {
                get
                {
                    return this.columnWeekendCode;
                }
            }
            
            public Column ExdividendDaysColumn
            {
                get
                {
                    return this.columnExdividendDays;
                }
            }
            
            public Column Rating0Column
            {
                get
                {
                    return this.columnRating0;
                }
            }
            
            public Column Rating1Column
            {
                get
                {
                    return this.columnRating1;
                }
            }
            
            public Column Rating2Column
            {
                get
                {
                    return this.columnRating2;
                }
            }
            
            public Column Rating3Column
            {
                get
                {
                    return this.columnRating3;
                }
            }
            
            public DebtRow this[int index]
            {
                get
                {
                    return ((DebtRow)(this.Rows[index]));
                }
            }
            
            public event DebtRowChangeEventHandler DebtRowChanged;
            
            public event DebtRowChangeEventHandler DebtRowChanging;
            
            public event DebtRowChangeEventHandler DebtRowDeleted;
            
            public event DebtRowChangeEventHandler DebtRowDeleting;
            
            public void AddDebtRow(DebtRow row)
            {
                this.Rows.Add(row);
            }
            
            public DebtRow AddDebtRow(
                        SecurityRow parentSecurityRowByFKSecurityDebtDebtId, 
                        IssuerRow parentIssuerRowByFKIssuerDebt, 
                        SecurityRow parentSecurityRowByFKSecurityDebtSettlementId, 
                        DebtTypeRow parentDebtTypeRowByFKDebtTypeDebt, 
                        decimal FaceOutstanding, 
                        decimal Coupon, 
                        System.DateTime MaturityDate, 
                        System.DateTime DatedDate, 
                        System.DateTime FirstCoupon, 
                        int Frequency, 
                        decimal RedemptionValue, 
                        decimal IncomeTaxRate, 
                        decimal CapitalGainsTaxRate, 
                        int CutoffPeriod, 
                        int IssuePrice, 
                        bool TrueYield, 
                        int WeekendCode, 
                        int ExdividendDays, 
                        int Rating0, 
                        int Rating1, 
                        int Rating2, 
                        int Rating3)
            {
                DebtRow rowDebtRow = ((DebtRow)(this.NewRow()));
                rowDebtRow.ItemArray = new object[] {
                        parentSecurityRowByFKSecurityDebtDebtId[17],
                        parentIssuerRowByFKIssuerDebt[17],
                        parentSecurityRowByFKSecurityDebtSettlementId[17],
                        parentDebtTypeRowByFKDebtTypeDebt[0],
                        FaceOutstanding,
                        Coupon,
                        MaturityDate,
                        DatedDate,
                        FirstCoupon,
                        Frequency,
                        RedemptionValue,
                        IncomeTaxRate,
                        CapitalGainsTaxRate,
                        CutoffPeriod,
                        IssuePrice,
                        TrueYield,
                        WeekendCode,
                        ExdividendDays,
                        Rating0,
                        Rating1,
                        Rating2,
                        Rating3};
                this.Rows.Add(rowDebtRow);
                return rowDebtRow;
            }
            
            public DebtRow FindByDebtId(int DebtId)
            {
                return ((DebtRow)(this.Rows.Find(new object[] {
                            DebtId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                DebtDataTable cln = ((DebtDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new DebtDataTable();
            }
            
            internal void InitVars()
            {
                this.columnDebtId = this.Columns["DebtId"];
                this.columnIssuerId = this.Columns["IssuerId"];
                this.columnSettlementId = this.Columns["SettlementId"];
                this.columnDebtTypeCode = this.Columns["DebtTypeCode"];
                this.columnFaceOutstanding = this.Columns["FaceOutstanding"];
                this.columnCoupon = this.Columns["Coupon"];
                this.columnMaturityDate = this.Columns["MaturityDate"];
                this.columnDatedDate = this.Columns["DatedDate"];
                this.columnFirstCoupon = this.Columns["FirstCoupon"];
                this.columnFrequency = this.Columns["Frequency"];
                this.columnRedemptionValue = this.Columns["RedemptionValue"];
                this.columnIncomeTaxRate = this.Columns["IncomeTaxRate"];
                this.columnCapitalGainsTaxRate = this.Columns["CapitalGainsTaxRate"];
                this.columnCutoffPeriod = this.Columns["CutoffPeriod"];
                this.columnIssuePrice = this.Columns["IssuePrice"];
                this.columnTrueYield = this.Columns["TrueYield"];
                this.columnWeekendCode = this.Columns["WeekendCode"];
                this.columnExdividendDays = this.Columns["ExdividendDays"];
                this.columnRating0 = this.Columns["Rating0"];
                this.columnRating1 = this.Columns["Rating1"];
                this.columnRating2 = this.Columns["Rating2"];
                this.columnRating3 = this.Columns["Rating3"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnDebtId = new Column("DebtId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDebtId);
                this.columnIssuerId = new Column("IssuerId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIssuerId);
                this.columnSettlementId = new Column("SettlementId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSettlementId);
                this.columnDebtTypeCode = new Column("DebtTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDebtTypeCode);
                this.columnFaceOutstanding = new Column("FaceOutstanding", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFaceOutstanding);
                this.columnCoupon = new Column("Coupon", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCoupon);
                this.columnMaturityDate = new Column("MaturityDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMaturityDate);
                this.columnDatedDate = new Column("DatedDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDatedDate);
                this.columnFirstCoupon = new Column("FirstCoupon", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFirstCoupon);
                this.columnFrequency = new Column("Frequency", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFrequency);
                this.columnRedemptionValue = new Column("RedemptionValue", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRedemptionValue);
                this.columnIncomeTaxRate = new Column("IncomeTaxRate", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIncomeTaxRate);
                this.columnCapitalGainsTaxRate = new Column("CapitalGainsTaxRate", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCapitalGainsTaxRate);
                this.columnCutoffPeriod = new Column("CutoffPeriod", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCutoffPeriod);
                this.columnIssuePrice = new Column("IssuePrice", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIssuePrice);
                this.columnTrueYield = new Column("TrueYield", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTrueYield);
                this.columnWeekendCode = new Column("WeekendCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWeekendCode);
                this.columnExdividendDays = new Column("ExdividendDays", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExdividendDays);
                this.columnRating0 = new Column("Rating0", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRating0);
                this.columnRating1 = new Column("Rating1", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRating1);
                this.columnRating2 = new Column("Rating2", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRating2);
                this.columnRating3 = new Column("Rating3", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRating3);
                this.Constraints.Add(new UniqueConstraint("PKDebt", new DataColumn[] {
                                this.columnDebtId}, true));
                this.columnDebtId.AllowDBNull = false;
                this.columnDebtId.Unique = true;
                this.columnSettlementId.AllowDBNull = false;
                this.columnDebtTypeCode.AllowDBNull = false;
                this.columnFaceOutstanding.AllowDBNull = false;
                this.columnFaceOutstanding.DefaultValue = 0m;
                this.columnCoupon.AllowDBNull = false;
                this.columnMaturityDate.AllowDBNull = false;
                this.columnFrequency.AllowDBNull = false;
                this.columnFrequency.DefaultValue = 0;
                this.columnRedemptionValue.AllowDBNull = false;
                this.columnRedemptionValue.DefaultValue = 100.0m;
                this.columnIncomeTaxRate.AllowDBNull = false;
                this.columnIncomeTaxRate.DefaultValue = 0.0m;
                this.columnCapitalGainsTaxRate.AllowDBNull = false;
                this.columnCapitalGainsTaxRate.DefaultValue = 0.0m;
                this.columnCutoffPeriod.AllowDBNull = false;
                this.columnCutoffPeriod.DefaultValue = 12;
                this.columnIssuePrice.AllowDBNull = false;
                this.columnIssuePrice.DefaultValue = 12;
                this.columnTrueYield.AllowDBNull = false;
                this.columnTrueYield.DefaultValue = true;
                this.columnWeekendCode.AllowDBNull = false;
                this.columnWeekendCode.DefaultValue = 0;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.DebtLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Debt"));
                }
            }
            
            public DebtRow NewDebtRow()
            {
                return ((DebtRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new DebtRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(DebtRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.DebtRowChanged != null))
                {
                    this.DebtRowChanged(this, new DebtRowChangeEvent(((DebtRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.DebtRowChanging != null))
                {
                    this.DebtRowChanging(this, new DebtRowChangeEvent(((DebtRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.DebtRowDeleted != null))
                {
                    this.DebtRowDeleted(this, new DebtRowChangeEvent(((DebtRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.DebtRowDeleting != null))
                {
                    this.DebtRowDeleting(this, new DebtRowChangeEvent(((DebtRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDebtRow(DebtRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DebtRow : Row
        {
            
            private DebtDataTable tableDebt;
            
            internal DebtRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableDebt = ((DebtDataTable)(this.Table));
            }
            
            public int DebtId
            {
                get
                {
                    return ((int)(this[this.tableDebt.DebtIdColumn]));
                }
                set
                {
                    this[this.tableDebt.DebtIdColumn] = value;
                }
            }
            
            public int IssuerId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableDebt.IssuerIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDebt.IssuerIdColumn] = value;
                }
            }
            
            public int SettlementId
            {
                get
                {
                    return ((int)(this[this.tableDebt.SettlementIdColumn]));
                }
                set
                {
                    this[this.tableDebt.SettlementIdColumn] = value;
                }
            }
            
            public int DebtTypeCode
            {
                get
                {
                    return ((int)(this[this.tableDebt.DebtTypeCodeColumn]));
                }
                set
                {
                    this[this.tableDebt.DebtTypeCodeColumn] = value;
                }
            }
            
            public decimal FaceOutstanding
            {
                get
                {
                    return ((decimal)(this[this.tableDebt.FaceOutstandingColumn]));
                }
                set
                {
                    this[this.tableDebt.FaceOutstandingColumn] = value;
                }
            }
            
            public decimal Coupon
            {
                get
                {
                    return ((decimal)(this[this.tableDebt.CouponColumn]));
                }
                set
                {
                    this[this.tableDebt.CouponColumn] = value;
                }
            }
            
            public System.DateTime MaturityDate
            {
                get
                {
                    return ((System.DateTime)(this[this.tableDebt.MaturityDateColumn]));
                }
                set
                {
                    this[this.tableDebt.MaturityDateColumn] = value;
                }
            }
            
            public System.DateTime DatedDate
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(this[this.tableDebt.DatedDateColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDebt.DatedDateColumn] = value;
                }
            }
            
            public System.DateTime FirstCoupon
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(this[this.tableDebt.FirstCouponColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDebt.FirstCouponColumn] = value;
                }
            }
            
            public int Frequency
            {
                get
                {
                    return ((int)(this[this.tableDebt.FrequencyColumn]));
                }
                set
                {
                    this[this.tableDebt.FrequencyColumn] = value;
                }
            }
            
            public decimal RedemptionValue
            {
                get
                {
                    return ((decimal)(this[this.tableDebt.RedemptionValueColumn]));
                }
                set
                {
                    this[this.tableDebt.RedemptionValueColumn] = value;
                }
            }
            
            public decimal IncomeTaxRate
            {
                get
                {
                    return ((decimal)(this[this.tableDebt.IncomeTaxRateColumn]));
                }
                set
                {
                    this[this.tableDebt.IncomeTaxRateColumn] = value;
                }
            }
            
            public decimal CapitalGainsTaxRate
            {
                get
                {
                    return ((decimal)(this[this.tableDebt.CapitalGainsTaxRateColumn]));
                }
                set
                {
                    this[this.tableDebt.CapitalGainsTaxRateColumn] = value;
                }
            }
            
            public int CutoffPeriod
            {
                get
                {
                    return ((int)(this[this.tableDebt.CutoffPeriodColumn]));
                }
                set
                {
                    this[this.tableDebt.CutoffPeriodColumn] = value;
                }
            }
            
            public int IssuePrice
            {
                get
                {
                    return ((int)(this[this.tableDebt.IssuePriceColumn]));
                }
                set
                {
                    this[this.tableDebt.IssuePriceColumn] = value;
                }
            }
            
            public bool TrueYield
            {
                get
                {
                    return ((bool)(this[this.tableDebt.TrueYieldColumn]));
                }
                set
                {
                    this[this.tableDebt.TrueYieldColumn] = value;
                }
            }
            
            public int WeekendCode
            {
                get
                {
                    return ((int)(this[this.tableDebt.WeekendCodeColumn]));
                }
                set
                {
                    this[this.tableDebt.WeekendCodeColumn] = value;
                }
            }
            
            public int ExdividendDays
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableDebt.ExdividendDaysColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDebt.ExdividendDaysColumn] = value;
                }
            }
            
            public int Rating0
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableDebt.Rating0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDebt.Rating0Column] = value;
                }
            }
            
            public int Rating1
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableDebt.Rating1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDebt.Rating1Column] = value;
                }
            }
            
            public int Rating2
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableDebt.Rating2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDebt.Rating2Column] = value;
                }
            }
            
            public int Rating3
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableDebt.Rating3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDebt.Rating3Column] = value;
                }
            }
            
            public DebtTypeRow DebtTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockDebtType.IsReaderLockHeld || DataSetMarket.lockDebtType.IsWriterLockHeld))
                    {
                        return ((DebtTypeRow)(this.GetParentRow(this.Table.ParentRelations["FKDebtTypeDebt"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "DebtType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKDebtTypeDebt"]);
                }
            }
            
            public IssuerRow IssuerRow
            {
                get
                {
                    if ((DataSetMarket.lockIssuer.IsReaderLockHeld || DataSetMarket.lockIssuer.IsWriterLockHeld))
                    {
                        return ((IssuerRow)(this.GetParentRow(this.Table.ParentRelations["FKIssuerDebt"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Issuer"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKIssuerDebt"]);
                }
            }
            
            public SecurityRow SecurityRowByFKSecurityDebtDebtId
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["FKSecurityDebtDebtId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKSecurityDebtDebtId"]);
                }
            }
            
            public SecurityRow SecurityRowByFKSecurityDebtSettlementId
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["FKSecurityDebtSettlementId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKSecurityDebtSettlementId"]);
                }
            }
            
            public bool IsIssuerIdNull()
            {
                return this.IsNull(this.tableDebt.IssuerIdColumn);
            }
            
            public void SetIssuerIdNull()
            {
                this[this.tableDebt.IssuerIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsDatedDateNull()
            {
                return this.IsNull(this.tableDebt.DatedDateColumn);
            }
            
            public void SetDatedDateNull()
            {
                this[this.tableDebt.DatedDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsFirstCouponNull()
            {
                return this.IsNull(this.tableDebt.FirstCouponColumn);
            }
            
            public void SetFirstCouponNull()
            {
                this[this.tableDebt.FirstCouponColumn] = System.Convert.DBNull;
            }
            
            public bool IsExdividendDaysNull()
            {
                return this.IsNull(this.tableDebt.ExdividendDaysColumn);
            }
            
            public void SetExdividendDaysNull()
            {
                this[this.tableDebt.ExdividendDaysColumn] = System.Convert.DBNull;
            }
            
            public bool IsRating0Null()
            {
                return this.IsNull(this.tableDebt.Rating0Column);
            }
            
            public void SetRating0Null()
            {
                this[this.tableDebt.Rating0Column] = System.Convert.DBNull;
            }
            
            public bool IsRating1Null()
            {
                return this.IsNull(this.tableDebt.Rating1Column);
            }
            
            public void SetRating1Null()
            {
                this[this.tableDebt.Rating1Column] = System.Convert.DBNull;
            }
            
            public bool IsRating2Null()
            {
                return this.IsNull(this.tableDebt.Rating2Column);
            }
            
            public void SetRating2Null()
            {
                this[this.tableDebt.Rating2Column] = System.Convert.DBNull;
            }
            
            public bool IsRating3Null()
            {
                return this.IsNull(this.tableDebt.Rating3Column);
            }
            
            public void SetRating3Null()
            {
                this[this.tableDebt.Rating3Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DebtRowChangeEvent : EventArgs
        {
            
            private DebtRow eventRow;
            
            private DataRowAction eventAction;
            
            public DebtRowChangeEvent(DebtRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DebtRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DebtTypeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnDebtTypeCode;
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private DataView viewUKDebtTypeExternalId0;
            
            private DataView viewUKDebtTypeExternalId1;
            
            private DataView viewUKDebtTypeExternalId2;
            
            private DataView viewUKDebtTypeExternalId3;
            
            internal DebtTypeDataTable() : 
                    base("DebtType")
            {
                this.InitClass();
            }
            
            internal DebtTypeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column DebtTypeCodeColumn
            {
                get
                {
                    return this.columnDebtTypeCode;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public DataView UKDebtTypeExternalId0
            {
                get
                {
                    return this.viewUKDebtTypeExternalId0;
                }
            }
            
            public DataView UKDebtTypeExternalId1
            {
                get
                {
                    return this.viewUKDebtTypeExternalId1;
                }
            }
            
            public DataView UKDebtTypeExternalId2
            {
                get
                {
                    return this.viewUKDebtTypeExternalId2;
                }
            }
            
            public DataView UKDebtTypeExternalId3
            {
                get
                {
                    return this.viewUKDebtTypeExternalId3;
                }
            }
            
            public DebtTypeRow this[int index]
            {
                get
                {
                    return ((DebtTypeRow)(this.Rows[index]));
                }
            }
            
            public event DebtTypeRowChangeEventHandler DebtTypeRowChanged;
            
            public event DebtTypeRowChangeEventHandler DebtTypeRowChanging;
            
            public event DebtTypeRowChangeEventHandler DebtTypeRowDeleted;
            
            public event DebtTypeRowChangeEventHandler DebtTypeRowDeleting;
            
            public void AddDebtTypeRow(DebtTypeRow row)
            {
                this.Rows.Add(row);
            }
            
            public DebtTypeRow AddDebtTypeRow(int DebtTypeCode, string Description, string ExternalId0, string ExternalId1, string ExternalId2, string ExternalId3)
            {
                DebtTypeRow rowDebtTypeRow = ((DebtTypeRow)(this.NewRow()));
                rowDebtTypeRow.ItemArray = new object[] {
                        DebtTypeCode,
                        Description,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3};
                this.Rows.Add(rowDebtTypeRow);
                return rowDebtTypeRow;
            }
            
            public DebtTypeRow FindByDebtTypeCode(int DebtTypeCode)
            {
                return ((DebtTypeRow)(this.Rows.Find(new object[] {
                            DebtTypeCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                DebtTypeDataTable cln = ((DebtTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new DebtTypeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnDebtTypeCode = this.Columns["DebtTypeCode"];
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnDebtTypeCode = new Column("DebtTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDebtTypeCode);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.Constraints.Add(new UniqueConstraint("PKDebtType", new DataColumn[] {
                                this.columnDebtTypeCode}, true));
                this.viewUKDebtTypeExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewUKDebtTypeExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.viewUKDebtTypeExternalId2 = new DataView(this, null, "ExternalId2", DataViewRowState.CurrentRows);
                this.viewUKDebtTypeExternalId3 = new DataView(this, null, "ExternalId3", DataViewRowState.CurrentRows);
                this.columnDebtTypeCode.AllowDBNull = false;
                this.columnDebtTypeCode.Unique = true;
                this.columnDescription.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.DebtTypeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "DebtType"));
                }
            }
            
            public DebtTypeRow NewDebtTypeRow()
            {
                return ((DebtTypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new DebtTypeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(DebtTypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.DebtTypeRowChanged != null))
                {
                    this.DebtTypeRowChanged(this, new DebtTypeRowChangeEvent(((DebtTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.DebtTypeRowChanging != null))
                {
                    this.DebtTypeRowChanging(this, new DebtTypeRowChangeEvent(((DebtTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.DebtTypeRowDeleted != null))
                {
                    this.DebtTypeRowDeleted(this, new DebtTypeRowChangeEvent(((DebtTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.DebtTypeRowDeleting != null))
                {
                    this.DebtTypeRowDeleting(this, new DebtTypeRowChangeEvent(((DebtTypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDebtTypeRow(DebtTypeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DebtTypeRow : Row
        {
            
            private DebtTypeDataTable tableDebtType;
            
            internal DebtTypeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableDebtType = ((DebtTypeDataTable)(this.Table));
            }
            
            public int DebtTypeCode
            {
                get
                {
                    return ((int)(this[this.tableDebtType.DebtTypeCodeColumn]));
                }
                set
                {
                    this[this.tableDebtType.DebtTypeCodeColumn] = value;
                }
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableDebtType.DescriptionColumn]));
                }
                set
                {
                    this[this.tableDebtType.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDebtType.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDebtType.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDebtType.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDebtType.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDebtType.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDebtType.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableDebtType.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableDebtType.ExternalId3Column] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableDebtType.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableDebtType.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableDebtType.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableDebtType.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableDebtType.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableDebtType.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableDebtType.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableDebtType.ExternalId3Column] = System.Convert.DBNull;
            }
            
            public DebtRow[] GetDebtRows()
            {
                return ((DebtRow[])(this.GetChildRows(this.Table.ChildRelations["FKDebtTypeDebt"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DebtTypeRowChangeEvent : EventArgs
        {
            
            private DebtTypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public DebtTypeRowChangeEvent(DebtTypeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DebtTypeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EquityDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnEquityId;
            
            private Column columnIssuerId;
            
            private Column columnExchangeId;
            
            private Column columnSettlementId;
            
            private Column columnEquityTypeCode;
            
            private Column columnSharesOutstanding;
            
            internal EquityDataTable() : 
                    base("Equity")
            {
                this.InitClass();
            }
            
            internal EquityDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column EquityIdColumn
            {
                get
                {
                    return this.columnEquityId;
                }
            }
            
            public Column IssuerIdColumn
            {
                get
                {
                    return this.columnIssuerId;
                }
            }
            
            public Column ExchangeIdColumn
            {
                get
                {
                    return this.columnExchangeId;
                }
            }
            
            public Column SettlementIdColumn
            {
                get
                {
                    return this.columnSettlementId;
                }
            }
            
            public Column EquityTypeCodeColumn
            {
                get
                {
                    return this.columnEquityTypeCode;
                }
            }
            
            public Column SharesOutstandingColumn
            {
                get
                {
                    return this.columnSharesOutstanding;
                }
            }
            
            public EquityRow this[int index]
            {
                get
                {
                    return ((EquityRow)(this.Rows[index]));
                }
            }
            
            public event EquityRowChangeEventHandler EquityRowChanged;
            
            public event EquityRowChangeEventHandler EquityRowChanging;
            
            public event EquityRowChangeEventHandler EquityRowDeleted;
            
            public event EquityRowChangeEventHandler EquityRowDeleting;
            
            public void AddEquityRow(EquityRow row)
            {
                this.Rows.Add(row);
            }
            
            public EquityRow AddEquityRow(SecurityRow parentSecurityRowByFKSecurityEquityEquityId, int IssuerId, ExchangeRow parentExchangeRowByFKExchangeEquity, SecurityRow parentSecurityRowByFKSecurityEquitySettlementId, EquityTypeRow parentEquityTypeRowByFKEquityTypeEquity, decimal SharesOutstanding)
            {
                EquityRow rowEquityRow = ((EquityRow)(this.NewRow()));
                rowEquityRow.ItemArray = new object[] {
                        parentSecurityRowByFKSecurityEquityEquityId[17],
                        IssuerId,
                        parentExchangeRowByFKExchangeEquity[0],
                        parentSecurityRowByFKSecurityEquitySettlementId[17],
                        parentEquityTypeRowByFKEquityTypeEquity[0],
                        SharesOutstanding};
                this.Rows.Add(rowEquityRow);
                return rowEquityRow;
            }
            
            public EquityRow FindByEquityId(int EquityId)
            {
                return ((EquityRow)(this.Rows.Find(new object[] {
                            EquityId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                EquityDataTable cln = ((EquityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new EquityDataTable();
            }
            
            internal void InitVars()
            {
                this.columnEquityId = this.Columns["EquityId"];
                this.columnIssuerId = this.Columns["IssuerId"];
                this.columnExchangeId = this.Columns["ExchangeId"];
                this.columnSettlementId = this.Columns["SettlementId"];
                this.columnEquityTypeCode = this.Columns["EquityTypeCode"];
                this.columnSharesOutstanding = this.Columns["SharesOutstanding"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnEquityId = new Column("EquityId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEquityId);
                this.columnIssuerId = new Column("IssuerId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIssuerId);
                this.columnExchangeId = new Column("ExchangeId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExchangeId);
                this.columnSettlementId = new Column("SettlementId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSettlementId);
                this.columnEquityTypeCode = new Column("EquityTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEquityTypeCode);
                this.columnSharesOutstanding = new Column("SharesOutstanding", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSharesOutstanding);
                this.Constraints.Add(new UniqueConstraint("PKEquity", new DataColumn[] {
                                this.columnEquityId}, true));
                this.columnEquityId.AllowDBNull = false;
                this.columnEquityId.Unique = true;
                this.columnSettlementId.AllowDBNull = false;
                this.columnEquityTypeCode.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.EquityLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Equity"));
                }
            }
            
            public EquityRow NewEquityRow()
            {
                return ((EquityRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new EquityRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(EquityRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.EquityRowChanged != null))
                {
                    this.EquityRowChanged(this, new EquityRowChangeEvent(((EquityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.EquityRowChanging != null))
                {
                    this.EquityRowChanging(this, new EquityRowChangeEvent(((EquityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.EquityRowDeleted != null))
                {
                    this.EquityRowDeleted(this, new EquityRowChangeEvent(((EquityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.EquityRowDeleting != null))
                {
                    this.EquityRowDeleting(this, new EquityRowChangeEvent(((EquityRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEquityRow(EquityRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EquityRow : Row
        {
            
            private EquityDataTable tableEquity;
            
            internal EquityRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableEquity = ((EquityDataTable)(this.Table));
            }
            
            public int EquityId
            {
                get
                {
                    return ((int)(this[this.tableEquity.EquityIdColumn]));
                }
                set
                {
                    this[this.tableEquity.EquityIdColumn] = value;
                }
            }
            
            public int IssuerId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableEquity.IssuerIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableEquity.IssuerIdColumn] = value;
                }
            }
            
            public int ExchangeId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableEquity.ExchangeIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableEquity.ExchangeIdColumn] = value;
                }
            }
            
            public int SettlementId
            {
                get
                {
                    return ((int)(this[this.tableEquity.SettlementIdColumn]));
                }
                set
                {
                    this[this.tableEquity.SettlementIdColumn] = value;
                }
            }
            
            public int EquityTypeCode
            {
                get
                {
                    return ((int)(this[this.tableEquity.EquityTypeCodeColumn]));
                }
                set
                {
                    this[this.tableEquity.EquityTypeCodeColumn] = value;
                }
            }
            
            public decimal SharesOutstanding
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableEquity.SharesOutstandingColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableEquity.SharesOutstandingColumn] = value;
                }
            }
            
            public EquityTypeRow EquityTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockEquityType.IsReaderLockHeld || DataSetMarket.lockEquityType.IsWriterLockHeld))
                    {
                        return ((EquityTypeRow)(this.GetParentRow(this.Table.ParentRelations["FKEquityTypeEquity"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "EquityType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKEquityTypeEquity"]);
                }
            }
            
            public ExchangeRow ExchangeRow
            {
                get
                {
                    if ((DataSetMarket.lockExchange.IsReaderLockHeld || DataSetMarket.lockExchange.IsWriterLockHeld))
                    {
                        return ((ExchangeRow)(this.GetParentRow(this.Table.ParentRelations["FKExchangeEquity"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Exchange"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKExchangeEquity"]);
                }
            }
            
            public SecurityRow SecurityRowByFKSecurityEquityEquityId
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["FKSecurityEquityEquityId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKSecurityEquityEquityId"]);
                }
            }
            
            public SecurityRow SecurityRowByFKSecurityEquitySettlementId
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["FKSecurityEquitySettlementId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKSecurityEquitySettlementId"]);
                }
            }
            
            public bool IsIssuerIdNull()
            {
                return this.IsNull(this.tableEquity.IssuerIdColumn);
            }
            
            public void SetIssuerIdNull()
            {
                this[this.tableEquity.IssuerIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsExchangeIdNull()
            {
                return this.IsNull(this.tableEquity.ExchangeIdColumn);
            }
            
            public void SetExchangeIdNull()
            {
                this[this.tableEquity.ExchangeIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsSharesOutstandingNull()
            {
                return this.IsNull(this.tableEquity.SharesOutstandingColumn);
            }
            
            public void SetSharesOutstandingNull()
            {
                this[this.tableEquity.SharesOutstandingColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EquityRowChangeEvent : EventArgs
        {
            
            private EquityRow eventRow;
            
            private DataRowAction eventAction;
            
            public EquityRowChangeEvent(EquityRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public EquityRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EquityTypeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnEquityTypeCode;
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private DataView viewUKEquityTypeExternalId0;
            
            private DataView viewUKEquityTypeExternalId1;
            
            private DataView viewUKEquityTypeExternalId2;
            
            private DataView viewUKEquityTypeExternalId3;
            
            internal EquityTypeDataTable() : 
                    base("EquityType")
            {
                this.InitClass();
            }
            
            internal EquityTypeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column EquityTypeCodeColumn
            {
                get
                {
                    return this.columnEquityTypeCode;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public DataView UKEquityTypeExternalId0
            {
                get
                {
                    return this.viewUKEquityTypeExternalId0;
                }
            }
            
            public DataView UKEquityTypeExternalId1
            {
                get
                {
                    return this.viewUKEquityTypeExternalId1;
                }
            }
            
            public DataView UKEquityTypeExternalId2
            {
                get
                {
                    return this.viewUKEquityTypeExternalId2;
                }
            }
            
            public DataView UKEquityTypeExternalId3
            {
                get
                {
                    return this.viewUKEquityTypeExternalId3;
                }
            }
            
            public EquityTypeRow this[int index]
            {
                get
                {
                    return ((EquityTypeRow)(this.Rows[index]));
                }
            }
            
            public event EquityTypeRowChangeEventHandler EquityTypeRowChanged;
            
            public event EquityTypeRowChangeEventHandler EquityTypeRowChanging;
            
            public event EquityTypeRowChangeEventHandler EquityTypeRowDeleted;
            
            public event EquityTypeRowChangeEventHandler EquityTypeRowDeleting;
            
            public void AddEquityTypeRow(EquityTypeRow row)
            {
                this.Rows.Add(row);
            }
            
            public EquityTypeRow AddEquityTypeRow(int EquityTypeCode, string Description, string ExternalId0, string ExternalId1, string ExternalId2, string ExternalId3)
            {
                EquityTypeRow rowEquityTypeRow = ((EquityTypeRow)(this.NewRow()));
                rowEquityTypeRow.ItemArray = new object[] {
                        EquityTypeCode,
                        Description,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3};
                this.Rows.Add(rowEquityTypeRow);
                return rowEquityTypeRow;
            }
            
            public EquityTypeRow FindByEquityTypeCode(int EquityTypeCode)
            {
                return ((EquityTypeRow)(this.Rows.Find(new object[] {
                            EquityTypeCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                EquityTypeDataTable cln = ((EquityTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new EquityTypeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnEquityTypeCode = this.Columns["EquityTypeCode"];
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnEquityTypeCode = new Column("EquityTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEquityTypeCode);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.Constraints.Add(new UniqueConstraint("PKEquityType", new DataColumn[] {
                                this.columnEquityTypeCode}, true));
                this.viewUKEquityTypeExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewUKEquityTypeExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.viewUKEquityTypeExternalId2 = new DataView(this, null, "ExternalId2", DataViewRowState.CurrentRows);
                this.viewUKEquityTypeExternalId3 = new DataView(this, null, "ExternalId3", DataViewRowState.CurrentRows);
                this.columnEquityTypeCode.AllowDBNull = false;
                this.columnEquityTypeCode.Unique = true;
                this.columnDescription.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.EquityTypeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "EquityType"));
                }
            }
            
            public EquityTypeRow NewEquityTypeRow()
            {
                return ((EquityTypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new EquityTypeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(EquityTypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.EquityTypeRowChanged != null))
                {
                    this.EquityTypeRowChanged(this, new EquityTypeRowChangeEvent(((EquityTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.EquityTypeRowChanging != null))
                {
                    this.EquityTypeRowChanging(this, new EquityTypeRowChangeEvent(((EquityTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.EquityTypeRowDeleted != null))
                {
                    this.EquityTypeRowDeleted(this, new EquityTypeRowChangeEvent(((EquityTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.EquityTypeRowDeleting != null))
                {
                    this.EquityTypeRowDeleting(this, new EquityTypeRowChangeEvent(((EquityTypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEquityTypeRow(EquityTypeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EquityTypeRow : Row
        {
            
            private EquityTypeDataTable tableEquityType;
            
            internal EquityTypeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableEquityType = ((EquityTypeDataTable)(this.Table));
            }
            
            public int EquityTypeCode
            {
                get
                {
                    return ((int)(this[this.tableEquityType.EquityTypeCodeColumn]));
                }
                set
                {
                    this[this.tableEquityType.EquityTypeCodeColumn] = value;
                }
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableEquityType.DescriptionColumn]));
                }
                set
                {
                    this[this.tableEquityType.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableEquityType.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableEquityType.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableEquityType.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableEquityType.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableEquityType.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableEquityType.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableEquityType.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableEquityType.ExternalId3Column] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableEquityType.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableEquityType.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableEquityType.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableEquityType.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableEquityType.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableEquityType.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableEquityType.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableEquityType.ExternalId3Column] = System.Convert.DBNull;
            }
            
            public EquityRow[] GetEquityRows()
            {
                return ((EquityRow[])(this.GetChildRows(this.Table.ChildRelations["FKEquityTypeEquity"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EquityTypeRowChangeEvent : EventArgs
        {
            
            private EquityTypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public EquityTypeRowChangeEvent(EquityTypeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public EquityTypeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ExchangeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnExchangeId;
            
            private Column columnName;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private DataView viewUKExchangeExternalId0;
            
            private DataView viewUKExchangeExternalId1;
            
            private DataView viewUKExchangeExternalId2;
            
            private DataView viewUKExchangeExternalId3;
            
            internal ExchangeDataTable() : 
                    base("Exchange")
            {
                this.InitClass();
            }
            
            internal ExchangeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ExchangeIdColumn
            {
                get
                {
                    return this.columnExchangeId;
                }
            }
            
            public Column NameColumn
            {
                get
                {
                    return this.columnName;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public DataView UKExchangeExternalId0
            {
                get
                {
                    return this.viewUKExchangeExternalId0;
                }
            }
            
            public DataView UKExchangeExternalId1
            {
                get
                {
                    return this.viewUKExchangeExternalId1;
                }
            }
            
            public DataView UKExchangeExternalId2
            {
                get
                {
                    return this.viewUKExchangeExternalId2;
                }
            }
            
            public DataView UKExchangeExternalId3
            {
                get
                {
                    return this.viewUKExchangeExternalId3;
                }
            }
            
            public ExchangeRow this[int index]
            {
                get
                {
                    return ((ExchangeRow)(this.Rows[index]));
                }
            }
            
            public event ExchangeRowChangeEventHandler ExchangeRowChanged;
            
            public event ExchangeRowChangeEventHandler ExchangeRowChanging;
            
            public event ExchangeRowChangeEventHandler ExchangeRowDeleted;
            
            public event ExchangeRowChangeEventHandler ExchangeRowDeleting;
            
            public void AddExchangeRow(ExchangeRow row)
            {
                this.Rows.Add(row);
            }
            
            public ExchangeRow AddExchangeRow(string Name, string ExternalId0, string ExternalId1, string ExternalId2, string ExternalId3)
            {
                ExchangeRow rowExchangeRow = ((ExchangeRow)(this.NewRow()));
                rowExchangeRow.ItemArray = new object[] {
                        null,
                        Name,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3};
                this.Rows.Add(rowExchangeRow);
                return rowExchangeRow;
            }
            
            public ExchangeRow FindByExchangeId(int ExchangeId)
            {
                return ((ExchangeRow)(this.Rows.Find(new object[] {
                            ExchangeId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                ExchangeDataTable cln = ((ExchangeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new ExchangeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnExchangeId = this.Columns["ExchangeId"];
                this.columnName = this.Columns["Name"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnExchangeId = new Column("ExchangeId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExchangeId);
                this.columnName = new Column("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.Constraints.Add(new UniqueConstraint("PKExchange", new DataColumn[] {
                                this.columnExchangeId}, true));
                this.viewUKExchangeExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewUKExchangeExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.viewUKExchangeExternalId2 = new DataView(this, null, "ExternalId2", DataViewRowState.CurrentRows);
                this.viewUKExchangeExternalId3 = new DataView(this, null, "ExternalId3", DataViewRowState.CurrentRows);
                this.columnExchangeId.AutoIncrement = true;
                this.columnExchangeId.AllowDBNull = false;
                this.columnExchangeId.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.ExchangeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Exchange"));
                }
            }
            
            public ExchangeRow NewExchangeRow()
            {
                return ((ExchangeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ExchangeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(ExchangeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ExchangeRowChanged != null))
                {
                    this.ExchangeRowChanged(this, new ExchangeRowChangeEvent(((ExchangeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ExchangeRowChanging != null))
                {
                    this.ExchangeRowChanging(this, new ExchangeRowChangeEvent(((ExchangeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ExchangeRowDeleted != null))
                {
                    this.ExchangeRowDeleted(this, new ExchangeRowChangeEvent(((ExchangeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ExchangeRowDeleting != null))
                {
                    this.ExchangeRowDeleting(this, new ExchangeRowChangeEvent(((ExchangeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveExchangeRow(ExchangeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ExchangeRow : Row
        {
            
            private ExchangeDataTable tableExchange;
            
            internal ExchangeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableExchange = ((ExchangeDataTable)(this.Table));
            }
            
            public int ExchangeId
            {
                get
                {
                    return ((int)(this[this.tableExchange.ExchangeIdColumn]));
                }
                set
                {
                    this[this.tableExchange.ExchangeIdColumn] = value;
                }
            }
            
            public string Name
            {
                get
                {
                    return ((string)(this[this.tableExchange.NameColumn]));
                }
                set
                {
                    this[this.tableExchange.NameColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableExchange.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableExchange.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableExchange.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableExchange.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableExchange.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableExchange.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableExchange.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableExchange.ExternalId3Column] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableExchange.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableExchange.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableExchange.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableExchange.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableExchange.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableExchange.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableExchange.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableExchange.ExternalId3Column] = System.Convert.DBNull;
            }
            
            public EquityRow[] GetEquityRows()
            {
                return ((EquityRow[])(this.GetChildRows(this.Table.ChildRelations["FKExchangeEquity"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ExchangeRowChangeEvent : EventArgs
        {
            
            private ExchangeRow eventRow;
            
            private DataRowAction eventAction;
            
            public ExchangeRowChangeEvent(ExchangeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ExchangeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ExecutionDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnExecutionId;
            
            private Column columnBlockOrderId;
            
            private Column columnBrokerId;
            
            private Column columnIsDeleted;
            
            private Column columnQuantity;
            
            private Column columnPrice;
            
            private Column columnCommission;
            
            private Column columnAccruedInterest;
            
            private Column columnUserFee0;
            
            private Column columnUserFee1;
            
            private Column columnUserFee2;
            
            private Column columnUserFee3;
            
            private Column columnTradeDate;
            
            private Column columnSettlementDate;
            
            private Column columnCreatedTime;
            
            private Column columnCreatedUserId;
            
            private Column columnModifiedTime;
            
            private Column columnModifiedUserId;
            
            internal ExecutionDataTable() : 
                    base("Execution")
            {
                this.InitClass();
            }
            
            internal ExecutionDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ExecutionIdColumn
            {
                get
                {
                    return this.columnExecutionId;
                }
            }
            
            public Column BlockOrderIdColumn
            {
                get
                {
                    return this.columnBlockOrderId;
                }
            }
            
            public Column BrokerIdColumn
            {
                get
                {
                    return this.columnBrokerId;
                }
            }
            
            public Column IsDeletedColumn
            {
                get
                {
                    return this.columnIsDeleted;
                }
            }
            
            public Column QuantityColumn
            {
                get
                {
                    return this.columnQuantity;
                }
            }
            
            public Column PriceColumn
            {
                get
                {
                    return this.columnPrice;
                }
            }
            
            public Column CommissionColumn
            {
                get
                {
                    return this.columnCommission;
                }
            }
            
            public Column AccruedInterestColumn
            {
                get
                {
                    return this.columnAccruedInterest;
                }
            }
            
            public Column UserFee0Column
            {
                get
                {
                    return this.columnUserFee0;
                }
            }
            
            public Column UserFee1Column
            {
                get
                {
                    return this.columnUserFee1;
                }
            }
            
            public Column UserFee2Column
            {
                get
                {
                    return this.columnUserFee2;
                }
            }
            
            public Column UserFee3Column
            {
                get
                {
                    return this.columnUserFee3;
                }
            }
            
            public Column TradeDateColumn
            {
                get
                {
                    return this.columnTradeDate;
                }
            }
            
            public Column SettlementDateColumn
            {
                get
                {
                    return this.columnSettlementDate;
                }
            }
            
            public Column CreatedTimeColumn
            {
                get
                {
                    return this.columnCreatedTime;
                }
            }
            
            public Column CreatedUserIdColumn
            {
                get
                {
                    return this.columnCreatedUserId;
                }
            }
            
            public Column ModifiedTimeColumn
            {
                get
                {
                    return this.columnModifiedTime;
                }
            }
            
            public Column ModifiedUserIdColumn
            {
                get
                {
                    return this.columnModifiedUserId;
                }
            }
            
            public ExecutionRow this[int index]
            {
                get
                {
                    return ((ExecutionRow)(this.Rows[index]));
                }
            }
            
            public event ExecutionRowChangeEventHandler ExecutionRowChanged;
            
            public event ExecutionRowChangeEventHandler ExecutionRowChanging;
            
            public event ExecutionRowChangeEventHandler ExecutionRowDeleted;
            
            public event ExecutionRowChangeEventHandler ExecutionRowDeleting;
            
            public void AddExecutionRow(ExecutionRow row)
            {
                this.Rows.Add(row);
            }
            
            public ExecutionRow AddExecutionRow(
                        BlockOrderRow parentBlockOrderRowByFKBlockOrderExecution, 
                        BrokerRow parentBrokerRowByFKBrokerExecution, 
                        bool IsDeleted, 
                        decimal Quantity, 
                        decimal Price, 
                        decimal Commission, 
                        decimal AccruedInterest, 
                        decimal UserFee0, 
                        decimal UserFee1, 
                        decimal UserFee2, 
                        decimal UserFee3, 
                        System.DateTime TradeDate, 
                        System.DateTime SettlementDate, 
                        System.DateTime CreatedTime, 
                        UserRow parentUserRowByFKUserExecutionCreatedUserId, 
                        System.DateTime ModifiedTime, 
                        UserRow parentUserRowByFKUserExecutionModifiedUserId)
            {
                ExecutionRow rowExecutionRow = ((ExecutionRow)(this.NewRow()));
                rowExecutionRow.ItemArray = new object[] {
                        null,
                        parentBlockOrderRowByFKBlockOrderExecution[0],
                        parentBrokerRowByFKBrokerExecution[17],
                        IsDeleted,
                        Quantity,
                        Price,
                        Commission,
                        AccruedInterest,
                        UserFee0,
                        UserFee1,
                        UserFee2,
                        UserFee3,
                        TradeDate,
                        SettlementDate,
                        CreatedTime,
                        parentUserRowByFKUserExecutionCreatedUserId[20],
                        ModifiedTime,
                        parentUserRowByFKUserExecutionModifiedUserId[20]};
                this.Rows.Add(rowExecutionRow);
                return rowExecutionRow;
            }
            
            public ExecutionRow FindByExecutionId(int ExecutionId)
            {
                return ((ExecutionRow)(this.Rows.Find(new object[] {
                            ExecutionId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                ExecutionDataTable cln = ((ExecutionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new ExecutionDataTable();
            }
            
            internal void InitVars()
            {
                this.columnExecutionId = this.Columns["ExecutionId"];
                this.columnBlockOrderId = this.Columns["BlockOrderId"];
                this.columnBrokerId = this.Columns["BrokerId"];
                this.columnIsDeleted = this.Columns["IsDeleted"];
                this.columnQuantity = this.Columns["Quantity"];
                this.columnPrice = this.Columns["Price"];
                this.columnCommission = this.Columns["Commission"];
                this.columnAccruedInterest = this.Columns["AccruedInterest"];
                this.columnUserFee0 = this.Columns["UserFee0"];
                this.columnUserFee1 = this.Columns["UserFee1"];
                this.columnUserFee2 = this.Columns["UserFee2"];
                this.columnUserFee3 = this.Columns["UserFee3"];
                this.columnTradeDate = this.Columns["TradeDate"];
                this.columnSettlementDate = this.Columns["SettlementDate"];
                this.columnCreatedTime = this.Columns["CreatedTime"];
                this.columnCreatedUserId = this.Columns["CreatedUserId"];
                this.columnModifiedTime = this.Columns["ModifiedTime"];
                this.columnModifiedUserId = this.Columns["ModifiedUserId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnExecutionId = new Column("ExecutionId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExecutionId);
                this.columnBlockOrderId = new Column("BlockOrderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlockOrderId);
                this.columnBrokerId = new Column("BrokerId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBrokerId);
                this.columnIsDeleted = new Column("IsDeleted", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsDeleted);
                this.columnQuantity = new Column("Quantity", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQuantity);
                this.columnPrice = new Column("Price", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrice);
                this.columnCommission = new Column("Commission", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCommission);
                this.columnAccruedInterest = new Column("AccruedInterest", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccruedInterest);
                this.columnUserFee0 = new Column("UserFee0", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserFee0);
                this.columnUserFee1 = new Column("UserFee1", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserFee1);
                this.columnUserFee2 = new Column("UserFee2", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserFee2);
                this.columnUserFee3 = new Column("UserFee3", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserFee3);
                this.columnTradeDate = new Column("TradeDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTradeDate);
                this.columnSettlementDate = new Column("SettlementDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSettlementDate);
                this.columnCreatedTime = new Column("CreatedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedTime);
                this.columnCreatedUserId = new Column("CreatedUserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedUserId);
                this.columnModifiedTime = new Column("ModifiedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedTime);
                this.columnModifiedUserId = new Column("ModifiedUserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedUserId);
                this.Constraints.Add(new UniqueConstraint("PKExecution", new DataColumn[] {
                                this.columnExecutionId}, true));
                this.columnExecutionId.AutoIncrement = true;
                this.columnExecutionId.AllowDBNull = false;
                this.columnExecutionId.Unique = true;
                this.columnBlockOrderId.AllowDBNull = false;
                this.columnBrokerId.AllowDBNull = false;
                this.columnIsDeleted.AllowDBNull = false;
                this.columnIsDeleted.DefaultValue = false;
                this.columnQuantity.AllowDBNull = false;
                this.columnPrice.AllowDBNull = false;
                this.columnCommission.AllowDBNull = false;
                this.columnCommission.DefaultValue = 0.0m;
                this.columnAccruedInterest.AllowDBNull = false;
                this.columnAccruedInterest.DefaultValue = 0.0m;
                this.columnUserFee0.AllowDBNull = false;
                this.columnUserFee0.DefaultValue = 0.0m;
                this.columnUserFee1.AllowDBNull = false;
                this.columnUserFee1.DefaultValue = 0.0m;
                this.columnUserFee2.AllowDBNull = false;
                this.columnUserFee2.DefaultValue = 0.0m;
                this.columnUserFee3.AllowDBNull = false;
                this.columnUserFee3.DefaultValue = 0.0m;
                this.columnTradeDate.AllowDBNull = false;
                this.columnSettlementDate.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.ExecutionLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Execution"));
                }
            }
            
            public ExecutionRow NewExecutionRow()
            {
                return ((ExecutionRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ExecutionRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(ExecutionRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ExecutionRowChanged != null))
                {
                    this.ExecutionRowChanged(this, new ExecutionRowChangeEvent(((ExecutionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ExecutionRowChanging != null))
                {
                    this.ExecutionRowChanging(this, new ExecutionRowChangeEvent(((ExecutionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ExecutionRowDeleted != null))
                {
                    this.ExecutionRowDeleted(this, new ExecutionRowChangeEvent(((ExecutionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ExecutionRowDeleting != null))
                {
                    this.ExecutionRowDeleting(this, new ExecutionRowChangeEvent(((ExecutionRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveExecutionRow(ExecutionRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ExecutionRow : Row
        {
            
            private ExecutionDataTable tableExecution;
            
            internal ExecutionRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableExecution = ((ExecutionDataTable)(this.Table));
            }
            
            public int ExecutionId
            {
                get
                {
                    return ((int)(this[this.tableExecution.ExecutionIdColumn]));
                }
                set
                {
                    this[this.tableExecution.ExecutionIdColumn] = value;
                }
            }
            
            public int BlockOrderId
            {
                get
                {
                    return ((int)(this[this.tableExecution.BlockOrderIdColumn]));
                }
                set
                {
                    this[this.tableExecution.BlockOrderIdColumn] = value;
                }
            }
            
            public int BrokerId
            {
                get
                {
                    return ((int)(this[this.tableExecution.BrokerIdColumn]));
                }
                set
                {
                    this[this.tableExecution.BrokerIdColumn] = value;
                }
            }
            
            public bool IsDeleted
            {
                get
                {
                    return ((bool)(this[this.tableExecution.IsDeletedColumn]));
                }
                set
                {
                    this[this.tableExecution.IsDeletedColumn] = value;
                }
            }
            
            public decimal Quantity
            {
                get
                {
                    return ((decimal)(this[this.tableExecution.QuantityColumn]));
                }
                set
                {
                    this[this.tableExecution.QuantityColumn] = value;
                }
            }
            
            public decimal Price
            {
                get
                {
                    return ((decimal)(this[this.tableExecution.PriceColumn]));
                }
                set
                {
                    this[this.tableExecution.PriceColumn] = value;
                }
            }
            
            public decimal Commission
            {
                get
                {
                    return ((decimal)(this[this.tableExecution.CommissionColumn]));
                }
                set
                {
                    this[this.tableExecution.CommissionColumn] = value;
                }
            }
            
            public decimal AccruedInterest
            {
                get
                {
                    return ((decimal)(this[this.tableExecution.AccruedInterestColumn]));
                }
                set
                {
                    this[this.tableExecution.AccruedInterestColumn] = value;
                }
            }
            
            public decimal UserFee0
            {
                get
                {
                    return ((decimal)(this[this.tableExecution.UserFee0Column]));
                }
                set
                {
                    this[this.tableExecution.UserFee0Column] = value;
                }
            }
            
            public decimal UserFee1
            {
                get
                {
                    return ((decimal)(this[this.tableExecution.UserFee1Column]));
                }
                set
                {
                    this[this.tableExecution.UserFee1Column] = value;
                }
            }
            
            public decimal UserFee2
            {
                get
                {
                    return ((decimal)(this[this.tableExecution.UserFee2Column]));
                }
                set
                {
                    this[this.tableExecution.UserFee2Column] = value;
                }
            }
            
            public decimal UserFee3
            {
                get
                {
                    return ((decimal)(this[this.tableExecution.UserFee3Column]));
                }
                set
                {
                    this[this.tableExecution.UserFee3Column] = value;
                }
            }
            
            public System.DateTime TradeDate
            {
                get
                {
                    return ((System.DateTime)(this[this.tableExecution.TradeDateColumn]));
                }
                set
                {
                    this[this.tableExecution.TradeDateColumn] = value;
                }
            }
            
            public System.DateTime SettlementDate
            {
                get
                {
                    return ((System.DateTime)(this[this.tableExecution.SettlementDateColumn]));
                }
                set
                {
                    this[this.tableExecution.SettlementDateColumn] = value;
                }
            }
            
            public System.DateTime CreatedTime
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(this[this.tableExecution.CreatedTimeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableExecution.CreatedTimeColumn] = value;
                }
            }
            
            public int CreatedUserId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableExecution.CreatedUserIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableExecution.CreatedUserIdColumn] = value;
                }
            }
            
            public System.DateTime ModifiedTime
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(this[this.tableExecution.ModifiedTimeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableExecution.ModifiedTimeColumn] = value;
                }
            }
            
            public int ModifiedUserId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableExecution.ModifiedUserIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableExecution.ModifiedUserIdColumn] = value;
                }
            }
            
            public BlockOrderRow BlockOrderRow
            {
                get
                {
                    if ((DataSetMarket.lockBlockOrder.IsReaderLockHeld || DataSetMarket.lockBlockOrder.IsWriterLockHeld))
                    {
                        return ((BlockOrderRow)(this.GetParentRow(this.Table.ParentRelations["FKBlockOrderExecution"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "BlockOrder"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKBlockOrderExecution"]);
                }
            }
            
            public BrokerRow BrokerRow
            {
                get
                {
                    if ((DataSetMarket.lockBroker.IsReaderLockHeld || DataSetMarket.lockBroker.IsWriterLockHeld))
                    {
                        return ((BrokerRow)(this.GetParentRow(this.Table.ParentRelations["FKBrokerExecution"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Broker"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKBrokerExecution"]);
                }
            }
            
            public UserRow UserRowByFKUserExecutionCreatedUserId
            {
                get
                {
                    if ((DataSetMarket.lockUser.IsReaderLockHeld || DataSetMarket.lockUser.IsWriterLockHeld))
                    {
                        return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["FKUserExecutionCreatedUserId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "User"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKUserExecutionCreatedUserId"]);
                }
            }
            
            public UserRow UserRowByFKUserExecutionModifiedUserId
            {
                get
                {
                    if ((DataSetMarket.lockUser.IsReaderLockHeld || DataSetMarket.lockUser.IsWriterLockHeld))
                    {
                        return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["FKUserExecutionModifiedUserId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "User"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKUserExecutionModifiedUserId"]);
                }
            }
            
            public bool IsCreatedTimeNull()
            {
                return this.IsNull(this.tableExecution.CreatedTimeColumn);
            }
            
            public void SetCreatedTimeNull()
            {
                this[this.tableExecution.CreatedTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCreatedUserIdNull()
            {
                return this.IsNull(this.tableExecution.CreatedUserIdColumn);
            }
            
            public void SetCreatedUserIdNull()
            {
                this[this.tableExecution.CreatedUserIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsModifiedTimeNull()
            {
                return this.IsNull(this.tableExecution.ModifiedTimeColumn);
            }
            
            public void SetModifiedTimeNull()
            {
                this[this.tableExecution.ModifiedTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsModifiedUserIdNull()
            {
                return this.IsNull(this.tableExecution.ModifiedUserIdColumn);
            }
            
            public void SetModifiedUserIdNull()
            {
                this[this.tableExecution.ModifiedUserIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ExecutionRowChangeEvent : EventArgs
        {
            
            private ExecutionRow eventRow;
            
            private DataRowAction eventAction;
            
            public ExecutionRowChangeEvent(ExecutionRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ExecutionRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FolderDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnFolderId;
            
            internal FolderDataTable() : 
                    base("Folder")
            {
                this.InitClass();
            }
            
            internal FolderDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column FolderIdColumn
            {
                get
                {
                    return this.columnFolderId;
                }
            }
            
            public FolderRow this[int index]
            {
                get
                {
                    return ((FolderRow)(this.Rows[index]));
                }
            }
            
            public event FolderRowChangeEventHandler FolderRowChanged;
            
            public event FolderRowChangeEventHandler FolderRowChanging;
            
            public event FolderRowChangeEventHandler FolderRowDeleted;
            
            public event FolderRowChangeEventHandler FolderRowDeleting;
            
            public void AddFolderRow(FolderRow row)
            {
                this.Rows.Add(row);
            }
            
            public FolderRow AddFolderRow(ObjectRow parentObjectRowByObjectFolder)
            {
                FolderRow rowFolderRow = ((FolderRow)(this.NewRow()));
                rowFolderRow.ItemArray = new object[] {
                        parentObjectRowByObjectFolder[12]};
                this.Rows.Add(rowFolderRow);
                return rowFolderRow;
            }
            
            public FolderRow FindByFolderId(int FolderId)
            {
                return ((FolderRow)(this.Rows.Find(new object[] {
                            FolderId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                FolderDataTable cln = ((FolderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new FolderDataTable();
            }
            
            internal void InitVars()
            {
                this.columnFolderId = this.Columns["FolderId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnFolderId = new Column("FolderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFolderId);
                this.Constraints.Add(new UniqueConstraint("KeyFolder", new DataColumn[] {
                                this.columnFolderId}, true));
                this.columnFolderId.AllowDBNull = false;
                this.columnFolderId.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.FolderLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Folder"));
                }
            }
            
            public FolderRow NewFolderRow()
            {
                return ((FolderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new FolderRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(FolderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.FolderRowChanged != null))
                {
                    this.FolderRowChanged(this, new FolderRowChangeEvent(((FolderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.FolderRowChanging != null))
                {
                    this.FolderRowChanging(this, new FolderRowChangeEvent(((FolderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.FolderRowDeleted != null))
                {
                    this.FolderRowDeleted(this, new FolderRowChangeEvent(((FolderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.FolderRowDeleting != null))
                {
                    this.FolderRowDeleting(this, new FolderRowChangeEvent(((FolderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFolderRow(FolderRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FolderRow : Row
        {
            
            private FolderDataTable tableFolder;
            
            internal FolderRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableFolder = ((FolderDataTable)(this.Table));
            }
            
            public int FolderId
            {
                get
                {
                    return ((int)(this[this.tableFolder.FolderIdColumn]));
                }
                set
                {
                    this[this.tableFolder.FolderIdColumn] = value;
                }
            }
            
            public ObjectRow ObjectRow
            {
                get
                {
                    if ((DataSetMarket.lockObject.IsReaderLockHeld || DataSetMarket.lockObject.IsWriterLockHeld))
                    {
                        return ((ObjectRow)(this.GetParentRow(this.Table.ParentRelations["ObjectFolder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Object"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["ObjectFolder"]);
                }
            }
            
            public SystemFolderRow[] GetSystemFolderRows()
            {
                return ((SystemFolderRow[])(this.GetChildRows(this.Table.ChildRelations["FolderSystemFolder"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FolderRowChangeEvent : EventArgs
        {
            
            private FolderRow eventRow;
            
            private DataRowAction eventAction;
            
            public FolderRowChangeEvent(FolderRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FolderRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HolidayDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnHolidayId;
            
            private Column columnCountryId;
            
            private Column columnSecurityTypeCode;
            
            private Column columnDate;
            
            private Column columnHolidayTypeCode;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private DataView viewUKHolidayExternalId0;
            
            private DataView viewUKHolidayExternalId1;
            
            internal HolidayDataTable() : 
                    base("Holiday")
            {
                this.InitClass();
            }
            
            internal HolidayDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column HolidayIdColumn
            {
                get
                {
                    return this.columnHolidayId;
                }
            }
            
            public Column CountryIdColumn
            {
                get
                {
                    return this.columnCountryId;
                }
            }
            
            public Column SecurityTypeCodeColumn
            {
                get
                {
                    return this.columnSecurityTypeCode;
                }
            }
            
            public Column DateColumn
            {
                get
                {
                    return this.columnDate;
                }
            }
            
            public Column HolidayTypeCodeColumn
            {
                get
                {
                    return this.columnHolidayTypeCode;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public DataView UKHolidayExternalId0
            {
                get
                {
                    return this.viewUKHolidayExternalId0;
                }
            }
            
            public DataView UKHolidayExternalId1
            {
                get
                {
                    return this.viewUKHolidayExternalId1;
                }
            }
            
            public HolidayRow this[int index]
            {
                get
                {
                    return ((HolidayRow)(this.Rows[index]));
                }
            }
            
            public event HolidayRowChangeEventHandler HolidayRowChanged;
            
            public event HolidayRowChangeEventHandler HolidayRowChanging;
            
            public event HolidayRowChangeEventHandler HolidayRowDeleted;
            
            public event HolidayRowChangeEventHandler HolidayRowDeleting;
            
            public void AddHolidayRow(HolidayRow row)
            {
                this.Rows.Add(row);
            }
            
            public HolidayRow AddHolidayRow(CountryRow parentCountryRowByFKCountryHoliday, int SecurityTypeCode, System.DateTime Date, HolidayTypeRow parentHolidayTypeRowByFKHolidayTypeHoliday, string ExternalId0, string ExternalId1)
            {
                HolidayRow rowHolidayRow = ((HolidayRow)(this.NewRow()));
                rowHolidayRow.ItemArray = new object[] {
                        null,
                        parentCountryRowByFKCountryHoliday[0],
                        SecurityTypeCode,
                        Date,
                        parentHolidayTypeRowByFKHolidayTypeHoliday[0],
                        ExternalId0,
                        ExternalId1};
                this.Rows.Add(rowHolidayRow);
                return rowHolidayRow;
            }
            
            public HolidayRow FindByHolidayId(int HolidayId)
            {
                return ((HolidayRow)(this.Rows.Find(new object[] {
                            HolidayId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                HolidayDataTable cln = ((HolidayDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new HolidayDataTable();
            }
            
            internal void InitVars()
            {
                this.columnHolidayId = this.Columns["HolidayId"];
                this.columnCountryId = this.Columns["CountryId"];
                this.columnSecurityTypeCode = this.Columns["SecurityTypeCode"];
                this.columnDate = this.Columns["Date"];
                this.columnHolidayTypeCode = this.Columns["HolidayTypeCode"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnHolidayId = new Column("HolidayId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHolidayId);
                this.columnCountryId = new Column("CountryId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryId);
                this.columnSecurityTypeCode = new Column("SecurityTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityTypeCode);
                this.columnDate = new Column("Date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDate);
                this.columnHolidayTypeCode = new Column("HolidayTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHolidayTypeCode);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.Constraints.Add(new UniqueConstraint("PKHoliday", new DataColumn[] {
                                this.columnHolidayId}, true));
                this.viewUKHolidayExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewUKHolidayExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.columnHolidayId.AutoIncrement = true;
                this.columnHolidayId.AllowDBNull = false;
                this.columnHolidayId.Unique = true;
                this.columnCountryId.AllowDBNull = false;
                this.columnSecurityTypeCode.AllowDBNull = false;
                this.columnDate.AllowDBNull = false;
                this.columnHolidayTypeCode.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.HolidayLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Holiday"));
                }
            }
            
            public HolidayRow NewHolidayRow()
            {
                return ((HolidayRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new HolidayRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(HolidayRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.HolidayRowChanged != null))
                {
                    this.HolidayRowChanged(this, new HolidayRowChangeEvent(((HolidayRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.HolidayRowChanging != null))
                {
                    this.HolidayRowChanging(this, new HolidayRowChangeEvent(((HolidayRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.HolidayRowDeleted != null))
                {
                    this.HolidayRowDeleted(this, new HolidayRowChangeEvent(((HolidayRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.HolidayRowDeleting != null))
                {
                    this.HolidayRowDeleting(this, new HolidayRowChangeEvent(((HolidayRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveHolidayRow(HolidayRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HolidayRow : Row
        {
            
            private HolidayDataTable tableHoliday;
            
            internal HolidayRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableHoliday = ((HolidayDataTable)(this.Table));
            }
            
            public int HolidayId
            {
                get
                {
                    return ((int)(this[this.tableHoliday.HolidayIdColumn]));
                }
                set
                {
                    this[this.tableHoliday.HolidayIdColumn] = value;
                }
            }
            
            public int CountryId
            {
                get
                {
                    return ((int)(this[this.tableHoliday.CountryIdColumn]));
                }
                set
                {
                    this[this.tableHoliday.CountryIdColumn] = value;
                }
            }
            
            public int SecurityTypeCode
            {
                get
                {
                    return ((int)(this[this.tableHoliday.SecurityTypeCodeColumn]));
                }
                set
                {
                    this[this.tableHoliday.SecurityTypeCodeColumn] = value;
                }
            }
            
            public System.DateTime Date
            {
                get
                {
                    return ((System.DateTime)(this[this.tableHoliday.DateColumn]));
                }
                set
                {
                    this[this.tableHoliday.DateColumn] = value;
                }
            }
            
            public int HolidayTypeCode
            {
                get
                {
                    return ((int)(this[this.tableHoliday.HolidayTypeCodeColumn]));
                }
                set
                {
                    this[this.tableHoliday.HolidayTypeCodeColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableHoliday.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableHoliday.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableHoliday.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableHoliday.ExternalId1Column] = value;
                }
            }
            
            public CountryRow CountryRow
            {
                get
                {
                    if ((DataSetMarket.lockCountry.IsReaderLockHeld || DataSetMarket.lockCountry.IsWriterLockHeld))
                    {
                        return ((CountryRow)(this.GetParentRow(this.Table.ParentRelations["FKCountryHoliday"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Country"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKCountryHoliday"]);
                }
            }
            
            public HolidayTypeRow HolidayTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockHolidayType.IsReaderLockHeld || DataSetMarket.lockHolidayType.IsWriterLockHeld))
                    {
                        return ((HolidayTypeRow)(this.GetParentRow(this.Table.ParentRelations["FKHolidayTypeHoliday"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "HolidayType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKHolidayTypeHoliday"]);
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableHoliday.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableHoliday.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableHoliday.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableHoliday.ExternalId1Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HolidayRowChangeEvent : EventArgs
        {
            
            private HolidayRow eventRow;
            
            private DataRowAction eventAction;
            
            public HolidayRowChangeEvent(HolidayRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public HolidayRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HolidayTypeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnHolidayTypeCode;
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            internal HolidayTypeDataTable() : 
                    base("HolidayType")
            {
                this.InitClass();
            }
            
            internal HolidayTypeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column HolidayTypeCodeColumn
            {
                get
                {
                    return this.columnHolidayTypeCode;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public HolidayTypeRow this[int index]
            {
                get
                {
                    return ((HolidayTypeRow)(this.Rows[index]));
                }
            }
            
            public event HolidayTypeRowChangeEventHandler HolidayTypeRowChanged;
            
            public event HolidayTypeRowChangeEventHandler HolidayTypeRowChanging;
            
            public event HolidayTypeRowChangeEventHandler HolidayTypeRowDeleted;
            
            public event HolidayTypeRowChangeEventHandler HolidayTypeRowDeleting;
            
            public void AddHolidayTypeRow(HolidayTypeRow row)
            {
                this.Rows.Add(row);
            }
            
            public HolidayTypeRow AddHolidayTypeRow(int HolidayTypeCode, string Description, string ExternalId0, string ExternalId1, string ExternalId2, string ExternalId3)
            {
                HolidayTypeRow rowHolidayTypeRow = ((HolidayTypeRow)(this.NewRow()));
                rowHolidayTypeRow.ItemArray = new object[] {
                        HolidayTypeCode,
                        Description,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3};
                this.Rows.Add(rowHolidayTypeRow);
                return rowHolidayTypeRow;
            }
            
            public HolidayTypeRow FindByHolidayTypeCode(int HolidayTypeCode)
            {
                return ((HolidayTypeRow)(this.Rows.Find(new object[] {
                            HolidayTypeCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                HolidayTypeDataTable cln = ((HolidayTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new HolidayTypeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnHolidayTypeCode = this.Columns["HolidayTypeCode"];
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnHolidayTypeCode = new Column("HolidayTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHolidayTypeCode);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.Constraints.Add(new UniqueConstraint("PKHolidayType", new DataColumn[] {
                                this.columnHolidayTypeCode}, true));
                this.columnHolidayTypeCode.AllowDBNull = false;
                this.columnHolidayTypeCode.Unique = true;
                this.columnDescription.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.HolidayTypeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "HolidayType"));
                }
            }
            
            public HolidayTypeRow NewHolidayTypeRow()
            {
                return ((HolidayTypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new HolidayTypeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(HolidayTypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.HolidayTypeRowChanged != null))
                {
                    this.HolidayTypeRowChanged(this, new HolidayTypeRowChangeEvent(((HolidayTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.HolidayTypeRowChanging != null))
                {
                    this.HolidayTypeRowChanging(this, new HolidayTypeRowChangeEvent(((HolidayTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.HolidayTypeRowDeleted != null))
                {
                    this.HolidayTypeRowDeleted(this, new HolidayTypeRowChangeEvent(((HolidayTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.HolidayTypeRowDeleting != null))
                {
                    this.HolidayTypeRowDeleting(this, new HolidayTypeRowChangeEvent(((HolidayTypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveHolidayTypeRow(HolidayTypeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HolidayTypeRow : Row
        {
            
            private HolidayTypeDataTable tableHolidayType;
            
            internal HolidayTypeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableHolidayType = ((HolidayTypeDataTable)(this.Table));
            }
            
            public int HolidayTypeCode
            {
                get
                {
                    return ((int)(this[this.tableHolidayType.HolidayTypeCodeColumn]));
                }
                set
                {
                    this[this.tableHolidayType.HolidayTypeCodeColumn] = value;
                }
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableHolidayType.DescriptionColumn]));
                }
                set
                {
                    this[this.tableHolidayType.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableHolidayType.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableHolidayType.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableHolidayType.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableHolidayType.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableHolidayType.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableHolidayType.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableHolidayType.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableHolidayType.ExternalId3Column] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableHolidayType.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableHolidayType.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableHolidayType.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableHolidayType.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableHolidayType.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableHolidayType.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableHolidayType.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableHolidayType.ExternalId3Column] = System.Convert.DBNull;
            }
            
            public HolidayRow[] GetHolidayRows()
            {
                return ((HolidayRow[])(this.GetChildRows(this.Table.ChildRelations["FKHolidayTypeHoliday"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HolidayTypeRowChangeEvent : EventArgs
        {
            
            private HolidayTypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public HolidayTypeRowChangeEvent(HolidayTypeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public HolidayTypeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class IssuerDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnIssuerId;
            
            private Column columnCountryId;
            
            private Column columnProvinceId;
            
            private Column columnIssuerTypeCode;
            
            private Column columnAddress0;
            
            private Column columnAddress1;
            
            private Column columnAddress2;
            
            private Column columnCity;
            
            private Column columnPostalCode;
            
            private Column columnRating0;
            
            private Column columnRating1;
            
            private Column columnRating2;
            
            private Column columnRating3;
            
            private Column columnUserData0;
            
            private Column columnUserData1;
            
            private Column columnUserData2;
            
            private Column columnUserData3;
            
            private Column columnUserData4;
            
            private Column columnUserData5;
            
            private Column columnUserData6;
            
            private Column columnUserData7;
            
            internal IssuerDataTable() : 
                    base("Issuer")
            {
                this.InitClass();
            }
            
            internal IssuerDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column IssuerIdColumn
            {
                get
                {
                    return this.columnIssuerId;
                }
            }
            
            public Column CountryIdColumn
            {
                get
                {
                    return this.columnCountryId;
                }
            }
            
            public Column ProvinceIdColumn
            {
                get
                {
                    return this.columnProvinceId;
                }
            }
            
            public Column IssuerTypeCodeColumn
            {
                get
                {
                    return this.columnIssuerTypeCode;
                }
            }
            
            public Column Address0Column
            {
                get
                {
                    return this.columnAddress0;
                }
            }
            
            public Column Address1Column
            {
                get
                {
                    return this.columnAddress1;
                }
            }
            
            public Column Address2Column
            {
                get
                {
                    return this.columnAddress2;
                }
            }
            
            public Column CityColumn
            {
                get
                {
                    return this.columnCity;
                }
            }
            
            public Column PostalCodeColumn
            {
                get
                {
                    return this.columnPostalCode;
                }
            }
            
            public Column Rating0Column
            {
                get
                {
                    return this.columnRating0;
                }
            }
            
            public Column Rating1Column
            {
                get
                {
                    return this.columnRating1;
                }
            }
            
            public Column Rating2Column
            {
                get
                {
                    return this.columnRating2;
                }
            }
            
            public Column Rating3Column
            {
                get
                {
                    return this.columnRating3;
                }
            }
            
            public Column UserData0Column
            {
                get
                {
                    return this.columnUserData0;
                }
            }
            
            public Column UserData1Column
            {
                get
                {
                    return this.columnUserData1;
                }
            }
            
            public Column UserData2Column
            {
                get
                {
                    return this.columnUserData2;
                }
            }
            
            public Column UserData3Column
            {
                get
                {
                    return this.columnUserData3;
                }
            }
            
            public Column UserData4Column
            {
                get
                {
                    return this.columnUserData4;
                }
            }
            
            public Column UserData5Column
            {
                get
                {
                    return this.columnUserData5;
                }
            }
            
            public Column UserData6Column
            {
                get
                {
                    return this.columnUserData6;
                }
            }
            
            public Column UserData7Column
            {
                get
                {
                    return this.columnUserData7;
                }
            }
            
            public IssuerRow this[int index]
            {
                get
                {
                    return ((IssuerRow)(this.Rows[index]));
                }
            }
            
            public event IssuerRowChangeEventHandler IssuerRowChanged;
            
            public event IssuerRowChangeEventHandler IssuerRowChanging;
            
            public event IssuerRowChangeEventHandler IssuerRowDeleted;
            
            public event IssuerRowChangeEventHandler IssuerRowDeleting;
            
            public void AddIssuerRow(IssuerRow row)
            {
                this.Rows.Add(row);
            }
            
            public IssuerRow AddIssuerRow(
                        ObjectRow parentObjectRowByFKObjectIssuer, 
                        int CountryId, 
                        int ProvinceId, 
                        IssuerTypeRow parentIssuerTypeRowByFKIssuerTypeIssuer, 
                        string Address0, 
                        string Address1, 
                        string Address2, 
                        string City, 
                        string PostalCode, 
                        decimal Rating0, 
                        decimal Rating1, 
                        decimal Rating2, 
                        decimal Rating3, 
                        decimal UserData0, 
                        decimal UserData1, 
                        decimal UserData2, 
                        decimal UserData3, 
                        string UserData4, 
                        string UserData5, 
                        string UserData6, 
                        string UserData7)
            {
                IssuerRow rowIssuerRow = ((IssuerRow)(this.NewRow()));
                rowIssuerRow.ItemArray = new object[] {
                        parentObjectRowByFKObjectIssuer[12],
                        CountryId,
                        ProvinceId,
                        parentIssuerTypeRowByFKIssuerTypeIssuer[0],
                        Address0,
                        Address1,
                        Address2,
                        City,
                        PostalCode,
                        Rating0,
                        Rating1,
                        Rating2,
                        Rating3,
                        UserData0,
                        UserData1,
                        UserData2,
                        UserData3,
                        UserData4,
                        UserData5,
                        UserData6,
                        UserData7};
                this.Rows.Add(rowIssuerRow);
                return rowIssuerRow;
            }
            
            public IssuerRow FindByIssuerId(int IssuerId)
            {
                return ((IssuerRow)(this.Rows.Find(new object[] {
                            IssuerId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                IssuerDataTable cln = ((IssuerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new IssuerDataTable();
            }
            
            internal void InitVars()
            {
                this.columnIssuerId = this.Columns["IssuerId"];
                this.columnCountryId = this.Columns["CountryId"];
                this.columnProvinceId = this.Columns["ProvinceId"];
                this.columnIssuerTypeCode = this.Columns["IssuerTypeCode"];
                this.columnAddress0 = this.Columns["Address0"];
                this.columnAddress1 = this.Columns["Address1"];
                this.columnAddress2 = this.Columns["Address2"];
                this.columnCity = this.Columns["City"];
                this.columnPostalCode = this.Columns["PostalCode"];
                this.columnRating0 = this.Columns["Rating0"];
                this.columnRating1 = this.Columns["Rating1"];
                this.columnRating2 = this.Columns["Rating2"];
                this.columnRating3 = this.Columns["Rating3"];
                this.columnUserData0 = this.Columns["UserData0"];
                this.columnUserData1 = this.Columns["UserData1"];
                this.columnUserData2 = this.Columns["UserData2"];
                this.columnUserData3 = this.Columns["UserData3"];
                this.columnUserData4 = this.Columns["UserData4"];
                this.columnUserData5 = this.Columns["UserData5"];
                this.columnUserData6 = this.Columns["UserData6"];
                this.columnUserData7 = this.Columns["UserData7"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnIssuerId = new Column("IssuerId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIssuerId);
                this.columnCountryId = new Column("CountryId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryId);
                this.columnProvinceId = new Column("ProvinceId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProvinceId);
                this.columnIssuerTypeCode = new Column("IssuerTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIssuerTypeCode);
                this.columnAddress0 = new Column("Address0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress0);
                this.columnAddress1 = new Column("Address1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new Column("Address2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddress2);
                this.columnCity = new Column("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnPostalCode = new Column("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPostalCode);
                this.columnRating0 = new Column("Rating0", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRating0);
                this.columnRating1 = new Column("Rating1", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRating1);
                this.columnRating2 = new Column("Rating2", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRating2);
                this.columnRating3 = new Column("Rating3", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRating3);
                this.columnUserData0 = new Column("UserData0", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData0);
                this.columnUserData1 = new Column("UserData1", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData1);
                this.columnUserData2 = new Column("UserData2", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData2);
                this.columnUserData3 = new Column("UserData3", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData3);
                this.columnUserData4 = new Column("UserData4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData4);
                this.columnUserData5 = new Column("UserData5", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData5);
                this.columnUserData6 = new Column("UserData6", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData6);
                this.columnUserData7 = new Column("UserData7", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData7);
                this.Constraints.Add(new UniqueConstraint("PKIssuer", new DataColumn[] {
                                this.columnIssuerId}, true));
                this.columnIssuerId.AllowDBNull = false;
                this.columnIssuerId.Unique = true;
                this.columnIssuerTypeCode.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.IssuerLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Issuer"));
                }
            }
            
            public IssuerRow NewIssuerRow()
            {
                return ((IssuerRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new IssuerRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(IssuerRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.IssuerRowChanged != null))
                {
                    this.IssuerRowChanged(this, new IssuerRowChangeEvent(((IssuerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.IssuerRowChanging != null))
                {
                    this.IssuerRowChanging(this, new IssuerRowChangeEvent(((IssuerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.IssuerRowDeleted != null))
                {
                    this.IssuerRowDeleted(this, new IssuerRowChangeEvent(((IssuerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.IssuerRowDeleting != null))
                {
                    this.IssuerRowDeleting(this, new IssuerRowChangeEvent(((IssuerRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveIssuerRow(IssuerRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class IssuerRow : Row
        {
            
            private IssuerDataTable tableIssuer;
            
            internal IssuerRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableIssuer = ((IssuerDataTable)(this.Table));
            }
            
            public int IssuerId
            {
                get
                {
                    return ((int)(this[this.tableIssuer.IssuerIdColumn]));
                }
                set
                {
                    this[this.tableIssuer.IssuerIdColumn] = value;
                }
            }
            
            public int CountryId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableIssuer.CountryIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.CountryIdColumn] = value;
                }
            }
            
            public int ProvinceId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableIssuer.ProvinceIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.ProvinceIdColumn] = value;
                }
            }
            
            public int IssuerTypeCode
            {
                get
                {
                    return ((int)(this[this.tableIssuer.IssuerTypeCodeColumn]));
                }
                set
                {
                    this[this.tableIssuer.IssuerTypeCodeColumn] = value;
                }
            }
            
            public string Address0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableIssuer.Address0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.Address0Column] = value;
                }
            }
            
            public string Address1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableIssuer.Address1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.Address1Column] = value;
                }
            }
            
            public string Address2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableIssuer.Address2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.Address2Column] = value;
                }
            }
            
            public string City
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableIssuer.CityColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.CityColumn] = value;
                }
            }
            
            public string PostalCode
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableIssuer.PostalCodeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.PostalCodeColumn] = value;
                }
            }
            
            public decimal Rating0
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableIssuer.Rating0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.Rating0Column] = value;
                }
            }
            
            public decimal Rating1
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableIssuer.Rating1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.Rating1Column] = value;
                }
            }
            
            public decimal Rating2
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableIssuer.Rating2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.Rating2Column] = value;
                }
            }
            
            public decimal Rating3
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableIssuer.Rating3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.Rating3Column] = value;
                }
            }
            
            public decimal UserData0
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableIssuer.UserData0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.UserData0Column] = value;
                }
            }
            
            public decimal UserData1
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableIssuer.UserData1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.UserData1Column] = value;
                }
            }
            
            public decimal UserData2
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableIssuer.UserData2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.UserData2Column] = value;
                }
            }
            
            public decimal UserData3
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableIssuer.UserData3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.UserData3Column] = value;
                }
            }
            
            public string UserData4
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableIssuer.UserData4Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.UserData4Column] = value;
                }
            }
            
            public string UserData5
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableIssuer.UserData5Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.UserData5Column] = value;
                }
            }
            
            public string UserData6
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableIssuer.UserData6Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.UserData6Column] = value;
                }
            }
            
            public string UserData7
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableIssuer.UserData7Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuer.UserData7Column] = value;
                }
            }
            
            public IssuerTypeRow IssuerTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockIssuerType.IsReaderLockHeld || DataSetMarket.lockIssuerType.IsWriterLockHeld))
                    {
                        return ((IssuerTypeRow)(this.GetParentRow(this.Table.ParentRelations["FKIssuerTypeIssuer"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "IssuerType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKIssuerTypeIssuer"]);
                }
            }
            
            public ObjectRow ObjectRow
            {
                get
                {
                    if ((DataSetMarket.lockObject.IsReaderLockHeld || DataSetMarket.lockObject.IsWriterLockHeld))
                    {
                        return ((ObjectRow)(this.GetParentRow(this.Table.ParentRelations["FKObjectIssuer"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Object"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKObjectIssuer"]);
                }
            }
            
            public bool IsCountryIdNull()
            {
                return this.IsNull(this.tableIssuer.CountryIdColumn);
            }
            
            public void SetCountryIdNull()
            {
                this[this.tableIssuer.CountryIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsProvinceIdNull()
            {
                return this.IsNull(this.tableIssuer.ProvinceIdColumn);
            }
            
            public void SetProvinceIdNull()
            {
                this[this.tableIssuer.ProvinceIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddress0Null()
            {
                return this.IsNull(this.tableIssuer.Address0Column);
            }
            
            public void SetAddress0Null()
            {
                this[this.tableIssuer.Address0Column] = System.Convert.DBNull;
            }
            
            public bool IsAddress1Null()
            {
                return this.IsNull(this.tableIssuer.Address1Column);
            }
            
            public void SetAddress1Null()
            {
                this[this.tableIssuer.Address1Column] = System.Convert.DBNull;
            }
            
            public bool IsAddress2Null()
            {
                return this.IsNull(this.tableIssuer.Address2Column);
            }
            
            public void SetAddress2Null()
            {
                this[this.tableIssuer.Address2Column] = System.Convert.DBNull;
            }
            
            public bool IsCityNull()
            {
                return this.IsNull(this.tableIssuer.CityColumn);
            }
            
            public void SetCityNull()
            {
                this[this.tableIssuer.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull()
            {
                return this.IsNull(this.tableIssuer.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull()
            {
                this[this.tableIssuer.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRating0Null()
            {
                return this.IsNull(this.tableIssuer.Rating0Column);
            }
            
            public void SetRating0Null()
            {
                this[this.tableIssuer.Rating0Column] = System.Convert.DBNull;
            }
            
            public bool IsRating1Null()
            {
                return this.IsNull(this.tableIssuer.Rating1Column);
            }
            
            public void SetRating1Null()
            {
                this[this.tableIssuer.Rating1Column] = System.Convert.DBNull;
            }
            
            public bool IsRating2Null()
            {
                return this.IsNull(this.tableIssuer.Rating2Column);
            }
            
            public void SetRating2Null()
            {
                this[this.tableIssuer.Rating2Column] = System.Convert.DBNull;
            }
            
            public bool IsRating3Null()
            {
                return this.IsNull(this.tableIssuer.Rating3Column);
            }
            
            public void SetRating3Null()
            {
                this[this.tableIssuer.Rating3Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData0Null()
            {
                return this.IsNull(this.tableIssuer.UserData0Column);
            }
            
            public void SetUserData0Null()
            {
                this[this.tableIssuer.UserData0Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData1Null()
            {
                return this.IsNull(this.tableIssuer.UserData1Column);
            }
            
            public void SetUserData1Null()
            {
                this[this.tableIssuer.UserData1Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData2Null()
            {
                return this.IsNull(this.tableIssuer.UserData2Column);
            }
            
            public void SetUserData2Null()
            {
                this[this.tableIssuer.UserData2Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData3Null()
            {
                return this.IsNull(this.tableIssuer.UserData3Column);
            }
            
            public void SetUserData3Null()
            {
                this[this.tableIssuer.UserData3Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData4Null()
            {
                return this.IsNull(this.tableIssuer.UserData4Column);
            }
            
            public void SetUserData4Null()
            {
                this[this.tableIssuer.UserData4Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData5Null()
            {
                return this.IsNull(this.tableIssuer.UserData5Column);
            }
            
            public void SetUserData5Null()
            {
                this[this.tableIssuer.UserData5Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData6Null()
            {
                return this.IsNull(this.tableIssuer.UserData6Column);
            }
            
            public void SetUserData6Null()
            {
                this[this.tableIssuer.UserData6Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData7Null()
            {
                return this.IsNull(this.tableIssuer.UserData7Column);
            }
            
            public void SetUserData7Null()
            {
                this[this.tableIssuer.UserData7Column] = System.Convert.DBNull;
            }
            
            public DebtRow[] GetDebtRows()
            {
                return ((DebtRow[])(this.GetChildRows(this.Table.ChildRelations["FKIssuerDebt"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class IssuerRowChangeEvent : EventArgs
        {
            
            private IssuerRow eventRow;
            
            private DataRowAction eventAction;
            
            public IssuerRowChangeEvent(IssuerRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public IssuerRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class IssuerTypeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnIssuerTypeCode;
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private DataView viewUKIssuerTypeExternalId0;
            
            private DataView viewUKIssuerTypeExternalId1;
            
            private DataView viewUKIssuerTypeExternalId2;
            
            private DataView viewUKIssuerTypeExternalId3;
            
            internal IssuerTypeDataTable() : 
                    base("IssuerType")
            {
                this.InitClass();
            }
            
            internal IssuerTypeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column IssuerTypeCodeColumn
            {
                get
                {
                    return this.columnIssuerTypeCode;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public DataView UKIssuerTypeExternalId0
            {
                get
                {
                    return this.viewUKIssuerTypeExternalId0;
                }
            }
            
            public DataView UKIssuerTypeExternalId1
            {
                get
                {
                    return this.viewUKIssuerTypeExternalId1;
                }
            }
            
            public DataView UKIssuerTypeExternalId2
            {
                get
                {
                    return this.viewUKIssuerTypeExternalId2;
                }
            }
            
            public DataView UKIssuerTypeExternalId3
            {
                get
                {
                    return this.viewUKIssuerTypeExternalId3;
                }
            }
            
            public IssuerTypeRow this[int index]
            {
                get
                {
                    return ((IssuerTypeRow)(this.Rows[index]));
                }
            }
            
            public event IssuerTypeRowChangeEventHandler IssuerTypeRowChanged;
            
            public event IssuerTypeRowChangeEventHandler IssuerTypeRowChanging;
            
            public event IssuerTypeRowChangeEventHandler IssuerTypeRowDeleted;
            
            public event IssuerTypeRowChangeEventHandler IssuerTypeRowDeleting;
            
            public void AddIssuerTypeRow(IssuerTypeRow row)
            {
                this.Rows.Add(row);
            }
            
            public IssuerTypeRow AddIssuerTypeRow(int IssuerTypeCode, string Description, string ExternalId0, string ExternalId1, string ExternalId2, string ExternalId3)
            {
                IssuerTypeRow rowIssuerTypeRow = ((IssuerTypeRow)(this.NewRow()));
                rowIssuerTypeRow.ItemArray = new object[] {
                        IssuerTypeCode,
                        Description,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3};
                this.Rows.Add(rowIssuerTypeRow);
                return rowIssuerTypeRow;
            }
            
            public IssuerTypeRow FindByIssuerTypeCode(int IssuerTypeCode)
            {
                return ((IssuerTypeRow)(this.Rows.Find(new object[] {
                            IssuerTypeCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                IssuerTypeDataTable cln = ((IssuerTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new IssuerTypeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnIssuerTypeCode = this.Columns["IssuerTypeCode"];
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnIssuerTypeCode = new Column("IssuerTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIssuerTypeCode);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.Constraints.Add(new UniqueConstraint("PKIssuerType", new DataColumn[] {
                                this.columnIssuerTypeCode}, true));
                this.viewUKIssuerTypeExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewUKIssuerTypeExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.viewUKIssuerTypeExternalId2 = new DataView(this, null, "ExternalId2", DataViewRowState.CurrentRows);
                this.viewUKIssuerTypeExternalId3 = new DataView(this, null, "ExternalId3", DataViewRowState.CurrentRows);
                this.columnIssuerTypeCode.AllowDBNull = false;
                this.columnIssuerTypeCode.Unique = true;
                this.columnDescription.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.IssuerTypeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "IssuerType"));
                }
            }
            
            public IssuerTypeRow NewIssuerTypeRow()
            {
                return ((IssuerTypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new IssuerTypeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(IssuerTypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.IssuerTypeRowChanged != null))
                {
                    this.IssuerTypeRowChanged(this, new IssuerTypeRowChangeEvent(((IssuerTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.IssuerTypeRowChanging != null))
                {
                    this.IssuerTypeRowChanging(this, new IssuerTypeRowChangeEvent(((IssuerTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.IssuerTypeRowDeleted != null))
                {
                    this.IssuerTypeRowDeleted(this, new IssuerTypeRowChangeEvent(((IssuerTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.IssuerTypeRowDeleting != null))
                {
                    this.IssuerTypeRowDeleting(this, new IssuerTypeRowChangeEvent(((IssuerTypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveIssuerTypeRow(IssuerTypeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class IssuerTypeRow : Row
        {
            
            private IssuerTypeDataTable tableIssuerType;
            
            internal IssuerTypeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableIssuerType = ((IssuerTypeDataTable)(this.Table));
            }
            
            public int IssuerTypeCode
            {
                get
                {
                    return ((int)(this[this.tableIssuerType.IssuerTypeCodeColumn]));
                }
                set
                {
                    this[this.tableIssuerType.IssuerTypeCodeColumn] = value;
                }
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableIssuerType.DescriptionColumn]));
                }
                set
                {
                    this[this.tableIssuerType.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableIssuerType.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuerType.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableIssuerType.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuerType.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableIssuerType.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuerType.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableIssuerType.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableIssuerType.ExternalId3Column] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableIssuerType.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableIssuerType.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableIssuerType.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableIssuerType.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableIssuerType.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableIssuerType.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableIssuerType.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableIssuerType.ExternalId3Column] = System.Convert.DBNull;
            }
            
            public IssuerRow[] GetIssuerRows()
            {
                return ((IssuerRow[])(this.GetChildRows(this.Table.ChildRelations["FKIssuerTypeIssuer"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class IssuerTypeRowChangeEvent : EventArgs
        {
            
            private IssuerTypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public IssuerTypeRowChangeEvent(IssuerTypeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public IssuerTypeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LotHandlingDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnLotHandlingCode;
            
            private Column columnMnemonic;
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private DataView viewUKLotHandlingExternalId0;
            
            private DataView viewUKLotHandlingExternalId1;
            
            private DataView viewUKLotHandlingExternalId2;
            
            private DataView viewUKLotHandlingExternalId3;
            
            internal LotHandlingDataTable() : 
                    base("LotHandling")
            {
                this.InitClass();
            }
            
            internal LotHandlingDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column LotHandlingCodeColumn
            {
                get
                {
                    return this.columnLotHandlingCode;
                }
            }
            
            public Column MnemonicColumn
            {
                get
                {
                    return this.columnMnemonic;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public DataView UKLotHandlingExternalId0
            {
                get
                {
                    return this.viewUKLotHandlingExternalId0;
                }
            }
            
            public DataView UKLotHandlingExternalId1
            {
                get
                {
                    return this.viewUKLotHandlingExternalId1;
                }
            }
            
            public DataView UKLotHandlingExternalId2
            {
                get
                {
                    return this.viewUKLotHandlingExternalId2;
                }
            }
            
            public DataView UKLotHandlingExternalId3
            {
                get
                {
                    return this.viewUKLotHandlingExternalId3;
                }
            }
            
            public LotHandlingRow this[int index]
            {
                get
                {
                    return ((LotHandlingRow)(this.Rows[index]));
                }
            }
            
            public event LotHandlingRowChangeEventHandler LotHandlingRowChanged;
            
            public event LotHandlingRowChangeEventHandler LotHandlingRowChanging;
            
            public event LotHandlingRowChangeEventHandler LotHandlingRowDeleted;
            
            public event LotHandlingRowChangeEventHandler LotHandlingRowDeleting;
            
            public void AddLotHandlingRow(LotHandlingRow row)
            {
                this.Rows.Add(row);
            }
            
            public LotHandlingRow AddLotHandlingRow(int LotHandlingCode, string Mnemonic, string Description, string ExternalId0, string ExternalId1, string ExternalId2, string ExternalId3)
            {
                LotHandlingRow rowLotHandlingRow = ((LotHandlingRow)(this.NewRow()));
                rowLotHandlingRow.ItemArray = new object[] {
                        LotHandlingCode,
                        Mnemonic,
                        Description,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3};
                this.Rows.Add(rowLotHandlingRow);
                return rowLotHandlingRow;
            }
            
            public LotHandlingRow FindByLotHandlingCode(int LotHandlingCode)
            {
                return ((LotHandlingRow)(this.Rows.Find(new object[] {
                            LotHandlingCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                LotHandlingDataTable cln = ((LotHandlingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new LotHandlingDataTable();
            }
            
            internal void InitVars()
            {
                this.columnLotHandlingCode = this.Columns["LotHandlingCode"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnLotHandlingCode = new Column("LotHandlingCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLotHandlingCode);
                this.columnMnemonic = new Column("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.Constraints.Add(new UniqueConstraint("PKLotHandling", new DataColumn[] {
                                this.columnLotHandlingCode}, true));
                this.viewUKLotHandlingExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewUKLotHandlingExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.viewUKLotHandlingExternalId2 = new DataView(this, null, "ExternalId2", DataViewRowState.CurrentRows);
                this.viewUKLotHandlingExternalId3 = new DataView(this, null, "ExternalId3", DataViewRowState.CurrentRows);
                this.columnLotHandlingCode.AllowDBNull = false;
                this.columnLotHandlingCode.Unique = true;
                this.columnMnemonic.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.LotHandlingLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "LotHandling"));
                }
            }
            
            public LotHandlingRow NewLotHandlingRow()
            {
                return ((LotHandlingRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new LotHandlingRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(LotHandlingRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.LotHandlingRowChanged != null))
                {
                    this.LotHandlingRowChanged(this, new LotHandlingRowChangeEvent(((LotHandlingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.LotHandlingRowChanging != null))
                {
                    this.LotHandlingRowChanging(this, new LotHandlingRowChangeEvent(((LotHandlingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.LotHandlingRowDeleted != null))
                {
                    this.LotHandlingRowDeleted(this, new LotHandlingRowChangeEvent(((LotHandlingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.LotHandlingRowDeleting != null))
                {
                    this.LotHandlingRowDeleting(this, new LotHandlingRowChangeEvent(((LotHandlingRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveLotHandlingRow(LotHandlingRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LotHandlingRow : Row
        {
            
            private LotHandlingDataTable tableLotHandling;
            
            internal LotHandlingRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableLotHandling = ((LotHandlingDataTable)(this.Table));
            }
            
            public int LotHandlingCode
            {
                get
                {
                    return ((int)(this[this.tableLotHandling.LotHandlingCodeColumn]));
                }
                set
                {
                    this[this.tableLotHandling.LotHandlingCodeColumn] = value;
                }
            }
            
            public string Mnemonic
            {
                get
                {
                    return ((string)(this[this.tableLotHandling.MnemonicColumn]));
                }
                set
                {
                    this[this.tableLotHandling.MnemonicColumn] = value;
                }
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableLotHandling.DescriptionColumn]));
                }
                set
                {
                    this[this.tableLotHandling.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLotHandling.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLotHandling.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLotHandling.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLotHandling.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLotHandling.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLotHandling.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLotHandling.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLotHandling.ExternalId3Column] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableLotHandling.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableLotHandling.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableLotHandling.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableLotHandling.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableLotHandling.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableLotHandling.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableLotHandling.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableLotHandling.ExternalId3Column] = System.Convert.DBNull;
            }
            
            public AccountRow[] GetAccountRows()
            {
                return ((AccountRow[])(this.GetChildRows(this.Table.ChildRelations["FKLotHandlingAccount"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LotHandlingRowChangeEvent : EventArgs
        {
            
            private LotHandlingRow eventRow;
            
            private DataRowAction eventAction;
            
            public LotHandlingRowChangeEvent(LotHandlingRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public LotHandlingRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ModelDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnModelId;
            
            private Column columnAlgorithmId;
            
            private Column columnSchemeId;
            
            private Column columnModelTypeCode;
            
            private Column columnTemporary;
            
            private Column columnSecuritySelf;
            
            private Column columnSectorSelf;
            
            private Column columnEquityRounding;
            
            private Column columnDebtRounding;
            
            internal ModelDataTable() : 
                    base("Model")
            {
                this.InitClass();
            }
            
            internal ModelDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ModelIdColumn
            {
                get
                {
                    return this.columnModelId;
                }
            }
            
            public Column AlgorithmIdColumn
            {
                get
                {
                    return this.columnAlgorithmId;
                }
            }
            
            public Column SchemeIdColumn
            {
                get
                {
                    return this.columnSchemeId;
                }
            }
            
            public Column ModelTypeCodeColumn
            {
                get
                {
                    return this.columnModelTypeCode;
                }
            }
            
            public Column TemporaryColumn
            {
                get
                {
                    return this.columnTemporary;
                }
            }
            
            public Column SecuritySelfColumn
            {
                get
                {
                    return this.columnSecuritySelf;
                }
            }
            
            public Column SectorSelfColumn
            {
                get
                {
                    return this.columnSectorSelf;
                }
            }
            
            public Column EquityRoundingColumn
            {
                get
                {
                    return this.columnEquityRounding;
                }
            }
            
            public Column DebtRoundingColumn
            {
                get
                {
                    return this.columnDebtRounding;
                }
            }
            
            public ModelRow this[int index]
            {
                get
                {
                    return ((ModelRow)(this.Rows[index]));
                }
            }
            
            public event ModelRowChangeEventHandler ModelRowChanged;
            
            public event ModelRowChangeEventHandler ModelRowChanging;
            
            public event ModelRowChangeEventHandler ModelRowDeleted;
            
            public event ModelRowChangeEventHandler ModelRowDeleting;
            
            public void AddModelRow(ModelRow row)
            {
                this.Rows.Add(row);
            }
            
            public ModelRow AddModelRow(ObjectRow parentObjectRowByFKObjectModel, AlgorithmRow parentAlgorithmRowByFKAlgorithmModel, SchemeRow parentSchemeRowByFKSchemeModel, ModelTypeRow parentModelTypeRowByFKModelTypeModel, bool Temporary, bool SecuritySelf, bool SectorSelf, decimal EquityRounding, decimal DebtRounding)
            {
                ModelRow rowModelRow = ((ModelRow)(this.NewRow()));
                rowModelRow.ItemArray = new object[] {
                        parentObjectRowByFKObjectModel[12],
                        parentAlgorithmRowByFKAlgorithmModel[0],
                        parentSchemeRowByFKSchemeModel[17],
                        parentModelTypeRowByFKModelTypeModel[0],
                        Temporary,
                        SecuritySelf,
                        SectorSelf,
                        EquityRounding,
                        DebtRounding};
                this.Rows.Add(rowModelRow);
                return rowModelRow;
            }
            
            public ModelRow FindByModelId(int ModelId)
            {
                return ((ModelRow)(this.Rows.Find(new object[] {
                            ModelId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                ModelDataTable cln = ((ModelDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new ModelDataTable();
            }
            
            internal void InitVars()
            {
                this.columnModelId = this.Columns["ModelId"];
                this.columnAlgorithmId = this.Columns["AlgorithmId"];
                this.columnSchemeId = this.Columns["SchemeId"];
                this.columnModelTypeCode = this.Columns["ModelTypeCode"];
                this.columnTemporary = this.Columns["Temporary"];
                this.columnSecuritySelf = this.Columns["SecuritySelf"];
                this.columnSectorSelf = this.Columns["SectorSelf"];
                this.columnEquityRounding = this.Columns["EquityRounding"];
                this.columnDebtRounding = this.Columns["DebtRounding"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnModelId = new Column("ModelId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModelId);
                this.columnAlgorithmId = new Column("AlgorithmId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAlgorithmId);
                this.columnSchemeId = new Column("SchemeId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSchemeId);
                this.columnModelTypeCode = new Column("ModelTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModelTypeCode);
                this.columnTemporary = new Column("Temporary", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTemporary);
                this.columnSecuritySelf = new Column("SecuritySelf", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecuritySelf);
                this.columnSectorSelf = new Column("SectorSelf", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSectorSelf);
                this.columnEquityRounding = new Column("EquityRounding", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEquityRounding);
                this.columnDebtRounding = new Column("DebtRounding", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDebtRounding);
                this.Constraints.Add(new UniqueConstraint("PKModel", new DataColumn[] {
                                this.columnModelId}, true));
                this.columnModelId.AllowDBNull = false;
                this.columnModelId.Unique = true;
                this.columnAlgorithmId.AllowDBNull = false;
                this.columnModelTypeCode.AllowDBNull = false;
                this.columnTemporary.AllowDBNull = false;
                this.columnTemporary.DefaultValue = false;
                this.columnSecuritySelf.AllowDBNull = false;
                this.columnSecuritySelf.DefaultValue = false;
                this.columnSectorSelf.AllowDBNull = false;
                this.columnSectorSelf.DefaultValue = false;
                this.columnEquityRounding.AllowDBNull = false;
                this.columnEquityRounding.DefaultValue = 100m;
                this.columnDebtRounding.AllowDBNull = false;
                this.columnDebtRounding.DefaultValue = 1000m;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.ModelLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Model"));
                }
            }
            
            public ModelRow NewModelRow()
            {
                return ((ModelRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ModelRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(ModelRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ModelRowChanged != null))
                {
                    this.ModelRowChanged(this, new ModelRowChangeEvent(((ModelRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ModelRowChanging != null))
                {
                    this.ModelRowChanging(this, new ModelRowChangeEvent(((ModelRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ModelRowDeleted != null))
                {
                    this.ModelRowDeleted(this, new ModelRowChangeEvent(((ModelRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ModelRowDeleting != null))
                {
                    this.ModelRowDeleting(this, new ModelRowChangeEvent(((ModelRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveModelRow(ModelRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ModelRow : Row
        {
            
            private ModelDataTable tableModel;
            
            internal ModelRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableModel = ((ModelDataTable)(this.Table));
            }
            
            public int ModelId
            {
                get
                {
                    return ((int)(this[this.tableModel.ModelIdColumn]));
                }
                set
                {
                    this[this.tableModel.ModelIdColumn] = value;
                }
            }
            
            public int AlgorithmId
            {
                get
                {
                    return ((int)(this[this.tableModel.AlgorithmIdColumn]));
                }
                set
                {
                    this[this.tableModel.AlgorithmIdColumn] = value;
                }
            }
            
            public int SchemeId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableModel.SchemeIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableModel.SchemeIdColumn] = value;
                }
            }
            
            public int ModelTypeCode
            {
                get
                {
                    return ((int)(this[this.tableModel.ModelTypeCodeColumn]));
                }
                set
                {
                    this[this.tableModel.ModelTypeCodeColumn] = value;
                }
            }
            
            public bool Temporary
            {
                get
                {
                    return ((bool)(this[this.tableModel.TemporaryColumn]));
                }
                set
                {
                    this[this.tableModel.TemporaryColumn] = value;
                }
            }
            
            public bool SecuritySelf
            {
                get
                {
                    return ((bool)(this[this.tableModel.SecuritySelfColumn]));
                }
                set
                {
                    this[this.tableModel.SecuritySelfColumn] = value;
                }
            }
            
            public bool SectorSelf
            {
                get
                {
                    return ((bool)(this[this.tableModel.SectorSelfColumn]));
                }
                set
                {
                    this[this.tableModel.SectorSelfColumn] = value;
                }
            }
            
            public decimal EquityRounding
            {
                get
                {
                    return ((decimal)(this[this.tableModel.EquityRoundingColumn]));
                }
                set
                {
                    this[this.tableModel.EquityRoundingColumn] = value;
                }
            }
            
            public decimal DebtRounding
            {
                get
                {
                    return ((decimal)(this[this.tableModel.DebtRoundingColumn]));
                }
                set
                {
                    this[this.tableModel.DebtRoundingColumn] = value;
                }
            }
            
            public AlgorithmRow AlgorithmRow
            {
                get
                {
                    if ((DataSetMarket.lockAlgorithm.IsReaderLockHeld || DataSetMarket.lockAlgorithm.IsWriterLockHeld))
                    {
                        return ((AlgorithmRow)(this.GetParentRow(this.Table.ParentRelations["FKAlgorithmModel"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Algorithm"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKAlgorithmModel"]);
                }
            }
            
            public ModelTypeRow ModelTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockModelType.IsReaderLockHeld || DataSetMarket.lockModelType.IsWriterLockHeld))
                    {
                        return ((ModelTypeRow)(this.GetParentRow(this.Table.ParentRelations["FKModelTypeModel"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "ModelType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKModelTypeModel"]);
                }
            }
            
            public ObjectRow ObjectRow
            {
                get
                {
                    if ((DataSetMarket.lockObject.IsReaderLockHeld || DataSetMarket.lockObject.IsWriterLockHeld))
                    {
                        return ((ObjectRow)(this.GetParentRow(this.Table.ParentRelations["FKObjectModel"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Object"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKObjectModel"]);
                }
            }
            
            public SchemeRow SchemeRow
            {
                get
                {
                    if ((DataSetMarket.lockScheme.IsReaderLockHeld || DataSetMarket.lockScheme.IsWriterLockHeld))
                    {
                        return ((SchemeRow)(this.GetParentRow(this.Table.ParentRelations["FKSchemeModel"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Scheme"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKSchemeModel"]);
                }
            }
            
            public bool IsSchemeIdNull()
            {
                return this.IsNull(this.tableModel.SchemeIdColumn);
            }
            
            public void SetSchemeIdNull()
            {
                this[this.tableModel.SchemeIdColumn] = System.Convert.DBNull;
            }
            
            public AccountRow[] GetAccountRows()
            {
                return ((AccountRow[])(this.GetChildRows(this.Table.ChildRelations["FKModelAccount"])));
            }
            
            public PositionTargetRow[] GetPositionTargetRows()
            {
                return ((PositionTargetRow[])(this.GetChildRows(this.Table.ChildRelations["FKModelPositionTarget"])));
            }
            
            public SectorTargetRow[] GetSectorTargetRows()
            {
                return ((SectorTargetRow[])(this.GetChildRows(this.Table.ChildRelations["FKModelSectorTarget"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ModelRowChangeEvent : EventArgs
        {
            
            private ModelRow eventRow;
            
            private DataRowAction eventAction;
            
            public ModelRowChangeEvent(ModelRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ModelRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ModelTypeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnModelTypeCode;
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private DataView viewUKModelTypeExternalId0;
            
            private DataView viewUKModelTypeExternalId1;
            
            internal ModelTypeDataTable() : 
                    base("ModelType")
            {
                this.InitClass();
            }
            
            internal ModelTypeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ModelTypeCodeColumn
            {
                get
                {
                    return this.columnModelTypeCode;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public DataView UKModelTypeExternalId0
            {
                get
                {
                    return this.viewUKModelTypeExternalId0;
                }
            }
            
            public DataView UKModelTypeExternalId1
            {
                get
                {
                    return this.viewUKModelTypeExternalId1;
                }
            }
            
            public ModelTypeRow this[int index]
            {
                get
                {
                    return ((ModelTypeRow)(this.Rows[index]));
                }
            }
            
            public event ModelTypeRowChangeEventHandler ModelTypeRowChanged;
            
            public event ModelTypeRowChangeEventHandler ModelTypeRowChanging;
            
            public event ModelTypeRowChangeEventHandler ModelTypeRowDeleted;
            
            public event ModelTypeRowChangeEventHandler ModelTypeRowDeleting;
            
            public void AddModelTypeRow(ModelTypeRow row)
            {
                this.Rows.Add(row);
            }
            
            public ModelTypeRow AddModelTypeRow(int ModelTypeCode, string Description, string ExternalId0, string ExternalId1)
            {
                ModelTypeRow rowModelTypeRow = ((ModelTypeRow)(this.NewRow()));
                rowModelTypeRow.ItemArray = new object[] {
                        ModelTypeCode,
                        Description,
                        ExternalId0,
                        ExternalId1};
                this.Rows.Add(rowModelTypeRow);
                return rowModelTypeRow;
            }
            
            public ModelTypeRow FindByModelTypeCode(int ModelTypeCode)
            {
                return ((ModelTypeRow)(this.Rows.Find(new object[] {
                            ModelTypeCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                ModelTypeDataTable cln = ((ModelTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new ModelTypeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnModelTypeCode = this.Columns["ModelTypeCode"];
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnModelTypeCode = new Column("ModelTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModelTypeCode);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.Constraints.Add(new UniqueConstraint("PKModelType", new DataColumn[] {
                                this.columnModelTypeCode}, true));
                this.viewUKModelTypeExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewUKModelTypeExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.columnModelTypeCode.AllowDBNull = false;
                this.columnModelTypeCode.Unique = true;
                this.columnDescription.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.ModelTypeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "ModelType"));
                }
            }
            
            public ModelTypeRow NewModelTypeRow()
            {
                return ((ModelTypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ModelTypeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(ModelTypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ModelTypeRowChanged != null))
                {
                    this.ModelTypeRowChanged(this, new ModelTypeRowChangeEvent(((ModelTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ModelTypeRowChanging != null))
                {
                    this.ModelTypeRowChanging(this, new ModelTypeRowChangeEvent(((ModelTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ModelTypeRowDeleted != null))
                {
                    this.ModelTypeRowDeleted(this, new ModelTypeRowChangeEvent(((ModelTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ModelTypeRowDeleting != null))
                {
                    this.ModelTypeRowDeleting(this, new ModelTypeRowChangeEvent(((ModelTypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveModelTypeRow(ModelTypeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ModelTypeRow : Row
        {
            
            private ModelTypeDataTable tableModelType;
            
            internal ModelTypeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableModelType = ((ModelTypeDataTable)(this.Table));
            }
            
            public int ModelTypeCode
            {
                get
                {
                    return ((int)(this[this.tableModelType.ModelTypeCodeColumn]));
                }
                set
                {
                    this[this.tableModelType.ModelTypeCodeColumn] = value;
                }
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableModelType.DescriptionColumn]));
                }
                set
                {
                    this[this.tableModelType.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableModelType.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableModelType.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableModelType.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableModelType.ExternalId1Column] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableModelType.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableModelType.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableModelType.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableModelType.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public ModelRow[] GetModelRows()
            {
                return ((ModelRow[])(this.GetChildRows(this.Table.ChildRelations["FKModelTypeModel"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ModelTypeRowChangeEvent : EventArgs
        {
            
            private ModelTypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public ModelTypeRowChangeEvent(ModelTypeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ModelTypeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ObjectDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private Column columnExternalId4;
            
            private Column columnExternalId5;
            
            private Column columnExternalId6;
            
            private Column columnExternalId7;
            
            private Column columnGroupPermission;
            
            private Column columnHidden;
            
            private Column columnName;
            
            private Column columnObjectId;
            
            private Column columnOwner;
            
            private Column columnOwnerPermission;
            
            private Column columnReadOnly;
            
            private Column columnTypeCode;
            
            private Column columnWorldPermission;
            
            private DataView viewUKObjectExternalId0;
            
            private DataView viewUKObjectExternalId1;
            
            private DataView viewUKObjectExternalId2;
            
            private DataView viewUKObjectExternalId3;
            
            private DataView viewUKObjectExternalId4;
            
            private DataView viewUKObjectExternalId5;
            
            private DataView viewUKObjectExternalId6;
            
            private DataView viewUKObjectExternalId7;
            
            internal ObjectDataTable() : 
                    base("Object")
            {
                this.InitClass();
            }
            
            internal ObjectDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public Column ExternalId4Column
            {
                get
                {
                    return this.columnExternalId4;
                }
            }
            
            public Column ExternalId5Column
            {
                get
                {
                    return this.columnExternalId5;
                }
            }
            
            public Column ExternalId6Column
            {
                get
                {
                    return this.columnExternalId6;
                }
            }
            
            public Column ExternalId7Column
            {
                get
                {
                    return this.columnExternalId7;
                }
            }
            
            public Column GroupPermissionColumn
            {
                get
                {
                    return this.columnGroupPermission;
                }
            }
            
            public Column HiddenColumn
            {
                get
                {
                    return this.columnHidden;
                }
            }
            
            public Column NameColumn
            {
                get
                {
                    return this.columnName;
                }
            }
            
            public Column ObjectIdColumn
            {
                get
                {
                    return this.columnObjectId;
                }
            }
            
            public Column OwnerColumn
            {
                get
                {
                    return this.columnOwner;
                }
            }
            
            public Column OwnerPermissionColumn
            {
                get
                {
                    return this.columnOwnerPermission;
                }
            }
            
            public Column ReadOnlyColumn
            {
                get
                {
                    return this.columnReadOnly;
                }
            }
            
            public Column TypeCodeColumn
            {
                get
                {
                    return this.columnTypeCode;
                }
            }
            
            public Column WorldPermissionColumn
            {
                get
                {
                    return this.columnWorldPermission;
                }
            }
            
            public DataView UKObjectExternalId0
            {
                get
                {
                    return this.viewUKObjectExternalId0;
                }
            }
            
            public DataView UKObjectExternalId1
            {
                get
                {
                    return this.viewUKObjectExternalId1;
                }
            }
            
            public DataView UKObjectExternalId2
            {
                get
                {
                    return this.viewUKObjectExternalId2;
                }
            }
            
            public DataView UKObjectExternalId3
            {
                get
                {
                    return this.viewUKObjectExternalId3;
                }
            }
            
            public DataView UKObjectExternalId4
            {
                get
                {
                    return this.viewUKObjectExternalId4;
                }
            }
            
            public DataView UKObjectExternalId5
            {
                get
                {
                    return this.viewUKObjectExternalId5;
                }
            }
            
            public DataView UKObjectExternalId6
            {
                get
                {
                    return this.viewUKObjectExternalId6;
                }
            }
            
            public DataView UKObjectExternalId7
            {
                get
                {
                    return this.viewUKObjectExternalId7;
                }
            }
            
            public ObjectRow this[int index]
            {
                get
                {
                    return ((ObjectRow)(this.Rows[index]));
                }
            }
            
            public event ObjectRowChangeEventHandler ObjectRowChanged;
            
            public event ObjectRowChangeEventHandler ObjectRowChanging;
            
            public event ObjectRowChangeEventHandler ObjectRowDeleted;
            
            public event ObjectRowChangeEventHandler ObjectRowDeleting;
            
            public void AddObjectRow(ObjectRow row)
            {
                this.Rows.Add(row);
            }
            
            public ObjectRow AddObjectRow(
                        string Description, 
                        string ExternalId0, 
                        string ExternalId1, 
                        string ExternalId2, 
                        string ExternalId3, 
                        string ExternalId4, 
                        string ExternalId5, 
                        string ExternalId6, 
                        string ExternalId7, 
                        int GroupPermission, 
                        bool Hidden, 
                        string Name, 
                        int Owner, 
                        int OwnerPermission, 
                        bool ReadOnly, 
                        TypeRow parentTypeRowByFKTypeObject, 
                        int WorldPermission)
            {
                ObjectRow rowObjectRow = ((ObjectRow)(this.NewRow()));
                rowObjectRow.ItemArray = new object[] {
                        Description,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3,
                        ExternalId4,
                        ExternalId5,
                        ExternalId6,
                        ExternalId7,
                        GroupPermission,
                        Hidden,
                        Name,
                        null,
                        Owner,
                        OwnerPermission,
                        ReadOnly,
                        parentTypeRowByFKTypeObject[3],
                        WorldPermission};
                this.Rows.Add(rowObjectRow);
                return rowObjectRow;
            }
            
            public ObjectRow FindByObjectId(int ObjectId)
            {
                return ((ObjectRow)(this.Rows.Find(new object[] {
                            ObjectId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                ObjectDataTable cln = ((ObjectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new ObjectDataTable();
            }
            
            internal void InitVars()
            {
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
                this.columnExternalId4 = this.Columns["ExternalId4"];
                this.columnExternalId5 = this.Columns["ExternalId5"];
                this.columnExternalId6 = this.Columns["ExternalId6"];
                this.columnExternalId7 = this.Columns["ExternalId7"];
                this.columnGroupPermission = this.Columns["GroupPermission"];
                this.columnHidden = this.Columns["Hidden"];
                this.columnName = this.Columns["Name"];
                this.columnObjectId = this.Columns["ObjectId"];
                this.columnOwner = this.Columns["Owner"];
                this.columnOwnerPermission = this.Columns["OwnerPermission"];
                this.columnReadOnly = this.Columns["ReadOnly"];
                this.columnTypeCode = this.Columns["TypeCode"];
                this.columnWorldPermission = this.Columns["WorldPermission"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.columnExternalId4 = new Column("ExternalId4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId4);
                this.columnExternalId5 = new Column("ExternalId5", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId5);
                this.columnExternalId6 = new Column("ExternalId6", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId6);
                this.columnExternalId7 = new Column("ExternalId7", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId7);
                this.columnGroupPermission = new Column("GroupPermission", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGroupPermission);
                this.columnHidden = new Column("Hidden", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHidden);
                this.columnName = new Column("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnObjectId = new Column("ObjectId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnObjectId);
                this.columnOwner = new Column("Owner", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOwner);
                this.columnOwnerPermission = new Column("OwnerPermission", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOwnerPermission);
                this.columnReadOnly = new Column("ReadOnly", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReadOnly);
                this.columnTypeCode = new Column("TypeCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTypeCode);
                this.columnWorldPermission = new Column("WorldPermission", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWorldPermission);
                this.Constraints.Add(new UniqueConstraint("PKObject", new DataColumn[] {
                                this.columnObjectId}, true));
                this.viewUKObjectExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewUKObjectExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.viewUKObjectExternalId2 = new DataView(this, null, "ExternalId2", DataViewRowState.CurrentRows);
                this.viewUKObjectExternalId3 = new DataView(this, null, "ExternalId3", DataViewRowState.CurrentRows);
                this.viewUKObjectExternalId4 = new DataView(this, null, "ExternalId4", DataViewRowState.CurrentRows);
                this.viewUKObjectExternalId5 = new DataView(this, null, "ExternalId5", DataViewRowState.CurrentRows);
                this.viewUKObjectExternalId6 = new DataView(this, null, "ExternalId6", DataViewRowState.CurrentRows);
                this.viewUKObjectExternalId7 = new DataView(this, null, "ExternalId7", DataViewRowState.CurrentRows);
                this.columnGroupPermission.AllowDBNull = false;
                this.columnGroupPermission.DefaultValue = 0;
                this.columnHidden.AllowDBNull = false;
                this.columnHidden.DefaultValue = false;
                this.columnName.AllowDBNull = false;
                this.columnObjectId.AutoIncrement = true;
                this.columnObjectId.AllowDBNull = false;
                this.columnObjectId.Unique = true;
                this.columnOwner.AllowDBNull = false;
                this.columnOwner.DefaultValue = 0;
                this.columnOwnerPermission.AllowDBNull = false;
                this.columnOwnerPermission.DefaultValue = 0;
                this.columnReadOnly.AllowDBNull = false;
                this.columnReadOnly.DefaultValue = false;
                this.columnTypeCode.AllowDBNull = false;
                this.columnTypeCode.DefaultValue = "Object";
                this.columnWorldPermission.AllowDBNull = false;
                this.columnWorldPermission.DefaultValue = 0;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.ObjectLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Object"));
                }
            }
            
            public ObjectRow NewObjectRow()
            {
                return ((ObjectRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ObjectRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(ObjectRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ObjectRowChanged != null))
                {
                    this.ObjectRowChanged(this, new ObjectRowChangeEvent(((ObjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ObjectRowChanging != null))
                {
                    this.ObjectRowChanging(this, new ObjectRowChangeEvent(((ObjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ObjectRowDeleted != null))
                {
                    this.ObjectRowDeleted(this, new ObjectRowChangeEvent(((ObjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ObjectRowDeleting != null))
                {
                    this.ObjectRowDeleting(this, new ObjectRowChangeEvent(((ObjectRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveObjectRow(ObjectRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ObjectRow : Row
        {
            
            private ObjectDataTable tableObject;
            
            internal ObjectRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableObject = ((ObjectDataTable)(this.Table));
            }
            
            public string Description
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.DescriptionColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.ExternalId3Column] = value;
                }
            }
            
            public string ExternalId4
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.ExternalId4Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.ExternalId4Column] = value;
                }
            }
            
            public string ExternalId5
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.ExternalId5Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.ExternalId5Column] = value;
                }
            }
            
            public string ExternalId6
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.ExternalId6Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.ExternalId6Column] = value;
                }
            }
            
            public string ExternalId7
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableObject.ExternalId7Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableObject.ExternalId7Column] = value;
                }
            }
            
            public int GroupPermission
            {
                get
                {
                    return ((int)(this[this.tableObject.GroupPermissionColumn]));
                }
                set
                {
                    this[this.tableObject.GroupPermissionColumn] = value;
                }
            }
            
            public bool Hidden
            {
                get
                {
                    return ((bool)(this[this.tableObject.HiddenColumn]));
                }
                set
                {
                    this[this.tableObject.HiddenColumn] = value;
                }
            }
            
            public string Name
            {
                get
                {
                    return ((string)(this[this.tableObject.NameColumn]));
                }
                set
                {
                    this[this.tableObject.NameColumn] = value;
                }
            }
            
            public int ObjectId
            {
                get
                {
                    return ((int)(this[this.tableObject.ObjectIdColumn]));
                }
                set
                {
                    this[this.tableObject.ObjectIdColumn] = value;
                }
            }
            
            public int Owner
            {
                get
                {
                    return ((int)(this[this.tableObject.OwnerColumn]));
                }
                set
                {
                    this[this.tableObject.OwnerColumn] = value;
                }
            }
            
            public int OwnerPermission
            {
                get
                {
                    return ((int)(this[this.tableObject.OwnerPermissionColumn]));
                }
                set
                {
                    this[this.tableObject.OwnerPermissionColumn] = value;
                }
            }
            
            public bool ReadOnly
            {
                get
                {
                    return ((bool)(this[this.tableObject.ReadOnlyColumn]));
                }
                set
                {
                    this[this.tableObject.ReadOnlyColumn] = value;
                }
            }
            
            public string TypeCode
            {
                get
                {
                    return ((string)(this[this.tableObject.TypeCodeColumn]));
                }
                set
                {
                    this[this.tableObject.TypeCodeColumn] = value;
                }
            }
            
            public int WorldPermission
            {
                get
                {
                    return ((int)(this[this.tableObject.WorldPermissionColumn]));
                }
                set
                {
                    this[this.tableObject.WorldPermissionColumn] = value;
                }
            }
            
            public TypeRow TypeRow
            {
                get
                {
                    if ((DataSetMarket.lockType.IsReaderLockHeld || DataSetMarket.lockType.IsWriterLockHeld))
                    {
                        return ((TypeRow)(this.GetParentRow(this.Table.ParentRelations["FKTypeObject"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Type"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKTypeObject"]);
                }
            }
            
            public bool IsDescriptionNull()
            {
                return this.IsNull(this.tableObject.DescriptionColumn);
            }
            
            public void SetDescriptionNull()
            {
                this[this.tableObject.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableObject.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableObject.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableObject.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableObject.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableObject.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableObject.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableObject.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableObject.ExternalId3Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId4Null()
            {
                return this.IsNull(this.tableObject.ExternalId4Column);
            }
            
            public void SetExternalId4Null()
            {
                this[this.tableObject.ExternalId4Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId5Null()
            {
                return this.IsNull(this.tableObject.ExternalId5Column);
            }
            
            public void SetExternalId5Null()
            {
                this[this.tableObject.ExternalId5Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId6Null()
            {
                return this.IsNull(this.tableObject.ExternalId6Column);
            }
            
            public void SetExternalId6Null()
            {
                this[this.tableObject.ExternalId6Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId7Null()
            {
                return this.IsNull(this.tableObject.ExternalId7Column);
            }
            
            public void SetExternalId7Null()
            {
                this[this.tableObject.ExternalId7Column] = System.Convert.DBNull;
            }
            
            public FolderRow[] GetFolderRows()
            {
                return ((FolderRow[])(this.GetChildRows(this.Table.ChildRelations["ObjectFolder"])));
            }
            
            public AccountRow[] GetAccountRows()
            {
                return ((AccountRow[])(this.GetChildRows(this.Table.ChildRelations["FKObjectAccount"])));
            }
            
            public BlotterRow[] GetBlotterRows()
            {
                return ((BlotterRow[])(this.GetChildRows(this.Table.ChildRelations["FKObjectBlotter"])));
            }
            
            public BrokerRow[] GetBrokerRows()
            {
                return ((BrokerRow[])(this.GetChildRows(this.Table.ChildRelations["FKObjectBroker"])));
            }
            
            public IssuerRow[] GetIssuerRows()
            {
                return ((IssuerRow[])(this.GetChildRows(this.Table.ChildRelations["FKObjectIssuer"])));
            }
            
            public UserRow[] GetUserRows()
            {
                return ((UserRow[])(this.GetChildRows(this.Table.ChildRelations["FKObjectUser"])));
            }
            
            public ModelRow[] GetModelRows()
            {
                return ((ModelRow[])(this.GetChildRows(this.Table.ChildRelations["FKObjectModel"])));
            }
            
            public ObjectTreeRow[] GetObjectTreeRowsByFKObjectObjectTreeChildId()
            {
                return ((ObjectTreeRow[])(this.GetChildRows(this.Table.ChildRelations["FKObjectObjectTreeChildId"])));
            }
            
            public ObjectTreeRow[] GetObjectTreeRowsByFKObjectObjectTreeParentId()
            {
                return ((ObjectTreeRow[])(this.GetChildRows(this.Table.ChildRelations["FKObjectObjectTreeParentId"])));
            }
            
            public SchemeRow[] GetSchemeRows()
            {
                return ((SchemeRow[])(this.GetChildRows(this.Table.ChildRelations["FKObjectScheme"])));
            }
            
            public SectorRow[] GetSectorRows()
            {
                return ((SectorRow[])(this.GetChildRows(this.Table.ChildRelations["FKObjectSector"])));
            }
            
            public SecurityRow[] GetSecurityRows()
            {
                return ((SecurityRow[])(this.GetChildRows(this.Table.ChildRelations["FKObjectSecurity"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ObjectRowChangeEvent : EventArgs
        {
            
            private ObjectRow eventRow;
            
            private DataRowAction eventAction;
            
            public ObjectRowChangeEvent(ObjectRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ObjectRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ObjectTreeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnParentId;
            
            private Column columnChildId;
            
            internal ObjectTreeDataTable() : 
                    base("ObjectTree")
            {
                this.InitClass();
            }
            
            internal ObjectTreeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ParentIdColumn
            {
                get
                {
                    return this.columnParentId;
                }
            }
            
            public Column ChildIdColumn
            {
                get
                {
                    return this.columnChildId;
                }
            }
            
            public ObjectTreeRow this[int index]
            {
                get
                {
                    return ((ObjectTreeRow)(this.Rows[index]));
                }
            }
            
            public event ObjectTreeRowChangeEventHandler ObjectTreeRowChanged;
            
            public event ObjectTreeRowChangeEventHandler ObjectTreeRowChanging;
            
            public event ObjectTreeRowChangeEventHandler ObjectTreeRowDeleted;
            
            public event ObjectTreeRowChangeEventHandler ObjectTreeRowDeleting;
            
            public void AddObjectTreeRow(ObjectTreeRow row)
            {
                this.Rows.Add(row);
            }
            
            public ObjectTreeRow AddObjectTreeRow(ObjectRow parentObjectRowByFKObjectObjectTreeParentId, ObjectRow parentObjectRowByFKObjectObjectTreeChildId)
            {
                ObjectTreeRow rowObjectTreeRow = ((ObjectTreeRow)(this.NewRow()));
                rowObjectTreeRow.ItemArray = new object[] {
                        parentObjectRowByFKObjectObjectTreeParentId[12],
                        parentObjectRowByFKObjectObjectTreeChildId[12]};
                this.Rows.Add(rowObjectTreeRow);
                return rowObjectTreeRow;
            }
            
            public ObjectTreeRow FindByParentIdChildId(int ParentId, int ChildId)
            {
                return ((ObjectTreeRow)(this.Rows.Find(new object[] {
                            ParentId,
                            ChildId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                ObjectTreeDataTable cln = ((ObjectTreeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new ObjectTreeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnParentId = this.Columns["ParentId"];
                this.columnChildId = this.Columns["ChildId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnParentId = new Column("ParentId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnParentId);
                this.columnChildId = new Column("ChildId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChildId);
                this.Constraints.Add(new UniqueConstraint("PKObjectTree", new DataColumn[] {
                                this.columnParentId,
                                this.columnChildId}, true));
                this.columnParentId.AllowDBNull = false;
                this.columnChildId.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.ObjectTreeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "ObjectTree"));
                }
            }
            
            public ObjectTreeRow NewObjectTreeRow()
            {
                return ((ObjectTreeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ObjectTreeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(ObjectTreeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ObjectTreeRowChanged != null))
                {
                    this.ObjectTreeRowChanged(this, new ObjectTreeRowChangeEvent(((ObjectTreeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ObjectTreeRowChanging != null))
                {
                    this.ObjectTreeRowChanging(this, new ObjectTreeRowChangeEvent(((ObjectTreeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ObjectTreeRowDeleted != null))
                {
                    this.ObjectTreeRowDeleted(this, new ObjectTreeRowChangeEvent(((ObjectTreeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ObjectTreeRowDeleting != null))
                {
                    this.ObjectTreeRowDeleting(this, new ObjectTreeRowChangeEvent(((ObjectTreeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveObjectTreeRow(ObjectTreeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ObjectTreeRow : Row
        {
            
            private ObjectTreeDataTable tableObjectTree;
            
            internal ObjectTreeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableObjectTree = ((ObjectTreeDataTable)(this.Table));
            }
            
            public int ParentId
            {
                get
                {
                    return ((int)(this[this.tableObjectTree.ParentIdColumn]));
                }
                set
                {
                    this[this.tableObjectTree.ParentIdColumn] = value;
                }
            }
            
            public int ChildId
            {
                get
                {
                    return ((int)(this[this.tableObjectTree.ChildIdColumn]));
                }
                set
                {
                    this[this.tableObjectTree.ChildIdColumn] = value;
                }
            }
            
            public ObjectRow ObjectRowByFKObjectObjectTreeChildId
            {
                get
                {
                    if ((DataSetMarket.lockObject.IsReaderLockHeld || DataSetMarket.lockObject.IsWriterLockHeld))
                    {
                        return ((ObjectRow)(this.GetParentRow(this.Table.ParentRelations["FKObjectObjectTreeChildId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Object"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKObjectObjectTreeChildId"]);
                }
            }
            
            public ObjectRow ObjectRowByFKObjectObjectTreeParentId
            {
                get
                {
                    if ((DataSetMarket.lockObject.IsReaderLockHeld || DataSetMarket.lockObject.IsWriterLockHeld))
                    {
                        return ((ObjectRow)(this.GetParentRow(this.Table.ParentRelations["FKObjectObjectTreeParentId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Object"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKObjectObjectTreeParentId"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ObjectTreeRowChangeEvent : EventArgs
        {
            
            private ObjectTreeRow eventRow;
            
            private DataRowAction eventAction;
            
            public ObjectTreeRowChangeEvent(ObjectTreeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ObjectTreeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrderDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnOrderId;
            
            private Column columnBlockOrderId;
            
            private Column columnAccountId;
            
            private Column columnSecurityId;
            
            private Column columnSettlementId;
            
            private Column columnBrokerId;
            
            private Column columnPositionTypeCode;
            
            private Column columnTransactionTypeCode;
            
            private Column columnTimeInForceCode;
            
            private Column columnOrderTypeCode;
            
            private Column columnConditionCode;
            
            private Column columnIsDeleted;
            
            private Column columnIsAgency;
            
            private Column columnQuantity;
            
            private Column columnPrice1;
            
            private Column columnPrice2;
            
            private Column columnNote;
            
            private Column columnCreatedTime;
            
            private Column columnCreatedUserId;
            
            private Column columnModifiedTime;
            
            private Column columnModifiedUserId;
            
            private DataView viewUKOrderAccountIdSecurityIdPositionTypeCode;
            
            internal OrderDataTable() : 
                    base("Order")
            {
                this.InitClass();
            }
            
            internal OrderDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column OrderIdColumn
            {
                get
                {
                    return this.columnOrderId;
                }
            }
            
            public Column BlockOrderIdColumn
            {
                get
                {
                    return this.columnBlockOrderId;
                }
            }
            
            public Column AccountIdColumn
            {
                get
                {
                    return this.columnAccountId;
                }
            }
            
            public Column SecurityIdColumn
            {
                get
                {
                    return this.columnSecurityId;
                }
            }
            
            public Column SettlementIdColumn
            {
                get
                {
                    return this.columnSettlementId;
                }
            }
            
            public Column BrokerIdColumn
            {
                get
                {
                    return this.columnBrokerId;
                }
            }
            
            public Column PositionTypeCodeColumn
            {
                get
                {
                    return this.columnPositionTypeCode;
                }
            }
            
            public Column TransactionTypeCodeColumn
            {
                get
                {
                    return this.columnTransactionTypeCode;
                }
            }
            
            public Column TimeInForceCodeColumn
            {
                get
                {
                    return this.columnTimeInForceCode;
                }
            }
            
            public Column OrderTypeCodeColumn
            {
                get
                {
                    return this.columnOrderTypeCode;
                }
            }
            
            public Column ConditionCodeColumn
            {
                get
                {
                    return this.columnConditionCode;
                }
            }
            
            public Column IsDeletedColumn
            {
                get
                {
                    return this.columnIsDeleted;
                }
            }
            
            public Column IsAgencyColumn
            {
                get
                {
                    return this.columnIsAgency;
                }
            }
            
            public Column QuantityColumn
            {
                get
                {
                    return this.columnQuantity;
                }
            }
            
            public Column Price1Column
            {
                get
                {
                    return this.columnPrice1;
                }
            }
            
            public Column Price2Column
            {
                get
                {
                    return this.columnPrice2;
                }
            }
            
            public Column NoteColumn
            {
                get
                {
                    return this.columnNote;
                }
            }
            
            public Column CreatedTimeColumn
            {
                get
                {
                    return this.columnCreatedTime;
                }
            }
            
            public Column CreatedUserIdColumn
            {
                get
                {
                    return this.columnCreatedUserId;
                }
            }
            
            public Column ModifiedTimeColumn
            {
                get
                {
                    return this.columnModifiedTime;
                }
            }
            
            public Column ModifiedUserIdColumn
            {
                get
                {
                    return this.columnModifiedUserId;
                }
            }
            
            public DataView UKOrderAccountIdSecurityIdPositionTypeCode
            {
                get
                {
                    return this.viewUKOrderAccountIdSecurityIdPositionTypeCode;
                }
            }
            
            public OrderRow this[int index]
            {
                get
                {
                    return ((OrderRow)(this.Rows[index]));
                }
            }
            
            public event OrderRowChangeEventHandler OrderRowChanged;
            
            public event OrderRowChangeEventHandler OrderRowChanging;
            
            public event OrderRowChangeEventHandler OrderRowDeleted;
            
            public event OrderRowChangeEventHandler OrderRowDeleting;
            
            public void AddOrderRow(OrderRow row)
            {
                this.Rows.Add(row);
            }
            
            public OrderRow AddOrderRow(
                        BlockOrderRow parentBlockOrderRowByFKBlockOrderOrder, 
                        AccountRow parentAccountRowByFKAccountOrder, 
                        SecurityRow parentSecurityRowByFKSecurityOrderSecurityId, 
                        SecurityRow parentSecurityRowByFKSecurityOrderSettlementId, 
                        int BrokerId, 
                        int PositionTypeCode, 
                        TransactionTypeRow parentTransactionTypeRowByFKTransactionTypeOrder, 
                        TimeInForceRow parentTimeInForceRowByFKTimeInForceOrder, 
                        OrderTypeRow parentOrderTypeRowByFKOrderTypeOrder, 
                        int ConditionCode, 
                        bool IsDeleted, 
                        bool IsAgency, 
                        decimal Quantity, 
                        decimal Price1, 
                        decimal Price2, 
                        string Note, 
                        System.DateTime CreatedTime, 
                        int CreatedUserId, 
                        System.DateTime ModifiedTime, 
                        int ModifiedUserId)
            {
                OrderRow rowOrderRow = ((OrderRow)(this.NewRow()));
                rowOrderRow.ItemArray = new object[] {
                        null,
                        parentBlockOrderRowByFKBlockOrderOrder[0],
                        parentAccountRowByFKAccountOrder[17],
                        parentSecurityRowByFKSecurityOrderSecurityId[17],
                        parentSecurityRowByFKSecurityOrderSettlementId[17],
                        BrokerId,
                        PositionTypeCode,
                        parentTransactionTypeRowByFKTransactionTypeOrder[0],
                        parentTimeInForceRowByFKTimeInForceOrder[0],
                        parentOrderTypeRowByFKOrderTypeOrder[0],
                        ConditionCode,
                        IsDeleted,
                        IsAgency,
                        Quantity,
                        Price1,
                        Price2,
                        Note,
                        CreatedTime,
                        CreatedUserId,
                        ModifiedTime,
                        ModifiedUserId};
                this.Rows.Add(rowOrderRow);
                return rowOrderRow;
            }
            
            public OrderRow FindByOrderId(int OrderId)
            {
                return ((OrderRow)(this.Rows.Find(new object[] {
                            OrderId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                OrderDataTable cln = ((OrderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new OrderDataTable();
            }
            
            internal void InitVars()
            {
                this.columnOrderId = this.Columns["OrderId"];
                this.columnBlockOrderId = this.Columns["BlockOrderId"];
                this.columnAccountId = this.Columns["AccountId"];
                this.columnSecurityId = this.Columns["SecurityId"];
                this.columnSettlementId = this.Columns["SettlementId"];
                this.columnBrokerId = this.Columns["BrokerId"];
                this.columnPositionTypeCode = this.Columns["PositionTypeCode"];
                this.columnTransactionTypeCode = this.Columns["TransactionTypeCode"];
                this.columnTimeInForceCode = this.Columns["TimeInForceCode"];
                this.columnOrderTypeCode = this.Columns["OrderTypeCode"];
                this.columnConditionCode = this.Columns["ConditionCode"];
                this.columnIsDeleted = this.Columns["IsDeleted"];
                this.columnIsAgency = this.Columns["IsAgency"];
                this.columnQuantity = this.Columns["Quantity"];
                this.columnPrice1 = this.Columns["Price1"];
                this.columnPrice2 = this.Columns["Price2"];
                this.columnNote = this.Columns["Note"];
                this.columnCreatedTime = this.Columns["CreatedTime"];
                this.columnCreatedUserId = this.Columns["CreatedUserId"];
                this.columnModifiedTime = this.Columns["ModifiedTime"];
                this.columnModifiedUserId = this.Columns["ModifiedUserId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnOrderId = new Column("OrderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrderId);
                this.columnBlockOrderId = new Column("BlockOrderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlockOrderId);
                this.columnAccountId = new Column("AccountId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountId);
                this.columnSecurityId = new Column("SecurityId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityId);
                this.columnSettlementId = new Column("SettlementId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSettlementId);
                this.columnBrokerId = new Column("BrokerId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBrokerId);
                this.columnPositionTypeCode = new Column("PositionTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPositionTypeCode);
                this.columnTransactionTypeCode = new Column("TransactionTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionTypeCode);
                this.columnTimeInForceCode = new Column("TimeInForceCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeInForceCode);
                this.columnOrderTypeCode = new Column("OrderTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrderTypeCode);
                this.columnConditionCode = new Column("ConditionCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConditionCode);
                this.columnIsDeleted = new Column("IsDeleted", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsDeleted);
                this.columnIsAgency = new Column("IsAgency", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsAgency);
                this.columnQuantity = new Column("Quantity", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQuantity);
                this.columnPrice1 = new Column("Price1", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrice1);
                this.columnPrice2 = new Column("Price2", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrice2);
                this.columnNote = new Column("Note", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNote);
                this.columnCreatedTime = new Column("CreatedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedTime);
                this.columnCreatedUserId = new Column("CreatedUserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedUserId);
                this.columnModifiedTime = new Column("ModifiedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedTime);
                this.columnModifiedUserId = new Column("ModifiedUserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedUserId);
                this.Constraints.Add(new UniqueConstraint("PKOrder", new DataColumn[] {
                                this.columnOrderId}, true));
                this.viewUKOrderAccountIdSecurityIdPositionTypeCode = new DataView(this, null, "AccountId,SecurityId,PositionTypeCode", DataViewRowState.CurrentRows);
                this.columnOrderId.AutoIncrement = true;
                this.columnOrderId.AllowDBNull = false;
                this.columnOrderId.Unique = true;
                this.columnBlockOrderId.AllowDBNull = false;
                this.columnAccountId.AllowDBNull = false;
                this.columnSecurityId.AllowDBNull = false;
                this.columnSettlementId.AllowDBNull = false;
                this.columnPositionTypeCode.AllowDBNull = false;
                this.columnTransactionTypeCode.AllowDBNull = false;
                this.columnTimeInForceCode.AllowDBNull = false;
                this.columnOrderTypeCode.AllowDBNull = false;
                this.columnIsDeleted.AllowDBNull = false;
                this.columnIsDeleted.DefaultValue = false;
                this.columnIsAgency.AllowDBNull = false;
                this.columnIsAgency.DefaultValue = false;
                this.columnQuantity.AllowDBNull = false;
                this.columnCreatedTime.AllowDBNull = false;
                this.columnCreatedUserId.AllowDBNull = false;
                this.columnModifiedTime.AllowDBNull = false;
                this.columnModifiedUserId.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.OrderLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Order"));
                }
            }
            
            public OrderRow NewOrderRow()
            {
                return ((OrderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new OrderRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(OrderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.OrderRowChanged != null))
                {
                    this.OrderRowChanged(this, new OrderRowChangeEvent(((OrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.OrderRowChanging != null))
                {
                    this.OrderRowChanging(this, new OrderRowChangeEvent(((OrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.OrderRowDeleted != null))
                {
                    this.OrderRowDeleted(this, new OrderRowChangeEvent(((OrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.OrderRowDeleting != null))
                {
                    this.OrderRowDeleting(this, new OrderRowChangeEvent(((OrderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveOrderRow(OrderRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrderRow : Row
        {
            
            private OrderDataTable tableOrder;
            
            internal OrderRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableOrder = ((OrderDataTable)(this.Table));
            }
            
            public int OrderId
            {
                get
                {
                    return ((int)(this[this.tableOrder.OrderIdColumn]));
                }
                set
                {
                    this[this.tableOrder.OrderIdColumn] = value;
                }
            }
            
            public int BlockOrderId
            {
                get
                {
                    return ((int)(this[this.tableOrder.BlockOrderIdColumn]));
                }
                set
                {
                    this[this.tableOrder.BlockOrderIdColumn] = value;
                }
            }
            
            public int AccountId
            {
                get
                {
                    return ((int)(this[this.tableOrder.AccountIdColumn]));
                }
                set
                {
                    this[this.tableOrder.AccountIdColumn] = value;
                }
            }
            
            public int SecurityId
            {
                get
                {
                    return ((int)(this[this.tableOrder.SecurityIdColumn]));
                }
                set
                {
                    this[this.tableOrder.SecurityIdColumn] = value;
                }
            }
            
            public int SettlementId
            {
                get
                {
                    return ((int)(this[this.tableOrder.SettlementIdColumn]));
                }
                set
                {
                    this[this.tableOrder.SettlementIdColumn] = value;
                }
            }
            
            public int BrokerId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableOrder.BrokerIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableOrder.BrokerIdColumn] = value;
                }
            }
            
            public int PositionTypeCode
            {
                get
                {
                    return ((int)(this[this.tableOrder.PositionTypeCodeColumn]));
                }
                set
                {
                    this[this.tableOrder.PositionTypeCodeColumn] = value;
                }
            }
            
            public int TransactionTypeCode
            {
                get
                {
                    return ((int)(this[this.tableOrder.TransactionTypeCodeColumn]));
                }
                set
                {
                    this[this.tableOrder.TransactionTypeCodeColumn] = value;
                }
            }
            
            public int TimeInForceCode
            {
                get
                {
                    return ((int)(this[this.tableOrder.TimeInForceCodeColumn]));
                }
                set
                {
                    this[this.tableOrder.TimeInForceCodeColumn] = value;
                }
            }
            
            public int OrderTypeCode
            {
                get
                {
                    return ((int)(this[this.tableOrder.OrderTypeCodeColumn]));
                }
                set
                {
                    this[this.tableOrder.OrderTypeCodeColumn] = value;
                }
            }
            
            public int ConditionCode
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableOrder.ConditionCodeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableOrder.ConditionCodeColumn] = value;
                }
            }
            
            public bool IsDeleted
            {
                get
                {
                    return ((bool)(this[this.tableOrder.IsDeletedColumn]));
                }
                set
                {
                    this[this.tableOrder.IsDeletedColumn] = value;
                }
            }
            
            public bool IsAgency
            {
                get
                {
                    return ((bool)(this[this.tableOrder.IsAgencyColumn]));
                }
                set
                {
                    this[this.tableOrder.IsAgencyColumn] = value;
                }
            }
            
            public decimal Quantity
            {
                get
                {
                    return ((decimal)(this[this.tableOrder.QuantityColumn]));
                }
                set
                {
                    this[this.tableOrder.QuantityColumn] = value;
                }
            }
            
            public decimal Price1
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableOrder.Price1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableOrder.Price1Column] = value;
                }
            }
            
            public decimal Price2
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableOrder.Price2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableOrder.Price2Column] = value;
                }
            }
            
            public string Note
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableOrder.NoteColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableOrder.NoteColumn] = value;
                }
            }
            
            public System.DateTime CreatedTime
            {
                get
                {
                    return ((System.DateTime)(this[this.tableOrder.CreatedTimeColumn]));
                }
                set
                {
                    this[this.tableOrder.CreatedTimeColumn] = value;
                }
            }
            
            public int CreatedUserId
            {
                get
                {
                    return ((int)(this[this.tableOrder.CreatedUserIdColumn]));
                }
                set
                {
                    this[this.tableOrder.CreatedUserIdColumn] = value;
                }
            }
            
            public System.DateTime ModifiedTime
            {
                get
                {
                    return ((System.DateTime)(this[this.tableOrder.ModifiedTimeColumn]));
                }
                set
                {
                    this[this.tableOrder.ModifiedTimeColumn] = value;
                }
            }
            
            public int ModifiedUserId
            {
                get
                {
                    return ((int)(this[this.tableOrder.ModifiedUserIdColumn]));
                }
                set
                {
                    this[this.tableOrder.ModifiedUserIdColumn] = value;
                }
            }
            
            public AccountRow AccountRow
            {
                get
                {
                    if ((DataSetMarket.lockAccount.IsReaderLockHeld || DataSetMarket.lockAccount.IsWriterLockHeld))
                    {
                        return ((AccountRow)(this.GetParentRow(this.Table.ParentRelations["FKAccountOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Account"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKAccountOrder"]);
                }
            }
            
            public BlockOrderRow BlockOrderRow
            {
                get
                {
                    if ((DataSetMarket.lockBlockOrder.IsReaderLockHeld || DataSetMarket.lockBlockOrder.IsWriterLockHeld))
                    {
                        return ((BlockOrderRow)(this.GetParentRow(this.Table.ParentRelations["FKBlockOrderOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "BlockOrder"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKBlockOrderOrder"]);
                }
            }
            
            public OrderTypeRow OrderTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockOrderType.IsReaderLockHeld || DataSetMarket.lockOrderType.IsWriterLockHeld))
                    {
                        return ((OrderTypeRow)(this.GetParentRow(this.Table.ParentRelations["FKOrderTypeOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "OrderType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKOrderTypeOrder"]);
                }
            }
            
            public SecurityRow SecurityRowByFKSecurityOrderSecurityId
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["FKSecurityOrderSecurityId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKSecurityOrderSecurityId"]);
                }
            }
            
            public SecurityRow SecurityRowByFKSecurityOrderSettlementId
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["FKSecurityOrderSettlementId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKSecurityOrderSettlementId"]);
                }
            }
            
            public TimeInForceRow TimeInForceRow
            {
                get
                {
                    if ((DataSetMarket.lockTimeInForce.IsReaderLockHeld || DataSetMarket.lockTimeInForce.IsWriterLockHeld))
                    {
                        return ((TimeInForceRow)(this.GetParentRow(this.Table.ParentRelations["FKTimeInForceOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "TimeInForce"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKTimeInForceOrder"]);
                }
            }
            
            public TransactionTypeRow TransactionTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockTransactionType.IsReaderLockHeld || DataSetMarket.lockTransactionType.IsWriterLockHeld))
                    {
                        return ((TransactionTypeRow)(this.GetParentRow(this.Table.ParentRelations["FKTransactionTypeOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "TransactionType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKTransactionTypeOrder"]);
                }
            }
            
            public bool IsBrokerIdNull()
            {
                return this.IsNull(this.tableOrder.BrokerIdColumn);
            }
            
            public void SetBrokerIdNull()
            {
                this[this.tableOrder.BrokerIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsConditionCodeNull()
            {
                return this.IsNull(this.tableOrder.ConditionCodeColumn);
            }
            
            public void SetConditionCodeNull()
            {
                this[this.tableOrder.ConditionCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsPrice1Null()
            {
                return this.IsNull(this.tableOrder.Price1Column);
            }
            
            public void SetPrice1Null()
            {
                this[this.tableOrder.Price1Column] = System.Convert.DBNull;
            }
            
            public bool IsPrice2Null()
            {
                return this.IsNull(this.tableOrder.Price2Column);
            }
            
            public void SetPrice2Null()
            {
                this[this.tableOrder.Price2Column] = System.Convert.DBNull;
            }
            
            public bool IsNoteNull()
            {
                return this.IsNull(this.tableOrder.NoteColumn);
            }
            
            public void SetNoteNull()
            {
                this[this.tableOrder.NoteColumn] = System.Convert.DBNull;
            }
            
            public OrderTreeRow[] GetOrderTreeRowsByFKOrderOrderTreeChildId()
            {
                return ((OrderTreeRow[])(this.GetChildRows(this.Table.ChildRelations["FKOrderOrderTreeChildId"])));
            }
            
            public OrderTreeRow[] GetOrderTreeRowsByFKOrderOrderTreeParentId()
            {
                return ((OrderTreeRow[])(this.GetChildRows(this.Table.ChildRelations["FKOrderOrderTreeParentId"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrderRowChangeEvent : EventArgs
        {
            
            private OrderRow eventRow;
            
            private DataRowAction eventAction;
            
            public OrderRowChangeEvent(OrderRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public OrderRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrderTreeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnParentId;
            
            private Column columnChildId;
            
            private Column columnIsDeleted;
            
            internal OrderTreeDataTable() : 
                    base("OrderTree")
            {
                this.InitClass();
            }
            
            internal OrderTreeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ParentIdColumn
            {
                get
                {
                    return this.columnParentId;
                }
            }
            
            public Column ChildIdColumn
            {
                get
                {
                    return this.columnChildId;
                }
            }
            
            public Column IsDeletedColumn
            {
                get
                {
                    return this.columnIsDeleted;
                }
            }
            
            public OrderTreeRow this[int index]
            {
                get
                {
                    return ((OrderTreeRow)(this.Rows[index]));
                }
            }
            
            public event OrderTreeRowChangeEventHandler OrderTreeRowChanged;
            
            public event OrderTreeRowChangeEventHandler OrderTreeRowChanging;
            
            public event OrderTreeRowChangeEventHandler OrderTreeRowDeleted;
            
            public event OrderTreeRowChangeEventHandler OrderTreeRowDeleting;
            
            public void AddOrderTreeRow(OrderTreeRow row)
            {
                this.Rows.Add(row);
            }
            
            public OrderTreeRow AddOrderTreeRow(OrderRow parentOrderRowByFKOrderOrderTreeParentId, OrderRow parentOrderRowByFKOrderOrderTreeChildId, bool IsDeleted)
            {
                OrderTreeRow rowOrderTreeRow = ((OrderTreeRow)(this.NewRow()));
                rowOrderTreeRow.ItemArray = new object[] {
                        parentOrderRowByFKOrderOrderTreeParentId[0],
                        parentOrderRowByFKOrderOrderTreeChildId[0],
                        IsDeleted};
                this.Rows.Add(rowOrderTreeRow);
                return rowOrderTreeRow;
            }
            
            public OrderTreeRow FindByParentIdChildId(int ParentId, int ChildId)
            {
                return ((OrderTreeRow)(this.Rows.Find(new object[] {
                            ParentId,
                            ChildId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                OrderTreeDataTable cln = ((OrderTreeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new OrderTreeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnParentId = this.Columns["ParentId"];
                this.columnChildId = this.Columns["ChildId"];
                this.columnIsDeleted = this.Columns["IsDeleted"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnParentId = new Column("ParentId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnParentId);
                this.columnChildId = new Column("ChildId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChildId);
                this.columnIsDeleted = new Column("IsDeleted", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsDeleted);
                this.Constraints.Add(new UniqueConstraint("PKOrderTree", new DataColumn[] {
                                this.columnParentId,
                                this.columnChildId}, true));
                this.columnParentId.AllowDBNull = false;
                this.columnChildId.AllowDBNull = false;
                this.columnIsDeleted.AllowDBNull = false;
                this.columnIsDeleted.DefaultValue = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.OrderTreeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "OrderTree"));
                }
            }
            
            public OrderTreeRow NewOrderTreeRow()
            {
                return ((OrderTreeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new OrderTreeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(OrderTreeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.OrderTreeRowChanged != null))
                {
                    this.OrderTreeRowChanged(this, new OrderTreeRowChangeEvent(((OrderTreeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.OrderTreeRowChanging != null))
                {
                    this.OrderTreeRowChanging(this, new OrderTreeRowChangeEvent(((OrderTreeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.OrderTreeRowDeleted != null))
                {
                    this.OrderTreeRowDeleted(this, new OrderTreeRowChangeEvent(((OrderTreeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.OrderTreeRowDeleting != null))
                {
                    this.OrderTreeRowDeleting(this, new OrderTreeRowChangeEvent(((OrderTreeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveOrderTreeRow(OrderTreeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrderTreeRow : Row
        {
            
            private OrderTreeDataTable tableOrderTree;
            
            internal OrderTreeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableOrderTree = ((OrderTreeDataTable)(this.Table));
            }
            
            public int ParentId
            {
                get
                {
                    return ((int)(this[this.tableOrderTree.ParentIdColumn]));
                }
                set
                {
                    this[this.tableOrderTree.ParentIdColumn] = value;
                }
            }
            
            public int ChildId
            {
                get
                {
                    return ((int)(this[this.tableOrderTree.ChildIdColumn]));
                }
                set
                {
                    this[this.tableOrderTree.ChildIdColumn] = value;
                }
            }
            
            public bool IsDeleted
            {
                get
                {
                    return ((bool)(this[this.tableOrderTree.IsDeletedColumn]));
                }
                set
                {
                    this[this.tableOrderTree.IsDeletedColumn] = value;
                }
            }
            
            public OrderRow OrderRowByFKOrderOrderTreeChildId
            {
                get
                {
                    if ((DataSetMarket.lockOrder.IsReaderLockHeld || DataSetMarket.lockOrder.IsWriterLockHeld))
                    {
                        return ((OrderRow)(this.GetParentRow(this.Table.ParentRelations["FKOrderOrderTreeChildId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Order"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKOrderOrderTreeChildId"]);
                }
            }
            
            public OrderRow OrderRowByFKOrderOrderTreeParentId
            {
                get
                {
                    if ((DataSetMarket.lockOrder.IsReaderLockHeld || DataSetMarket.lockOrder.IsWriterLockHeld))
                    {
                        return ((OrderRow)(this.GetParentRow(this.Table.ParentRelations["FKOrderOrderTreeParentId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Order"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKOrderOrderTreeParentId"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrderTreeRowChangeEvent : EventArgs
        {
            
            private OrderTreeRow eventRow;
            
            private DataRowAction eventAction;
            
            public OrderTreeRowChangeEvent(OrderTreeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public OrderTreeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrderTypeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnOrderTypeCode;
            
            private Column columnMnemonic;
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private DataView viewUKOrderTypeExternalId0;
            
            private DataView viewUKOrderTypeExternalId1;
            
            private DataView viewUKOrderTypeExternalId2;
            
            private DataView viewUKOrderTypeExternalId3;
            
            internal OrderTypeDataTable() : 
                    base("OrderType")
            {
                this.InitClass();
            }
            
            internal OrderTypeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column OrderTypeCodeColumn
            {
                get
                {
                    return this.columnOrderTypeCode;
                }
            }
            
            public Column MnemonicColumn
            {
                get
                {
                    return this.columnMnemonic;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public DataView UKOrderTypeExternalId0
            {
                get
                {
                    return this.viewUKOrderTypeExternalId0;
                }
            }
            
            public DataView UKOrderTypeExternalId1
            {
                get
                {
                    return this.viewUKOrderTypeExternalId1;
                }
            }
            
            public DataView UKOrderTypeExternalId2
            {
                get
                {
                    return this.viewUKOrderTypeExternalId2;
                }
            }
            
            public DataView UKOrderTypeExternalId3
            {
                get
                {
                    return this.viewUKOrderTypeExternalId3;
                }
            }
            
            public OrderTypeRow this[int index]
            {
                get
                {
                    return ((OrderTypeRow)(this.Rows[index]));
                }
            }
            
            public event OrderTypeRowChangeEventHandler OrderTypeRowChanged;
            
            public event OrderTypeRowChangeEventHandler OrderTypeRowChanging;
            
            public event OrderTypeRowChangeEventHandler OrderTypeRowDeleted;
            
            public event OrderTypeRowChangeEventHandler OrderTypeRowDeleting;
            
            public void AddOrderTypeRow(OrderTypeRow row)
            {
                this.Rows.Add(row);
            }
            
            public OrderTypeRow AddOrderTypeRow(int OrderTypeCode, string Mnemonic, string Description, string ExternalId0, string ExternalId1, string ExternalId2, string ExternalId3)
            {
                OrderTypeRow rowOrderTypeRow = ((OrderTypeRow)(this.NewRow()));
                rowOrderTypeRow.ItemArray = new object[] {
                        OrderTypeCode,
                        Mnemonic,
                        Description,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3};
                this.Rows.Add(rowOrderTypeRow);
                return rowOrderTypeRow;
            }
            
            public OrderTypeRow FindByOrderTypeCode(int OrderTypeCode)
            {
                return ((OrderTypeRow)(this.Rows.Find(new object[] {
                            OrderTypeCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                OrderTypeDataTable cln = ((OrderTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new OrderTypeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnOrderTypeCode = this.Columns["OrderTypeCode"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnOrderTypeCode = new Column("OrderTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrderTypeCode);
                this.columnMnemonic = new Column("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.Constraints.Add(new UniqueConstraint("PKOrderType", new DataColumn[] {
                                this.columnOrderTypeCode}, true));
                this.viewUKOrderTypeExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewUKOrderTypeExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.viewUKOrderTypeExternalId2 = new DataView(this, null, "ExternalId2", DataViewRowState.CurrentRows);
                this.viewUKOrderTypeExternalId3 = new DataView(this, null, "ExternalId3", DataViewRowState.CurrentRows);
                this.columnOrderTypeCode.AllowDBNull = false;
                this.columnOrderTypeCode.Unique = true;
                this.columnMnemonic.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.OrderTypeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "OrderType"));
                }
            }
            
            public OrderTypeRow NewOrderTypeRow()
            {
                return ((OrderTypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new OrderTypeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(OrderTypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.OrderTypeRowChanged != null))
                {
                    this.OrderTypeRowChanged(this, new OrderTypeRowChangeEvent(((OrderTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.OrderTypeRowChanging != null))
                {
                    this.OrderTypeRowChanging(this, new OrderTypeRowChangeEvent(((OrderTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.OrderTypeRowDeleted != null))
                {
                    this.OrderTypeRowDeleted(this, new OrderTypeRowChangeEvent(((OrderTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.OrderTypeRowDeleting != null))
                {
                    this.OrderTypeRowDeleting(this, new OrderTypeRowChangeEvent(((OrderTypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveOrderTypeRow(OrderTypeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrderTypeRow : Row
        {
            
            private OrderTypeDataTable tableOrderType;
            
            internal OrderTypeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableOrderType = ((OrderTypeDataTable)(this.Table));
            }
            
            public int OrderTypeCode
            {
                get
                {
                    return ((int)(this[this.tableOrderType.OrderTypeCodeColumn]));
                }
                set
                {
                    this[this.tableOrderType.OrderTypeCodeColumn] = value;
                }
            }
            
            public string Mnemonic
            {
                get
                {
                    return ((string)(this[this.tableOrderType.MnemonicColumn]));
                }
                set
                {
                    this[this.tableOrderType.MnemonicColumn] = value;
                }
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableOrderType.DescriptionColumn]));
                }
                set
                {
                    this[this.tableOrderType.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableOrderType.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableOrderType.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableOrderType.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableOrderType.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableOrderType.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableOrderType.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableOrderType.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableOrderType.ExternalId3Column] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableOrderType.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableOrderType.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableOrderType.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableOrderType.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableOrderType.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableOrderType.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableOrderType.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableOrderType.ExternalId3Column] = System.Convert.DBNull;
            }
            
            public OrderRow[] GetOrderRows()
            {
                return ((OrderRow[])(this.GetChildRows(this.Table.ChildRelations["FKOrderTypeOrder"])));
            }
            
            public PlacementRow[] GetPlacementRows()
            {
                return ((PlacementRow[])(this.GetChildRows(this.Table.ChildRelations["FKOrderTypePlacement"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrderTypeRowChangeEvent : EventArgs
        {
            
            private OrderTypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public OrderTypeRowChangeEvent(OrderTypeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public OrderTypeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PlacementDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnPlacementId;
            
            private Column columnBlockOrderId;
            
            private Column columnBrokerId;
            
            private Column columnTimeInForceCode;
            
            private Column columnOrderTypeCode;
            
            private Column columnIsDeleted;
            
            private Column columnIsRouted;
            
            private Column columnQuantity;
            
            private Column columnPrice1;
            
            private Column columnPrice2;
            
            private Column columnCreatedTime;
            
            private Column columnCreatedUserId;
            
            private Column columnModifiedTime;
            
            private Column columnModifiedUserId;
            
            internal PlacementDataTable() : 
                    base("Placement")
            {
                this.InitClass();
            }
            
            internal PlacementDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column PlacementIdColumn
            {
                get
                {
                    return this.columnPlacementId;
                }
            }
            
            public Column BlockOrderIdColumn
            {
                get
                {
                    return this.columnBlockOrderId;
                }
            }
            
            public Column BrokerIdColumn
            {
                get
                {
                    return this.columnBrokerId;
                }
            }
            
            public Column TimeInForceCodeColumn
            {
                get
                {
                    return this.columnTimeInForceCode;
                }
            }
            
            public Column OrderTypeCodeColumn
            {
                get
                {
                    return this.columnOrderTypeCode;
                }
            }
            
            public Column IsDeletedColumn
            {
                get
                {
                    return this.columnIsDeleted;
                }
            }
            
            public Column IsRoutedColumn
            {
                get
                {
                    return this.columnIsRouted;
                }
            }
            
            public Column QuantityColumn
            {
                get
                {
                    return this.columnQuantity;
                }
            }
            
            public Column Price1Column
            {
                get
                {
                    return this.columnPrice1;
                }
            }
            
            public Column Price2Column
            {
                get
                {
                    return this.columnPrice2;
                }
            }
            
            public Column CreatedTimeColumn
            {
                get
                {
                    return this.columnCreatedTime;
                }
            }
            
            public Column CreatedUserIdColumn
            {
                get
                {
                    return this.columnCreatedUserId;
                }
            }
            
            public Column ModifiedTimeColumn
            {
                get
                {
                    return this.columnModifiedTime;
                }
            }
            
            public Column ModifiedUserIdColumn
            {
                get
                {
                    return this.columnModifiedUserId;
                }
            }
            
            public PlacementRow this[int index]
            {
                get
                {
                    return ((PlacementRow)(this.Rows[index]));
                }
            }
            
            public event PlacementRowChangeEventHandler PlacementRowChanged;
            
            public event PlacementRowChangeEventHandler PlacementRowChanging;
            
            public event PlacementRowChangeEventHandler PlacementRowDeleted;
            
            public event PlacementRowChangeEventHandler PlacementRowDeleting;
            
            public void AddPlacementRow(PlacementRow row)
            {
                this.Rows.Add(row);
            }
            
            public PlacementRow AddPlacementRow(BlockOrderRow parentBlockOrderRowByFKBlockOrderPlacement, BrokerRow parentBrokerRowByFKBrokerPlacement, TimeInForceRow parentTimeInForceRowByFKTimeInForcePlacement, OrderTypeRow parentOrderTypeRowByFKOrderTypePlacement, bool IsDeleted, bool IsRouted, decimal Quantity, decimal Price1, decimal Price2, System.DateTime CreatedTime, UserRow parentUserRowByFKUserPlacementCreatedUserId, System.DateTime ModifiedTime, UserRow parentUserRowByFKUserPlacementModifiedUserId)
            {
                PlacementRow rowPlacementRow = ((PlacementRow)(this.NewRow()));
                rowPlacementRow.ItemArray = new object[] {
                        null,
                        parentBlockOrderRowByFKBlockOrderPlacement[0],
                        parentBrokerRowByFKBrokerPlacement[17],
                        parentTimeInForceRowByFKTimeInForcePlacement[0],
                        parentOrderTypeRowByFKOrderTypePlacement[0],
                        IsDeleted,
                        IsRouted,
                        Quantity,
                        Price1,
                        Price2,
                        CreatedTime,
                        parentUserRowByFKUserPlacementCreatedUserId[20],
                        ModifiedTime,
                        parentUserRowByFKUserPlacementModifiedUserId[20]};
                this.Rows.Add(rowPlacementRow);
                return rowPlacementRow;
            }
            
            public PlacementRow FindByPlacementId(int PlacementId)
            {
                return ((PlacementRow)(this.Rows.Find(new object[] {
                            PlacementId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                PlacementDataTable cln = ((PlacementDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new PlacementDataTable();
            }
            
            internal void InitVars()
            {
                this.columnPlacementId = this.Columns["PlacementId"];
                this.columnBlockOrderId = this.Columns["BlockOrderId"];
                this.columnBrokerId = this.Columns["BrokerId"];
                this.columnTimeInForceCode = this.Columns["TimeInForceCode"];
                this.columnOrderTypeCode = this.Columns["OrderTypeCode"];
                this.columnIsDeleted = this.Columns["IsDeleted"];
                this.columnIsRouted = this.Columns["IsRouted"];
                this.columnQuantity = this.Columns["Quantity"];
                this.columnPrice1 = this.Columns["Price1"];
                this.columnPrice2 = this.Columns["Price2"];
                this.columnCreatedTime = this.Columns["CreatedTime"];
                this.columnCreatedUserId = this.Columns["CreatedUserId"];
                this.columnModifiedTime = this.Columns["ModifiedTime"];
                this.columnModifiedUserId = this.Columns["ModifiedUserId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnPlacementId = new Column("PlacementId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPlacementId);
                this.columnBlockOrderId = new Column("BlockOrderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlockOrderId);
                this.columnBrokerId = new Column("BrokerId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBrokerId);
                this.columnTimeInForceCode = new Column("TimeInForceCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeInForceCode);
                this.columnOrderTypeCode = new Column("OrderTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrderTypeCode);
                this.columnIsDeleted = new Column("IsDeleted", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsDeleted);
                this.columnIsRouted = new Column("IsRouted", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsRouted);
                this.columnQuantity = new Column("Quantity", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQuantity);
                this.columnPrice1 = new Column("Price1", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrice1);
                this.columnPrice2 = new Column("Price2", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrice2);
                this.columnCreatedTime = new Column("CreatedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedTime);
                this.columnCreatedUserId = new Column("CreatedUserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedUserId);
                this.columnModifiedTime = new Column("ModifiedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedTime);
                this.columnModifiedUserId = new Column("ModifiedUserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedUserId);
                this.Constraints.Add(new UniqueConstraint("PKPlacement", new DataColumn[] {
                                this.columnPlacementId}, true));
                this.columnPlacementId.AutoIncrement = true;
                this.columnPlacementId.AllowDBNull = false;
                this.columnPlacementId.Unique = true;
                this.columnBlockOrderId.AllowDBNull = false;
                this.columnBrokerId.AllowDBNull = false;
                this.columnTimeInForceCode.AllowDBNull = false;
                this.columnOrderTypeCode.AllowDBNull = false;
                this.columnIsDeleted.AllowDBNull = false;
                this.columnIsDeleted.DefaultValue = false;
                this.columnIsRouted.AllowDBNull = false;
                this.columnIsRouted.DefaultValue = false;
                this.columnQuantity.AllowDBNull = false;
                this.columnCreatedTime.AllowDBNull = false;
                this.columnCreatedUserId.AllowDBNull = false;
                this.columnModifiedTime.AllowDBNull = false;
                this.columnModifiedUserId.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.PlacementLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Placement"));
                }
            }
            
            public PlacementRow NewPlacementRow()
            {
                return ((PlacementRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new PlacementRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(PlacementRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.PlacementRowChanged != null))
                {
                    this.PlacementRowChanged(this, new PlacementRowChangeEvent(((PlacementRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.PlacementRowChanging != null))
                {
                    this.PlacementRowChanging(this, new PlacementRowChangeEvent(((PlacementRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.PlacementRowDeleted != null))
                {
                    this.PlacementRowDeleted(this, new PlacementRowChangeEvent(((PlacementRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.PlacementRowDeleting != null))
                {
                    this.PlacementRowDeleting(this, new PlacementRowChangeEvent(((PlacementRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePlacementRow(PlacementRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PlacementRow : Row
        {
            
            private PlacementDataTable tablePlacement;
            
            internal PlacementRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tablePlacement = ((PlacementDataTable)(this.Table));
            }
            
            public int PlacementId
            {
                get
                {
                    return ((int)(this[this.tablePlacement.PlacementIdColumn]));
                }
                set
                {
                    this[this.tablePlacement.PlacementIdColumn] = value;
                }
            }
            
            public int BlockOrderId
            {
                get
                {
                    return ((int)(this[this.tablePlacement.BlockOrderIdColumn]));
                }
                set
                {
                    this[this.tablePlacement.BlockOrderIdColumn] = value;
                }
            }
            
            public int BrokerId
            {
                get
                {
                    return ((int)(this[this.tablePlacement.BrokerIdColumn]));
                }
                set
                {
                    this[this.tablePlacement.BrokerIdColumn] = value;
                }
            }
            
            public int TimeInForceCode
            {
                get
                {
                    return ((int)(this[this.tablePlacement.TimeInForceCodeColumn]));
                }
                set
                {
                    this[this.tablePlacement.TimeInForceCodeColumn] = value;
                }
            }
            
            public int OrderTypeCode
            {
                get
                {
                    return ((int)(this[this.tablePlacement.OrderTypeCodeColumn]));
                }
                set
                {
                    this[this.tablePlacement.OrderTypeCodeColumn] = value;
                }
            }
            
            public bool IsDeleted
            {
                get
                {
                    return ((bool)(this[this.tablePlacement.IsDeletedColumn]));
                }
                set
                {
                    this[this.tablePlacement.IsDeletedColumn] = value;
                }
            }
            
            public bool IsRouted
            {
                get
                {
                    return ((bool)(this[this.tablePlacement.IsRoutedColumn]));
                }
                set
                {
                    this[this.tablePlacement.IsRoutedColumn] = value;
                }
            }
            
            public decimal Quantity
            {
                get
                {
                    return ((decimal)(this[this.tablePlacement.QuantityColumn]));
                }
                set
                {
                    this[this.tablePlacement.QuantityColumn] = value;
                }
            }
            
            public decimal Price1
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablePlacement.Price1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePlacement.Price1Column] = value;
                }
            }
            
            public decimal Price2
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablePlacement.Price2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePlacement.Price2Column] = value;
                }
            }
            
            public System.DateTime CreatedTime
            {
                get
                {
                    return ((System.DateTime)(this[this.tablePlacement.CreatedTimeColumn]));
                }
                set
                {
                    this[this.tablePlacement.CreatedTimeColumn] = value;
                }
            }
            
            public int CreatedUserId
            {
                get
                {
                    return ((int)(this[this.tablePlacement.CreatedUserIdColumn]));
                }
                set
                {
                    this[this.tablePlacement.CreatedUserIdColumn] = value;
                }
            }
            
            public System.DateTime ModifiedTime
            {
                get
                {
                    return ((System.DateTime)(this[this.tablePlacement.ModifiedTimeColumn]));
                }
                set
                {
                    this[this.tablePlacement.ModifiedTimeColumn] = value;
                }
            }
            
            public int ModifiedUserId
            {
                get
                {
                    return ((int)(this[this.tablePlacement.ModifiedUserIdColumn]));
                }
                set
                {
                    this[this.tablePlacement.ModifiedUserIdColumn] = value;
                }
            }
            
            public BlockOrderRow BlockOrderRow
            {
                get
                {
                    if ((DataSetMarket.lockBlockOrder.IsReaderLockHeld || DataSetMarket.lockBlockOrder.IsWriterLockHeld))
                    {
                        return ((BlockOrderRow)(this.GetParentRow(this.Table.ParentRelations["FKBlockOrderPlacement"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "BlockOrder"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKBlockOrderPlacement"]);
                }
            }
            
            public BrokerRow BrokerRow
            {
                get
                {
                    if ((DataSetMarket.lockBroker.IsReaderLockHeld || DataSetMarket.lockBroker.IsWriterLockHeld))
                    {
                        return ((BrokerRow)(this.GetParentRow(this.Table.ParentRelations["FKBrokerPlacement"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Broker"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKBrokerPlacement"]);
                }
            }
            
            public UserRow UserRowByFKUserPlacementCreatedUserId
            {
                get
                {
                    if ((DataSetMarket.lockUser.IsReaderLockHeld || DataSetMarket.lockUser.IsWriterLockHeld))
                    {
                        return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["FKUserPlacementCreatedUserId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "User"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKUserPlacementCreatedUserId"]);
                }
            }
            
            public UserRow UserRowByFKUserPlacementModifiedUserId
            {
                get
                {
                    if ((DataSetMarket.lockUser.IsReaderLockHeld || DataSetMarket.lockUser.IsWriterLockHeld))
                    {
                        return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["FKUserPlacementModifiedUserId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "User"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKUserPlacementModifiedUserId"]);
                }
            }
            
            public OrderTypeRow OrderTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockOrderType.IsReaderLockHeld || DataSetMarket.lockOrderType.IsWriterLockHeld))
                    {
                        return ((OrderTypeRow)(this.GetParentRow(this.Table.ParentRelations["FKOrderTypePlacement"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "OrderType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKOrderTypePlacement"]);
                }
            }
            
            public TimeInForceRow TimeInForceRow
            {
                get
                {
                    if ((DataSetMarket.lockTimeInForce.IsReaderLockHeld || DataSetMarket.lockTimeInForce.IsWriterLockHeld))
                    {
                        return ((TimeInForceRow)(this.GetParentRow(this.Table.ParentRelations["FKTimeInForcePlacement"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "TimeInForce"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKTimeInForcePlacement"]);
                }
            }
            
            public bool IsPrice1Null()
            {
                return this.IsNull(this.tablePlacement.Price1Column);
            }
            
            public void SetPrice1Null()
            {
                this[this.tablePlacement.Price1Column] = System.Convert.DBNull;
            }
            
            public bool IsPrice2Null()
            {
                return this.IsNull(this.tablePlacement.Price2Column);
            }
            
            public void SetPrice2Null()
            {
                this[this.tablePlacement.Price2Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PlacementRowChangeEvent : EventArgs
        {
            
            private PlacementRow eventRow;
            
            private DataRowAction eventAction;
            
            public PlacementRowChangeEvent(PlacementRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PlacementRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PositionDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnAccountId;
            
            private Column columnSecurityId;
            
            private Column columnPositionTypeCode;
            
            private Column columnUserData0;
            
            private Column columnUserData1;
            
            private Column columnUserData2;
            
            private Column columnUserData3;
            
            private Column columnUserData4;
            
            private Column columnUserData5;
            
            private Column columnUserData6;
            
            private Column columnUserData7;
            
            internal PositionDataTable() : 
                    base("Position")
            {
                this.InitClass();
            }
            
            internal PositionDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column AccountIdColumn
            {
                get
                {
                    return this.columnAccountId;
                }
            }
            
            public Column SecurityIdColumn
            {
                get
                {
                    return this.columnSecurityId;
                }
            }
            
            public Column PositionTypeCodeColumn
            {
                get
                {
                    return this.columnPositionTypeCode;
                }
            }
            
            public Column UserData0Column
            {
                get
                {
                    return this.columnUserData0;
                }
            }
            
            public Column UserData1Column
            {
                get
                {
                    return this.columnUserData1;
                }
            }
            
            public Column UserData2Column
            {
                get
                {
                    return this.columnUserData2;
                }
            }
            
            public Column UserData3Column
            {
                get
                {
                    return this.columnUserData3;
                }
            }
            
            public Column UserData4Column
            {
                get
                {
                    return this.columnUserData4;
                }
            }
            
            public Column UserData5Column
            {
                get
                {
                    return this.columnUserData5;
                }
            }
            
            public Column UserData6Column
            {
                get
                {
                    return this.columnUserData6;
                }
            }
            
            public Column UserData7Column
            {
                get
                {
                    return this.columnUserData7;
                }
            }
            
            public PositionRow this[int index]
            {
                get
                {
                    return ((PositionRow)(this.Rows[index]));
                }
            }
            
            public event PositionRowChangeEventHandler PositionRowChanged;
            
            public event PositionRowChangeEventHandler PositionRowChanging;
            
            public event PositionRowChangeEventHandler PositionRowDeleted;
            
            public event PositionRowChangeEventHandler PositionRowDeleting;
            
            public void AddPositionRow(PositionRow row)
            {
                this.Rows.Add(row);
            }
            
            public PositionRow AddPositionRow(AccountRow parentAccountRowByFKAccountPosition, SecurityRow parentSecurityRowByFKSecurityPosition, PositionTypeRow parentPositionTypeRowByFKPositionTypePosition, decimal UserData0, decimal UserData1, decimal UserData2, decimal UserData3, decimal UserData4, decimal UserData5, decimal UserData6, decimal UserData7)
            {
                PositionRow rowPositionRow = ((PositionRow)(this.NewRow()));
                rowPositionRow.ItemArray = new object[] {
                        parentAccountRowByFKAccountPosition[17],
                        parentSecurityRowByFKSecurityPosition[17],
                        parentPositionTypeRowByFKPositionTypePosition[0],
                        UserData0,
                        UserData1,
                        UserData2,
                        UserData3,
                        UserData4,
                        UserData5,
                        UserData6,
                        UserData7};
                this.Rows.Add(rowPositionRow);
                return rowPositionRow;
            }
            
            public PositionRow FindByAccountIdSecurityIdPositionTypeCode(int AccountId, int SecurityId, int PositionTypeCode)
            {
                return ((PositionRow)(this.Rows.Find(new object[] {
                            AccountId,
                            SecurityId,
                            PositionTypeCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                PositionDataTable cln = ((PositionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new PositionDataTable();
            }
            
            internal void InitVars()
            {
                this.columnAccountId = this.Columns["AccountId"];
                this.columnSecurityId = this.Columns["SecurityId"];
                this.columnPositionTypeCode = this.Columns["PositionTypeCode"];
                this.columnUserData0 = this.Columns["UserData0"];
                this.columnUserData1 = this.Columns["UserData1"];
                this.columnUserData2 = this.Columns["UserData2"];
                this.columnUserData3 = this.Columns["UserData3"];
                this.columnUserData4 = this.Columns["UserData4"];
                this.columnUserData5 = this.Columns["UserData5"];
                this.columnUserData6 = this.Columns["UserData6"];
                this.columnUserData7 = this.Columns["UserData7"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnAccountId = new Column("AccountId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountId);
                this.columnSecurityId = new Column("SecurityId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityId);
                this.columnPositionTypeCode = new Column("PositionTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPositionTypeCode);
                this.columnUserData0 = new Column("UserData0", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData0);
                this.columnUserData1 = new Column("UserData1", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData1);
                this.columnUserData2 = new Column("UserData2", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData2);
                this.columnUserData3 = new Column("UserData3", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData3);
                this.columnUserData4 = new Column("UserData4", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData4);
                this.columnUserData5 = new Column("UserData5", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData5);
                this.columnUserData6 = new Column("UserData6", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData6);
                this.columnUserData7 = new Column("UserData7", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData7);
                this.Constraints.Add(new UniqueConstraint("PKPosition", new DataColumn[] {
                                this.columnAccountId,
                                this.columnSecurityId,
                                this.columnPositionTypeCode}, true));
                this.columnAccountId.AllowDBNull = false;
                this.columnSecurityId.AllowDBNull = false;
                this.columnPositionTypeCode.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.PositionLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Position"));
                }
            }
            
            public PositionRow NewPositionRow()
            {
                return ((PositionRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new PositionRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(PositionRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.PositionRowChanged != null))
                {
                    this.PositionRowChanged(this, new PositionRowChangeEvent(((PositionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.PositionRowChanging != null))
                {
                    this.PositionRowChanging(this, new PositionRowChangeEvent(((PositionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.PositionRowDeleted != null))
                {
                    this.PositionRowDeleted(this, new PositionRowChangeEvent(((PositionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.PositionRowDeleting != null))
                {
                    this.PositionRowDeleting(this, new PositionRowChangeEvent(((PositionRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePositionRow(PositionRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PositionRow : Row
        {
            
            private PositionDataTable tablePosition;
            
            internal PositionRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tablePosition = ((PositionDataTable)(this.Table));
            }
            
            public int AccountId
            {
                get
                {
                    return ((int)(this[this.tablePosition.AccountIdColumn]));
                }
                set
                {
                    this[this.tablePosition.AccountIdColumn] = value;
                }
            }
            
            public int SecurityId
            {
                get
                {
                    return ((int)(this[this.tablePosition.SecurityIdColumn]));
                }
                set
                {
                    this[this.tablePosition.SecurityIdColumn] = value;
                }
            }
            
            public int PositionTypeCode
            {
                get
                {
                    return ((int)(this[this.tablePosition.PositionTypeCodeColumn]));
                }
                set
                {
                    this[this.tablePosition.PositionTypeCodeColumn] = value;
                }
            }
            
            public decimal UserData0
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablePosition.UserData0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePosition.UserData0Column] = value;
                }
            }
            
            public decimal UserData1
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablePosition.UserData1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePosition.UserData1Column] = value;
                }
            }
            
            public decimal UserData2
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablePosition.UserData2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePosition.UserData2Column] = value;
                }
            }
            
            public decimal UserData3
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablePosition.UserData3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePosition.UserData3Column] = value;
                }
            }
            
            public decimal UserData4
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablePosition.UserData4Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePosition.UserData4Column] = value;
                }
            }
            
            public decimal UserData5
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablePosition.UserData5Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePosition.UserData5Column] = value;
                }
            }
            
            public decimal UserData6
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablePosition.UserData6Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePosition.UserData6Column] = value;
                }
            }
            
            public decimal UserData7
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tablePosition.UserData7Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePosition.UserData7Column] = value;
                }
            }
            
            public AccountRow AccountRow
            {
                get
                {
                    if ((DataSetMarket.lockAccount.IsReaderLockHeld || DataSetMarket.lockAccount.IsWriterLockHeld))
                    {
                        return ((AccountRow)(this.GetParentRow(this.Table.ParentRelations["FKAccountPosition"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Account"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKAccountPosition"]);
                }
            }
            
            public PositionTypeRow PositionTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockPositionType.IsReaderLockHeld || DataSetMarket.lockPositionType.IsWriterLockHeld))
                    {
                        return ((PositionTypeRow)(this.GetParentRow(this.Table.ParentRelations["FKPositionTypePosition"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "PositionType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKPositionTypePosition"]);
                }
            }
            
            public SecurityRow SecurityRow
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["FKSecurityPosition"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKSecurityPosition"]);
                }
            }
            
            public bool IsUserData0Null()
            {
                return this.IsNull(this.tablePosition.UserData0Column);
            }
            
            public void SetUserData0Null()
            {
                this[this.tablePosition.UserData0Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData1Null()
            {
                return this.IsNull(this.tablePosition.UserData1Column);
            }
            
            public void SetUserData1Null()
            {
                this[this.tablePosition.UserData1Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData2Null()
            {
                return this.IsNull(this.tablePosition.UserData2Column);
            }
            
            public void SetUserData2Null()
            {
                this[this.tablePosition.UserData2Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData3Null()
            {
                return this.IsNull(this.tablePosition.UserData3Column);
            }
            
            public void SetUserData3Null()
            {
                this[this.tablePosition.UserData3Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData4Null()
            {
                return this.IsNull(this.tablePosition.UserData4Column);
            }
            
            public void SetUserData4Null()
            {
                this[this.tablePosition.UserData4Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData5Null()
            {
                return this.IsNull(this.tablePosition.UserData5Column);
            }
            
            public void SetUserData5Null()
            {
                this[this.tablePosition.UserData5Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData6Null()
            {
                return this.IsNull(this.tablePosition.UserData6Column);
            }
            
            public void SetUserData6Null()
            {
                this[this.tablePosition.UserData6Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData7Null()
            {
                return this.IsNull(this.tablePosition.UserData7Column);
            }
            
            public void SetUserData7Null()
            {
                this[this.tablePosition.UserData7Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PositionRowChangeEvent : EventArgs
        {
            
            private PositionRow eventRow;
            
            private DataRowAction eventAction;
            
            public PositionRowChangeEvent(PositionRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PositionRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PositionTargetDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnModelId;
            
            private Column columnSecurityId;
            
            private Column columnPositionTypeCode;
            
            private Column columnPercent;
            
            internal PositionTargetDataTable() : 
                    base("PositionTarget")
            {
                this.InitClass();
            }
            
            internal PositionTargetDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ModelIdColumn
            {
                get
                {
                    return this.columnModelId;
                }
            }
            
            public Column SecurityIdColumn
            {
                get
                {
                    return this.columnSecurityId;
                }
            }
            
            public Column PositionTypeCodeColumn
            {
                get
                {
                    return this.columnPositionTypeCode;
                }
            }
            
            public Column PercentColumn
            {
                get
                {
                    return this.columnPercent;
                }
            }
            
            public PositionTargetRow this[int index]
            {
                get
                {
                    return ((PositionTargetRow)(this.Rows[index]));
                }
            }
            
            public event PositionTargetRowChangeEventHandler PositionTargetRowChanged;
            
            public event PositionTargetRowChangeEventHandler PositionTargetRowChanging;
            
            public event PositionTargetRowChangeEventHandler PositionTargetRowDeleted;
            
            public event PositionTargetRowChangeEventHandler PositionTargetRowDeleting;
            
            public void AddPositionTargetRow(PositionTargetRow row)
            {
                this.Rows.Add(row);
            }
            
            public PositionTargetRow AddPositionTargetRow(ModelRow parentModelRowByFKModelPositionTarget, SecurityRow parentSecurityRowByFKSecurityPositionTarget, PositionTypeRow parentPositionTypeRowByFKPositionTypePositionTarget, decimal Percent)
            {
                PositionTargetRow rowPositionTargetRow = ((PositionTargetRow)(this.NewRow()));
                rowPositionTargetRow.ItemArray = new object[] {
                        parentModelRowByFKModelPositionTarget[17],
                        parentSecurityRowByFKSecurityPositionTarget[17],
                        parentPositionTypeRowByFKPositionTypePositionTarget[0],
                        Percent};
                this.Rows.Add(rowPositionTargetRow);
                return rowPositionTargetRow;
            }
            
            public PositionTargetRow FindByModelIdSecurityIdPositionTypeCode(int ModelId, int SecurityId, int PositionTypeCode)
            {
                return ((PositionTargetRow)(this.Rows.Find(new object[] {
                            ModelId,
                            SecurityId,
                            PositionTypeCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                PositionTargetDataTable cln = ((PositionTargetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new PositionTargetDataTable();
            }
            
            internal void InitVars()
            {
                this.columnModelId = this.Columns["ModelId"];
                this.columnSecurityId = this.Columns["SecurityId"];
                this.columnPositionTypeCode = this.Columns["PositionTypeCode"];
                this.columnPercent = this.Columns["Percent"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnModelId = new Column("ModelId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModelId);
                this.columnSecurityId = new Column("SecurityId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityId);
                this.columnPositionTypeCode = new Column("PositionTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPositionTypeCode);
                this.columnPercent = new Column("Percent", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPercent);
                this.Constraints.Add(new UniqueConstraint("PKPositionTarget", new DataColumn[] {
                                this.columnModelId,
                                this.columnSecurityId,
                                this.columnPositionTypeCode}, true));
                this.columnModelId.AllowDBNull = false;
                this.columnSecurityId.AllowDBNull = false;
                this.columnPositionTypeCode.AllowDBNull = false;
                this.columnPercent.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.PositionTargetLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "PositionTarget"));
                }
            }
            
            public PositionTargetRow NewPositionTargetRow()
            {
                return ((PositionTargetRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new PositionTargetRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(PositionTargetRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.PositionTargetRowChanged != null))
                {
                    this.PositionTargetRowChanged(this, new PositionTargetRowChangeEvent(((PositionTargetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.PositionTargetRowChanging != null))
                {
                    this.PositionTargetRowChanging(this, new PositionTargetRowChangeEvent(((PositionTargetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.PositionTargetRowDeleted != null))
                {
                    this.PositionTargetRowDeleted(this, new PositionTargetRowChangeEvent(((PositionTargetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.PositionTargetRowDeleting != null))
                {
                    this.PositionTargetRowDeleting(this, new PositionTargetRowChangeEvent(((PositionTargetRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePositionTargetRow(PositionTargetRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PositionTargetRow : Row
        {
            
            private PositionTargetDataTable tablePositionTarget;
            
            internal PositionTargetRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tablePositionTarget = ((PositionTargetDataTable)(this.Table));
            }
            
            public int ModelId
            {
                get
                {
                    return ((int)(this[this.tablePositionTarget.ModelIdColumn]));
                }
                set
                {
                    this[this.tablePositionTarget.ModelIdColumn] = value;
                }
            }
            
            public int SecurityId
            {
                get
                {
                    return ((int)(this[this.tablePositionTarget.SecurityIdColumn]));
                }
                set
                {
                    this[this.tablePositionTarget.SecurityIdColumn] = value;
                }
            }
            
            public int PositionTypeCode
            {
                get
                {
                    return ((int)(this[this.tablePositionTarget.PositionTypeCodeColumn]));
                }
                set
                {
                    this[this.tablePositionTarget.PositionTypeCodeColumn] = value;
                }
            }
            
            public decimal Percent
            {
                get
                {
                    return ((decimal)(this[this.tablePositionTarget.PercentColumn]));
                }
                set
                {
                    this[this.tablePositionTarget.PercentColumn] = value;
                }
            }
            
            public ModelRow ModelRow
            {
                get
                {
                    if ((DataSetMarket.lockModel.IsReaderLockHeld || DataSetMarket.lockModel.IsWriterLockHeld))
                    {
                        return ((ModelRow)(this.GetParentRow(this.Table.ParentRelations["FKModelPositionTarget"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Model"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKModelPositionTarget"]);
                }
            }
            
            public PositionTypeRow PositionTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockPositionType.IsReaderLockHeld || DataSetMarket.lockPositionType.IsWriterLockHeld))
                    {
                        return ((PositionTypeRow)(this.GetParentRow(this.Table.ParentRelations["FKPositionTypePositionTarget"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "PositionType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKPositionTypePositionTarget"]);
                }
            }
            
            public SecurityRow SecurityRow
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["FKSecurityPositionTarget"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKSecurityPositionTarget"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PositionTargetRowChangeEvent : EventArgs
        {
            
            private PositionTargetRow eventRow;
            
            private DataRowAction eventAction;
            
            public PositionTargetRowChangeEvent(PositionTargetRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PositionTargetRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PositionTypeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnPositionTypeCode;
            
            private Column columnMnemonic;
            
            private Column columnSign;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private DataView viewUKPositionTypeExternalId0;
            
            private DataView viewUKPositionTypeExternalId1;
            
            private DataView viewUKPositionTypeExternalId2;
            
            private DataView viewUKPositionTypeExternalId3;
            
            internal PositionTypeDataTable() : 
                    base("PositionType")
            {
                this.InitClass();
            }
            
            internal PositionTypeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column PositionTypeCodeColumn
            {
                get
                {
                    return this.columnPositionTypeCode;
                }
            }
            
            public Column MnemonicColumn
            {
                get
                {
                    return this.columnMnemonic;
                }
            }
            
            public Column SignColumn
            {
                get
                {
                    return this.columnSign;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public DataView UKPositionTypeExternalId0
            {
                get
                {
                    return this.viewUKPositionTypeExternalId0;
                }
            }
            
            public DataView UKPositionTypeExternalId1
            {
                get
                {
                    return this.viewUKPositionTypeExternalId1;
                }
            }
            
            public DataView UKPositionTypeExternalId2
            {
                get
                {
                    return this.viewUKPositionTypeExternalId2;
                }
            }
            
            public DataView UKPositionTypeExternalId3
            {
                get
                {
                    return this.viewUKPositionTypeExternalId3;
                }
            }
            
            public PositionTypeRow this[int index]
            {
                get
                {
                    return ((PositionTypeRow)(this.Rows[index]));
                }
            }
            
            public event PositionTypeRowChangeEventHandler PositionTypeRowChanged;
            
            public event PositionTypeRowChangeEventHandler PositionTypeRowChanging;
            
            public event PositionTypeRowChangeEventHandler PositionTypeRowDeleted;
            
            public event PositionTypeRowChangeEventHandler PositionTypeRowDeleting;
            
            public void AddPositionTypeRow(PositionTypeRow row)
            {
                this.Rows.Add(row);
            }
            
            public PositionTypeRow AddPositionTypeRow(int PositionTypeCode, string Mnemonic, decimal Sign, string ExternalId0, string ExternalId1, string ExternalId2, string ExternalId3)
            {
                PositionTypeRow rowPositionTypeRow = ((PositionTypeRow)(this.NewRow()));
                rowPositionTypeRow.ItemArray = new object[] {
                        PositionTypeCode,
                        Mnemonic,
                        Sign,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3};
                this.Rows.Add(rowPositionTypeRow);
                return rowPositionTypeRow;
            }
            
            public PositionTypeRow FindByPositionTypeCode(int PositionTypeCode)
            {
                return ((PositionTypeRow)(this.Rows.Find(new object[] {
                            PositionTypeCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                PositionTypeDataTable cln = ((PositionTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new PositionTypeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnPositionTypeCode = this.Columns["PositionTypeCode"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnSign = this.Columns["Sign"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnPositionTypeCode = new Column("PositionTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPositionTypeCode);
                this.columnMnemonic = new Column("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnSign = new Column("Sign", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSign);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.Constraints.Add(new UniqueConstraint("PKPositionType", new DataColumn[] {
                                this.columnPositionTypeCode}, true));
                this.viewUKPositionTypeExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewUKPositionTypeExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.viewUKPositionTypeExternalId2 = new DataView(this, null, "ExternalId2", DataViewRowState.CurrentRows);
                this.viewUKPositionTypeExternalId3 = new DataView(this, null, "ExternalId3", DataViewRowState.CurrentRows);
                this.columnPositionTypeCode.AllowDBNull = false;
                this.columnPositionTypeCode.Unique = true;
                this.columnMnemonic.AllowDBNull = false;
                this.columnSign.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.PositionTypeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "PositionType"));
                }
            }
            
            public PositionTypeRow NewPositionTypeRow()
            {
                return ((PositionTypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new PositionTypeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(PositionTypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.PositionTypeRowChanged != null))
                {
                    this.PositionTypeRowChanged(this, new PositionTypeRowChangeEvent(((PositionTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.PositionTypeRowChanging != null))
                {
                    this.PositionTypeRowChanging(this, new PositionTypeRowChangeEvent(((PositionTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.PositionTypeRowDeleted != null))
                {
                    this.PositionTypeRowDeleted(this, new PositionTypeRowChangeEvent(((PositionTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.PositionTypeRowDeleting != null))
                {
                    this.PositionTypeRowDeleting(this, new PositionTypeRowChangeEvent(((PositionTypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePositionTypeRow(PositionTypeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PositionTypeRow : Row
        {
            
            private PositionTypeDataTable tablePositionType;
            
            internal PositionTypeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tablePositionType = ((PositionTypeDataTable)(this.Table));
            }
            
            public int PositionTypeCode
            {
                get
                {
                    return ((int)(this[this.tablePositionType.PositionTypeCodeColumn]));
                }
                set
                {
                    this[this.tablePositionType.PositionTypeCodeColumn] = value;
                }
            }
            
            public string Mnemonic
            {
                get
                {
                    return ((string)(this[this.tablePositionType.MnemonicColumn]));
                }
                set
                {
                    this[this.tablePositionType.MnemonicColumn] = value;
                }
            }
            
            public decimal Sign
            {
                get
                {
                    return ((decimal)(this[this.tablePositionType.SignColumn]));
                }
                set
                {
                    this[this.tablePositionType.SignColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablePositionType.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePositionType.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablePositionType.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePositionType.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablePositionType.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePositionType.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tablePositionType.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tablePositionType.ExternalId3Column] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tablePositionType.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tablePositionType.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tablePositionType.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tablePositionType.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tablePositionType.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tablePositionType.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tablePositionType.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tablePositionType.ExternalId3Column] = System.Convert.DBNull;
            }
            
            public PositionRow[] GetPositionRows()
            {
                return ((PositionRow[])(this.GetChildRows(this.Table.ChildRelations["FKPositionTypePosition"])));
            }
            
            public PositionTargetRow[] GetPositionTargetRows()
            {
                return ((PositionTargetRow[])(this.GetChildRows(this.Table.ChildRelations["FKPositionTypePositionTarget"])));
            }
            
            public TaxLotRow[] GetTaxLotRows()
            {
                return ((TaxLotRow[])(this.GetChildRows(this.Table.ChildRelations["FKPositionTypeTaxLot"])));
            }
            
            public ViolationRow[] GetViolationRows()
            {
                return ((ViolationRow[])(this.GetChildRows(this.Table.ChildRelations["FKPositionTypeViolation"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PositionTypeRowChangeEvent : EventArgs
        {
            
            private PositionTypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public PositionTypeRowChangeEvent(PositionTypeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PositionTypeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PriceDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnSecurityId;
            
            private Column columnCurrencyId;
            
            private Column columnClosePrice;
            
            private Column columnPriceChange;
            
            private Column columnLastPrice;
            
            private Column columnLastSize;
            
            private Column columnBidPrice;
            
            private Column columnBidSize;
            
            private Column columnAskPrice;
            
            private Column columnAskSize;
            
            internal PriceDataTable() : 
                    base("Price")
            {
                this.InitClass();
            }
            
            internal PriceDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column SecurityIdColumn
            {
                get
                {
                    return this.columnSecurityId;
                }
            }
            
            public Column CurrencyIdColumn
            {
                get
                {
                    return this.columnCurrencyId;
                }
            }
            
            public Column ClosePriceColumn
            {
                get
                {
                    return this.columnClosePrice;
                }
            }
            
            public Column PriceChangeColumn
            {
                get
                {
                    return this.columnPriceChange;
                }
            }
            
            public Column LastPriceColumn
            {
                get
                {
                    return this.columnLastPrice;
                }
            }
            
            public Column LastSizeColumn
            {
                get
                {
                    return this.columnLastSize;
                }
            }
            
            public Column BidPriceColumn
            {
                get
                {
                    return this.columnBidPrice;
                }
            }
            
            public Column BidSizeColumn
            {
                get
                {
                    return this.columnBidSize;
                }
            }
            
            public Column AskPriceColumn
            {
                get
                {
                    return this.columnAskPrice;
                }
            }
            
            public Column AskSizeColumn
            {
                get
                {
                    return this.columnAskSize;
                }
            }
            
            public PriceRow this[int index]
            {
                get
                {
                    return ((PriceRow)(this.Rows[index]));
                }
            }
            
            public event PriceRowChangeEventHandler PriceRowChanged;
            
            public event PriceRowChangeEventHandler PriceRowChanging;
            
            public event PriceRowChangeEventHandler PriceRowDeleted;
            
            public event PriceRowChangeEventHandler PriceRowDeleting;
            
            public void AddPriceRow(PriceRow row)
            {
                this.Rows.Add(row);
            }
            
            public PriceRow AddPriceRow(SecurityRow parentSecurityRowByFKSecurityPrice, CurrencyRow parentCurrencyRowByFKCurrencyPrice, decimal ClosePrice, decimal PriceChange, decimal LastPrice, decimal LastSize, decimal BidPrice, decimal BidSize, decimal AskPrice, decimal AskSize)
            {
                PriceRow rowPriceRow = ((PriceRow)(this.NewRow()));
                rowPriceRow.ItemArray = new object[] {
                        parentSecurityRowByFKSecurityPrice[17],
                        parentCurrencyRowByFKCurrencyPrice[21],
                        ClosePrice,
                        PriceChange,
                        LastPrice,
                        LastSize,
                        BidPrice,
                        BidSize,
                        AskPrice,
                        AskSize};
                this.Rows.Add(rowPriceRow);
                return rowPriceRow;
            }
            
            public PriceRow FindBySecurityIdCurrencyId(int SecurityId, int CurrencyId)
            {
                return ((PriceRow)(this.Rows.Find(new object[] {
                            SecurityId,
                            CurrencyId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                PriceDataTable cln = ((PriceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new PriceDataTable();
            }
            
            internal void InitVars()
            {
                this.columnSecurityId = this.Columns["SecurityId"];
                this.columnCurrencyId = this.Columns["CurrencyId"];
                this.columnClosePrice = this.Columns["ClosePrice"];
                this.columnPriceChange = this.Columns["PriceChange"];
                this.columnLastPrice = this.Columns["LastPrice"];
                this.columnLastSize = this.Columns["LastSize"];
                this.columnBidPrice = this.Columns["BidPrice"];
                this.columnBidSize = this.Columns["BidSize"];
                this.columnAskPrice = this.Columns["AskPrice"];
                this.columnAskSize = this.Columns["AskSize"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnSecurityId = new Column("SecurityId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityId);
                this.columnCurrencyId = new Column("CurrencyId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrencyId);
                this.columnClosePrice = new Column("ClosePrice", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClosePrice);
                this.columnPriceChange = new Column("PriceChange", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPriceChange);
                this.columnLastPrice = new Column("LastPrice", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastPrice);
                this.columnLastSize = new Column("LastSize", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastSize);
                this.columnBidPrice = new Column("BidPrice", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBidPrice);
                this.columnBidSize = new Column("BidSize", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBidSize);
                this.columnAskPrice = new Column("AskPrice", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAskPrice);
                this.columnAskSize = new Column("AskSize", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAskSize);
                this.Constraints.Add(new UniqueConstraint("PKPrice", new DataColumn[] {
                                this.columnSecurityId,
                                this.columnCurrencyId}, true));
                this.columnSecurityId.AllowDBNull = false;
                this.columnCurrencyId.AllowDBNull = false;
                this.columnClosePrice.AllowDBNull = false;
                this.columnClosePrice.DefaultValue = 0.0m;
                this.columnPriceChange.IsPersistent = false;
                this.columnPriceChange.AllowDBNull = false;
                this.columnPriceChange.DefaultValue = 0.0m;
                this.columnLastPrice.AllowDBNull = false;
                this.columnLastPrice.DefaultValue = 0.0m;
                this.columnLastSize.AllowDBNull = false;
                this.columnLastSize.DefaultValue = 0.0m;
                this.columnBidPrice.AllowDBNull = false;
                this.columnBidPrice.DefaultValue = 0.0m;
                this.columnBidSize.AllowDBNull = false;
                this.columnBidSize.DefaultValue = 0.0m;
                this.columnAskPrice.AllowDBNull = false;
                this.columnAskPrice.DefaultValue = 0.0m;
                this.columnAskSize.AllowDBNull = false;
                this.columnAskSize.DefaultValue = 0.0m;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.PriceLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Price"));
                }
            }
            
            public PriceRow NewPriceRow()
            {
                return ((PriceRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new PriceRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(PriceRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.PriceRowChanged != null))
                {
                    this.PriceRowChanged(this, new PriceRowChangeEvent(((PriceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.PriceRowChanging != null))
                {
                    this.PriceRowChanging(this, new PriceRowChangeEvent(((PriceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.PriceRowDeleted != null))
                {
                    this.PriceRowDeleted(this, new PriceRowChangeEvent(((PriceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.PriceRowDeleting != null))
                {
                    this.PriceRowDeleting(this, new PriceRowChangeEvent(((PriceRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePriceRow(PriceRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PriceRow : Row
        {
            
            private PriceDataTable tablePrice;
            
            internal PriceRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tablePrice = ((PriceDataTable)(this.Table));
            }
            
            public int SecurityId
            {
                get
                {
                    return ((int)(this[this.tablePrice.SecurityIdColumn]));
                }
                set
                {
                    this[this.tablePrice.SecurityIdColumn] = value;
                }
            }
            
            public int CurrencyId
            {
                get
                {
                    return ((int)(this[this.tablePrice.CurrencyIdColumn]));
                }
                set
                {
                    this[this.tablePrice.CurrencyIdColumn] = value;
                }
            }
            
            public decimal ClosePrice
            {
                get
                {
                    return ((decimal)(this[this.tablePrice.ClosePriceColumn]));
                }
                set
                {
                    this[this.tablePrice.ClosePriceColumn] = value;
                }
            }
            
            public decimal PriceChange
            {
                get
                {
                    return ((decimal)(this[this.tablePrice.PriceChangeColumn]));
                }
                set
                {
                    this[this.tablePrice.PriceChangeColumn] = value;
                }
            }
            
            public decimal LastPrice
            {
                get
                {
                    return ((decimal)(this[this.tablePrice.LastPriceColumn]));
                }
                set
                {
                    this[this.tablePrice.LastPriceColumn] = value;
                }
            }
            
            public decimal LastSize
            {
                get
                {
                    return ((decimal)(this[this.tablePrice.LastSizeColumn]));
                }
                set
                {
                    this[this.tablePrice.LastSizeColumn] = value;
                }
            }
            
            public decimal BidPrice
            {
                get
                {
                    return ((decimal)(this[this.tablePrice.BidPriceColumn]));
                }
                set
                {
                    this[this.tablePrice.BidPriceColumn] = value;
                }
            }
            
            public decimal BidSize
            {
                get
                {
                    return ((decimal)(this[this.tablePrice.BidSizeColumn]));
                }
                set
                {
                    this[this.tablePrice.BidSizeColumn] = value;
                }
            }
            
            public decimal AskPrice
            {
                get
                {
                    return ((decimal)(this[this.tablePrice.AskPriceColumn]));
                }
                set
                {
                    this[this.tablePrice.AskPriceColumn] = value;
                }
            }
            
            public decimal AskSize
            {
                get
                {
                    return ((decimal)(this[this.tablePrice.AskSizeColumn]));
                }
                set
                {
                    this[this.tablePrice.AskSizeColumn] = value;
                }
            }
            
            public CurrencyRow CurrencyRow
            {
                get
                {
                    if ((DataSetMarket.lockCurrency.IsReaderLockHeld || DataSetMarket.lockCurrency.IsWriterLockHeld))
                    {
                        return ((CurrencyRow)(this.GetParentRow(this.Table.ParentRelations["FKCurrencyPrice"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Currency"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKCurrencyPrice"]);
                }
            }
            
            public SecurityRow SecurityRow
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["FKSecurityPrice"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKSecurityPrice"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PriceRowChangeEvent : EventArgs
        {
            
            private PriceRow eventRow;
            
            private DataRowAction eventAction;
            
            public PriceRowChangeEvent(PriceRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PriceRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PropertyDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnPropertyCode;
            
            private Column columnName;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private DataView viewUKPropertyExternalId0;
            
            private DataView viewUKPropertyExternalId1;
            
            private DataView viewUKPropertyExternalId2;
            
            private DataView viewUKPropertyExternalId3;
            
            internal PropertyDataTable() : 
                    base("Property")
            {
                this.InitClass();
            }
            
            internal PropertyDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column PropertyCodeColumn
            {
                get
                {
                    return this.columnPropertyCode;
                }
            }
            
            public Column NameColumn
            {
                get
                {
                    return this.columnName;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public DataView UKPropertyExternalId0
            {
                get
                {
                    return this.viewUKPropertyExternalId0;
                }
            }
            
            public DataView UKPropertyExternalId1
            {
                get
                {
                    return this.viewUKPropertyExternalId1;
                }
            }
            
            public DataView UKPropertyExternalId2
            {
                get
                {
                    return this.viewUKPropertyExternalId2;
                }
            }
            
            public DataView UKPropertyExternalId3
            {
                get
                {
                    return this.viewUKPropertyExternalId3;
                }
            }
            
            public PropertyRow this[int index]
            {
                get
                {
                    return ((PropertyRow)(this.Rows[index]));
                }
            }
            
            public event PropertyRowChangeEventHandler PropertyRowChanged;
            
            public event PropertyRowChangeEventHandler PropertyRowChanging;
            
            public event PropertyRowChangeEventHandler PropertyRowDeleted;
            
            public event PropertyRowChangeEventHandler PropertyRowDeleting;
            
            public void AddPropertyRow(PropertyRow row)
            {
                this.Rows.Add(row);
            }
            
            public PropertyRow AddPropertyRow(int PropertyCode, string Name, string ExternalId0, string ExternalId1, string ExternalId2, string ExternalId3)
            {
                PropertyRow rowPropertyRow = ((PropertyRow)(this.NewRow()));
                rowPropertyRow.ItemArray = new object[] {
                        PropertyCode,
                        Name,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3};
                this.Rows.Add(rowPropertyRow);
                return rowPropertyRow;
            }
            
            public PropertyRow FindByPropertyCode(int PropertyCode)
            {
                return ((PropertyRow)(this.Rows.Find(new object[] {
                            PropertyCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                PropertyDataTable cln = ((PropertyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new PropertyDataTable();
            }
            
            internal void InitVars()
            {
                this.columnPropertyCode = this.Columns["PropertyCode"];
                this.columnName = this.Columns["Name"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnPropertyCode = new Column("PropertyCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPropertyCode);
                this.columnName = new Column("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.Constraints.Add(new UniqueConstraint("PKProperty", new DataColumn[] {
                                this.columnPropertyCode}, true));
                this.viewUKPropertyExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewUKPropertyExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.viewUKPropertyExternalId2 = new DataView(this, null, "ExternalId2", DataViewRowState.CurrentRows);
                this.viewUKPropertyExternalId3 = new DataView(this, null, "ExternalId3", DataViewRowState.CurrentRows);
                this.columnPropertyCode.AllowDBNull = false;
                this.columnPropertyCode.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.PropertyLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Property"));
                }
            }
            
            public PropertyRow NewPropertyRow()
            {
                return ((PropertyRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new PropertyRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(PropertyRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.PropertyRowChanged != null))
                {
                    this.PropertyRowChanged(this, new PropertyRowChangeEvent(((PropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.PropertyRowChanging != null))
                {
                    this.PropertyRowChanging(this, new PropertyRowChangeEvent(((PropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.PropertyRowDeleted != null))
                {
                    this.PropertyRowDeleted(this, new PropertyRowChangeEvent(((PropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.PropertyRowDeleting != null))
                {
                    this.PropertyRowDeleting(this, new PropertyRowChangeEvent(((PropertyRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePropertyRow(PropertyRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PropertyRow : Row
        {
            
            private PropertyDataTable tableProperty;
            
            internal PropertyRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableProperty = ((PropertyDataTable)(this.Table));
            }
            
            public int PropertyCode
            {
                get
                {
                    return ((int)(this[this.tableProperty.PropertyCodeColumn]));
                }
                set
                {
                    this[this.tableProperty.PropertyCodeColumn] = value;
                }
            }
            
            public string Name
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableProperty.NameColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableProperty.NameColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableProperty.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableProperty.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableProperty.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableProperty.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableProperty.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableProperty.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableProperty.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableProperty.ExternalId3Column] = value;
                }
            }
            
            public bool IsNameNull()
            {
                return this.IsNull(this.tableProperty.NameColumn);
            }
            
            public void SetNameNull()
            {
                this[this.tableProperty.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableProperty.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableProperty.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableProperty.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableProperty.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableProperty.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableProperty.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableProperty.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableProperty.ExternalId3Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PropertyRowChangeEvent : EventArgs
        {
            
            private PropertyRow eventRow;
            
            private DataRowAction eventAction;
            
            public PropertyRowChangeEvent(PropertyRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PropertyRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProposedOrderDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnProposedOrderId;
            
            private Column columnBlotterId;
            
            private Column columnAccountId;
            
            private Column columnSecurityId;
            
            private Column columnSettlementId;
            
            private Column columnBrokerId;
            
            private Column columnPositionTypeCode;
            
            private Column columnTransactionTypeCode;
            
            private Column columnTimeInForceCode;
            
            private Column columnOrderTypeCode;
            
            private Column columnConditionCode;
            
            private Column columnIsAgency;
            
            private Column columnQuantity;
            
            private Column columnPrice1;
            
            private Column columnPrice2;
            
            private Column columnNote;
            
            private DataView viewUKProposedOrderAccountIdSecurityIdPositionTypeCode;
            
            internal ProposedOrderDataTable() : 
                    base("ProposedOrder")
            {
                this.InitClass();
            }
            
            internal ProposedOrderDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ProposedOrderIdColumn
            {
                get
                {
                    return this.columnProposedOrderId;
                }
            }
            
            public Column BlotterIdColumn
            {
                get
                {
                    return this.columnBlotterId;
                }
            }
            
            public Column AccountIdColumn
            {
                get
                {
                    return this.columnAccountId;
                }
            }
            
            public Column SecurityIdColumn
            {
                get
                {
                    return this.columnSecurityId;
                }
            }
            
            public Column SettlementIdColumn
            {
                get
                {
                    return this.columnSettlementId;
                }
            }
            
            public Column BrokerIdColumn
            {
                get
                {
                    return this.columnBrokerId;
                }
            }
            
            public Column PositionTypeCodeColumn
            {
                get
                {
                    return this.columnPositionTypeCode;
                }
            }
            
            public Column TransactionTypeCodeColumn
            {
                get
                {
                    return this.columnTransactionTypeCode;
                }
            }
            
            public Column TimeInForceCodeColumn
            {
                get
                {
                    return this.columnTimeInForceCode;
                }
            }
            
            public Column OrderTypeCodeColumn
            {
                get
                {
                    return this.columnOrderTypeCode;
                }
            }
            
            public Column ConditionCodeColumn
            {
                get
                {
                    return this.columnConditionCode;
                }
            }
            
            public Column IsAgencyColumn
            {
                get
                {
                    return this.columnIsAgency;
                }
            }
            
            public Column QuantityColumn
            {
                get
                {
                    return this.columnQuantity;
                }
            }
            
            public Column Price1Column
            {
                get
                {
                    return this.columnPrice1;
                }
            }
            
            public Column Price2Column
            {
                get
                {
                    return this.columnPrice2;
                }
            }
            
            public Column NoteColumn
            {
                get
                {
                    return this.columnNote;
                }
            }
            
            public DataView UKProposedOrderAccountIdSecurityIdPositionTypeCode
            {
                get
                {
                    return this.viewUKProposedOrderAccountIdSecurityIdPositionTypeCode;
                }
            }
            
            public ProposedOrderRow this[int index]
            {
                get
                {
                    return ((ProposedOrderRow)(this.Rows[index]));
                }
            }
            
            public event ProposedOrderRowChangeEventHandler ProposedOrderRowChanged;
            
            public event ProposedOrderRowChangeEventHandler ProposedOrderRowChanging;
            
            public event ProposedOrderRowChangeEventHandler ProposedOrderRowDeleted;
            
            public event ProposedOrderRowChangeEventHandler ProposedOrderRowDeleting;
            
            public void AddProposedOrderRow(ProposedOrderRow row)
            {
                this.Rows.Add(row);
            }
            
            public ProposedOrderRow AddProposedOrderRow(int BlotterId, AccountRow parentAccountRowByFKAccountProposedOrder, SecurityRow parentSecurityRowByFKSecurityProposedOrderSecurityId, SecurityRow parentSecurityRowByFKSecurityProposedOrderSettlementId, int BrokerId, int PositionTypeCode, TransactionTypeRow parentTransactionTypeRowByFKTransactionTypeProposedOrder, int TimeInForceCode, int OrderTypeCode, int ConditionCode, bool IsAgency, decimal Quantity, decimal Price1, decimal Price2, string Note)
            {
                ProposedOrderRow rowProposedOrderRow = ((ProposedOrderRow)(this.NewRow()));
                rowProposedOrderRow.ItemArray = new object[] {
                        null,
                        BlotterId,
                        parentAccountRowByFKAccountProposedOrder[17],
                        parentSecurityRowByFKSecurityProposedOrderSecurityId[17],
                        parentSecurityRowByFKSecurityProposedOrderSettlementId[17],
                        BrokerId,
                        PositionTypeCode,
                        parentTransactionTypeRowByFKTransactionTypeProposedOrder[0],
                        TimeInForceCode,
                        OrderTypeCode,
                        ConditionCode,
                        IsAgency,
                        Quantity,
                        Price1,
                        Price2,
                        Note};
                this.Rows.Add(rowProposedOrderRow);
                return rowProposedOrderRow;
            }
            
            public ProposedOrderRow FindByProposedOrderId(int ProposedOrderId)
            {
                return ((ProposedOrderRow)(this.Rows.Find(new object[] {
                            ProposedOrderId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                ProposedOrderDataTable cln = ((ProposedOrderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new ProposedOrderDataTable();
            }
            
            internal void InitVars()
            {
                this.columnProposedOrderId = this.Columns["ProposedOrderId"];
                this.columnBlotterId = this.Columns["BlotterId"];
                this.columnAccountId = this.Columns["AccountId"];
                this.columnSecurityId = this.Columns["SecurityId"];
                this.columnSettlementId = this.Columns["SettlementId"];
                this.columnBrokerId = this.Columns["BrokerId"];
                this.columnPositionTypeCode = this.Columns["PositionTypeCode"];
                this.columnTransactionTypeCode = this.Columns["TransactionTypeCode"];
                this.columnTimeInForceCode = this.Columns["TimeInForceCode"];
                this.columnOrderTypeCode = this.Columns["OrderTypeCode"];
                this.columnConditionCode = this.Columns["ConditionCode"];
                this.columnIsAgency = this.Columns["IsAgency"];
                this.columnQuantity = this.Columns["Quantity"];
                this.columnPrice1 = this.Columns["Price1"];
                this.columnPrice2 = this.Columns["Price2"];
                this.columnNote = this.Columns["Note"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnProposedOrderId = new Column("ProposedOrderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProposedOrderId);
                this.columnBlotterId = new Column("BlotterId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlotterId);
                this.columnAccountId = new Column("AccountId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountId);
                this.columnSecurityId = new Column("SecurityId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityId);
                this.columnSettlementId = new Column("SettlementId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSettlementId);
                this.columnBrokerId = new Column("BrokerId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBrokerId);
                this.columnPositionTypeCode = new Column("PositionTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPositionTypeCode);
                this.columnTransactionTypeCode = new Column("TransactionTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionTypeCode);
                this.columnTimeInForceCode = new Column("TimeInForceCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeInForceCode);
                this.columnOrderTypeCode = new Column("OrderTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrderTypeCode);
                this.columnConditionCode = new Column("ConditionCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConditionCode);
                this.columnIsAgency = new Column("IsAgency", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsAgency);
                this.columnQuantity = new Column("Quantity", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQuantity);
                this.columnPrice1 = new Column("Price1", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrice1);
                this.columnPrice2 = new Column("Price2", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrice2);
                this.columnNote = new Column("Note", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNote);
                this.Constraints.Add(new UniqueConstraint("PKProposedOrder", new DataColumn[] {
                                this.columnProposedOrderId}, true));
                this.viewUKProposedOrderAccountIdSecurityIdPositionTypeCode = new DataView(this, null, "AccountId,SecurityId,PositionTypeCode", DataViewRowState.CurrentRows);
                this.columnProposedOrderId.AutoIncrement = true;
                this.columnProposedOrderId.AllowDBNull = false;
                this.columnProposedOrderId.Unique = true;
                this.columnAccountId.AllowDBNull = false;
                this.columnSecurityId.AllowDBNull = false;
                this.columnSettlementId.AllowDBNull = false;
                this.columnPositionTypeCode.AllowDBNull = false;
                this.columnTransactionTypeCode.AllowDBNull = false;
                this.columnTimeInForceCode.AllowDBNull = false;
                this.columnOrderTypeCode.AllowDBNull = false;
                this.columnIsAgency.AllowDBNull = false;
                this.columnIsAgency.DefaultValue = false;
                this.columnQuantity.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.ProposedOrderLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "ProposedOrder"));
                }
            }
            
            public ProposedOrderRow NewProposedOrderRow()
            {
                return ((ProposedOrderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ProposedOrderRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(ProposedOrderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ProposedOrderRowChanged != null))
                {
                    this.ProposedOrderRowChanged(this, new ProposedOrderRowChangeEvent(((ProposedOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ProposedOrderRowChanging != null))
                {
                    this.ProposedOrderRowChanging(this, new ProposedOrderRowChangeEvent(((ProposedOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ProposedOrderRowDeleted != null))
                {
                    this.ProposedOrderRowDeleted(this, new ProposedOrderRowChangeEvent(((ProposedOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ProposedOrderRowDeleting != null))
                {
                    this.ProposedOrderRowDeleting(this, new ProposedOrderRowChangeEvent(((ProposedOrderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProposedOrderRow(ProposedOrderRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProposedOrderRow : Row
        {
            
            private ProposedOrderDataTable tableProposedOrder;
            
            internal ProposedOrderRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableProposedOrder = ((ProposedOrderDataTable)(this.Table));
            }
            
            public int ProposedOrderId
            {
                get
                {
                    return ((int)(this[this.tableProposedOrder.ProposedOrderIdColumn]));
                }
                set
                {
                    this[this.tableProposedOrder.ProposedOrderIdColumn] = value;
                }
            }
            
            public int BlotterId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableProposedOrder.BlotterIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableProposedOrder.BlotterIdColumn] = value;
                }
            }
            
            public int AccountId
            {
                get
                {
                    return ((int)(this[this.tableProposedOrder.AccountIdColumn]));
                }
                set
                {
                    this[this.tableProposedOrder.AccountIdColumn] = value;
                }
            }
            
            public int SecurityId
            {
                get
                {
                    return ((int)(this[this.tableProposedOrder.SecurityIdColumn]));
                }
                set
                {
                    this[this.tableProposedOrder.SecurityIdColumn] = value;
                }
            }
            
            public int SettlementId
            {
                get
                {
                    return ((int)(this[this.tableProposedOrder.SettlementIdColumn]));
                }
                set
                {
                    this[this.tableProposedOrder.SettlementIdColumn] = value;
                }
            }
            
            public int BrokerId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableProposedOrder.BrokerIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableProposedOrder.BrokerIdColumn] = value;
                }
            }
            
            public int PositionTypeCode
            {
                get
                {
                    return ((int)(this[this.tableProposedOrder.PositionTypeCodeColumn]));
                }
                set
                {
                    this[this.tableProposedOrder.PositionTypeCodeColumn] = value;
                }
            }
            
            public int TransactionTypeCode
            {
                get
                {
                    return ((int)(this[this.tableProposedOrder.TransactionTypeCodeColumn]));
                }
                set
                {
                    this[this.tableProposedOrder.TransactionTypeCodeColumn] = value;
                }
            }
            
            public int TimeInForceCode
            {
                get
                {
                    return ((int)(this[this.tableProposedOrder.TimeInForceCodeColumn]));
                }
                set
                {
                    this[this.tableProposedOrder.TimeInForceCodeColumn] = value;
                }
            }
            
            public int OrderTypeCode
            {
                get
                {
                    return ((int)(this[this.tableProposedOrder.OrderTypeCodeColumn]));
                }
                set
                {
                    this[this.tableProposedOrder.OrderTypeCodeColumn] = value;
                }
            }
            
            public int ConditionCode
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableProposedOrder.ConditionCodeColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableProposedOrder.ConditionCodeColumn] = value;
                }
            }
            
            public bool IsAgency
            {
                get
                {
                    return ((bool)(this[this.tableProposedOrder.IsAgencyColumn]));
                }
                set
                {
                    this[this.tableProposedOrder.IsAgencyColumn] = value;
                }
            }
            
            public decimal Quantity
            {
                get
                {
                    return ((decimal)(this[this.tableProposedOrder.QuantityColumn]));
                }
                set
                {
                    this[this.tableProposedOrder.QuantityColumn] = value;
                }
            }
            
            public decimal Price1
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableProposedOrder.Price1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableProposedOrder.Price1Column] = value;
                }
            }
            
            public decimal Price2
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableProposedOrder.Price2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableProposedOrder.Price2Column] = value;
                }
            }
            
            public string Note
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableProposedOrder.NoteColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableProposedOrder.NoteColumn] = value;
                }
            }
            
            public AccountRow AccountRow
            {
                get
                {
                    if ((DataSetMarket.lockAccount.IsReaderLockHeld || DataSetMarket.lockAccount.IsWriterLockHeld))
                    {
                        return ((AccountRow)(this.GetParentRow(this.Table.ParentRelations["FKAccountProposedOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Account"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKAccountProposedOrder"]);
                }
            }
            
            public SecurityRow SecurityRowByFKSecurityProposedOrderSecurityId
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["FKSecurityProposedOrderSecurityId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKSecurityProposedOrderSecurityId"]);
                }
            }
            
            public SecurityRow SecurityRowByFKSecurityProposedOrderSettlementId
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["FKSecurityProposedOrderSettlementId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKSecurityProposedOrderSettlementId"]);
                }
            }
            
            public TransactionTypeRow TransactionTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockTransactionType.IsReaderLockHeld || DataSetMarket.lockTransactionType.IsWriterLockHeld))
                    {
                        return ((TransactionTypeRow)(this.GetParentRow(this.Table.ParentRelations["FKTransactionTypeProposedOrder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "TransactionType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKTransactionTypeProposedOrder"]);
                }
            }
            
            public bool IsBlotterIdNull()
            {
                return this.IsNull(this.tableProposedOrder.BlotterIdColumn);
            }
            
            public void SetBlotterIdNull()
            {
                this[this.tableProposedOrder.BlotterIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsBrokerIdNull()
            {
                return this.IsNull(this.tableProposedOrder.BrokerIdColumn);
            }
            
            public void SetBrokerIdNull()
            {
                this[this.tableProposedOrder.BrokerIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsConditionCodeNull()
            {
                return this.IsNull(this.tableProposedOrder.ConditionCodeColumn);
            }
            
            public void SetConditionCodeNull()
            {
                this[this.tableProposedOrder.ConditionCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsPrice1Null()
            {
                return this.IsNull(this.tableProposedOrder.Price1Column);
            }
            
            public void SetPrice1Null()
            {
                this[this.tableProposedOrder.Price1Column] = System.Convert.DBNull;
            }
            
            public bool IsPrice2Null()
            {
                return this.IsNull(this.tableProposedOrder.Price2Column);
            }
            
            public void SetPrice2Null()
            {
                this[this.tableProposedOrder.Price2Column] = System.Convert.DBNull;
            }
            
            public bool IsNoteNull()
            {
                return this.IsNull(this.tableProposedOrder.NoteColumn);
            }
            
            public void SetNoteNull()
            {
                this[this.tableProposedOrder.NoteColumn] = System.Convert.DBNull;
            }
            
            public ProposedOrderTreeRow[] GetProposedOrderTreeRowsByFKProposedOrderProposedOrderTreeChildId()
            {
                return ((ProposedOrderTreeRow[])(this.GetChildRows(this.Table.ChildRelations["FKProposedOrderProposedOrderTreeChildId"])));
            }
            
            public ProposedOrderTreeRow[] GetProposedOrderTreeRowsByFKProposedOrderProposedOrderTreeParentId()
            {
                return ((ProposedOrderTreeRow[])(this.GetChildRows(this.Table.ChildRelations["FKProposedOrderProposedOrderTreeParentId"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProposedOrderRowChangeEvent : EventArgs
        {
            
            private ProposedOrderRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProposedOrderRowChangeEvent(ProposedOrderRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProposedOrderRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProposedOrderTreeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnParentId;
            
            private Column columnChildId;
            
            internal ProposedOrderTreeDataTable() : 
                    base("ProposedOrderTree")
            {
                this.InitClass();
            }
            
            internal ProposedOrderTreeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ParentIdColumn
            {
                get
                {
                    return this.columnParentId;
                }
            }
            
            public Column ChildIdColumn
            {
                get
                {
                    return this.columnChildId;
                }
            }
            
            public ProposedOrderTreeRow this[int index]
            {
                get
                {
                    return ((ProposedOrderTreeRow)(this.Rows[index]));
                }
            }
            
            public event ProposedOrderTreeRowChangeEventHandler ProposedOrderTreeRowChanged;
            
            public event ProposedOrderTreeRowChangeEventHandler ProposedOrderTreeRowChanging;
            
            public event ProposedOrderTreeRowChangeEventHandler ProposedOrderTreeRowDeleted;
            
            public event ProposedOrderTreeRowChangeEventHandler ProposedOrderTreeRowDeleting;
            
            public void AddProposedOrderTreeRow(ProposedOrderTreeRow row)
            {
                this.Rows.Add(row);
            }
            
            public ProposedOrderTreeRow AddProposedOrderTreeRow(ProposedOrderRow parentProposedOrderRowByFKProposedOrderProposedOrderTreeParentId, ProposedOrderRow parentProposedOrderRowByFKProposedOrderProposedOrderTreeChildId)
            {
                ProposedOrderTreeRow rowProposedOrderTreeRow = ((ProposedOrderTreeRow)(this.NewRow()));
                rowProposedOrderTreeRow.ItemArray = new object[] {
                        parentProposedOrderRowByFKProposedOrderProposedOrderTreeParentId[0],
                        parentProposedOrderRowByFKProposedOrderProposedOrderTreeChildId[0]};
                this.Rows.Add(rowProposedOrderTreeRow);
                return rowProposedOrderTreeRow;
            }
            
            public ProposedOrderTreeRow FindByParentIdChildId(int ParentId, int ChildId)
            {
                return ((ProposedOrderTreeRow)(this.Rows.Find(new object[] {
                            ParentId,
                            ChildId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                ProposedOrderTreeDataTable cln = ((ProposedOrderTreeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new ProposedOrderTreeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnParentId = this.Columns["ParentId"];
                this.columnChildId = this.Columns["ChildId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnParentId = new Column("ParentId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnParentId);
                this.columnChildId = new Column("ChildId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChildId);
                this.Constraints.Add(new UniqueConstraint("PKProposedOrderTree", new DataColumn[] {
                                this.columnParentId,
                                this.columnChildId}, true));
                this.columnParentId.AllowDBNull = false;
                this.columnChildId.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.ProposedOrderTreeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "ProposedOrderTree"));
                }
            }
            
            public ProposedOrderTreeRow NewProposedOrderTreeRow()
            {
                return ((ProposedOrderTreeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ProposedOrderTreeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(ProposedOrderTreeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ProposedOrderTreeRowChanged != null))
                {
                    this.ProposedOrderTreeRowChanged(this, new ProposedOrderTreeRowChangeEvent(((ProposedOrderTreeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ProposedOrderTreeRowChanging != null))
                {
                    this.ProposedOrderTreeRowChanging(this, new ProposedOrderTreeRowChangeEvent(((ProposedOrderTreeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ProposedOrderTreeRowDeleted != null))
                {
                    this.ProposedOrderTreeRowDeleted(this, new ProposedOrderTreeRowChangeEvent(((ProposedOrderTreeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ProposedOrderTreeRowDeleting != null))
                {
                    this.ProposedOrderTreeRowDeleting(this, new ProposedOrderTreeRowChangeEvent(((ProposedOrderTreeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProposedOrderTreeRow(ProposedOrderTreeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProposedOrderTreeRow : Row
        {
            
            private ProposedOrderTreeDataTable tableProposedOrderTree;
            
            internal ProposedOrderTreeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableProposedOrderTree = ((ProposedOrderTreeDataTable)(this.Table));
            }
            
            public int ParentId
            {
                get
                {
                    return ((int)(this[this.tableProposedOrderTree.ParentIdColumn]));
                }
                set
                {
                    this[this.tableProposedOrderTree.ParentIdColumn] = value;
                }
            }
            
            public int ChildId
            {
                get
                {
                    return ((int)(this[this.tableProposedOrderTree.ChildIdColumn]));
                }
                set
                {
                    this[this.tableProposedOrderTree.ChildIdColumn] = value;
                }
            }
            
            public ProposedOrderRow ProposedOrderRowByFKProposedOrderProposedOrderTreeChildId
            {
                get
                {
                    if ((DataSetMarket.lockProposedOrder.IsReaderLockHeld || DataSetMarket.lockProposedOrder.IsWriterLockHeld))
                    {
                        return ((ProposedOrderRow)(this.GetParentRow(this.Table.ParentRelations["FKProposedOrderProposedOrderTreeChildId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "ProposedOrder"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKProposedOrderProposedOrderTreeChildId"]);
                }
            }
            
            public ProposedOrderRow ProposedOrderRowByFKProposedOrderProposedOrderTreeParentId
            {
                get
                {
                    if ((DataSetMarket.lockProposedOrder.IsReaderLockHeld || DataSetMarket.lockProposedOrder.IsWriterLockHeld))
                    {
                        return ((ProposedOrderRow)(this.GetParentRow(this.Table.ParentRelations["FKProposedOrderProposedOrderTreeParentId"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "ProposedOrder"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKProposedOrderProposedOrderTreeParentId"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProposedOrderTreeRowChangeEvent : EventArgs
        {
            
            private ProposedOrderTreeRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProposedOrderTreeRowChangeEvent(ProposedOrderTreeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProposedOrderTreeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProvinceDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnProvinceId;
            
            private Column columnCountryId;
            
            private Column columnName;
            
            private Column columnAbbreviation;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private DataView viewUKProvinceExternalId0;
            
            private DataView viewUKProvinceExternalId1;
            
            internal ProvinceDataTable() : 
                    base("Province")
            {
                this.InitClass();
            }
            
            internal ProvinceDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ProvinceIdColumn
            {
                get
                {
                    return this.columnProvinceId;
                }
            }
            
            public Column CountryIdColumn
            {
                get
                {
                    return this.columnCountryId;
                }
            }
            
            public Column NameColumn
            {
                get
                {
                    return this.columnName;
                }
            }
            
            public Column AbbreviationColumn
            {
                get
                {
                    return this.columnAbbreviation;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public DataView UKProvinceExternalId0
            {
                get
                {
                    return this.viewUKProvinceExternalId0;
                }
            }
            
            public DataView UKProvinceExternalId1
            {
                get
                {
                    return this.viewUKProvinceExternalId1;
                }
            }
            
            public ProvinceRow this[int index]
            {
                get
                {
                    return ((ProvinceRow)(this.Rows[index]));
                }
            }
            
            public event ProvinceRowChangeEventHandler ProvinceRowChanged;
            
            public event ProvinceRowChangeEventHandler ProvinceRowChanging;
            
            public event ProvinceRowChangeEventHandler ProvinceRowDeleted;
            
            public event ProvinceRowChangeEventHandler ProvinceRowDeleting;
            
            public void AddProvinceRow(ProvinceRow row)
            {
                this.Rows.Add(row);
            }
            
            public ProvinceRow AddProvinceRow(CountryRow parentCountryRowByFKCountryProvince, string Name, string Abbreviation, string ExternalId0, string ExternalId1)
            {
                ProvinceRow rowProvinceRow = ((ProvinceRow)(this.NewRow()));
                rowProvinceRow.ItemArray = new object[] {
                        null,
                        parentCountryRowByFKCountryProvince[0],
                        Name,
                        Abbreviation,
                        ExternalId0,
                        ExternalId1};
                this.Rows.Add(rowProvinceRow);
                return rowProvinceRow;
            }
            
            public ProvinceRow FindByProvinceId(int ProvinceId)
            {
                return ((ProvinceRow)(this.Rows.Find(new object[] {
                            ProvinceId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                ProvinceDataTable cln = ((ProvinceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new ProvinceDataTable();
            }
            
            internal void InitVars()
            {
                this.columnProvinceId = this.Columns["ProvinceId"];
                this.columnCountryId = this.Columns["CountryId"];
                this.columnName = this.Columns["Name"];
                this.columnAbbreviation = this.Columns["Abbreviation"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnProvinceId = new Column("ProvinceId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProvinceId);
                this.columnCountryId = new Column("CountryId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryId);
                this.columnName = new Column("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnAbbreviation = new Column("Abbreviation", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAbbreviation);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.Constraints.Add(new UniqueConstraint("PKProvince", new DataColumn[] {
                                this.columnProvinceId}, true));
                this.viewUKProvinceExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewUKProvinceExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.columnProvinceId.AutoIncrement = true;
                this.columnProvinceId.AllowDBNull = false;
                this.columnProvinceId.Unique = true;
                this.columnCountryId.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnAbbreviation.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.ProvinceLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Province"));
                }
            }
            
            public ProvinceRow NewProvinceRow()
            {
                return ((ProvinceRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ProvinceRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(ProvinceRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ProvinceRowChanged != null))
                {
                    this.ProvinceRowChanged(this, new ProvinceRowChangeEvent(((ProvinceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ProvinceRowChanging != null))
                {
                    this.ProvinceRowChanging(this, new ProvinceRowChangeEvent(((ProvinceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ProvinceRowDeleted != null))
                {
                    this.ProvinceRowDeleted(this, new ProvinceRowChangeEvent(((ProvinceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ProvinceRowDeleting != null))
                {
                    this.ProvinceRowDeleting(this, new ProvinceRowChangeEvent(((ProvinceRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProvinceRow(ProvinceRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProvinceRow : Row
        {
            
            private ProvinceDataTable tableProvince;
            
            internal ProvinceRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableProvince = ((ProvinceDataTable)(this.Table));
            }
            
            public int ProvinceId
            {
                get
                {
                    return ((int)(this[this.tableProvince.ProvinceIdColumn]));
                }
                set
                {
                    this[this.tableProvince.ProvinceIdColumn] = value;
                }
            }
            
            public int CountryId
            {
                get
                {
                    return ((int)(this[this.tableProvince.CountryIdColumn]));
                }
                set
                {
                    this[this.tableProvince.CountryIdColumn] = value;
                }
            }
            
            public string Name
            {
                get
                {
                    return ((string)(this[this.tableProvince.NameColumn]));
                }
                set
                {
                    this[this.tableProvince.NameColumn] = value;
                }
            }
            
            public string Abbreviation
            {
                get
                {
                    return ((string)(this[this.tableProvince.AbbreviationColumn]));
                }
                set
                {
                    this[this.tableProvince.AbbreviationColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableProvince.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableProvince.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableProvince.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableProvince.ExternalId1Column] = value;
                }
            }
            
            public CountryRow CountryRow
            {
                get
                {
                    if ((DataSetMarket.lockCountry.IsReaderLockHeld || DataSetMarket.lockCountry.IsWriterLockHeld))
                    {
                        return ((CountryRow)(this.GetParentRow(this.Table.ParentRelations["FKCountryProvince"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Country"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKCountryProvince"]);
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableProvince.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableProvince.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableProvince.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableProvince.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public AccountRow[] GetAccountRows()
            {
                return ((AccountRow[])(this.GetChildRows(this.Table.ChildRelations["FKProvinceAccount"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProvinceRowChangeEvent : EventArgs
        {
            
            private ProvinceRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProvinceRowChangeEvent(ProvinceRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProvinceRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RestrictionDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnRestrictionId;
            
            private Column columnSeverity;
            
            private Column columnApproval;
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private DataView viewUKRestrictionExternalId0;
            
            private DataView viewUKRestrictionExternalId1;
            
            internal RestrictionDataTable() : 
                    base("Restriction")
            {
                this.InitClass();
            }
            
            internal RestrictionDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column RestrictionIdColumn
            {
                get
                {
                    return this.columnRestrictionId;
                }
            }
            
            public Column SeverityColumn
            {
                get
                {
                    return this.columnSeverity;
                }
            }
            
            public Column ApprovalColumn
            {
                get
                {
                    return this.columnApproval;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public DataView UKRestrictionExternalId0
            {
                get
                {
                    return this.viewUKRestrictionExternalId0;
                }
            }
            
            public DataView UKRestrictionExternalId1
            {
                get
                {
                    return this.viewUKRestrictionExternalId1;
                }
            }
            
            public RestrictionRow this[int index]
            {
                get
                {
                    return ((RestrictionRow)(this.Rows[index]));
                }
            }
            
            public event RestrictionRowChangeEventHandler RestrictionRowChanged;
            
            public event RestrictionRowChangeEventHandler RestrictionRowChanging;
            
            public event RestrictionRowChangeEventHandler RestrictionRowDeleted;
            
            public event RestrictionRowChangeEventHandler RestrictionRowDeleting;
            
            public void AddRestrictionRow(RestrictionRow row)
            {
                this.Rows.Add(row);
            }
            
            public RestrictionRow AddRestrictionRow(int Severity, int Approval, string Description, string ExternalId0, string ExternalId1)
            {
                RestrictionRow rowRestrictionRow = ((RestrictionRow)(this.NewRow()));
                rowRestrictionRow.ItemArray = new object[] {
                        null,
                        Severity,
                        Approval,
                        Description,
                        ExternalId0,
                        ExternalId1};
                this.Rows.Add(rowRestrictionRow);
                return rowRestrictionRow;
            }
            
            public RestrictionRow FindByRestrictionId(int RestrictionId)
            {
                return ((RestrictionRow)(this.Rows.Find(new object[] {
                            RestrictionId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                RestrictionDataTable cln = ((RestrictionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new RestrictionDataTable();
            }
            
            internal void InitVars()
            {
                this.columnRestrictionId = this.Columns["RestrictionId"];
                this.columnSeverity = this.Columns["Severity"];
                this.columnApproval = this.Columns["Approval"];
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnRestrictionId = new Column("RestrictionId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRestrictionId);
                this.columnSeverity = new Column("Severity", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSeverity);
                this.columnApproval = new Column("Approval", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApproval);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.Constraints.Add(new UniqueConstraint("PKRestriction", new DataColumn[] {
                                this.columnRestrictionId}, true));
                this.viewUKRestrictionExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewUKRestrictionExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.columnRestrictionId.AutoIncrement = true;
                this.columnRestrictionId.AllowDBNull = false;
                this.columnRestrictionId.Unique = true;
                this.columnSeverity.AllowDBNull = false;
                this.columnApproval.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.RestrictionLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Restriction"));
                }
            }
            
            public RestrictionRow NewRestrictionRow()
            {
                return ((RestrictionRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new RestrictionRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(RestrictionRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.RestrictionRowChanged != null))
                {
                    this.RestrictionRowChanged(this, new RestrictionRowChangeEvent(((RestrictionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.RestrictionRowChanging != null))
                {
                    this.RestrictionRowChanging(this, new RestrictionRowChangeEvent(((RestrictionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.RestrictionRowDeleted != null))
                {
                    this.RestrictionRowDeleted(this, new RestrictionRowChangeEvent(((RestrictionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.RestrictionRowDeleting != null))
                {
                    this.RestrictionRowDeleting(this, new RestrictionRowChangeEvent(((RestrictionRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveRestrictionRow(RestrictionRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RestrictionRow : Row
        {
            
            private RestrictionDataTable tableRestriction;
            
            internal RestrictionRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableRestriction = ((RestrictionDataTable)(this.Table));
            }
            
            public int RestrictionId
            {
                get
                {
                    return ((int)(this[this.tableRestriction.RestrictionIdColumn]));
                }
                set
                {
                    this[this.tableRestriction.RestrictionIdColumn] = value;
                }
            }
            
            public int Severity
            {
                get
                {
                    return ((int)(this[this.tableRestriction.SeverityColumn]));
                }
                set
                {
                    this[this.tableRestriction.SeverityColumn] = value;
                }
            }
            
            public int Approval
            {
                get
                {
                    return ((int)(this[this.tableRestriction.ApprovalColumn]));
                }
                set
                {
                    this[this.tableRestriction.ApprovalColumn] = value;
                }
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableRestriction.DescriptionColumn]));
                }
                set
                {
                    this[this.tableRestriction.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableRestriction.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableRestriction.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableRestriction.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableRestriction.ExternalId1Column] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableRestriction.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableRestriction.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableRestriction.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableRestriction.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public ViolationRow[] GetViolationRows()
            {
                return ((ViolationRow[])(this.GetChildRows(this.Table.ChildRelations["FKRestrictionViolation"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RestrictionRowChangeEvent : EventArgs
        {
            
            private RestrictionRow eventRow;
            
            private DataRowAction eventAction;
            
            public RestrictionRowChangeEvent(RestrictionRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public RestrictionRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SchemeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnSchemeId;
            
            internal SchemeDataTable() : 
                    base("Scheme")
            {
                this.InitClass();
            }
            
            internal SchemeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column SchemeIdColumn
            {
                get
                {
                    return this.columnSchemeId;
                }
            }
            
            public SchemeRow this[int index]
            {
                get
                {
                    return ((SchemeRow)(this.Rows[index]));
                }
            }
            
            public event SchemeRowChangeEventHandler SchemeRowChanged;
            
            public event SchemeRowChangeEventHandler SchemeRowChanging;
            
            public event SchemeRowChangeEventHandler SchemeRowDeleted;
            
            public event SchemeRowChangeEventHandler SchemeRowDeleting;
            
            public void AddSchemeRow(SchemeRow row)
            {
                this.Rows.Add(row);
            }
            
            public SchemeRow AddSchemeRow(ObjectRow parentObjectRowByFKObjectScheme)
            {
                SchemeRow rowSchemeRow = ((SchemeRow)(this.NewRow()));
                rowSchemeRow.ItemArray = new object[] {
                        parentObjectRowByFKObjectScheme[12]};
                this.Rows.Add(rowSchemeRow);
                return rowSchemeRow;
            }
            
            public SchemeRow FindBySchemeId(int SchemeId)
            {
                return ((SchemeRow)(this.Rows.Find(new object[] {
                            SchemeId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                SchemeDataTable cln = ((SchemeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new SchemeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnSchemeId = this.Columns["SchemeId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnSchemeId = new Column("SchemeId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSchemeId);
                this.Constraints.Add(new UniqueConstraint("PKScheme", new DataColumn[] {
                                this.columnSchemeId}, true));
                this.columnSchemeId.AllowDBNull = false;
                this.columnSchemeId.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.SchemeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Scheme"));
                }
            }
            
            public SchemeRow NewSchemeRow()
            {
                return ((SchemeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new SchemeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(SchemeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.SchemeRowChanged != null))
                {
                    this.SchemeRowChanged(this, new SchemeRowChangeEvent(((SchemeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.SchemeRowChanging != null))
                {
                    this.SchemeRowChanging(this, new SchemeRowChangeEvent(((SchemeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.SchemeRowDeleted != null))
                {
                    this.SchemeRowDeleted(this, new SchemeRowChangeEvent(((SchemeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.SchemeRowDeleting != null))
                {
                    this.SchemeRowDeleting(this, new SchemeRowChangeEvent(((SchemeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSchemeRow(SchemeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SchemeRow : Row
        {
            
            private SchemeDataTable tableScheme;
            
            internal SchemeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableScheme = ((SchemeDataTable)(this.Table));
            }
            
            public int SchemeId
            {
                get
                {
                    return ((int)(this[this.tableScheme.SchemeIdColumn]));
                }
                set
                {
                    this[this.tableScheme.SchemeIdColumn] = value;
                }
            }
            
            public ObjectRow ObjectRow
            {
                get
                {
                    if ((DataSetMarket.lockObject.IsReaderLockHeld || DataSetMarket.lockObject.IsWriterLockHeld))
                    {
                        return ((ObjectRow)(this.GetParentRow(this.Table.ParentRelations["FKObjectScheme"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Object"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKObjectScheme"]);
                }
            }
            
            public AccountRow[] GetAccountRows()
            {
                return ((AccountRow[])(this.GetChildRows(this.Table.ChildRelations["FKSchemeAccount"])));
            }
            
            public ModelRow[] GetModelRows()
            {
                return ((ModelRow[])(this.GetChildRows(this.Table.ChildRelations["FKSchemeModel"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SchemeRowChangeEvent : EventArgs
        {
            
            private SchemeRow eventRow;
            
            private DataRowAction eventAction;
            
            public SchemeRowChangeEvent(SchemeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SchemeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SectorDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnSectorId;
            
            private Column columnSortOrder;
            
            internal SectorDataTable() : 
                    base("Sector")
            {
                this.InitClass();
            }
            
            internal SectorDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column SectorIdColumn
            {
                get
                {
                    return this.columnSectorId;
                }
            }
            
            public Column SortOrderColumn
            {
                get
                {
                    return this.columnSortOrder;
                }
            }
            
            public SectorRow this[int index]
            {
                get
                {
                    return ((SectorRow)(this.Rows[index]));
                }
            }
            
            public event SectorRowChangeEventHandler SectorRowChanged;
            
            public event SectorRowChangeEventHandler SectorRowChanging;
            
            public event SectorRowChangeEventHandler SectorRowDeleted;
            
            public event SectorRowChangeEventHandler SectorRowDeleting;
            
            public void AddSectorRow(SectorRow row)
            {
                this.Rows.Add(row);
            }
            
            public SectorRow AddSectorRow(ObjectRow parentObjectRowByFKObjectSector, int SortOrder)
            {
                SectorRow rowSectorRow = ((SectorRow)(this.NewRow()));
                rowSectorRow.ItemArray = new object[] {
                        parentObjectRowByFKObjectSector[12],
                        SortOrder};
                this.Rows.Add(rowSectorRow);
                return rowSectorRow;
            }
            
            public SectorRow FindBySectorId(int SectorId)
            {
                return ((SectorRow)(this.Rows.Find(new object[] {
                            SectorId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                SectorDataTable cln = ((SectorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new SectorDataTable();
            }
            
            internal void InitVars()
            {
                this.columnSectorId = this.Columns["SectorId"];
                this.columnSortOrder = this.Columns["SortOrder"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnSectorId = new Column("SectorId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSectorId);
                this.columnSortOrder = new Column("SortOrder", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSortOrder);
                this.Constraints.Add(new UniqueConstraint("PKSector", new DataColumn[] {
                                this.columnSectorId}, true));
                this.columnSectorId.AllowDBNull = false;
                this.columnSectorId.Unique = true;
                this.columnSortOrder.AllowDBNull = false;
                this.columnSortOrder.DefaultValue = 0;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.SectorLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Sector"));
                }
            }
            
            public SectorRow NewSectorRow()
            {
                return ((SectorRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new SectorRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(SectorRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.SectorRowChanged != null))
                {
                    this.SectorRowChanged(this, new SectorRowChangeEvent(((SectorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.SectorRowChanging != null))
                {
                    this.SectorRowChanging(this, new SectorRowChangeEvent(((SectorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.SectorRowDeleted != null))
                {
                    this.SectorRowDeleted(this, new SectorRowChangeEvent(((SectorRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.SectorRowDeleting != null))
                {
                    this.SectorRowDeleting(this, new SectorRowChangeEvent(((SectorRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSectorRow(SectorRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SectorRow : Row
        {
            
            private SectorDataTable tableSector;
            
            internal SectorRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableSector = ((SectorDataTable)(this.Table));
            }
            
            public int SectorId
            {
                get
                {
                    return ((int)(this[this.tableSector.SectorIdColumn]));
                }
                set
                {
                    this[this.tableSector.SectorIdColumn] = value;
                }
            }
            
            public int SortOrder
            {
                get
                {
                    return ((int)(this[this.tableSector.SortOrderColumn]));
                }
                set
                {
                    this[this.tableSector.SortOrderColumn] = value;
                }
            }
            
            public ObjectRow ObjectRow
            {
                get
                {
                    if ((DataSetMarket.lockObject.IsReaderLockHeld || DataSetMarket.lockObject.IsWriterLockHeld))
                    {
                        return ((ObjectRow)(this.GetParentRow(this.Table.ParentRelations["FKObjectSector"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Object"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKObjectSector"]);
                }
            }
            
            public SectorTargetRow[] GetSectorTargetRows()
            {
                return ((SectorTargetRow[])(this.GetChildRows(this.Table.ChildRelations["FKSectorSectorTarget"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SectorRowChangeEvent : EventArgs
        {
            
            private SectorRow eventRow;
            
            private DataRowAction eventAction;
            
            public SectorRowChangeEvent(SectorRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SectorRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SectorTargetDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnModelId;
            
            private Column columnSectorId;
            
            private Column columnPercent;
            
            internal SectorTargetDataTable() : 
                    base("SectorTarget")
            {
                this.InitClass();
            }
            
            internal SectorTargetDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ModelIdColumn
            {
                get
                {
                    return this.columnModelId;
                }
            }
            
            public Column SectorIdColumn
            {
                get
                {
                    return this.columnSectorId;
                }
            }
            
            public Column PercentColumn
            {
                get
                {
                    return this.columnPercent;
                }
            }
            
            public SectorTargetRow this[int index]
            {
                get
                {
                    return ((SectorTargetRow)(this.Rows[index]));
                }
            }
            
            public event SectorTargetRowChangeEventHandler SectorTargetRowChanged;
            
            public event SectorTargetRowChangeEventHandler SectorTargetRowChanging;
            
            public event SectorTargetRowChangeEventHandler SectorTargetRowDeleted;
            
            public event SectorTargetRowChangeEventHandler SectorTargetRowDeleting;
            
            public void AddSectorTargetRow(SectorTargetRow row)
            {
                this.Rows.Add(row);
            }
            
            public SectorTargetRow AddSectorTargetRow(ModelRow parentModelRowByFKModelSectorTarget, SectorRow parentSectorRowByFKSectorSectorTarget, decimal Percent)
            {
                SectorTargetRow rowSectorTargetRow = ((SectorTargetRow)(this.NewRow()));
                rowSectorTargetRow.ItemArray = new object[] {
                        parentModelRowByFKModelSectorTarget[17],
                        parentSectorRowByFKSectorSectorTarget[17],
                        Percent};
                this.Rows.Add(rowSectorTargetRow);
                return rowSectorTargetRow;
            }
            
            public SectorTargetRow FindByModelIdSectorId(int ModelId, int SectorId)
            {
                return ((SectorTargetRow)(this.Rows.Find(new object[] {
                            ModelId,
                            SectorId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                SectorTargetDataTable cln = ((SectorTargetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new SectorTargetDataTable();
            }
            
            internal void InitVars()
            {
                this.columnModelId = this.Columns["ModelId"];
                this.columnSectorId = this.Columns["SectorId"];
                this.columnPercent = this.Columns["Percent"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnModelId = new Column("ModelId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModelId);
                this.columnSectorId = new Column("SectorId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSectorId);
                this.columnPercent = new Column("Percent", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPercent);
                this.Constraints.Add(new UniqueConstraint("PKSectorTarget", new DataColumn[] {
                                this.columnModelId,
                                this.columnSectorId}, true));
                this.columnModelId.AllowDBNull = false;
                this.columnSectorId.AllowDBNull = false;
                this.columnPercent.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.SectorTargetLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "SectorTarget"));
                }
            }
            
            public SectorTargetRow NewSectorTargetRow()
            {
                return ((SectorTargetRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new SectorTargetRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(SectorTargetRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.SectorTargetRowChanged != null))
                {
                    this.SectorTargetRowChanged(this, new SectorTargetRowChangeEvent(((SectorTargetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.SectorTargetRowChanging != null))
                {
                    this.SectorTargetRowChanging(this, new SectorTargetRowChangeEvent(((SectorTargetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.SectorTargetRowDeleted != null))
                {
                    this.SectorTargetRowDeleted(this, new SectorTargetRowChangeEvent(((SectorTargetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.SectorTargetRowDeleting != null))
                {
                    this.SectorTargetRowDeleting(this, new SectorTargetRowChangeEvent(((SectorTargetRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSectorTargetRow(SectorTargetRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SectorTargetRow : Row
        {
            
            private SectorTargetDataTable tableSectorTarget;
            
            internal SectorTargetRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableSectorTarget = ((SectorTargetDataTable)(this.Table));
            }
            
            public int ModelId
            {
                get
                {
                    return ((int)(this[this.tableSectorTarget.ModelIdColumn]));
                }
                set
                {
                    this[this.tableSectorTarget.ModelIdColumn] = value;
                }
            }
            
            public int SectorId
            {
                get
                {
                    return ((int)(this[this.tableSectorTarget.SectorIdColumn]));
                }
                set
                {
                    this[this.tableSectorTarget.SectorIdColumn] = value;
                }
            }
            
            public decimal Percent
            {
                get
                {
                    return ((decimal)(this[this.tableSectorTarget.PercentColumn]));
                }
                set
                {
                    this[this.tableSectorTarget.PercentColumn] = value;
                }
            }
            
            public ModelRow ModelRow
            {
                get
                {
                    if ((DataSetMarket.lockModel.IsReaderLockHeld || DataSetMarket.lockModel.IsWriterLockHeld))
                    {
                        return ((ModelRow)(this.GetParentRow(this.Table.ParentRelations["FKModelSectorTarget"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Model"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKModelSectorTarget"]);
                }
            }
            
            public SectorRow SectorRow
            {
                get
                {
                    if ((DataSetMarket.lockSector.IsReaderLockHeld || DataSetMarket.lockSector.IsWriterLockHeld))
                    {
                        return ((SectorRow)(this.GetParentRow(this.Table.ParentRelations["FKSectorSectorTarget"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Sector"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKSectorSectorTarget"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SectorTargetRowChangeEvent : EventArgs
        {
            
            private SectorTargetRow eventRow;
            
            private DataRowAction eventAction;
            
            public SectorTargetRowChangeEvent(SectorTargetRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SectorTargetRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SecurityDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnSecurityId;
            
            private Column columnCountryId;
            
            private Column columnSecurityTypeCode;
            
            private Column columnQuantityFactor;
            
            private Column columnPriceFactor;
            
            private Column columnSymbol;
            
            internal SecurityDataTable() : 
                    base("Security")
            {
                this.InitClass();
            }
            
            internal SecurityDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column SecurityIdColumn
            {
                get
                {
                    return this.columnSecurityId;
                }
            }
            
            public Column CountryIdColumn
            {
                get
                {
                    return this.columnCountryId;
                }
            }
            
            public Column SecurityTypeCodeColumn
            {
                get
                {
                    return this.columnSecurityTypeCode;
                }
            }
            
            public Column QuantityFactorColumn
            {
                get
                {
                    return this.columnQuantityFactor;
                }
            }
            
            public Column PriceFactorColumn
            {
                get
                {
                    return this.columnPriceFactor;
                }
            }
            
            public Column SymbolColumn
            {
                get
                {
                    return this.columnSymbol;
                }
            }
            
            public SecurityRow this[int index]
            {
                get
                {
                    return ((SecurityRow)(this.Rows[index]));
                }
            }
            
            public event SecurityRowChangeEventHandler SecurityRowChanged;
            
            public event SecurityRowChangeEventHandler SecurityRowChanging;
            
            public event SecurityRowChangeEventHandler SecurityRowDeleted;
            
            public event SecurityRowChangeEventHandler SecurityRowDeleting;
            
            public void AddSecurityRow(SecurityRow row)
            {
                this.Rows.Add(row);
            }
            
            public SecurityRow AddSecurityRow(ObjectRow parentObjectRowByFKObjectSecurity, CountryRow parentCountryRowByFKCountrySecurity, SecurityTypeRow parentSecurityTypeRowByFKSecurityTypeSecurity, decimal QuantityFactor, decimal PriceFactor, string Symbol)
            {
                SecurityRow rowSecurityRow = ((SecurityRow)(this.NewRow()));
                rowSecurityRow.ItemArray = new object[] {
                        parentObjectRowByFKObjectSecurity[12],
                        parentCountryRowByFKCountrySecurity[0],
                        parentSecurityTypeRowByFKSecurityTypeSecurity[0],
                        QuantityFactor,
                        PriceFactor,
                        Symbol};
                this.Rows.Add(rowSecurityRow);
                return rowSecurityRow;
            }
            
            public SecurityRow FindBySecurityId(int SecurityId)
            {
                return ((SecurityRow)(this.Rows.Find(new object[] {
                            SecurityId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                SecurityDataTable cln = ((SecurityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new SecurityDataTable();
            }
            
            internal void InitVars()
            {
                this.columnSecurityId = this.Columns["SecurityId"];
                this.columnCountryId = this.Columns["CountryId"];
                this.columnSecurityTypeCode = this.Columns["SecurityTypeCode"];
                this.columnQuantityFactor = this.Columns["QuantityFactor"];
                this.columnPriceFactor = this.Columns["PriceFactor"];
                this.columnSymbol = this.Columns["Symbol"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnSecurityId = new Column("SecurityId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityId);
                this.columnCountryId = new Column("CountryId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountryId);
                this.columnSecurityTypeCode = new Column("SecurityTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityTypeCode);
                this.columnQuantityFactor = new Column("QuantityFactor", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQuantityFactor);
                this.columnPriceFactor = new Column("PriceFactor", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPriceFactor);
                this.columnSymbol = new Column("Symbol", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSymbol);
                this.Constraints.Add(new UniqueConstraint("PKSecurity", new DataColumn[] {
                                this.columnSecurityId}, true));
                this.columnSecurityId.AllowDBNull = false;
                this.columnSecurityId.Unique = true;
                this.columnCountryId.AllowDBNull = false;
                this.columnSecurityTypeCode.AllowDBNull = false;
                this.columnQuantityFactor.AllowDBNull = false;
                this.columnPriceFactor.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.SecurityLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                }
            }
            
            public SecurityRow NewSecurityRow()
            {
                return ((SecurityRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new SecurityRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(SecurityRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.SecurityRowChanged != null))
                {
                    this.SecurityRowChanged(this, new SecurityRowChangeEvent(((SecurityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.SecurityRowChanging != null))
                {
                    this.SecurityRowChanging(this, new SecurityRowChangeEvent(((SecurityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.SecurityRowDeleted != null))
                {
                    this.SecurityRowDeleted(this, new SecurityRowChangeEvent(((SecurityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.SecurityRowDeleting != null))
                {
                    this.SecurityRowDeleting(this, new SecurityRowChangeEvent(((SecurityRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSecurityRow(SecurityRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SecurityRow : Row
        {
            
            private SecurityDataTable tableSecurity;
            
            internal SecurityRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableSecurity = ((SecurityDataTable)(this.Table));
            }
            
            public int SecurityId
            {
                get
                {
                    return ((int)(this[this.tableSecurity.SecurityIdColumn]));
                }
                set
                {
                    this[this.tableSecurity.SecurityIdColumn] = value;
                }
            }
            
            public int CountryId
            {
                get
                {
                    return ((int)(this[this.tableSecurity.CountryIdColumn]));
                }
                set
                {
                    this[this.tableSecurity.CountryIdColumn] = value;
                }
            }
            
            public int SecurityTypeCode
            {
                get
                {
                    return ((int)(this[this.tableSecurity.SecurityTypeCodeColumn]));
                }
                set
                {
                    this[this.tableSecurity.SecurityTypeCodeColumn] = value;
                }
            }
            
            public decimal QuantityFactor
            {
                get
                {
                    return ((decimal)(this[this.tableSecurity.QuantityFactorColumn]));
                }
                set
                {
                    this[this.tableSecurity.QuantityFactorColumn] = value;
                }
            }
            
            public decimal PriceFactor
            {
                get
                {
                    return ((decimal)(this[this.tableSecurity.PriceFactorColumn]));
                }
                set
                {
                    this[this.tableSecurity.PriceFactorColumn] = value;
                }
            }
            
            public string Symbol
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSecurity.SymbolColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSecurity.SymbolColumn] = value;
                }
            }
            
            public CountryRow CountryRow
            {
                get
                {
                    if ((DataSetMarket.lockCountry.IsReaderLockHeld || DataSetMarket.lockCountry.IsWriterLockHeld))
                    {
                        return ((CountryRow)(this.GetParentRow(this.Table.ParentRelations["FKCountrySecurity"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Country"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKCountrySecurity"]);
                }
            }
            
            public ObjectRow ObjectRow
            {
                get
                {
                    if ((DataSetMarket.lockObject.IsReaderLockHeld || DataSetMarket.lockObject.IsWriterLockHeld))
                    {
                        return ((ObjectRow)(this.GetParentRow(this.Table.ParentRelations["FKObjectSecurity"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Object"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKObjectSecurity"]);
                }
            }
            
            public SecurityTypeRow SecurityTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockSecurityType.IsReaderLockHeld || DataSetMarket.lockSecurityType.IsWriterLockHeld))
                    {
                        return ((SecurityTypeRow)(this.GetParentRow(this.Table.ParentRelations["FKSecurityTypeSecurity"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "SecurityType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKSecurityTypeSecurity"]);
                }
            }
            
            public bool IsSymbolNull()
            {
                return this.IsNull(this.tableSecurity.SymbolColumn);
            }
            
            public void SetSymbolNull()
            {
                this[this.tableSecurity.SymbolColumn] = System.Convert.DBNull;
            }
            
            public AccountRow[] GetAccountRows()
            {
                return ((AccountRow[])(this.GetChildRows(this.Table.ChildRelations["FKSecurityAccount"])));
            }
            
            public AllocationRow[] GetAllocationRowsByFKSecurityAllocationSecurityId()
            {
                return ((AllocationRow[])(this.GetChildRows(this.Table.ChildRelations["FKSecurityAllocationSecurityId"])));
            }
            
            public AllocationRow[] GetAllocationRowsByFKSecurityAllocationSettlementId()
            {
                return ((AllocationRow[])(this.GetChildRows(this.Table.ChildRelations["FKSecurityAllocationSettlementId"])));
            }
            
            public BlockOrderRow[] GetBlockOrderRowsByFKSecurityBlockOrderSecurityId()
            {
                return ((BlockOrderRow[])(this.GetChildRows(this.Table.ChildRelations["FKSecurityBlockOrderSecurityId"])));
            }
            
            public BlockOrderRow[] GetBlockOrderRowsByFKSecurityBlockOrderSettlementId()
            {
                return ((BlockOrderRow[])(this.GetChildRows(this.Table.ChildRelations["FKSecurityBlockOrderSettlementId"])));
            }
            
            public BlotterMapRow[] GetBlotterMapRows()
            {
                return ((BlotterMapRow[])(this.GetChildRows(this.Table.ChildRelations["FKSecurityBlotterMap"])));
            }
            
            public DebtRow[] GetDebtRowsByFKSecurityDebtDebtId()
            {
                return ((DebtRow[])(this.GetChildRows(this.Table.ChildRelations["FKSecurityDebtDebtId"])));
            }
            
            public DebtRow[] GetDebtRowsByFKSecurityDebtSettlementId()
            {
                return ((DebtRow[])(this.GetChildRows(this.Table.ChildRelations["FKSecurityDebtSettlementId"])));
            }
            
            public CurrencyRow[] GetCurrencyRows()
            {
                return ((CurrencyRow[])(this.GetChildRows(this.Table.ChildRelations["FKSecurityCurrency"])));
            }
            
            public EquityRow[] GetEquityRowsByFKSecurityEquityEquityId()
            {
                return ((EquityRow[])(this.GetChildRows(this.Table.ChildRelations["FKSecurityEquityEquityId"])));
            }
            
            public EquityRow[] GetEquityRowsByFKSecurityEquitySettlementId()
            {
                return ((EquityRow[])(this.GetChildRows(this.Table.ChildRelations["FKSecurityEquitySettlementId"])));
            }
            
            public OrderRow[] GetOrderRowsByFKSecurityOrderSecurityId()
            {
                return ((OrderRow[])(this.GetChildRows(this.Table.ChildRelations["FKSecurityOrderSecurityId"])));
            }
            
            public OrderRow[] GetOrderRowsByFKSecurityOrderSettlementId()
            {
                return ((OrderRow[])(this.GetChildRows(this.Table.ChildRelations["FKSecurityOrderSettlementId"])));
            }
            
            public PositionRow[] GetPositionRows()
            {
                return ((PositionRow[])(this.GetChildRows(this.Table.ChildRelations["FKSecurityPosition"])));
            }
            
            public PositionTargetRow[] GetPositionTargetRows()
            {
                return ((PositionTargetRow[])(this.GetChildRows(this.Table.ChildRelations["FKSecurityPositionTarget"])));
            }
            
            public PriceRow[] GetPriceRows()
            {
                return ((PriceRow[])(this.GetChildRows(this.Table.ChildRelations["FKSecurityPrice"])));
            }
            
            public ProposedOrderRow[] GetProposedOrderRowsByFKSecurityProposedOrderSecurityId()
            {
                return ((ProposedOrderRow[])(this.GetChildRows(this.Table.ChildRelations["FKSecurityProposedOrderSecurityId"])));
            }
            
            public ProposedOrderRow[] GetProposedOrderRowsByFKSecurityProposedOrderSettlementId()
            {
                return ((ProposedOrderRow[])(this.GetChildRows(this.Table.ChildRelations["FKSecurityProposedOrderSettlementId"])));
            }
            
            public TaxLotRow[] GetTaxLotRows()
            {
                return ((TaxLotRow[])(this.GetChildRows(this.Table.ChildRelations["FKSecurityTaxLot"])));
            }
            
            public ViolationRow[] GetViolationRows()
            {
                return ((ViolationRow[])(this.GetChildRows(this.Table.ChildRelations["FKSecurityViolation"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SecurityRowChangeEvent : EventArgs
        {
            
            private SecurityRow eventRow;
            
            private DataRowAction eventAction;
            
            public SecurityRowChangeEvent(SecurityRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SecurityRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SecurityTypeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnSecurityTypeCode;
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private DataView viewUKSecurityTypeExternalId0;
            
            private DataView viewUKSecurityTypeExternalId1;
            
            private DataView viewUKSecurityTypeExternalId2;
            
            private DataView viewUKSecurityTypeExternalId3;
            
            internal SecurityTypeDataTable() : 
                    base("SecurityType")
            {
                this.InitClass();
            }
            
            internal SecurityTypeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column SecurityTypeCodeColumn
            {
                get
                {
                    return this.columnSecurityTypeCode;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public DataView UKSecurityTypeExternalId0
            {
                get
                {
                    return this.viewUKSecurityTypeExternalId0;
                }
            }
            
            public DataView UKSecurityTypeExternalId1
            {
                get
                {
                    return this.viewUKSecurityTypeExternalId1;
                }
            }
            
            public DataView UKSecurityTypeExternalId2
            {
                get
                {
                    return this.viewUKSecurityTypeExternalId2;
                }
            }
            
            public DataView UKSecurityTypeExternalId3
            {
                get
                {
                    return this.viewUKSecurityTypeExternalId3;
                }
            }
            
            public SecurityTypeRow this[int index]
            {
                get
                {
                    return ((SecurityTypeRow)(this.Rows[index]));
                }
            }
            
            public event SecurityTypeRowChangeEventHandler SecurityTypeRowChanged;
            
            public event SecurityTypeRowChangeEventHandler SecurityTypeRowChanging;
            
            public event SecurityTypeRowChangeEventHandler SecurityTypeRowDeleted;
            
            public event SecurityTypeRowChangeEventHandler SecurityTypeRowDeleting;
            
            public void AddSecurityTypeRow(SecurityTypeRow row)
            {
                this.Rows.Add(row);
            }
            
            public SecurityTypeRow AddSecurityTypeRow(int SecurityTypeCode, string Description, string ExternalId0, string ExternalId1, string ExternalId2, string ExternalId3)
            {
                SecurityTypeRow rowSecurityTypeRow = ((SecurityTypeRow)(this.NewRow()));
                rowSecurityTypeRow.ItemArray = new object[] {
                        SecurityTypeCode,
                        Description,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3};
                this.Rows.Add(rowSecurityTypeRow);
                return rowSecurityTypeRow;
            }
            
            public SecurityTypeRow FindBySecurityTypeCode(int SecurityTypeCode)
            {
                return ((SecurityTypeRow)(this.Rows.Find(new object[] {
                            SecurityTypeCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                SecurityTypeDataTable cln = ((SecurityTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new SecurityTypeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnSecurityTypeCode = this.Columns["SecurityTypeCode"];
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnSecurityTypeCode = new Column("SecurityTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityTypeCode);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.Constraints.Add(new UniqueConstraint("PKSecurityType", new DataColumn[] {
                                this.columnSecurityTypeCode}, true));
                this.viewUKSecurityTypeExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewUKSecurityTypeExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.viewUKSecurityTypeExternalId2 = new DataView(this, null, "ExternalId2", DataViewRowState.CurrentRows);
                this.viewUKSecurityTypeExternalId3 = new DataView(this, null, "ExternalId3", DataViewRowState.CurrentRows);
                this.columnSecurityTypeCode.AllowDBNull = false;
                this.columnSecurityTypeCode.Unique = true;
                this.columnDescription.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.SecurityTypeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "SecurityType"));
                }
            }
            
            public SecurityTypeRow NewSecurityTypeRow()
            {
                return ((SecurityTypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new SecurityTypeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(SecurityTypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.SecurityTypeRowChanged != null))
                {
                    this.SecurityTypeRowChanged(this, new SecurityTypeRowChangeEvent(((SecurityTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.SecurityTypeRowChanging != null))
                {
                    this.SecurityTypeRowChanging(this, new SecurityTypeRowChangeEvent(((SecurityTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.SecurityTypeRowDeleted != null))
                {
                    this.SecurityTypeRowDeleted(this, new SecurityTypeRowChangeEvent(((SecurityTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.SecurityTypeRowDeleting != null))
                {
                    this.SecurityTypeRowDeleting(this, new SecurityTypeRowChangeEvent(((SecurityTypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSecurityTypeRow(SecurityTypeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SecurityTypeRow : Row
        {
            
            private SecurityTypeDataTable tableSecurityType;
            
            internal SecurityTypeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableSecurityType = ((SecurityTypeDataTable)(this.Table));
            }
            
            public int SecurityTypeCode
            {
                get
                {
                    return ((int)(this[this.tableSecurityType.SecurityTypeCodeColumn]));
                }
                set
                {
                    this[this.tableSecurityType.SecurityTypeCodeColumn] = value;
                }
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableSecurityType.DescriptionColumn]));
                }
                set
                {
                    this[this.tableSecurityType.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSecurityType.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSecurityType.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSecurityType.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSecurityType.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSecurityType.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSecurityType.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSecurityType.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSecurityType.ExternalId3Column] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableSecurityType.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableSecurityType.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableSecurityType.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableSecurityType.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableSecurityType.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableSecurityType.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableSecurityType.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableSecurityType.ExternalId3Column] = System.Convert.DBNull;
            }
            
            public SecurityRow[] GetSecurityRows()
            {
                return ((SecurityRow[])(this.GetChildRows(this.Table.ChildRelations["FKSecurityTypeSecurity"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SecurityTypeRowChangeEvent : EventArgs
        {
            
            private SecurityTypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public SecurityTypeRowChangeEvent(SecurityTypeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SecurityTypeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StatusDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnStatusCode;
            
            private Column columnMnemonic;
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private DataView viewUKStatusExternalId0;
            
            private DataView viewUKStatusExternalId1;
            
            private DataView viewUKStatusExternalId2;
            
            private DataView viewUKStatusExternalId3;
            
            internal StatusDataTable() : 
                    base("Status")
            {
                this.InitClass();
            }
            
            internal StatusDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column StatusCodeColumn
            {
                get
                {
                    return this.columnStatusCode;
                }
            }
            
            public Column MnemonicColumn
            {
                get
                {
                    return this.columnMnemonic;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public DataView UKStatusExternalId0
            {
                get
                {
                    return this.viewUKStatusExternalId0;
                }
            }
            
            public DataView UKStatusExternalId1
            {
                get
                {
                    return this.viewUKStatusExternalId1;
                }
            }
            
            public DataView UKStatusExternalId2
            {
                get
                {
                    return this.viewUKStatusExternalId2;
                }
            }
            
            public DataView UKStatusExternalId3
            {
                get
                {
                    return this.viewUKStatusExternalId3;
                }
            }
            
            public StatusRow this[int index]
            {
                get
                {
                    return ((StatusRow)(this.Rows[index]));
                }
            }
            
            public event StatusRowChangeEventHandler StatusRowChanged;
            
            public event StatusRowChangeEventHandler StatusRowChanging;
            
            public event StatusRowChangeEventHandler StatusRowDeleted;
            
            public event StatusRowChangeEventHandler StatusRowDeleting;
            
            public void AddStatusRow(StatusRow row)
            {
                this.Rows.Add(row);
            }
            
            public StatusRow AddStatusRow(int StatusCode, string Mnemonic, string Description, string ExternalId0, string ExternalId1, string ExternalId2, string ExternalId3)
            {
                StatusRow rowStatusRow = ((StatusRow)(this.NewRow()));
                rowStatusRow.ItemArray = new object[] {
                        StatusCode,
                        Mnemonic,
                        Description,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3};
                this.Rows.Add(rowStatusRow);
                return rowStatusRow;
            }
            
            public StatusRow FindByStatusCode(int StatusCode)
            {
                return ((StatusRow)(this.Rows.Find(new object[] {
                            StatusCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                StatusDataTable cln = ((StatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new StatusDataTable();
            }
            
            internal void InitVars()
            {
                this.columnStatusCode = this.Columns["StatusCode"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnStatusCode = new Column("StatusCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStatusCode);
                this.columnMnemonic = new Column("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.Constraints.Add(new UniqueConstraint("PKStatus", new DataColumn[] {
                                this.columnStatusCode}, true));
                this.viewUKStatusExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewUKStatusExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.viewUKStatusExternalId2 = new DataView(this, null, "ExternalId2", DataViewRowState.CurrentRows);
                this.viewUKStatusExternalId3 = new DataView(this, null, "ExternalId3", DataViewRowState.CurrentRows);
                this.columnStatusCode.AllowDBNull = false;
                this.columnStatusCode.Unique = true;
                this.columnMnemonic.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.StatusLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Status"));
                }
            }
            
            public StatusRow NewStatusRow()
            {
                return ((StatusRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new StatusRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(StatusRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.StatusRowChanged != null))
                {
                    this.StatusRowChanged(this, new StatusRowChangeEvent(((StatusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.StatusRowChanging != null))
                {
                    this.StatusRowChanging(this, new StatusRowChangeEvent(((StatusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.StatusRowDeleted != null))
                {
                    this.StatusRowDeleted(this, new StatusRowChangeEvent(((StatusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.StatusRowDeleting != null))
                {
                    this.StatusRowDeleting(this, new StatusRowChangeEvent(((StatusRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveStatusRow(StatusRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StatusRow : Row
        {
            
            private StatusDataTable tableStatus;
            
            internal StatusRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableStatus = ((StatusDataTable)(this.Table));
            }
            
            public int StatusCode
            {
                get
                {
                    return ((int)(this[this.tableStatus.StatusCodeColumn]));
                }
                set
                {
                    this[this.tableStatus.StatusCodeColumn] = value;
                }
            }
            
            public string Mnemonic
            {
                get
                {
                    return ((string)(this[this.tableStatus.MnemonicColumn]));
                }
                set
                {
                    this[this.tableStatus.MnemonicColumn] = value;
                }
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableStatus.DescriptionColumn]));
                }
                set
                {
                    this[this.tableStatus.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStatus.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStatus.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStatus.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStatus.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStatus.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStatus.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStatus.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStatus.ExternalId3Column] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableStatus.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableStatus.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableStatus.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableStatus.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableStatus.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableStatus.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableStatus.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableStatus.ExternalId3Column] = System.Convert.DBNull;
            }
            
            public BlockOrderRow[] GetBlockOrderRows()
            {
                return ((BlockOrderRow[])(this.GetChildRows(this.Table.ChildRelations["FKStatusBlockOrder"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StatusRowChangeEvent : EventArgs
        {
            
            private StatusRow eventRow;
            
            private DataRowAction eventAction;
            
            public StatusRowChangeEvent(StatusRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public StatusRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TaxLotDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnTaxLotId;
            
            private Column columnSecurityId;
            
            private Column columnAccountId;
            
            private Column columnPositionTypeCode;
            
            private Column columnQuantity;
            
            private Column columnCost;
            
            private Column columnLocalCost;
            
            private Column columnTradeDate;
            
            private Column columnSettlementDate;
            
            private Column columnUserData0;
            
            private Column columnUserData1;
            
            private Column columnUserData2;
            
            private Column columnUserData3;
            
            private Column columnUserData4;
            
            private Column columnUserData5;
            
            private Column columnUserData6;
            
            private Column columnUserData7;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private DataView viewUKTaxLotAccountIdSecurityIdPositionTypeCode;
            
            private DataView viewUKTaxLotExternalId0;
            
            private DataView viewUKTaxLotExternalId1;
            
            private DataView viewUKTaxLotExternalId2;
            
            private DataView viewUKTaxLotExternalId3;
            
            internal TaxLotDataTable() : 
                    base("TaxLot")
            {
                this.InitClass();
            }
            
            internal TaxLotDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column TaxLotIdColumn
            {
                get
                {
                    return this.columnTaxLotId;
                }
            }
            
            public Column SecurityIdColumn
            {
                get
                {
                    return this.columnSecurityId;
                }
            }
            
            public Column AccountIdColumn
            {
                get
                {
                    return this.columnAccountId;
                }
            }
            
            public Column PositionTypeCodeColumn
            {
                get
                {
                    return this.columnPositionTypeCode;
                }
            }
            
            public Column QuantityColumn
            {
                get
                {
                    return this.columnQuantity;
                }
            }
            
            public Column CostColumn
            {
                get
                {
                    return this.columnCost;
                }
            }
            
            public Column LocalCostColumn
            {
                get
                {
                    return this.columnLocalCost;
                }
            }
            
            public Column TradeDateColumn
            {
                get
                {
                    return this.columnTradeDate;
                }
            }
            
            public Column SettlementDateColumn
            {
                get
                {
                    return this.columnSettlementDate;
                }
            }
            
            public Column UserData0Column
            {
                get
                {
                    return this.columnUserData0;
                }
            }
            
            public Column UserData1Column
            {
                get
                {
                    return this.columnUserData1;
                }
            }
            
            public Column UserData2Column
            {
                get
                {
                    return this.columnUserData2;
                }
            }
            
            public Column UserData3Column
            {
                get
                {
                    return this.columnUserData3;
                }
            }
            
            public Column UserData4Column
            {
                get
                {
                    return this.columnUserData4;
                }
            }
            
            public Column UserData5Column
            {
                get
                {
                    return this.columnUserData5;
                }
            }
            
            public Column UserData6Column
            {
                get
                {
                    return this.columnUserData6;
                }
            }
            
            public Column UserData7Column
            {
                get
                {
                    return this.columnUserData7;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public DataView UKTaxLotAccountIdSecurityIdPositionTypeCode
            {
                get
                {
                    return this.viewUKTaxLotAccountIdSecurityIdPositionTypeCode;
                }
            }
            
            public DataView UKTaxLotExternalId0
            {
                get
                {
                    return this.viewUKTaxLotExternalId0;
                }
            }
            
            public DataView UKTaxLotExternalId1
            {
                get
                {
                    return this.viewUKTaxLotExternalId1;
                }
            }
            
            public DataView UKTaxLotExternalId2
            {
                get
                {
                    return this.viewUKTaxLotExternalId2;
                }
            }
            
            public DataView UKTaxLotExternalId3
            {
                get
                {
                    return this.viewUKTaxLotExternalId3;
                }
            }
            
            public TaxLotRow this[int index]
            {
                get
                {
                    return ((TaxLotRow)(this.Rows[index]));
                }
            }
            
            public event TaxLotRowChangeEventHandler TaxLotRowChanged;
            
            public event TaxLotRowChangeEventHandler TaxLotRowChanging;
            
            public event TaxLotRowChangeEventHandler TaxLotRowDeleted;
            
            public event TaxLotRowChangeEventHandler TaxLotRowDeleting;
            
            public void AddTaxLotRow(TaxLotRow row)
            {
                this.Rows.Add(row);
            }
            
            public TaxLotRow AddTaxLotRow(
                        SecurityRow parentSecurityRowByFKSecurityTaxLot, 
                        AccountRow parentAccountRowByFKAccountTaxLot, 
                        PositionTypeRow parentPositionTypeRowByFKPositionTypeTaxLot, 
                        decimal Quantity, 
                        decimal Cost, 
                        decimal LocalCost, 
                        System.DateTime TradeDate, 
                        System.DateTime SettlementDate, 
                        decimal UserData0, 
                        decimal UserData1, 
                        decimal UserData2, 
                        decimal UserData3, 
                        decimal UserData4, 
                        decimal UserData5, 
                        decimal UserData6, 
                        decimal UserData7, 
                        string ExternalId0, 
                        string ExternalId1, 
                        string ExternalId2, 
                        string ExternalId3)
            {
                TaxLotRow rowTaxLotRow = ((TaxLotRow)(this.NewRow()));
                rowTaxLotRow.ItemArray = new object[] {
                        null,
                        parentSecurityRowByFKSecurityTaxLot[17],
                        parentAccountRowByFKAccountTaxLot[17],
                        parentPositionTypeRowByFKPositionTypeTaxLot[0],
                        Quantity,
                        Cost,
                        LocalCost,
                        TradeDate,
                        SettlementDate,
                        UserData0,
                        UserData1,
                        UserData2,
                        UserData3,
                        UserData4,
                        UserData5,
                        UserData6,
                        UserData7,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3};
                this.Rows.Add(rowTaxLotRow);
                return rowTaxLotRow;
            }
            
            public TaxLotRow FindByTaxLotId(int TaxLotId)
            {
                return ((TaxLotRow)(this.Rows.Find(new object[] {
                            TaxLotId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                TaxLotDataTable cln = ((TaxLotDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new TaxLotDataTable();
            }
            
            internal void InitVars()
            {
                this.columnTaxLotId = this.Columns["TaxLotId"];
                this.columnSecurityId = this.Columns["SecurityId"];
                this.columnAccountId = this.Columns["AccountId"];
                this.columnPositionTypeCode = this.Columns["PositionTypeCode"];
                this.columnQuantity = this.Columns["Quantity"];
                this.columnCost = this.Columns["Cost"];
                this.columnLocalCost = this.Columns["LocalCost"];
                this.columnTradeDate = this.Columns["TradeDate"];
                this.columnSettlementDate = this.Columns["SettlementDate"];
                this.columnUserData0 = this.Columns["UserData0"];
                this.columnUserData1 = this.Columns["UserData1"];
                this.columnUserData2 = this.Columns["UserData2"];
                this.columnUserData3 = this.Columns["UserData3"];
                this.columnUserData4 = this.Columns["UserData4"];
                this.columnUserData5 = this.Columns["UserData5"];
                this.columnUserData6 = this.Columns["UserData6"];
                this.columnUserData7 = this.Columns["UserData7"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnTaxLotId = new Column("TaxLotId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTaxLotId);
                this.columnSecurityId = new Column("SecurityId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityId);
                this.columnAccountId = new Column("AccountId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountId);
                this.columnPositionTypeCode = new Column("PositionTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPositionTypeCode);
                this.columnQuantity = new Column("Quantity", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQuantity);
                this.columnCost = new Column("Cost", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCost);
                this.columnLocalCost = new Column("LocalCost", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocalCost);
                this.columnTradeDate = new Column("TradeDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTradeDate);
                this.columnSettlementDate = new Column("SettlementDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSettlementDate);
                this.columnUserData0 = new Column("UserData0", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData0);
                this.columnUserData1 = new Column("UserData1", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData1);
                this.columnUserData2 = new Column("UserData2", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData2);
                this.columnUserData3 = new Column("UserData3", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData3);
                this.columnUserData4 = new Column("UserData4", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData4);
                this.columnUserData5 = new Column("UserData5", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData5);
                this.columnUserData6 = new Column("UserData6", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData6);
                this.columnUserData7 = new Column("UserData7", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserData7);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.Constraints.Add(new UniqueConstraint("PKTaxLot", new DataColumn[] {
                                this.columnTaxLotId}, true));
                this.viewUKTaxLotAccountIdSecurityIdPositionTypeCode = new DataView(this, null, "AccountId,SecurityId,PositionTypeCode", DataViewRowState.CurrentRows);
                this.viewUKTaxLotExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewUKTaxLotExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.viewUKTaxLotExternalId2 = new DataView(this, null, "ExternalId2", DataViewRowState.CurrentRows);
                this.viewUKTaxLotExternalId3 = new DataView(this, null, "ExternalId3", DataViewRowState.CurrentRows);
                this.columnTaxLotId.AutoIncrement = true;
                this.columnTaxLotId.AllowDBNull = false;
                this.columnTaxLotId.Unique = true;
                this.columnSecurityId.AllowDBNull = false;
                this.columnAccountId.AllowDBNull = false;
                this.columnPositionTypeCode.AllowDBNull = false;
                this.columnQuantity.AllowDBNull = false;
                this.columnCost.AllowDBNull = false;
                this.columnLocalCost.AllowDBNull = false;
                this.columnLocalCost.DefaultValue = 0.0m;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.TaxLotLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "TaxLot"));
                }
            }
            
            public TaxLotRow NewTaxLotRow()
            {
                return ((TaxLotRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new TaxLotRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(TaxLotRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.TaxLotRowChanged != null))
                {
                    this.TaxLotRowChanged(this, new TaxLotRowChangeEvent(((TaxLotRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.TaxLotRowChanging != null))
                {
                    this.TaxLotRowChanging(this, new TaxLotRowChangeEvent(((TaxLotRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.TaxLotRowDeleted != null))
                {
                    this.TaxLotRowDeleted(this, new TaxLotRowChangeEvent(((TaxLotRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.TaxLotRowDeleting != null))
                {
                    this.TaxLotRowDeleting(this, new TaxLotRowChangeEvent(((TaxLotRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTaxLotRow(TaxLotRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TaxLotRow : Row
        {
            
            private TaxLotDataTable tableTaxLot;
            
            internal TaxLotRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableTaxLot = ((TaxLotDataTable)(this.Table));
            }
            
            public int TaxLotId
            {
                get
                {
                    return ((int)(this[this.tableTaxLot.TaxLotIdColumn]));
                }
                set
                {
                    this[this.tableTaxLot.TaxLotIdColumn] = value;
                }
            }
            
            public int SecurityId
            {
                get
                {
                    return ((int)(this[this.tableTaxLot.SecurityIdColumn]));
                }
                set
                {
                    this[this.tableTaxLot.SecurityIdColumn] = value;
                }
            }
            
            public int AccountId
            {
                get
                {
                    return ((int)(this[this.tableTaxLot.AccountIdColumn]));
                }
                set
                {
                    this[this.tableTaxLot.AccountIdColumn] = value;
                }
            }
            
            public int PositionTypeCode
            {
                get
                {
                    return ((int)(this[this.tableTaxLot.PositionTypeCodeColumn]));
                }
                set
                {
                    this[this.tableTaxLot.PositionTypeCodeColumn] = value;
                }
            }
            
            public decimal Quantity
            {
                get
                {
                    return ((decimal)(this[this.tableTaxLot.QuantityColumn]));
                }
                set
                {
                    this[this.tableTaxLot.QuantityColumn] = value;
                }
            }
            
            public decimal Cost
            {
                get
                {
                    return ((decimal)(this[this.tableTaxLot.CostColumn]));
                }
                set
                {
                    this[this.tableTaxLot.CostColumn] = value;
                }
            }
            
            public decimal LocalCost
            {
                get
                {
                    return ((decimal)(this[this.tableTaxLot.LocalCostColumn]));
                }
                set
                {
                    this[this.tableTaxLot.LocalCostColumn] = value;
                }
            }
            
            public System.DateTime TradeDate
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(this[this.tableTaxLot.TradeDateColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.TradeDateColumn] = value;
                }
            }
            
            public System.DateTime SettlementDate
            {
                get
                {
                    try
                    {
                        return ((System.DateTime)(this[this.tableTaxLot.SettlementDateColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.SettlementDateColumn] = value;
                }
            }
            
            public decimal UserData0
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableTaxLot.UserData0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.UserData0Column] = value;
                }
            }
            
            public decimal UserData1
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableTaxLot.UserData1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.UserData1Column] = value;
                }
            }
            
            public decimal UserData2
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableTaxLot.UserData2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.UserData2Column] = value;
                }
            }
            
            public decimal UserData3
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableTaxLot.UserData3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.UserData3Column] = value;
                }
            }
            
            public decimal UserData4
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableTaxLot.UserData4Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.UserData4Column] = value;
                }
            }
            
            public decimal UserData5
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableTaxLot.UserData5Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.UserData5Column] = value;
                }
            }
            
            public decimal UserData6
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableTaxLot.UserData6Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.UserData6Column] = value;
                }
            }
            
            public decimal UserData7
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableTaxLot.UserData7Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.UserData7Column] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTaxLot.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTaxLot.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTaxLot.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTaxLot.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTaxLot.ExternalId3Column] = value;
                }
            }
            
            public AccountRow AccountRow
            {
                get
                {
                    if ((DataSetMarket.lockAccount.IsReaderLockHeld || DataSetMarket.lockAccount.IsWriterLockHeld))
                    {
                        return ((AccountRow)(this.GetParentRow(this.Table.ParentRelations["FKAccountTaxLot"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Account"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKAccountTaxLot"]);
                }
            }
            
            public PositionTypeRow PositionTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockPositionType.IsReaderLockHeld || DataSetMarket.lockPositionType.IsWriterLockHeld))
                    {
                        return ((PositionTypeRow)(this.GetParentRow(this.Table.ParentRelations["FKPositionTypeTaxLot"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "PositionType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKPositionTypeTaxLot"]);
                }
            }
            
            public SecurityRow SecurityRow
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["FKSecurityTaxLot"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKSecurityTaxLot"]);
                }
            }
            
            public bool IsTradeDateNull()
            {
                return this.IsNull(this.tableTaxLot.TradeDateColumn);
            }
            
            public void SetTradeDateNull()
            {
                this[this.tableTaxLot.TradeDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsSettlementDateNull()
            {
                return this.IsNull(this.tableTaxLot.SettlementDateColumn);
            }
            
            public void SetSettlementDateNull()
            {
                this[this.tableTaxLot.SettlementDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserData0Null()
            {
                return this.IsNull(this.tableTaxLot.UserData0Column);
            }
            
            public void SetUserData0Null()
            {
                this[this.tableTaxLot.UserData0Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData1Null()
            {
                return this.IsNull(this.tableTaxLot.UserData1Column);
            }
            
            public void SetUserData1Null()
            {
                this[this.tableTaxLot.UserData1Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData2Null()
            {
                return this.IsNull(this.tableTaxLot.UserData2Column);
            }
            
            public void SetUserData2Null()
            {
                this[this.tableTaxLot.UserData2Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData3Null()
            {
                return this.IsNull(this.tableTaxLot.UserData3Column);
            }
            
            public void SetUserData3Null()
            {
                this[this.tableTaxLot.UserData3Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData4Null()
            {
                return this.IsNull(this.tableTaxLot.UserData4Column);
            }
            
            public void SetUserData4Null()
            {
                this[this.tableTaxLot.UserData4Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData5Null()
            {
                return this.IsNull(this.tableTaxLot.UserData5Column);
            }
            
            public void SetUserData5Null()
            {
                this[this.tableTaxLot.UserData5Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData6Null()
            {
                return this.IsNull(this.tableTaxLot.UserData6Column);
            }
            
            public void SetUserData6Null()
            {
                this[this.tableTaxLot.UserData6Column] = System.Convert.DBNull;
            }
            
            public bool IsUserData7Null()
            {
                return this.IsNull(this.tableTaxLot.UserData7Column);
            }
            
            public void SetUserData7Null()
            {
                this[this.tableTaxLot.UserData7Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableTaxLot.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableTaxLot.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableTaxLot.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableTaxLot.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableTaxLot.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableTaxLot.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableTaxLot.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableTaxLot.ExternalId3Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TaxLotRowChangeEvent : EventArgs
        {
            
            private TaxLotRow eventRow;
            
            private DataRowAction eventAction;
            
            public TaxLotRowChangeEvent(TaxLotRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TaxLotRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TypeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnSpecification;
            
            private Column columnTypeCode;
            
            private DataView viewKeyTypeExternalId0;
            
            internal TypeDataTable() : 
                    base("Type")
            {
                this.InitClass();
            }
            
            internal TypeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column SpecificationColumn
            {
                get
                {
                    return this.columnSpecification;
                }
            }
            
            public Column TypeCodeColumn
            {
                get
                {
                    return this.columnTypeCode;
                }
            }
            
            public DataView KeyTypeExternalId0
            {
                get
                {
                    return this.viewKeyTypeExternalId0;
                }
            }
            
            public TypeRow this[int index]
            {
                get
                {
                    return ((TypeRow)(this.Rows[index]));
                }
            }
            
            public event TypeRowChangeEventHandler TypeRowChanged;
            
            public event TypeRowChangeEventHandler TypeRowChanging;
            
            public event TypeRowChangeEventHandler TypeRowDeleted;
            
            public event TypeRowChangeEventHandler TypeRowDeleting;
            
            public void AddTypeRow(TypeRow row)
            {
                this.Rows.Add(row);
            }
            
            public TypeRow AddTypeRow(string Description, string ExternalId0, string Specification, string TypeCode)
            {
                TypeRow rowTypeRow = ((TypeRow)(this.NewRow()));
                rowTypeRow.ItemArray = new object[] {
                        Description,
                        ExternalId0,
                        Specification,
                        TypeCode};
                this.Rows.Add(rowTypeRow);
                return rowTypeRow;
            }
            
            public TypeRow FindByTypeCode(string TypeCode)
            {
                return ((TypeRow)(this.Rows.Find(new object[] {
                            TypeCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                TypeDataTable cln = ((TypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new TypeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnSpecification = this.Columns["Specification"];
                this.columnTypeCode = this.Columns["TypeCode"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnSpecification = new Column("Specification", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSpecification);
                this.columnTypeCode = new Column("TypeCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTypeCode);
                this.Constraints.Add(new UniqueConstraint("PKType", new DataColumn[] {
                                this.columnTypeCode}, true));
                this.viewKeyTypeExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.columnDescription.AllowDBNull = false;
                this.columnSpecification.AllowDBNull = false;
                this.columnTypeCode.AllowDBNull = false;
                this.columnTypeCode.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.TypeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Type"));
                }
            }
            
            public TypeRow NewTypeRow()
            {
                return ((TypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new TypeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(TypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.TypeRowChanged != null))
                {
                    this.TypeRowChanged(this, new TypeRowChangeEvent(((TypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.TypeRowChanging != null))
                {
                    this.TypeRowChanging(this, new TypeRowChangeEvent(((TypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.TypeRowDeleted != null))
                {
                    this.TypeRowDeleted(this, new TypeRowChangeEvent(((TypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.TypeRowDeleting != null))
                {
                    this.TypeRowDeleting(this, new TypeRowChangeEvent(((TypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTypeRow(TypeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TypeRow : Row
        {
            
            private TypeDataTable tableType;
            
            internal TypeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableType = ((TypeDataTable)(this.Table));
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableType.DescriptionColumn]));
                }
                set
                {
                    this[this.tableType.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableType.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableType.ExternalId0Column] = value;
                }
            }
            
            public string Specification
            {
                get
                {
                    return ((string)(this[this.tableType.SpecificationColumn]));
                }
                set
                {
                    this[this.tableType.SpecificationColumn] = value;
                }
            }
            
            public string TypeCode
            {
                get
                {
                    return ((string)(this[this.tableType.TypeCodeColumn]));
                }
                set
                {
                    this[this.tableType.TypeCodeColumn] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableType.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableType.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public ObjectRow[] GetObjectRows()
            {
                return ((ObjectRow[])(this.GetChildRows(this.Table.ChildRelations["FKTypeObject"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TypeRowChangeEvent : EventArgs
        {
            
            private TypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public TypeRowChangeEvent(TypeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TypeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StylesheetDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnStylesheetId;
            
            private Column columnStylesheetTypeCode;
            
            private Column columnName;
            
            private Column columnText;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private DataView viewUKStylesheetExternalId0;
            
            private DataView viewUKStylesheetExternalId1;
            
            internal StylesheetDataTable() : 
                    base("Stylesheet")
            {
                this.InitClass();
            }
            
            internal StylesheetDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column StylesheetIdColumn
            {
                get
                {
                    return this.columnStylesheetId;
                }
            }
            
            public Column StylesheetTypeCodeColumn
            {
                get
                {
                    return this.columnStylesheetTypeCode;
                }
            }
            
            public Column NameColumn
            {
                get
                {
                    return this.columnName;
                }
            }
            
            public Column TextColumn
            {
                get
                {
                    return this.columnText;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public DataView UKStylesheetExternalId0
            {
                get
                {
                    return this.viewUKStylesheetExternalId0;
                }
            }
            
            public DataView UKStylesheetExternalId1
            {
                get
                {
                    return this.viewUKStylesheetExternalId1;
                }
            }
            
            public StylesheetRow this[int index]
            {
                get
                {
                    return ((StylesheetRow)(this.Rows[index]));
                }
            }
            
            public event StylesheetRowChangeEventHandler StylesheetRowChanged;
            
            public event StylesheetRowChangeEventHandler StylesheetRowChanging;
            
            public event StylesheetRowChangeEventHandler StylesheetRowDeleted;
            
            public event StylesheetRowChangeEventHandler StylesheetRowDeleting;
            
            public void AddStylesheetRow(StylesheetRow row)
            {
                this.Rows.Add(row);
            }
            
            public StylesheetRow AddStylesheetRow(StylesheetTypeRow parentStylesheetTypeRowByFKStylesheetTypeStylesheet, string Name, string Text, string ExternalId0, string ExternalId1)
            {
                StylesheetRow rowStylesheetRow = ((StylesheetRow)(this.NewRow()));
                rowStylesheetRow.ItemArray = new object[] {
                        null,
                        parentStylesheetTypeRowByFKStylesheetTypeStylesheet[0],
                        Name,
                        Text,
                        ExternalId0,
                        ExternalId1};
                this.Rows.Add(rowStylesheetRow);
                return rowStylesheetRow;
            }
            
            public StylesheetRow FindByStylesheetId(int StylesheetId)
            {
                return ((StylesheetRow)(this.Rows.Find(new object[] {
                            StylesheetId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                StylesheetDataTable cln = ((StylesheetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new StylesheetDataTable();
            }
            
            internal void InitVars()
            {
                this.columnStylesheetId = this.Columns["StylesheetId"];
                this.columnStylesheetTypeCode = this.Columns["StylesheetTypeCode"];
                this.columnName = this.Columns["Name"];
                this.columnText = this.Columns["Text"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnStylesheetId = new Column("StylesheetId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStylesheetId);
                this.columnStylesheetTypeCode = new Column("StylesheetTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStylesheetTypeCode);
                this.columnName = new Column("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnText = new Column("Text", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnText);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.Constraints.Add(new UniqueConstraint("PKStylesheet", new DataColumn[] {
                                this.columnStylesheetId}, true));
                this.viewUKStylesheetExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewUKStylesheetExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.columnStylesheetId.AutoIncrement = true;
                this.columnStylesheetId.AllowDBNull = false;
                this.columnStylesheetId.Unique = true;
                this.columnStylesheetTypeCode.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnText.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.StylesheetLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Stylesheet"));
                }
            }
            
            public StylesheetRow NewStylesheetRow()
            {
                return ((StylesheetRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new StylesheetRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(StylesheetRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.StylesheetRowChanged != null))
                {
                    this.StylesheetRowChanged(this, new StylesheetRowChangeEvent(((StylesheetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.StylesheetRowChanging != null))
                {
                    this.StylesheetRowChanging(this, new StylesheetRowChangeEvent(((StylesheetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.StylesheetRowDeleted != null))
                {
                    this.StylesheetRowDeleted(this, new StylesheetRowChangeEvent(((StylesheetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.StylesheetRowDeleting != null))
                {
                    this.StylesheetRowDeleting(this, new StylesheetRowChangeEvent(((StylesheetRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveStylesheetRow(StylesheetRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StylesheetRow : Row
        {
            
            private StylesheetDataTable tableStylesheet;
            
            internal StylesheetRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableStylesheet = ((StylesheetDataTable)(this.Table));
            }
            
            public int StylesheetId
            {
                get
                {
                    return ((int)(this[this.tableStylesheet.StylesheetIdColumn]));
                }
                set
                {
                    this[this.tableStylesheet.StylesheetIdColumn] = value;
                }
            }
            
            public int StylesheetTypeCode
            {
                get
                {
                    return ((int)(this[this.tableStylesheet.StylesheetTypeCodeColumn]));
                }
                set
                {
                    this[this.tableStylesheet.StylesheetTypeCodeColumn] = value;
                }
            }
            
            public string Name
            {
                get
                {
                    return ((string)(this[this.tableStylesheet.NameColumn]));
                }
                set
                {
                    this[this.tableStylesheet.NameColumn] = value;
                }
            }
            
            public string Text
            {
                get
                {
                    return ((string)(this[this.tableStylesheet.TextColumn]));
                }
                set
                {
                    this[this.tableStylesheet.TextColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStylesheet.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStylesheet.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStylesheet.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStylesheet.ExternalId1Column] = value;
                }
            }
            
            public StylesheetTypeRow StylesheetTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockStylesheetType.IsReaderLockHeld || DataSetMarket.lockStylesheetType.IsWriterLockHeld))
                    {
                        return ((StylesheetTypeRow)(this.GetParentRow(this.Table.ParentRelations["FKStylesheetTypeStylesheet"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "StylesheetType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKStylesheetTypeStylesheet"]);
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableStylesheet.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableStylesheet.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableStylesheet.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableStylesheet.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public AccountRow[] GetAccountRows()
            {
                return ((AccountRow[])(this.GetChildRows(this.Table.ChildRelations["FKStylesheetAccount"])));
            }
            
            public BlotterRow[] GetBlotterRowsByFKStylesheetBlotterBlockOrderStylesheetId()
            {
                return ((BlotterRow[])(this.GetChildRows(this.Table.ChildRelations["FKStylesheetBlotterBlockOrderStylesheetId"])));
            }
            
            public BlotterRow[] GetBlotterRowsByFKStylesheetBlotterPlacementStylesheetId()
            {
                return ((BlotterRow[])(this.GetChildRows(this.Table.ChildRelations["FKStylesheetBlotterPlacementStylesheetId"])));
            }
            
            public BlotterRow[] GetBlotterRowsByFKStylesheetBlotterExecutionStylesheetId()
            {
                return ((BlotterRow[])(this.GetChildRows(this.Table.ChildRelations["FKStylesheetBlotterExecutionStylesheetId"])));
            }
            
            public BlotterRow[] GetBlotterRowsByFKStylesheetBlotterTicketStylesheetId()
            {
                return ((BlotterRow[])(this.GetChildRows(this.Table.ChildRelations["FKStylesheetBlotterTicketStylesheetId"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StylesheetRowChangeEvent : EventArgs
        {
            
            private StylesheetRow eventRow;
            
            private DataRowAction eventAction;
            
            public StylesheetRowChangeEvent(StylesheetRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public StylesheetRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StylesheetTypeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnStylesheetTypeCode;
            
            private Column columnName;
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private DataView viewUKStylesheetTypeExternalId0;
            
            private DataView viewUKStylesheetTypeExternalId1;
            
            internal StylesheetTypeDataTable() : 
                    base("StylesheetType")
            {
                this.InitClass();
            }
            
            internal StylesheetTypeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column StylesheetTypeCodeColumn
            {
                get
                {
                    return this.columnStylesheetTypeCode;
                }
            }
            
            public Column NameColumn
            {
                get
                {
                    return this.columnName;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public DataView UKStylesheetTypeExternalId0
            {
                get
                {
                    return this.viewUKStylesheetTypeExternalId0;
                }
            }
            
            public DataView UKStylesheetTypeExternalId1
            {
                get
                {
                    return this.viewUKStylesheetTypeExternalId1;
                }
            }
            
            public StylesheetTypeRow this[int index]
            {
                get
                {
                    return ((StylesheetTypeRow)(this.Rows[index]));
                }
            }
            
            public event StylesheetTypeRowChangeEventHandler StylesheetTypeRowChanged;
            
            public event StylesheetTypeRowChangeEventHandler StylesheetTypeRowChanging;
            
            public event StylesheetTypeRowChangeEventHandler StylesheetTypeRowDeleted;
            
            public event StylesheetTypeRowChangeEventHandler StylesheetTypeRowDeleting;
            
            public void AddStylesheetTypeRow(StylesheetTypeRow row)
            {
                this.Rows.Add(row);
            }
            
            public StylesheetTypeRow AddStylesheetTypeRow(int StylesheetTypeCode, string Name, string Description, string ExternalId0, string ExternalId1)
            {
                StylesheetTypeRow rowStylesheetTypeRow = ((StylesheetTypeRow)(this.NewRow()));
                rowStylesheetTypeRow.ItemArray = new object[] {
                        StylesheetTypeCode,
                        Name,
                        Description,
                        ExternalId0,
                        ExternalId1};
                this.Rows.Add(rowStylesheetTypeRow);
                return rowStylesheetTypeRow;
            }
            
            public StylesheetTypeRow FindByStylesheetTypeCode(int StylesheetTypeCode)
            {
                return ((StylesheetTypeRow)(this.Rows.Find(new object[] {
                            StylesheetTypeCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                StylesheetTypeDataTable cln = ((StylesheetTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new StylesheetTypeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnStylesheetTypeCode = this.Columns["StylesheetTypeCode"];
                this.columnName = this.Columns["Name"];
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnStylesheetTypeCode = new Column("StylesheetTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStylesheetTypeCode);
                this.columnName = new Column("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.Constraints.Add(new UniqueConstraint("PKStylesheetType", new DataColumn[] {
                                this.columnStylesheetTypeCode}, true));
                this.viewUKStylesheetTypeExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewUKStylesheetTypeExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.columnStylesheetTypeCode.AllowDBNull = false;
                this.columnStylesheetTypeCode.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.StylesheetTypeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "StylesheetType"));
                }
            }
            
            public StylesheetTypeRow NewStylesheetTypeRow()
            {
                return ((StylesheetTypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new StylesheetTypeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(StylesheetTypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.StylesheetTypeRowChanged != null))
                {
                    this.StylesheetTypeRowChanged(this, new StylesheetTypeRowChangeEvent(((StylesheetTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.StylesheetTypeRowChanging != null))
                {
                    this.StylesheetTypeRowChanging(this, new StylesheetTypeRowChangeEvent(((StylesheetTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.StylesheetTypeRowDeleted != null))
                {
                    this.StylesheetTypeRowDeleted(this, new StylesheetTypeRowChangeEvent(((StylesheetTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.StylesheetTypeRowDeleting != null))
                {
                    this.StylesheetTypeRowDeleting(this, new StylesheetTypeRowChangeEvent(((StylesheetTypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveStylesheetTypeRow(StylesheetTypeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StylesheetTypeRow : Row
        {
            
            private StylesheetTypeDataTable tableStylesheetType;
            
            internal StylesheetTypeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableStylesheetType = ((StylesheetTypeDataTable)(this.Table));
            }
            
            public int StylesheetTypeCode
            {
                get
                {
                    return ((int)(this[this.tableStylesheetType.StylesheetTypeCodeColumn]));
                }
                set
                {
                    this[this.tableStylesheetType.StylesheetTypeCodeColumn] = value;
                }
            }
            
            public string Name
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStylesheetType.NameColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStylesheetType.NameColumn] = value;
                }
            }
            
            public string Description
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStylesheetType.DescriptionColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStylesheetType.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStylesheetType.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStylesheetType.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableStylesheetType.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableStylesheetType.ExternalId1Column] = value;
                }
            }
            
            public bool IsNameNull()
            {
                return this.IsNull(this.tableStylesheetType.NameColumn);
            }
            
            public void SetNameNull()
            {
                this[this.tableStylesheetType.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull()
            {
                return this.IsNull(this.tableStylesheetType.DescriptionColumn);
            }
            
            public void SetDescriptionNull()
            {
                this[this.tableStylesheetType.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableStylesheetType.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableStylesheetType.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableStylesheetType.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableStylesheetType.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public StylesheetRow[] GetStylesheetRows()
            {
                return ((StylesheetRow[])(this.GetChildRows(this.Table.ChildRelations["FKStylesheetTypeStylesheet"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StylesheetTypeRowChangeEvent : EventArgs
        {
            
            private StylesheetTypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public StylesheetTypeRowChangeEvent(StylesheetTypeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public StylesheetTypeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SystemFolderDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnSystemFolderId;
            
            internal SystemFolderDataTable() : 
                    base("SystemFolder")
            {
                this.InitClass();
            }
            
            internal SystemFolderDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column SystemFolderIdColumn
            {
                get
                {
                    return this.columnSystemFolderId;
                }
            }
            
            public SystemFolderRow this[int index]
            {
                get
                {
                    return ((SystemFolderRow)(this.Rows[index]));
                }
            }
            
            public event SystemFolderRowChangeEventHandler SystemFolderRowChanged;
            
            public event SystemFolderRowChangeEventHandler SystemFolderRowChanging;
            
            public event SystemFolderRowChangeEventHandler SystemFolderRowDeleted;
            
            public event SystemFolderRowChangeEventHandler SystemFolderRowDeleting;
            
            public void AddSystemFolderRow(SystemFolderRow row)
            {
                this.Rows.Add(row);
            }
            
            public SystemFolderRow AddSystemFolderRow(FolderRow parentFolderRowByFolderSystemFolder)
            {
                SystemFolderRow rowSystemFolderRow = ((SystemFolderRow)(this.NewRow()));
                rowSystemFolderRow.ItemArray = new object[] {
                        parentFolderRowByFolderSystemFolder[17]};
                this.Rows.Add(rowSystemFolderRow);
                return rowSystemFolderRow;
            }
            
            public SystemFolderRow FindBySystemFolderId(int SystemFolderId)
            {
                return ((SystemFolderRow)(this.Rows.Find(new object[] {
                            SystemFolderId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                SystemFolderDataTable cln = ((SystemFolderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new SystemFolderDataTable();
            }
            
            internal void InitVars()
            {
                this.columnSystemFolderId = this.Columns["SystemFolderId"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnSystemFolderId = new Column("SystemFolderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSystemFolderId);
                this.Constraints.Add(new UniqueConstraint("KeySystemFolder", new DataColumn[] {
                                this.columnSystemFolderId}, true));
                this.columnSystemFolderId.AllowDBNull = false;
                this.columnSystemFolderId.Unique = true;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.SystemFolderLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "SystemFolder"));
                }
            }
            
            public SystemFolderRow NewSystemFolderRow()
            {
                return ((SystemFolderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new SystemFolderRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(SystemFolderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.SystemFolderRowChanged != null))
                {
                    this.SystemFolderRowChanged(this, new SystemFolderRowChangeEvent(((SystemFolderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.SystemFolderRowChanging != null))
                {
                    this.SystemFolderRowChanging(this, new SystemFolderRowChangeEvent(((SystemFolderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.SystemFolderRowDeleted != null))
                {
                    this.SystemFolderRowDeleted(this, new SystemFolderRowChangeEvent(((SystemFolderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.SystemFolderRowDeleting != null))
                {
                    this.SystemFolderRowDeleting(this, new SystemFolderRowChangeEvent(((SystemFolderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSystemFolderRow(SystemFolderRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SystemFolderRow : Row
        {
            
            private SystemFolderDataTable tableSystemFolder;
            
            internal SystemFolderRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableSystemFolder = ((SystemFolderDataTable)(this.Table));
            }
            
            public int SystemFolderId
            {
                get
                {
                    return ((int)(this[this.tableSystemFolder.SystemFolderIdColumn]));
                }
                set
                {
                    this[this.tableSystemFolder.SystemFolderIdColumn] = value;
                }
            }
            
            public FolderRow FolderRow
            {
                get
                {
                    if ((DataSetMarket.lockFolder.IsReaderLockHeld || DataSetMarket.lockFolder.IsWriterLockHeld))
                    {
                        return ((FolderRow)(this.GetParentRow(this.Table.ParentRelations["FolderSystemFolder"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Folder"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FolderSystemFolder"]);
                }
            }
            
            public UserRow[] GetUserRows()
            {
                return ((UserRow[])(this.GetChildRows(this.Table.ChildRelations["SystemFolderUser"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SystemFolderRowChangeEvent : EventArgs
        {
            
            private SystemFolderRow eventRow;
            
            private DataRowAction eventAction;
            
            public SystemFolderRowChangeEvent(SystemFolderRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SystemFolderRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimeInForceDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnTimeInForceCode;
            
            private Column columnMnemonic;
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private DataView viewUKTimeInForceExternalId0;
            
            private DataView viewUKTimeInForceExternalId1;
            
            private DataView viewUKTimeInForceExternalId2;
            
            private DataView viewUKTimeInForceExternalId3;
            
            internal TimeInForceDataTable() : 
                    base("TimeInForce")
            {
                this.InitClass();
            }
            
            internal TimeInForceDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column TimeInForceCodeColumn
            {
                get
                {
                    return this.columnTimeInForceCode;
                }
            }
            
            public Column MnemonicColumn
            {
                get
                {
                    return this.columnMnemonic;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public DataView UKTimeInForceExternalId0
            {
                get
                {
                    return this.viewUKTimeInForceExternalId0;
                }
            }
            
            public DataView UKTimeInForceExternalId1
            {
                get
                {
                    return this.viewUKTimeInForceExternalId1;
                }
            }
            
            public DataView UKTimeInForceExternalId2
            {
                get
                {
                    return this.viewUKTimeInForceExternalId2;
                }
            }
            
            public DataView UKTimeInForceExternalId3
            {
                get
                {
                    return this.viewUKTimeInForceExternalId3;
                }
            }
            
            public TimeInForceRow this[int index]
            {
                get
                {
                    return ((TimeInForceRow)(this.Rows[index]));
                }
            }
            
            public event TimeInForceRowChangeEventHandler TimeInForceRowChanged;
            
            public event TimeInForceRowChangeEventHandler TimeInForceRowChanging;
            
            public event TimeInForceRowChangeEventHandler TimeInForceRowDeleted;
            
            public event TimeInForceRowChangeEventHandler TimeInForceRowDeleting;
            
            public void AddTimeInForceRow(TimeInForceRow row)
            {
                this.Rows.Add(row);
            }
            
            public TimeInForceRow AddTimeInForceRow(int TimeInForceCode, string Mnemonic, string Description, string ExternalId0, string ExternalId1, string ExternalId2, string ExternalId3)
            {
                TimeInForceRow rowTimeInForceRow = ((TimeInForceRow)(this.NewRow()));
                rowTimeInForceRow.ItemArray = new object[] {
                        TimeInForceCode,
                        Mnemonic,
                        Description,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3};
                this.Rows.Add(rowTimeInForceRow);
                return rowTimeInForceRow;
            }
            
            public TimeInForceRow FindByTimeInForceCode(int TimeInForceCode)
            {
                return ((TimeInForceRow)(this.Rows.Find(new object[] {
                            TimeInForceCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                TimeInForceDataTable cln = ((TimeInForceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new TimeInForceDataTable();
            }
            
            internal void InitVars()
            {
                this.columnTimeInForceCode = this.Columns["TimeInForceCode"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnTimeInForceCode = new Column("TimeInForceCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeInForceCode);
                this.columnMnemonic = new Column("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.Constraints.Add(new UniqueConstraint("PKTimeInForce", new DataColumn[] {
                                this.columnTimeInForceCode}, true));
                this.viewUKTimeInForceExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewUKTimeInForceExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.viewUKTimeInForceExternalId2 = new DataView(this, null, "ExternalId2", DataViewRowState.CurrentRows);
                this.viewUKTimeInForceExternalId3 = new DataView(this, null, "ExternalId3", DataViewRowState.CurrentRows);
                this.columnTimeInForceCode.AllowDBNull = false;
                this.columnTimeInForceCode.Unique = true;
                this.columnMnemonic.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.TimeInForceLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "TimeInForce"));
                }
            }
            
            public TimeInForceRow NewTimeInForceRow()
            {
                return ((TimeInForceRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new TimeInForceRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(TimeInForceRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.TimeInForceRowChanged != null))
                {
                    this.TimeInForceRowChanged(this, new TimeInForceRowChangeEvent(((TimeInForceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.TimeInForceRowChanging != null))
                {
                    this.TimeInForceRowChanging(this, new TimeInForceRowChangeEvent(((TimeInForceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.TimeInForceRowDeleted != null))
                {
                    this.TimeInForceRowDeleted(this, new TimeInForceRowChangeEvent(((TimeInForceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.TimeInForceRowDeleting != null))
                {
                    this.TimeInForceRowDeleting(this, new TimeInForceRowChangeEvent(((TimeInForceRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTimeInForceRow(TimeInForceRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimeInForceRow : Row
        {
            
            private TimeInForceDataTable tableTimeInForce;
            
            internal TimeInForceRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableTimeInForce = ((TimeInForceDataTable)(this.Table));
            }
            
            public int TimeInForceCode
            {
                get
                {
                    return ((int)(this[this.tableTimeInForce.TimeInForceCodeColumn]));
                }
                set
                {
                    this[this.tableTimeInForce.TimeInForceCodeColumn] = value;
                }
            }
            
            public string Mnemonic
            {
                get
                {
                    return ((string)(this[this.tableTimeInForce.MnemonicColumn]));
                }
                set
                {
                    this[this.tableTimeInForce.MnemonicColumn] = value;
                }
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableTimeInForce.DescriptionColumn]));
                }
                set
                {
                    this[this.tableTimeInForce.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTimeInForce.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTimeInForce.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTimeInForce.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTimeInForce.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTimeInForce.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTimeInForce.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTimeInForce.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTimeInForce.ExternalId3Column] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableTimeInForce.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableTimeInForce.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableTimeInForce.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableTimeInForce.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableTimeInForce.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableTimeInForce.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableTimeInForce.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableTimeInForce.ExternalId3Column] = System.Convert.DBNull;
            }
            
            public AccountRow[] GetAccountRows()
            {
                return ((AccountRow[])(this.GetChildRows(this.Table.ChildRelations["FKTimeInForceAccount"])));
            }
            
            public OrderRow[] GetOrderRows()
            {
                return ((OrderRow[])(this.GetChildRows(this.Table.ChildRelations["FKTimeInForceOrder"])));
            }
            
            public PlacementRow[] GetPlacementRows()
            {
                return ((PlacementRow[])(this.GetChildRows(this.Table.ChildRelations["FKTimeInForcePlacement"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimeInForceRowChangeEvent : EventArgs
        {
            
            private TimeInForceRow eventRow;
            
            private DataRowAction eventAction;
            
            public TimeInForceRowChangeEvent(TimeInForceRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TimeInForceRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransactionTypeDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnTransactionTypeCode;
            
            private Column columnQuantitySign;
            
            private Column columnCashSign;
            
            private Column columnMnemonic;
            
            private Column columnDescription;
            
            private Column columnExternalId0;
            
            private Column columnExternalId1;
            
            private Column columnExternalId2;
            
            private Column columnExternalId3;
            
            private DataView viewUKTransactionTypeExternalId0;
            
            private DataView viewUKTransactionTypeExternalId1;
            
            private DataView viewUKTransactionTypeExternalId2;
            
            private DataView viewUKTransactionTypeExternalId3;
            
            internal TransactionTypeDataTable() : 
                    base("TransactionType")
            {
                this.InitClass();
            }
            
            internal TransactionTypeDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column TransactionTypeCodeColumn
            {
                get
                {
                    return this.columnTransactionTypeCode;
                }
            }
            
            public Column QuantitySignColumn
            {
                get
                {
                    return this.columnQuantitySign;
                }
            }
            
            public Column CashSignColumn
            {
                get
                {
                    return this.columnCashSign;
                }
            }
            
            public Column MnemonicColumn
            {
                get
                {
                    return this.columnMnemonic;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public Column ExternalId0Column
            {
                get
                {
                    return this.columnExternalId0;
                }
            }
            
            public Column ExternalId1Column
            {
                get
                {
                    return this.columnExternalId1;
                }
            }
            
            public Column ExternalId2Column
            {
                get
                {
                    return this.columnExternalId2;
                }
            }
            
            public Column ExternalId3Column
            {
                get
                {
                    return this.columnExternalId3;
                }
            }
            
            public DataView UKTransactionTypeExternalId0
            {
                get
                {
                    return this.viewUKTransactionTypeExternalId0;
                }
            }
            
            public DataView UKTransactionTypeExternalId1
            {
                get
                {
                    return this.viewUKTransactionTypeExternalId1;
                }
            }
            
            public DataView UKTransactionTypeExternalId2
            {
                get
                {
                    return this.viewUKTransactionTypeExternalId2;
                }
            }
            
            public DataView UKTransactionTypeExternalId3
            {
                get
                {
                    return this.viewUKTransactionTypeExternalId3;
                }
            }
            
            public TransactionTypeRow this[int index]
            {
                get
                {
                    return ((TransactionTypeRow)(this.Rows[index]));
                }
            }
            
            public event TransactionTypeRowChangeEventHandler TransactionTypeRowChanged;
            
            public event TransactionTypeRowChangeEventHandler TransactionTypeRowChanging;
            
            public event TransactionTypeRowChangeEventHandler TransactionTypeRowDeleted;
            
            public event TransactionTypeRowChangeEventHandler TransactionTypeRowDeleting;
            
            public void AddTransactionTypeRow(TransactionTypeRow row)
            {
                this.Rows.Add(row);
            }
            
            public TransactionTypeRow AddTransactionTypeRow(int TransactionTypeCode, decimal QuantitySign, decimal CashSign, string Mnemonic, string Description, string ExternalId0, string ExternalId1, string ExternalId2, string ExternalId3)
            {
                TransactionTypeRow rowTransactionTypeRow = ((TransactionTypeRow)(this.NewRow()));
                rowTransactionTypeRow.ItemArray = new object[] {
                        TransactionTypeCode,
                        QuantitySign,
                        CashSign,
                        Mnemonic,
                        Description,
                        ExternalId0,
                        ExternalId1,
                        ExternalId2,
                        ExternalId3};
                this.Rows.Add(rowTransactionTypeRow);
                return rowTransactionTypeRow;
            }
            
            public TransactionTypeRow FindByTransactionTypeCode(int TransactionTypeCode)
            {
                return ((TransactionTypeRow)(this.Rows.Find(new object[] {
                            TransactionTypeCode})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                TransactionTypeDataTable cln = ((TransactionTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new TransactionTypeDataTable();
            }
            
            internal void InitVars()
            {
                this.columnTransactionTypeCode = this.Columns["TransactionTypeCode"];
                this.columnQuantitySign = this.Columns["QuantitySign"];
                this.columnCashSign = this.Columns["CashSign"];
                this.columnMnemonic = this.Columns["Mnemonic"];
                this.columnDescription = this.Columns["Description"];
                this.columnExternalId0 = this.Columns["ExternalId0"];
                this.columnExternalId1 = this.Columns["ExternalId1"];
                this.columnExternalId2 = this.Columns["ExternalId2"];
                this.columnExternalId3 = this.Columns["ExternalId3"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnTransactionTypeCode = new Column("TransactionTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionTypeCode);
                this.columnQuantitySign = new Column("QuantitySign", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQuantitySign);
                this.columnCashSign = new Column("CashSign", typeof(decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCashSign);
                this.columnMnemonic = new Column("Mnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMnemonic);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnExternalId0 = new Column("ExternalId0", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId0);
                this.columnExternalId1 = new Column("ExternalId1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId1);
                this.columnExternalId2 = new Column("ExternalId2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId2);
                this.columnExternalId3 = new Column("ExternalId3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExternalId3);
                this.Constraints.Add(new UniqueConstraint("PKTransactionType", new DataColumn[] {
                                this.columnTransactionTypeCode}, true));
                this.viewUKTransactionTypeExternalId0 = new DataView(this, null, "ExternalId0", DataViewRowState.CurrentRows);
                this.viewUKTransactionTypeExternalId1 = new DataView(this, null, "ExternalId1", DataViewRowState.CurrentRows);
                this.viewUKTransactionTypeExternalId2 = new DataView(this, null, "ExternalId2", DataViewRowState.CurrentRows);
                this.viewUKTransactionTypeExternalId3 = new DataView(this, null, "ExternalId3", DataViewRowState.CurrentRows);
                this.columnTransactionTypeCode.AllowDBNull = false;
                this.columnTransactionTypeCode.Unique = true;
                this.columnQuantitySign.AllowDBNull = false;
                this.columnCashSign.AllowDBNull = false;
                this.columnMnemonic.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.TransactionTypeLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "TransactionType"));
                }
            }
            
            public TransactionTypeRow NewTransactionTypeRow()
            {
                return ((TransactionTypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new TransactionTypeRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(TransactionTypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.TransactionTypeRowChanged != null))
                {
                    this.TransactionTypeRowChanged(this, new TransactionTypeRowChangeEvent(((TransactionTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.TransactionTypeRowChanging != null))
                {
                    this.TransactionTypeRowChanging(this, new TransactionTypeRowChangeEvent(((TransactionTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.TransactionTypeRowDeleted != null))
                {
                    this.TransactionTypeRowDeleted(this, new TransactionTypeRowChangeEvent(((TransactionTypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.TransactionTypeRowDeleting != null))
                {
                    this.TransactionTypeRowDeleting(this, new TransactionTypeRowChangeEvent(((TransactionTypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTransactionTypeRow(TransactionTypeRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransactionTypeRow : Row
        {
            
            private TransactionTypeDataTable tableTransactionType;
            
            internal TransactionTypeRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableTransactionType = ((TransactionTypeDataTable)(this.Table));
            }
            
            public int TransactionTypeCode
            {
                get
                {
                    return ((int)(this[this.tableTransactionType.TransactionTypeCodeColumn]));
                }
                set
                {
                    this[this.tableTransactionType.TransactionTypeCodeColumn] = value;
                }
            }
            
            public decimal QuantitySign
            {
                get
                {
                    return ((decimal)(this[this.tableTransactionType.QuantitySignColumn]));
                }
                set
                {
                    this[this.tableTransactionType.QuantitySignColumn] = value;
                }
            }
            
            public decimal CashSign
            {
                get
                {
                    return ((decimal)(this[this.tableTransactionType.CashSignColumn]));
                }
                set
                {
                    this[this.tableTransactionType.CashSignColumn] = value;
                }
            }
            
            public string Mnemonic
            {
                get
                {
                    return ((string)(this[this.tableTransactionType.MnemonicColumn]));
                }
                set
                {
                    this[this.tableTransactionType.MnemonicColumn] = value;
                }
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableTransactionType.DescriptionColumn]));
                }
                set
                {
                    this[this.tableTransactionType.DescriptionColumn] = value;
                }
            }
            
            public string ExternalId0
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTransactionType.ExternalId0Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTransactionType.ExternalId0Column] = value;
                }
            }
            
            public string ExternalId1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTransactionType.ExternalId1Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTransactionType.ExternalId1Column] = value;
                }
            }
            
            public string ExternalId2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTransactionType.ExternalId2Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTransactionType.ExternalId2Column] = value;
                }
            }
            
            public string ExternalId3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableTransactionType.ExternalId3Column]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableTransactionType.ExternalId3Column] = value;
                }
            }
            
            public bool IsExternalId0Null()
            {
                return this.IsNull(this.tableTransactionType.ExternalId0Column);
            }
            
            public void SetExternalId0Null()
            {
                this[this.tableTransactionType.ExternalId0Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId1Null()
            {
                return this.IsNull(this.tableTransactionType.ExternalId1Column);
            }
            
            public void SetExternalId1Null()
            {
                this[this.tableTransactionType.ExternalId1Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId2Null()
            {
                return this.IsNull(this.tableTransactionType.ExternalId2Column);
            }
            
            public void SetExternalId2Null()
            {
                this[this.tableTransactionType.ExternalId2Column] = System.Convert.DBNull;
            }
            
            public bool IsExternalId3Null()
            {
                return this.IsNull(this.tableTransactionType.ExternalId3Column);
            }
            
            public void SetExternalId3Null()
            {
                this[this.tableTransactionType.ExternalId3Column] = System.Convert.DBNull;
            }
            
            public AllocationRow[] GetAllocationRows()
            {
                return ((AllocationRow[])(this.GetChildRows(this.Table.ChildRelations["FKTransactionTypeAllocation"])));
            }
            
            public BlockOrderRow[] GetBlockOrderRows()
            {
                return ((BlockOrderRow[])(this.GetChildRows(this.Table.ChildRelations["FKTransactionTypeBlockOrder"])));
            }
            
            public OrderRow[] GetOrderRows()
            {
                return ((OrderRow[])(this.GetChildRows(this.Table.ChildRelations["FKTransactionTypeOrder"])));
            }
            
            public ProposedOrderRow[] GetProposedOrderRows()
            {
                return ((ProposedOrderRow[])(this.GetChildRows(this.Table.ChildRelations["FKTransactionTypeProposedOrder"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransactionTypeRowChangeEvent : EventArgs
        {
            
            private TransactionTypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public TransactionTypeRowChangeEvent(TransactionTypeRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TransactionTypeRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnPreferences;
            
            private Column columnSystemFolderId;
            
            private Column columnUserId;
            
            private Column columnUserName;
            
            private DataView viewUKUserUserName;
            
            private DataView viewKeyUserUserName;
            
            internal UserDataTable() : 
                    base("User")
            {
                this.InitClass();
            }
            
            internal UserDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column PreferencesColumn
            {
                get
                {
                    return this.columnPreferences;
                }
            }
            
            public Column SystemFolderIdColumn
            {
                get
                {
                    return this.columnSystemFolderId;
                }
            }
            
            public Column UserIdColumn
            {
                get
                {
                    return this.columnUserId;
                }
            }
            
            public Column UserNameColumn
            {
                get
                {
                    return this.columnUserName;
                }
            }
            
            public DataView UKUserUserName
            {
                get
                {
                    return this.viewUKUserUserName;
                }
            }
            
            public DataView KeyUserUserName
            {
                get
                {
                    return this.viewKeyUserUserName;
                }
            }
            
            public UserRow this[int index]
            {
                get
                {
                    return ((UserRow)(this.Rows[index]));
                }
            }
            
            public event UserRowChangeEventHandler UserRowChanged;
            
            public event UserRowChangeEventHandler UserRowChanging;
            
            public event UserRowChangeEventHandler UserRowDeleted;
            
            public event UserRowChangeEventHandler UserRowDeleting;
            
            public void AddUserRow(UserRow row)
            {
                this.Rows.Add(row);
            }
            
            public UserRow AddUserRow(byte[] Preferences, SystemFolderRow parentSystemFolderRowBySystemFolderUser, ObjectRow parentObjectRowByFKObjectUser, string UserName)
            {
                UserRow rowUserRow = ((UserRow)(this.NewRow()));
                rowUserRow.ItemArray = new object[] {
                        Preferences,
                        parentSystemFolderRowBySystemFolderUser[18],
                        parentObjectRowByFKObjectUser[12],
                        UserName};
                this.Rows.Add(rowUserRow);
                return rowUserRow;
            }
            
            public UserRow FindByUserId(int UserId)
            {
                return ((UserRow)(this.Rows.Find(new object[] {
                            UserId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                UserDataTable cln = ((UserDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new UserDataTable();
            }
            
            internal void InitVars()
            {
                this.columnPreferences = this.Columns["Preferences"];
                this.columnSystemFolderId = this.Columns["SystemFolderId"];
                this.columnUserId = this.Columns["UserId"];
                this.columnUserName = this.Columns["UserName"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnPreferences = new Column("Preferences", typeof(byte[]), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPreferences);
                this.columnSystemFolderId = new Column("SystemFolderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSystemFolderId);
                this.columnUserId = new Column("UserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserId);
                this.columnUserName = new Column("UserName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserName);
                this.Constraints.Add(new UniqueConstraint("PKUser", new DataColumn[] {
                                this.columnUserId}, true));
                this.viewUKUserUserName = new DataView(this, null, "UserName", DataViewRowState.CurrentRows);
                this.viewKeyUserUserName = new DataView(this, null, "UserName", DataViewRowState.CurrentRows);
                this.columnUserId.AllowDBNull = false;
                this.columnUserId.Unique = true;
                this.columnUserName.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.UserLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "User"));
                }
            }
            
            public UserRow NewUserRow()
            {
                return ((UserRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new UserRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(UserRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.UserRowChanged != null))
                {
                    this.UserRowChanged(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.UserRowChanging != null))
                {
                    this.UserRowChanging(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.UserRowDeleted != null))
                {
                    this.UserRowDeleted(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.UserRowDeleting != null))
                {
                    this.UserRowDeleting(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveUserRow(UserRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserRow : Row
        {
            
            private UserDataTable tableUser;
            
            internal UserRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableUser = ((UserDataTable)(this.Table));
            }
            
            public byte[] Preferences
            {
                get
                {
                    try
                    {
                        return ((byte[])(this[this.tableUser.PreferencesColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableUser.PreferencesColumn] = value;
                }
            }
            
            public int SystemFolderId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableUser.SystemFolderIdColumn]));
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableUser.SystemFolderIdColumn] = value;
                }
            }
            
            public int UserId
            {
                get
                {
                    return ((int)(this[this.tableUser.UserIdColumn]));
                }
                set
                {
                    this[this.tableUser.UserIdColumn] = value;
                }
            }
            
            public string UserName
            {
                get
                {
                    return ((string)(this[this.tableUser.UserNameColumn]));
                }
                set
                {
                    this[this.tableUser.UserNameColumn] = value;
                }
            }
            
            public SystemFolderRow SystemFolderRow
            {
                get
                {
                    if ((DataSetMarket.lockSystemFolder.IsReaderLockHeld || DataSetMarket.lockSystemFolder.IsWriterLockHeld))
                    {
                        return ((SystemFolderRow)(this.GetParentRow(this.Table.ParentRelations["SystemFolderUser"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "SystemFolder"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["SystemFolderUser"]);
                }
            }
            
            public ObjectRow ObjectRow
            {
                get
                {
                    if ((DataSetMarket.lockObject.IsReaderLockHeld || DataSetMarket.lockObject.IsWriterLockHeld))
                    {
                        return ((ObjectRow)(this.GetParentRow(this.Table.ParentRelations["FKObjectUser"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Object"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKObjectUser"]);
                }
            }
            
            public bool IsPreferencesNull()
            {
                return this.IsNull(this.tableUser.PreferencesColumn);
            }
            
            public void SetPreferencesNull()
            {
                this[this.tableUser.PreferencesColumn] = System.Convert.DBNull;
            }
            
            public bool IsSystemFolderIdNull()
            {
                return this.IsNull(this.tableUser.SystemFolderIdColumn);
            }
            
            public void SetSystemFolderIdNull()
            {
                this[this.tableUser.SystemFolderIdColumn] = System.Convert.DBNull;
            }
            
            public AllocationRow[] GetAllocationRowsByFKUserAllocationCreatedUserId()
            {
                return ((AllocationRow[])(this.GetChildRows(this.Table.ChildRelations["FKUserAllocationCreatedUserId"])));
            }
            
            public AllocationRow[] GetAllocationRowsByFKUserAllocationModifiedUserId()
            {
                return ((AllocationRow[])(this.GetChildRows(this.Table.ChildRelations["FKUserAllocationModifiedUserId"])));
            }
            
            public ExecutionRow[] GetExecutionRowsByFKUserExecutionCreatedUserId()
            {
                return ((ExecutionRow[])(this.GetChildRows(this.Table.ChildRelations["FKUserExecutionCreatedUserId"])));
            }
            
            public ExecutionRow[] GetExecutionRowsByFKUserExecutionModifiedUserId()
            {
                return ((ExecutionRow[])(this.GetChildRows(this.Table.ChildRelations["FKUserExecutionModifiedUserId"])));
            }
            
            public PlacementRow[] GetPlacementRowsByFKUserPlacementCreatedUserId()
            {
                return ((PlacementRow[])(this.GetChildRows(this.Table.ChildRelations["FKUserPlacementCreatedUserId"])));
            }
            
            public PlacementRow[] GetPlacementRowsByFKUserPlacementModifiedUserId()
            {
                return ((PlacementRow[])(this.GetChildRows(this.Table.ChildRelations["FKUserPlacementModifiedUserId"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UserRowChangeEvent : EventArgs
        {
            
            private UserRow eventRow;
            
            private DataRowAction eventAction;
            
            public UserRowChangeEvent(UserRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public UserRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ViolationDataTable : Table, System.Collections.IEnumerable
        {
            
            private Column columnViolationId;
            
            private Column columnRestrictionId;
            
            private Column columnAccountId;
            
            private Column columnSecurityId;
            
            private Column columnPositionTypeCode;
            
            private Column columnDescription;
            
            private DataView viewUKViolationRestrictionIdAccountId;
            
            private DataView viewUKViolationAccountIdSecurityIdPositionTypeCode;
            
            private DataView viewUKViolationRestrictionIdAccountIdSecurityIdPositionTypeCode;
            
            internal ViolationDataTable() : 
                    base("Violation")
            {
                this.InitClass();
            }
            
            internal ViolationDataTable(DataTable table) : 
                    base(table.TableName)
            {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }
            
            public Column ViolationIdColumn
            {
                get
                {
                    return this.columnViolationId;
                }
            }
            
            public Column RestrictionIdColumn
            {
                get
                {
                    return this.columnRestrictionId;
                }
            }
            
            public Column AccountIdColumn
            {
                get
                {
                    return this.columnAccountId;
                }
            }
            
            public Column SecurityIdColumn
            {
                get
                {
                    return this.columnSecurityId;
                }
            }
            
            public Column PositionTypeCodeColumn
            {
                get
                {
                    return this.columnPositionTypeCode;
                }
            }
            
            public Column DescriptionColumn
            {
                get
                {
                    return this.columnDescription;
                }
            }
            
            public DataView UKViolationRestrictionIdAccountId
            {
                get
                {
                    return this.viewUKViolationRestrictionIdAccountId;
                }
            }
            
            public DataView UKViolationAccountIdSecurityIdPositionTypeCode
            {
                get
                {
                    return this.viewUKViolationAccountIdSecurityIdPositionTypeCode;
                }
            }
            
            public DataView UKViolationRestrictionIdAccountIdSecurityIdPositionTypeCode
            {
                get
                {
                    return this.viewUKViolationRestrictionIdAccountIdSecurityIdPositionTypeCode;
                }
            }
            
            public ViolationRow this[int index]
            {
                get
                {
                    return ((ViolationRow)(this.Rows[index]));
                }
            }
            
            public event ViolationRowChangeEventHandler ViolationRowChanged;
            
            public event ViolationRowChangeEventHandler ViolationRowChanging;
            
            public event ViolationRowChangeEventHandler ViolationRowDeleted;
            
            public event ViolationRowChangeEventHandler ViolationRowDeleting;
            
            public void AddViolationRow(ViolationRow row)
            {
                this.Rows.Add(row);
            }
            
            public ViolationRow AddViolationRow(RestrictionRow parentRestrictionRowByFKRestrictionViolation, AccountRow parentAccountRowByFKAccountViolation, SecurityRow parentSecurityRowByFKSecurityViolation, PositionTypeRow parentPositionTypeRowByFKPositionTypeViolation, string Description)
            {
                ViolationRow rowViolationRow = ((ViolationRow)(this.NewRow()));
                rowViolationRow.ItemArray = new object[] {
                        null,
                        parentRestrictionRowByFKRestrictionViolation[0],
                        parentAccountRowByFKAccountViolation[17],
                        parentSecurityRowByFKSecurityViolation[17],
                        parentPositionTypeRowByFKPositionTypeViolation[0],
                        Description};
                this.Rows.Add(rowViolationRow);
                return rowViolationRow;
            }
            
            public ViolationRow FindByViolationId(int ViolationId)
            {
                return ((ViolationRow)(this.Rows.Find(new object[] {
                            ViolationId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone()
            {
                ViolationDataTable cln = ((ViolationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance()
            {
                return new ViolationDataTable();
            }
            
            internal void InitVars()
            {
                this.columnViolationId = this.Columns["ViolationId"];
                this.columnRestrictionId = this.Columns["RestrictionId"];
                this.columnAccountId = this.Columns["AccountId"];
                this.columnSecurityId = this.Columns["SecurityId"];
                this.columnPositionTypeCode = this.Columns["PositionTypeCode"];
                this.columnDescription = this.Columns["Description"];
            }
            
            private void InitClass()
            {
                this.RowChanging += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.RowDeleting += new DataRowChangeEventHandler(this.CheckWriterLock);
                this.columnViolationId = new Column("ViolationId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnViolationId);
                this.columnRestrictionId = new Column("RestrictionId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRestrictionId);
                this.columnAccountId = new Column("AccountId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountId);
                this.columnSecurityId = new Column("SecurityId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityId);
                this.columnPositionTypeCode = new Column("PositionTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPositionTypeCode);
                this.columnDescription = new Column("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.Constraints.Add(new UniqueConstraint("PKViolation", new DataColumn[] {
                                this.columnViolationId}, true));
                this.viewUKViolationRestrictionIdAccountId = new DataView(this, null, "RestrictionId,AccountId", DataViewRowState.CurrentRows);
                this.viewUKViolationAccountIdSecurityIdPositionTypeCode = new DataView(this, null, "AccountId,SecurityId,PositionTypeCode", DataViewRowState.CurrentRows);
                this.viewUKViolationRestrictionIdAccountIdSecurityIdPositionTypeCode = new DataView(this, null, "RestrictionId,AccountId,SecurityId,PositionTypeCode", DataViewRowState.CurrentRows);
                this.columnViolationId.AutoIncrement = true;
                this.columnViolationId.AllowDBNull = false;
                this.columnViolationId.Unique = true;
                this.columnRestrictionId.AllowDBNull = false;
                this.columnAccountId.AllowDBNull = false;
                this.columnSecurityId.AllowDBNull = false;
                this.columnPositionTypeCode.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
            }
            
            private void CheckWriterLock(object sender, DataRowChangeEventArgs dataRowChangeEventArgs)
            {
                if (DataSetMarket.ViolationLock.IsWriterLockHeld)
                {
                    return;
                }
                else
                {
                    throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Violation"));
                }
            }
            
            public ViolationRow NewViolationRow()
            {
                return ((ViolationRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ViolationRow(builder);
            }
            
            protected override System.Type GetRowType()
            {
                return typeof(ViolationRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.ViolationRowChanged != null))
                {
                    this.ViolationRowChanged(this, new ViolationRowChangeEvent(((ViolationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.ViolationRowChanging != null))
                {
                    this.ViolationRowChanging(this, new ViolationRowChangeEvent(((ViolationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.ViolationRowDeleted != null))
                {
                    this.ViolationRowDeleted(this, new ViolationRowChangeEvent(((ViolationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.ViolationRowDeleting != null))
                {
                    this.ViolationRowDeleting(this, new ViolationRowChangeEvent(((ViolationRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveViolationRow(ViolationRow row)
            {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ViolationRow : Row
        {
            
            private ViolationDataTable tableViolation;
            
            internal ViolationRow(DataRowBuilder rb) : 
                    base(rb)
            {
                this.tableViolation = ((ViolationDataTable)(this.Table));
            }
            
            public int ViolationId
            {
                get
                {
                    return ((int)(this[this.tableViolation.ViolationIdColumn]));
                }
                set
                {
                    this[this.tableViolation.ViolationIdColumn] = value;
                }
            }
            
            public int RestrictionId
            {
                get
                {
                    return ((int)(this[this.tableViolation.RestrictionIdColumn]));
                }
                set
                {
                    this[this.tableViolation.RestrictionIdColumn] = value;
                }
            }
            
            public int AccountId
            {
                get
                {
                    return ((int)(this[this.tableViolation.AccountIdColumn]));
                }
                set
                {
                    this[this.tableViolation.AccountIdColumn] = value;
                }
            }
            
            public int SecurityId
            {
                get
                {
                    return ((int)(this[this.tableViolation.SecurityIdColumn]));
                }
                set
                {
                    this[this.tableViolation.SecurityIdColumn] = value;
                }
            }
            
            public int PositionTypeCode
            {
                get
                {
                    return ((int)(this[this.tableViolation.PositionTypeCodeColumn]));
                }
                set
                {
                    this[this.tableViolation.PositionTypeCodeColumn] = value;
                }
            }
            
            public string Description
            {
                get
                {
                    return ((string)(this[this.tableViolation.DescriptionColumn]));
                }
                set
                {
                    this[this.tableViolation.DescriptionColumn] = value;
                }
            }
            
            public AccountRow AccountRow
            {
                get
                {
                    if ((DataSetMarket.lockAccount.IsReaderLockHeld || DataSetMarket.lockAccount.IsWriterLockHeld))
                    {
                        return ((AccountRow)(this.GetParentRow(this.Table.ParentRelations["FKAccountViolation"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Account"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKAccountViolation"]);
                }
            }
            
            public PositionTypeRow PositionTypeRow
            {
                get
                {
                    if ((DataSetMarket.lockPositionType.IsReaderLockHeld || DataSetMarket.lockPositionType.IsWriterLockHeld))
                    {
                        return ((PositionTypeRow)(this.GetParentRow(this.Table.ParentRelations["FKPositionTypeViolation"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "PositionType"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKPositionTypeViolation"]);
                }
            }
            
            public RestrictionRow RestrictionRow
            {
                get
                {
                    if ((DataSetMarket.lockRestriction.IsReaderLockHeld || DataSetMarket.lockRestriction.IsWriterLockHeld))
                    {
                        return ((RestrictionRow)(this.GetParentRow(this.Table.ParentRelations["FKRestrictionViolation"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Restriction"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKRestrictionViolation"]);
                }
            }
            
            public SecurityRow SecurityRow
            {
                get
                {
                    if ((DataSetMarket.lockSecurity.IsReaderLockHeld || DataSetMarket.lockSecurity.IsWriterLockHeld))
                    {
                        return ((SecurityRow)(this.GetParentRow(this.Table.ParentRelations["FKSecurityViolation"])));
                    }
                    else
                    {
                        throw new System.Exception(string.Format("{0} Table Accessed without a Lock", "Security"));
                    }
                }
                set
                {
                    this.SetParentRow(value, this.Table.ParentRelations["FKSecurityViolation"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ViolationRowChangeEvent : EventArgs
        {
            
            private ViolationRow eventRow;
            
            private DataRowAction eventAction;
            
            public ViolationRowChangeEvent(ViolationRow row, DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ViolationRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
    }
}
