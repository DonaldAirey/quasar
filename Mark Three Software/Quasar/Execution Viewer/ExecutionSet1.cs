//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.288
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Shadows.Quasar.Viewers.Execution {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ExecutionSet : DataSet {
        
        private BlockOrderDataTable tableBlockOrder;
        
        private ExecutionDataTable tableExecution;
        
        private ExecutionMapDataTable tableExecutionMap;
        
        private DataRelation relationBlockOrderExecution;
        
        public ExecutionSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ExecutionSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["BlockOrder"] != null)) {
                    this.Tables.Add(new BlockOrderDataTable(ds.Tables["BlockOrder"]));
                }
                if ((ds.Tables["Execution"] != null)) {
                    this.Tables.Add(new ExecutionDataTable(ds.Tables["Execution"]));
                }
                if ((ds.Tables["ExecutionMap"] != null)) {
                    this.Tables.Add(new ExecutionMapDataTable(ds.Tables["ExecutionMap"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BlockOrderDataTable BlockOrder {
            get {
                return this.tableBlockOrder;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExecutionDataTable Execution {
            get {
                return this.tableExecution;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExecutionMapDataTable ExecutionMap {
            get {
                return this.tableExecutionMap;
            }
        }
        
        public override DataSet Clone() {
            ExecutionSet cln = ((ExecutionSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["BlockOrder"] != null)) {
                this.Tables.Add(new BlockOrderDataTable(ds.Tables["BlockOrder"]));
            }
            if ((ds.Tables["Execution"] != null)) {
                this.Tables.Add(new ExecutionDataTable(ds.Tables["Execution"]));
            }
            if ((ds.Tables["ExecutionMap"] != null)) {
                this.Tables.Add(new ExecutionMapDataTable(ds.Tables["ExecutionMap"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableBlockOrder = ((BlockOrderDataTable)(this.Tables["BlockOrder"]));
            if ((this.tableBlockOrder != null)) {
                this.tableBlockOrder.InitVars();
            }
            this.tableExecution = ((ExecutionDataTable)(this.Tables["Execution"]));
            if ((this.tableExecution != null)) {
                this.tableExecution.InitVars();
            }
            this.tableExecutionMap = ((ExecutionMapDataTable)(this.Tables["ExecutionMap"]));
            if ((this.tableExecutionMap != null)) {
                this.tableExecutionMap.InitVars();
            }
            this.relationBlockOrderExecution = this.Relations["BlockOrderExecution"];
        }
        
        private void InitClass() {
            this.DataSetName = "ExecutionSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ExecutionSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableBlockOrder = new BlockOrderDataTable();
            this.Tables.Add(this.tableBlockOrder);
            this.tableExecution = new ExecutionDataTable();
            this.Tables.Add(this.tableExecution);
            this.tableExecutionMap = new ExecutionMapDataTable();
            this.Tables.Add(this.tableExecutionMap);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("BlockOrderExecution", new DataColumn[] {
                        this.tableBlockOrder.BlockOrderIdColumn}, new DataColumn[] {
                        this.tableExecution.BlockOrderIdColumn});
            this.tableExecution.Constraints.Add(fkc);
            fkc.AcceptRejectRule = AcceptRejectRule.None;
            fkc.DeleteRule = Rule.Cascade;
            fkc.UpdateRule = Rule.Cascade;
            this.relationBlockOrderExecution = new DataRelation("BlockOrderExecution", new DataColumn[] {
                        this.tableBlockOrder.BlockOrderIdColumn}, new DataColumn[] {
                        this.tableExecution.BlockOrderIdColumn}, false);
            this.Relations.Add(this.relationBlockOrderExecution);
        }
        
        private bool ShouldSerializeBlockOrder() {
            return false;
        }
        
        private bool ShouldSerializeExecution() {
            return false;
        }
        
        private bool ShouldSerializeExecutionMap() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void BlockOrderRowChangeEventHandler(object sender, BlockOrderRowChangeEvent e);
        
        public delegate void ExecutionRowChangeEventHandler(object sender, ExecutionRowChangeEvent e);
        
        public delegate void ExecutionMapRowChangeEventHandler(object sender, ExecutionMapRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BlockOrderDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnBlockOrderId;
            
            internal BlockOrderDataTable() : 
                    base("BlockOrder") {
                this.InitClass();
            }
            
            internal BlockOrderDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn BlockOrderIdColumn {
                get {
                    return this.columnBlockOrderId;
                }
            }
            
            public BlockOrderRow this[int index] {
                get {
                    return ((BlockOrderRow)(this.Rows[index]));
                }
            }
            
            public event BlockOrderRowChangeEventHandler BlockOrderRowChanged;
            
            public event BlockOrderRowChangeEventHandler BlockOrderRowChanging;
            
            public event BlockOrderRowChangeEventHandler BlockOrderRowDeleted;
            
            public event BlockOrderRowChangeEventHandler BlockOrderRowDeleting;
            
            public void AddBlockOrderRow(BlockOrderRow row) {
                this.Rows.Add(row);
            }
            
            public BlockOrderRow AddBlockOrderRow(int BlockOrderId) {
                BlockOrderRow rowBlockOrderRow = ((BlockOrderRow)(this.NewRow()));
                rowBlockOrderRow.ItemArray = new object[] {
                        BlockOrderId};
                this.Rows.Add(rowBlockOrderRow);
                return rowBlockOrderRow;
            }
            
            public BlockOrderRow FindByBlockOrderId(int BlockOrderId) {
                return ((BlockOrderRow)(this.Rows.Find(new object[] {
                            BlockOrderId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                BlockOrderDataTable cln = ((BlockOrderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new BlockOrderDataTable();
            }
            
            internal void InitVars() {
                this.columnBlockOrderId = this.Columns["BlockOrderId"];
            }
            
            private void InitClass() {
                this.columnBlockOrderId = new DataColumn("BlockOrderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlockOrderId);
                this.Constraints.Add(new UniqueConstraint("BlockOrderKey", new DataColumn[] {
                                this.columnBlockOrderId}, true));
                this.columnBlockOrderId.AllowDBNull = false;
                this.columnBlockOrderId.Unique = true;
            }
            
            public BlockOrderRow NewBlockOrderRow() {
                return ((BlockOrderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new BlockOrderRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(BlockOrderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BlockOrderRowChanged != null)) {
                    this.BlockOrderRowChanged(this, new BlockOrderRowChangeEvent(((BlockOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BlockOrderRowChanging != null)) {
                    this.BlockOrderRowChanging(this, new BlockOrderRowChangeEvent(((BlockOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BlockOrderRowDeleted != null)) {
                    this.BlockOrderRowDeleted(this, new BlockOrderRowChangeEvent(((BlockOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BlockOrderRowDeleting != null)) {
                    this.BlockOrderRowDeleting(this, new BlockOrderRowChangeEvent(((BlockOrderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBlockOrderRow(BlockOrderRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BlockOrderRow : DataRow {
            
            private BlockOrderDataTable tableBlockOrder;
            
            internal BlockOrderRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableBlockOrder = ((BlockOrderDataTable)(this.Table));
            }
            
            public int BlockOrderId {
                get {
                    return ((int)(this[this.tableBlockOrder.BlockOrderIdColumn]));
                }
                set {
                    this[this.tableBlockOrder.BlockOrderIdColumn] = value;
                }
            }
            
            public ExecutionRow[] GetExecutionRows() {
                return ((ExecutionRow[])(this.GetChildRows(this.Table.ChildRelations["BlockOrderExecution"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BlockOrderRowChangeEvent : EventArgs {
            
            private BlockOrderRow eventRow;
            
            private DataRowAction eventAction;
            
            public BlockOrderRowChangeEvent(BlockOrderRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BlockOrderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ExecutionDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnRowVersion;
            
            private DataColumn columnExecutionId;
            
            private DataColumn columnBlockOrderId;
            
            private DataColumn columnBrokerId;
            
            private DataColumn columnQuantity;
            
            private DataColumn columnPrice;
            
            private DataColumn columnCommission;
            
            private DataColumn columnAccruedInterest;
            
            private DataColumn columnUserFee0;
            
            private DataColumn columnUserFee1;
            
            private DataColumn columnUserFee2;
            
            private DataColumn columnUserFee3;
            
            private DataColumn columnTradeDate;
            
            private DataColumn columnSettlementDate;
            
            private DataColumn columnCreatedTime;
            
            private DataColumn columnCreatedLoginId;
            
            private DataColumn columnModifiedTime;
            
            private DataColumn columnModifiedLoginId;
            
            internal ExecutionDataTable() : 
                    base("Execution") {
                this.InitClass();
            }
            
            internal ExecutionDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            internal DataColumn ExecutionIdColumn {
                get {
                    return this.columnExecutionId;
                }
            }
            
            internal DataColumn BlockOrderIdColumn {
                get {
                    return this.columnBlockOrderId;
                }
            }
            
            internal DataColumn BrokerIdColumn {
                get {
                    return this.columnBrokerId;
                }
            }
            
            internal DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            internal DataColumn PriceColumn {
                get {
                    return this.columnPrice;
                }
            }
            
            internal DataColumn CommissionColumn {
                get {
                    return this.columnCommission;
                }
            }
            
            internal DataColumn AccruedInterestColumn {
                get {
                    return this.columnAccruedInterest;
                }
            }
            
            internal DataColumn UserFee0Column {
                get {
                    return this.columnUserFee0;
                }
            }
            
            internal DataColumn UserFee1Column {
                get {
                    return this.columnUserFee1;
                }
            }
            
            internal DataColumn UserFee2Column {
                get {
                    return this.columnUserFee2;
                }
            }
            
            internal DataColumn UserFee3Column {
                get {
                    return this.columnUserFee3;
                }
            }
            
            internal DataColumn TradeDateColumn {
                get {
                    return this.columnTradeDate;
                }
            }
            
            internal DataColumn SettlementDateColumn {
                get {
                    return this.columnSettlementDate;
                }
            }
            
            internal DataColumn CreatedTimeColumn {
                get {
                    return this.columnCreatedTime;
                }
            }
            
            internal DataColumn CreatedLoginIdColumn {
                get {
                    return this.columnCreatedLoginId;
                }
            }
            
            internal DataColumn ModifiedTimeColumn {
                get {
                    return this.columnModifiedTime;
                }
            }
            
            internal DataColumn ModifiedLoginIdColumn {
                get {
                    return this.columnModifiedLoginId;
                }
            }
            
            public ExecutionRow this[int index] {
                get {
                    return ((ExecutionRow)(this.Rows[index]));
                }
            }
            
            public event ExecutionRowChangeEventHandler ExecutionRowChanged;
            
            public event ExecutionRowChangeEventHandler ExecutionRowChanging;
            
            public event ExecutionRowChangeEventHandler ExecutionRowDeleted;
            
            public event ExecutionRowChangeEventHandler ExecutionRowDeleting;
            
            public void AddExecutionRow(ExecutionRow row) {
                this.Rows.Add(row);
            }
            
            public ExecutionRow AddExecutionRow(
                        long RowVersion, 
                        BlockOrderRow parentBlockOrderRowByBlockOrderExecution, 
                        int BrokerId, 
                        System.Decimal Quantity, 
                        System.Decimal Price, 
                        System.Decimal Commission, 
                        System.Decimal AccruedInterest, 
                        System.Decimal UserFee0, 
                        System.Decimal UserFee1, 
                        System.Decimal UserFee2, 
                        System.Decimal UserFee3, 
                        System.DateTime TradeDate, 
                        System.DateTime SettlementDate, 
                        System.DateTime CreatedTime, 
                        int CreatedLoginId, 
                        System.DateTime ModifiedTime, 
                        int ModifiedLoginId) {
                ExecutionRow rowExecutionRow = ((ExecutionRow)(this.NewRow()));
                rowExecutionRow.ItemArray = new object[] {
                        RowVersion,
                        null,
                        parentBlockOrderRowByBlockOrderExecution[0],
                        BrokerId,
                        Quantity,
                        Price,
                        Commission,
                        AccruedInterest,
                        UserFee0,
                        UserFee1,
                        UserFee2,
                        UserFee3,
                        TradeDate,
                        SettlementDate,
                        CreatedTime,
                        CreatedLoginId,
                        ModifiedTime,
                        ModifiedLoginId};
                this.Rows.Add(rowExecutionRow);
                return rowExecutionRow;
            }
            
            public ExecutionRow FindByExecutionId(int ExecutionId) {
                return ((ExecutionRow)(this.Rows.Find(new object[] {
                            ExecutionId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ExecutionDataTable cln = ((ExecutionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ExecutionDataTable();
            }
            
            internal void InitVars() {
                this.columnRowVersion = this.Columns["RowVersion"];
                this.columnExecutionId = this.Columns["ExecutionId"];
                this.columnBlockOrderId = this.Columns["BlockOrderId"];
                this.columnBrokerId = this.Columns["BrokerId"];
                this.columnQuantity = this.Columns["Quantity"];
                this.columnPrice = this.Columns["Price"];
                this.columnCommission = this.Columns["Commission"];
                this.columnAccruedInterest = this.Columns["AccruedInterest"];
                this.columnUserFee0 = this.Columns["UserFee0"];
                this.columnUserFee1 = this.Columns["UserFee1"];
                this.columnUserFee2 = this.Columns["UserFee2"];
                this.columnUserFee3 = this.Columns["UserFee3"];
                this.columnTradeDate = this.Columns["TradeDate"];
                this.columnSettlementDate = this.Columns["SettlementDate"];
                this.columnCreatedTime = this.Columns["CreatedTime"];
                this.columnCreatedLoginId = this.Columns["CreatedLoginId"];
                this.columnModifiedTime = this.Columns["ModifiedTime"];
                this.columnModifiedLoginId = this.Columns["ModifiedLoginId"];
            }
            
            private void InitClass() {
                this.columnRowVersion = new DataColumn("RowVersion", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnExecutionId = new DataColumn("ExecutionId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExecutionId);
                this.columnBlockOrderId = new DataColumn("BlockOrderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlockOrderId);
                this.columnBrokerId = new DataColumn("BrokerId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBrokerId);
                this.columnQuantity = new DataColumn("Quantity", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQuantity);
                this.columnPrice = new DataColumn("Price", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrice);
                this.columnCommission = new DataColumn("Commission", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCommission);
                this.columnAccruedInterest = new DataColumn("AccruedInterest", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccruedInterest);
                this.columnUserFee0 = new DataColumn("UserFee0", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserFee0);
                this.columnUserFee1 = new DataColumn("UserFee1", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserFee1);
                this.columnUserFee2 = new DataColumn("UserFee2", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserFee2);
                this.columnUserFee3 = new DataColumn("UserFee3", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserFee3);
                this.columnTradeDate = new DataColumn("TradeDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTradeDate);
                this.columnSettlementDate = new DataColumn("SettlementDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSettlementDate);
                this.columnCreatedTime = new DataColumn("CreatedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedTime);
                this.columnCreatedLoginId = new DataColumn("CreatedLoginId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedLoginId);
                this.columnModifiedTime = new DataColumn("ModifiedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedTime);
                this.columnModifiedLoginId = new DataColumn("ModifiedLoginId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedLoginId);
                this.Constraints.Add(new UniqueConstraint("ExecutionKey", new DataColumn[] {
                                this.columnExecutionId}, true));
                this.columnRowVersion.AllowDBNull = false;
                this.columnRowVersion.DefaultValue = 1;
                this.columnExecutionId.AutoIncrement = true;
                this.columnExecutionId.AutoIncrementSeed = 1;
                this.columnExecutionId.AllowDBNull = false;
                this.columnExecutionId.Unique = true;
                this.columnBlockOrderId.AllowDBNull = false;
                this.columnQuantity.AllowDBNull = false;
                this.columnQuantity.DefaultValue = 0m;
                this.columnPrice.AllowDBNull = false;
                this.columnPrice.DefaultValue = 0m;
                this.columnCommission.AllowDBNull = false;
                this.columnCommission.DefaultValue = 0m;
                this.columnAccruedInterest.AllowDBNull = false;
                this.columnAccruedInterest.DefaultValue = 0m;
                this.columnUserFee0.AllowDBNull = false;
                this.columnUserFee0.DefaultValue = 0m;
                this.columnUserFee1.AllowDBNull = false;
                this.columnUserFee1.DefaultValue = 0m;
                this.columnUserFee2.AllowDBNull = false;
                this.columnUserFee2.DefaultValue = 0m;
                this.columnUserFee3.AllowDBNull = false;
                this.columnUserFee3.DefaultValue = 0m;
            }
            
            public ExecutionRow NewExecutionRow() {
                return ((ExecutionRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ExecutionRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ExecutionRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExecutionRowChanged != null)) {
                    this.ExecutionRowChanged(this, new ExecutionRowChangeEvent(((ExecutionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExecutionRowChanging != null)) {
                    this.ExecutionRowChanging(this, new ExecutionRowChangeEvent(((ExecutionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExecutionRowDeleted != null)) {
                    this.ExecutionRowDeleted(this, new ExecutionRowChangeEvent(((ExecutionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExecutionRowDeleting != null)) {
                    this.ExecutionRowDeleting(this, new ExecutionRowChangeEvent(((ExecutionRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveExecutionRow(ExecutionRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ExecutionRow : DataRow {
            
            private ExecutionDataTable tableExecution;
            
            internal ExecutionRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableExecution = ((ExecutionDataTable)(this.Table));
            }
            
            public long RowVersion {
                get {
                    return ((long)(this[this.tableExecution.RowVersionColumn]));
                }
                set {
                    this[this.tableExecution.RowVersionColumn] = value;
                }
            }
            
            public int ExecutionId {
                get {
                    return ((int)(this[this.tableExecution.ExecutionIdColumn]));
                }
                set {
                    this[this.tableExecution.ExecutionIdColumn] = value;
                }
            }
            
            public int BlockOrderId {
                get {
                    return ((int)(this[this.tableExecution.BlockOrderIdColumn]));
                }
                set {
                    this[this.tableExecution.BlockOrderIdColumn] = value;
                }
            }
            
            public int BrokerId {
                get {
                    try {
                        return ((int)(this[this.tableExecution.BrokerIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExecution.BrokerIdColumn] = value;
                }
            }
            
            public System.Decimal Quantity {
                get {
                    return ((System.Decimal)(this[this.tableExecution.QuantityColumn]));
                }
                set {
                    this[this.tableExecution.QuantityColumn] = value;
                }
            }
            
            public System.Decimal Price {
                get {
                    return ((System.Decimal)(this[this.tableExecution.PriceColumn]));
                }
                set {
                    this[this.tableExecution.PriceColumn] = value;
                }
            }
            
            public System.Decimal Commission {
                get {
                    return ((System.Decimal)(this[this.tableExecution.CommissionColumn]));
                }
                set {
                    this[this.tableExecution.CommissionColumn] = value;
                }
            }
            
            public System.Decimal AccruedInterest {
                get {
                    return ((System.Decimal)(this[this.tableExecution.AccruedInterestColumn]));
                }
                set {
                    this[this.tableExecution.AccruedInterestColumn] = value;
                }
            }
            
            public System.Decimal UserFee0 {
                get {
                    return ((System.Decimal)(this[this.tableExecution.UserFee0Column]));
                }
                set {
                    this[this.tableExecution.UserFee0Column] = value;
                }
            }
            
            public System.Decimal UserFee1 {
                get {
                    return ((System.Decimal)(this[this.tableExecution.UserFee1Column]));
                }
                set {
                    this[this.tableExecution.UserFee1Column] = value;
                }
            }
            
            public System.Decimal UserFee2 {
                get {
                    return ((System.Decimal)(this[this.tableExecution.UserFee2Column]));
                }
                set {
                    this[this.tableExecution.UserFee2Column] = value;
                }
            }
            
            public System.Decimal UserFee3 {
                get {
                    return ((System.Decimal)(this[this.tableExecution.UserFee3Column]));
                }
                set {
                    this[this.tableExecution.UserFee3Column] = value;
                }
            }
            
            public System.DateTime TradeDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableExecution.TradeDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExecution.TradeDateColumn] = value;
                }
            }
            
            public System.DateTime SettlementDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableExecution.SettlementDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExecution.SettlementDateColumn] = value;
                }
            }
            
            public System.DateTime CreatedTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableExecution.CreatedTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExecution.CreatedTimeColumn] = value;
                }
            }
            
            public int CreatedLoginId {
                get {
                    try {
                        return ((int)(this[this.tableExecution.CreatedLoginIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExecution.CreatedLoginIdColumn] = value;
                }
            }
            
            public System.DateTime ModifiedTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableExecution.ModifiedTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExecution.ModifiedTimeColumn] = value;
                }
            }
            
            public int ModifiedLoginId {
                get {
                    try {
                        return ((int)(this[this.tableExecution.ModifiedLoginIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExecution.ModifiedLoginIdColumn] = value;
                }
            }
            
            public BlockOrderRow BlockOrderRow {
                get {
                    return ((BlockOrderRow)(this.GetParentRow(this.Table.ParentRelations["BlockOrderExecution"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["BlockOrderExecution"]);
                }
            }
            
            public bool IsBrokerIdNull() {
                return this.IsNull(this.tableExecution.BrokerIdColumn);
            }
            
            public void SetBrokerIdNull() {
                this[this.tableExecution.BrokerIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsTradeDateNull() {
                return this.IsNull(this.tableExecution.TradeDateColumn);
            }
            
            public void SetTradeDateNull() {
                this[this.tableExecution.TradeDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsSettlementDateNull() {
                return this.IsNull(this.tableExecution.SettlementDateColumn);
            }
            
            public void SetSettlementDateNull() {
                this[this.tableExecution.SettlementDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsCreatedTimeNull() {
                return this.IsNull(this.tableExecution.CreatedTimeColumn);
            }
            
            public void SetCreatedTimeNull() {
                this[this.tableExecution.CreatedTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCreatedLoginIdNull() {
                return this.IsNull(this.tableExecution.CreatedLoginIdColumn);
            }
            
            public void SetCreatedLoginIdNull() {
                this[this.tableExecution.CreatedLoginIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsModifiedTimeNull() {
                return this.IsNull(this.tableExecution.ModifiedTimeColumn);
            }
            
            public void SetModifiedTimeNull() {
                this[this.tableExecution.ModifiedTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsModifiedLoginIdNull() {
                return this.IsNull(this.tableExecution.ModifiedLoginIdColumn);
            }
            
            public void SetModifiedLoginIdNull() {
                this[this.tableExecution.ModifiedLoginIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ExecutionRowChangeEvent : EventArgs {
            
            private ExecutionRow eventRow;
            
            private DataRowAction eventAction;
            
            public ExecutionRowChangeEvent(ExecutionRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ExecutionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ExecutionMapDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLocalId;
            
            private DataColumn columnGlobalId;
            
            internal ExecutionMapDataTable() : 
                    base("ExecutionMap") {
                this.InitClass();
            }
            
            internal ExecutionMapDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LocalIdColumn {
                get {
                    return this.columnLocalId;
                }
            }
            
            internal DataColumn GlobalIdColumn {
                get {
                    return this.columnGlobalId;
                }
            }
            
            public ExecutionMapRow this[int index] {
                get {
                    return ((ExecutionMapRow)(this.Rows[index]));
                }
            }
            
            public event ExecutionMapRowChangeEventHandler ExecutionMapRowChanged;
            
            public event ExecutionMapRowChangeEventHandler ExecutionMapRowChanging;
            
            public event ExecutionMapRowChangeEventHandler ExecutionMapRowDeleted;
            
            public event ExecutionMapRowChangeEventHandler ExecutionMapRowDeleting;
            
            public void AddExecutionMapRow(ExecutionMapRow row) {
                this.Rows.Add(row);
            }
            
            public ExecutionMapRow AddExecutionMapRow(int LocalId, int GlobalId) {
                ExecutionMapRow rowExecutionMapRow = ((ExecutionMapRow)(this.NewRow()));
                rowExecutionMapRow.ItemArray = new object[] {
                        LocalId,
                        GlobalId};
                this.Rows.Add(rowExecutionMapRow);
                return rowExecutionMapRow;
            }
            
            public ExecutionMapRow FindByLocalId(int LocalId) {
                return ((ExecutionMapRow)(this.Rows.Find(new object[] {
                            LocalId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ExecutionMapDataTable cln = ((ExecutionMapDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ExecutionMapDataTable();
            }
            
            internal void InitVars() {
                this.columnLocalId = this.Columns["LocalId"];
                this.columnGlobalId = this.Columns["GlobalId"];
            }
            
            private void InitClass() {
                this.columnLocalId = new DataColumn("LocalId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocalId);
                this.columnGlobalId = new DataColumn("GlobalId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGlobalId);
                this.Constraints.Add(new UniqueConstraint("ExecutionMapKey", new DataColumn[] {
                                this.columnLocalId}, true));
                this.columnLocalId.AllowDBNull = false;
                this.columnLocalId.Unique = true;
            }
            
            public ExecutionMapRow NewExecutionMapRow() {
                return ((ExecutionMapRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ExecutionMapRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ExecutionMapRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExecutionMapRowChanged != null)) {
                    this.ExecutionMapRowChanged(this, new ExecutionMapRowChangeEvent(((ExecutionMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExecutionMapRowChanging != null)) {
                    this.ExecutionMapRowChanging(this, new ExecutionMapRowChangeEvent(((ExecutionMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExecutionMapRowDeleted != null)) {
                    this.ExecutionMapRowDeleted(this, new ExecutionMapRowChangeEvent(((ExecutionMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExecutionMapRowDeleting != null)) {
                    this.ExecutionMapRowDeleting(this, new ExecutionMapRowChangeEvent(((ExecutionMapRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveExecutionMapRow(ExecutionMapRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ExecutionMapRow : DataRow {
            
            private ExecutionMapDataTable tableExecutionMap;
            
            internal ExecutionMapRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableExecutionMap = ((ExecutionMapDataTable)(this.Table));
            }
            
            public int LocalId {
                get {
                    return ((int)(this[this.tableExecutionMap.LocalIdColumn]));
                }
                set {
                    this[this.tableExecutionMap.LocalIdColumn] = value;
                }
            }
            
            public int GlobalId {
                get {
                    try {
                        return ((int)(this[this.tableExecutionMap.GlobalIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExecutionMap.GlobalIdColumn] = value;
                }
            }
            
            public bool IsGlobalIdNull() {
                return this.IsNull(this.tableExecutionMap.GlobalIdColumn);
            }
            
            public void SetGlobalIdNull() {
                this[this.tableExecutionMap.GlobalIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ExecutionMapRowChangeEvent : EventArgs {
            
            private ExecutionMapRow eventRow;
            
            private DataRowAction eventAction;
            
            public ExecutionMapRowChangeEvent(ExecutionMapRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ExecutionMapRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
