//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Quasar.External
{
    using MarkThree.Quasar;
    using MarkThree.Quasar.Server;
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Data.SqlClient;
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    public class Blotter : Object
    {
        
        /// <summary>Collects the table lock request(s) for an 'Load' operation</summary>
        /// <param name="adoTransaction">A collection of table locks required for this operation</param>
        public new static void Load(AdoTransaction adoTransaction)
        {
            // Call the internal methods to lock the tables required for an insert or update operation.
            MarkThree.Quasar.Core.Blotter.Insert(adoTransaction);
            MarkThree.Quasar.Core.Blotter.Update(adoTransaction);
            // These table lock(s) are required for the 'Load' operation.
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Blotter));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Configuration));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Type));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Algorithm));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.BlotterType));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Object));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Stylesheet));
        }
        
        /// <summary>Loads a Blotter record using Metadata Parameters.</summary>
        /// <param name="transaction">Contains the parameters and exceptions for this command.</param>
        public new static void Load(ParameterList parameters)
        {
            // Accessor for the Blotter Table.
            ServerDataModel.BlotterDataTable blotterTable = ServerDataModel.Blotter;
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object configurationId = parameters["configurationId"].Value;
            object description = parameters["description"].Value;
            object groupPermission = parameters["groupPermission"].Value;
            object hidden = parameters["hidden"].Value;
            string name = parameters["name"];
            object owner = parameters["owner"].Value;
            object ownerPermission = parameters["ownerPermission"].Value;
            object readOnly = parameters["readOnly"].Value;
            object worldPermission = parameters["worldPermission"].Value;
            string externalBlotterId = parameters["blotterId"];
            object externalBlockOrderStylesheetId = parameters["blockOrderStylesheetId"].Value;
            object externalPlacementStylesheetId = parameters["placementStylesheetId"].Value;
            object externalExecutionStylesheetId = parameters["executionStylesheetId"].Value;
            object externalTicketStylesheetId = parameters["ticketStylesheetId"].Value;
            object externalAlgorithmId = parameters["algorithmId"].Value;
            object externalTypeCode = parameters["typeCode"].Value;
            string externalBlotterTypeCode = parameters["blotterTypeCode"];
            object defaultBlotter = parameters["defaultBlotter"].Value;
            // The row versioning is largely disabled for external operations.  The value is returned to the caller in the
            // event it's needed for operations within the batch.
            long rowVersion = long.MinValue;
            // Resolve External Identifiers
            int blotterId = Object.FindKey(configurationId, "blotterId", externalBlotterId);
            object blockOrderStylesheetId = Stylesheet.FindOptionalKey(configurationId, "blockOrderStylesheetId", externalBlockOrderStylesheetId);
            object placementStylesheetId = Stylesheet.FindOptionalKey(configurationId, "placementStylesheetId", externalPlacementStylesheetId);
            object executionStylesheetId = Stylesheet.FindOptionalKey(configurationId, "executionStylesheetId", externalExecutionStylesheetId);
            object ticketStylesheetId = Stylesheet.FindOptionalKey(configurationId, "ticketStylesheetId", externalTicketStylesheetId);
            object algorithmId = Algorithm.FindOptionalKey(configurationId, "algorithmId", externalAlgorithmId);
            object typeCode = Type.FindOptionalKey(configurationId, "typeCode", externalTypeCode);
            int blotterTypeCode = BlotterType.FindRequiredKey(configurationId, "blotterTypeCode", externalBlotterTypeCode);
            ServerDataModel.BlotterRow blotterRow = blotterTable.FindByBlotterId(blotterId);
            // The load operation will create a record if it doesn't exist, or update an existing record.  The external
            // identifier is used to determine if a record exists with the same key.
            if ((blotterRow == null))
            {
                // Populate the 'externalId' varaibles so that the external identifier can be used to find the row when an
                // external method is called with the same 'configurationId' parameter.
                int externalKeyIndex = Blotter.GetExternalKeyIndex(configurationId, "blotterId");
                object[] externalIdArray = new object[8];
                externalIdArray[externalKeyIndex] = externalBlotterId;
                object externalId0 = externalIdArray[0];
                object externalId1 = externalIdArray[1];
                object externalId2 = externalIdArray[2];
                object externalId3 = externalIdArray[3];
                object externalId4 = externalIdArray[4];
                object externalId5 = externalIdArray[5];
                object externalId6 = externalIdArray[6];
                object externalId7 = externalIdArray[7];
                // Call the internal method to complete the operation.
                MarkThree.Quasar.Core.Blotter.Insert(adoTransaction, sqlTransaction, ref rowVersion, description, externalId0, externalId1, externalId2, externalId3, externalId4, externalId5, externalId6, externalId7, groupPermission, hidden, name, owner, ownerPermission, readOnly, worldPermission, blockOrderStylesheetId, placementStylesheetId, executionStylesheetId, ticketStylesheetId, algorithmId, typeCode, blotterTypeCode, defaultBlotter);
            }
            else
            {
                // While the optimistic concurrency checking is disabled for the external methods, the internal methods
                // still need to perform the check.  This ncurrency checking logic by finding the current row version to be
                // will bypass the coused when the internal method is called.
                rowVersion = ((long)(blotterRow[blotterTable.RowVersionColumn]));
                // Call the internal method to complete the operation.
                MarkThree.Quasar.Core.Blotter.Update(adoTransaction, sqlTransaction, ref rowVersion, description, null, null, null, null, null, null, null, null, groupPermission, hidden, name, owner, ownerPermission, readOnly, worldPermission, blotterId, blockOrderStylesheetId, placementStylesheetId, executionStylesheetId, ticketStylesheetId, algorithmId, typeCode, blotterTypeCode, defaultBlotter);
            }
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Collects the table lock request(s) for an 'Update' operation</summary>
        /// <param name="adoTransaction">A collection of table locks required for this operation</param>
        public new static void Update(AdoTransaction adoTransaction)
        {
            // Call the internal methods to lock the tables required for an insert or update operation.
            MarkThree.Quasar.Core.Blotter.Insert(adoTransaction);
            MarkThree.Quasar.Core.Blotter.Update(adoTransaction);
            // These table lock(s) are required for the 'Update' operation.
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Blotter));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Configuration));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Type));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Algorithm));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.BlotterType));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Object));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Stylesheet));
        }
        
        /// <summary>Updates a Blotter record using Metadata Parameters.</summary>
        /// <param name="transaction">Contains the parameters and exceptions for this command.</param>
        public new static void Update(ParameterList parameters)
        {
            // Accessor for the Blotter Table.
            ServerDataModel.BlotterDataTable blotterTable = ServerDataModel.Blotter;
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object configurationId = parameters["configurationId"].Value;
            object description = parameters["description"].Value;
            object groupPermission = parameters["groupPermission"].Value;
            object hidden = parameters["hidden"].Value;
            object name = parameters["name"].Value;
            object owner = parameters["owner"].Value;
            object ownerPermission = parameters["ownerPermission"].Value;
            object readOnly = parameters["readOnly"].Value;
            object worldPermission = parameters["worldPermission"].Value;
            string externalBlotterId = ((string)(parameters["blotterId"]));
            object externalBlockOrderStylesheetId = parameters["blockOrderStylesheetId"].Value;
            object externalPlacementStylesheetId = parameters["placementStylesheetId"].Value;
            object externalExecutionStylesheetId = parameters["executionStylesheetId"].Value;
            object externalTicketStylesheetId = parameters["ticketStylesheetId"].Value;
            object externalAlgorithmId = parameters["algorithmId"].Value;
            object externalTypeCode = parameters["typeCode"].Value;
            object externalBlotterTypeCode = parameters["blotterTypeCode"].Value;
            object defaultBlotter = parameters["defaultBlotter"].Value;
            // The row versioning is largely disabled for external operations.  The value is returned to the caller in the
            // event it's needed for operations within the batch.
            long rowVersion = long.MinValue;
            // Resolve External Identifiers
            int blotterId = Object.FindRequiredKey(configurationId, "blotterId", externalBlotterId);
            object blockOrderStylesheetId = Stylesheet.FindOptionalKey(configurationId, "blockOrderStylesheetId", externalBlockOrderStylesheetId);
            object placementStylesheetId = Stylesheet.FindOptionalKey(configurationId, "placementStylesheetId", externalPlacementStylesheetId);
            object executionStylesheetId = Stylesheet.FindOptionalKey(configurationId, "executionStylesheetId", externalExecutionStylesheetId);
            object ticketStylesheetId = Stylesheet.FindOptionalKey(configurationId, "ticketStylesheetId", externalTicketStylesheetId);
            object algorithmId = Algorithm.FindOptionalKey(configurationId, "algorithmId", externalAlgorithmId);
            object typeCode = Type.FindOptionalKey(configurationId, "typeCode", externalTypeCode);
            object blotterTypeCode = BlotterType.FindOptionalKey(configurationId, "blotterTypeCode", externalBlotterTypeCode);
            // This disables the concurrency checking logic by finding the current row version and passing it to the
            // internal method.
            ServerDataModel.BlotterRow blotterRow = blotterTable.FindByBlotterId(blotterId);
            rowVersion = ((long)(blotterRow[blotterTable.RowVersionColumn]));
            // Call the internal method to complete the operation.
            MarkThree.Quasar.Core.Blotter.Update(adoTransaction, sqlTransaction, ref rowVersion, description, null, null, null, null, null, null, null, null, groupPermission, hidden, name, owner, ownerPermission, readOnly, worldPermission, blotterId, blockOrderStylesheetId, placementStylesheetId, executionStylesheetId, ticketStylesheetId, algorithmId, typeCode, blotterTypeCode, defaultBlotter);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Collects the table lock request(s) for an 'Delete' operation</summary>
        /// <param name="adoTransaction">A collection of table locks required for this operation</param>
        public new static void Delete(AdoTransaction adoTransaction)
        {
            // Call the internal methods to lock the tables required for an insert or update operation.
            MarkThree.Quasar.Core.Blotter.Delete(adoTransaction);
            // These table lock(s) are required for the 'Delete' operation.
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Blotter));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Configuration));
        }
        
        /// <summary>Deletes a Blotter record using Metadata Parameters.</summary>
        /// <param name="transaction">Contains the parameters and exceptions for this command.</param>
        public new static void Delete(ParameterList parameters)
        {
            // Accessor for the Blotter Table.
            ServerDataModel.BlotterDataTable blotterTable = ServerDataModel.Blotter;
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object configurationId = parameters["configurationId"].Value;
            string externalBlotterId = parameters["blotterId"];
            // The row versioning is largely disabled for external operations.  The value is returned to the caller in the
            // event it's needed for operations within the batch.
            long rowVersion = long.MinValue;
            // Find the internal identifier using the primary key elements.
            // identifier is used to determine if a record exists with the same key.
            int blotterId = Blotter.FindRequiredKey(configurationId, "blotterId", externalBlotterId);
            // This disables the concurrency checking logic by finding the current row version and passing it to the
            // internal method.
            ServerDataModel.BlotterRow blotterRow = blotterTable.FindByBlotterId(blotterId);
            rowVersion = ((long)(blotterRow[blotterTable.RowVersionColumn]));
            // Call the internal method to complete the operation.
            MarkThree.Quasar.Core.Blotter.Delete(adoTransaction, sqlTransaction, rowVersion, blotterId);
        }
        
        /// <summary>Collects the table lock request(s) for an 'Archive' operation</summary>
        /// <param name="adoTransaction">A collection of table locks required for this operation</param>
        public new static void Archive(AdoTransaction adoTransaction)
        {
            // Call the internal methods to lock the tables required for an insert or update operation.
            MarkThree.Quasar.Core.Blotter.Archive(adoTransaction);
            // These table lock(s) are required for the 'Archive' operation.
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Blotter));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Configuration));
        }
        
        /// <summary>Archives a Blotter record using Metadata Parameters.</summary>
        /// <param name="transaction">Contains the parameters and exceptions for this command.</param>
        public new static void Archive(ParameterList parameters)
        {
            // Accessor for the Blotter Table.
            ServerDataModel.BlotterDataTable blotterTable = ServerDataModel.Blotter;
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object configurationId = parameters["configurationId"].Value;
            string externalBlotterId = parameters["blotterId"];
            // The row versioning is largely disabled for external operations.  The value is returned to the caller in the
            // event it's needed for operations within the batch.
            long rowVersion = long.MinValue;
            // Find the internal identifier using the primary key elements.
            // identifier is used to determine if a record exists with the same key.
            int blotterId = Blotter.FindRequiredKey(configurationId, "blotterId", externalBlotterId);
            // This disables the concurrency checking logic by finding the current row version and passing it to the
            // internal method.
            ServerDataModel.BlotterRow blotterRow = blotterTable.FindByBlotterId(blotterId);
            rowVersion = ((long)(blotterRow[blotterTable.RowVersionColumn]));
            // Call the internal method to complete the operation.
            MarkThree.Quasar.Core.Blotter.Archive(adoTransaction, sqlTransaction, rowVersion, blotterId);
        }
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                