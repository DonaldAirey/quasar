//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Quasar.External
{
    using MarkThree.Quasar;
    using MarkThree.Quasar.Server;
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Data.SqlClient;
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    public class Debt : Security
    {
        
        /// <summary>Collects the table lock request(s) for an 'Load' operation</summary>
        /// <param name="adoTransaction">A collection of table locks required for this operation</param>
        public new static void Load(AdoTransaction adoTransaction)
        {
            // Call the internal methods to lock the tables required for an insert or update operation.
            MarkThree.Quasar.Core.Debt.Insert(adoTransaction);
            MarkThree.Quasar.Core.Debt.Update(adoTransaction);
            // These table lock(s) are required for the 'Load' operation.
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Debt));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Configuration));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Type));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Country));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Object));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.SecurityType));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.DebtType));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Issuer));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Security));
        }
        
        /// <summary>Loads a Debt record using Metadata Parameters.</summary>
        /// <param name="transaction">Contains the parameters and exceptions for this command.</param>
        public new static void Load(ParameterList parameters)
        {
            // Accessor for the Debt Table.
            ServerDataModel.DebtDataTable debtTable = ServerDataModel.Debt;
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object configurationId = parameters["configurationId"].Value;
            object description = parameters["description"].Value;
            object groupPermission = parameters["groupPermission"].Value;
            object hidden = parameters["hidden"].Value;
            string name = parameters["name"];
            object owner = parameters["owner"].Value;
            object ownerPermission = parameters["ownerPermission"].Value;
            object readOnly = parameters["readOnly"].Value;
            object worldPermission = parameters["worldPermission"].Value;
            string externalCountryId = parameters["countryId"];
            object externalTypeCode = parameters["typeCode"].Value;
            object symbol = parameters["symbol"].Value;
            string externalDebtId = parameters["debtId"];
            object externalIssuerId = parameters["issuerId"].Value;
            string externalSettlementId = parameters["settlementId"];
            object externalSecurityTypeCode = parameters["securityTypeCode"].Value;
            string externalDebtTypeCode = parameters["debtTypeCode"];
            object priceFactor = parameters["priceFactor"].Value;
            object quantityFactor = parameters["quantityFactor"].Value;
            object faceOutstanding = parameters["faceOutstanding"].Value;
            decimal coupon = parameters["coupon"];
            System.DateTime maturityDate = parameters["maturityDate"];
            object datedDate = parameters["datedDate"].Value;
            object firstCoupon = parameters["firstCoupon"].Value;
            object frequency = parameters["frequency"].Value;
            object redemptionValue = parameters["redemptionValue"].Value;
            object incomeTaxRate = parameters["incomeTaxRate"].Value;
            object capitalGainsTaxRate = parameters["capitalGainsTaxRate"].Value;
            object cutoffPeriod = parameters["cutoffPeriod"].Value;
            object issuePrice = parameters["issuePrice"].Value;
            object trueYield = parameters["trueYield"].Value;
            object weekendCode = parameters["weekendCode"].Value;
            object exdividendDays = parameters["exdividendDays"].Value;
            object rating0 = parameters["rating0"].Value;
            object rating1 = parameters["rating1"].Value;
            object rating2 = parameters["rating2"].Value;
            object rating3 = parameters["rating3"].Value;
            // The row versioning is largely disabled for external operations.  The value is returned to the caller in the
            // event it's needed for operations within the batch.
            long rowVersion = long.MinValue;
            // Resolve External Identifiers
            int countryId = Country.FindRequiredKey(configurationId, "countryId", externalCountryId);
            object typeCode = Type.FindOptionalKey(configurationId, "typeCode", externalTypeCode);
            int debtId = Security.FindKey(configurationId, "debtId", externalDebtId);
            object issuerId = Issuer.FindOptionalKey(configurationId, "issuerId", externalIssuerId);
            int settlementId = Security.FindRequiredKey(configurationId, "settlementId", externalSettlementId);
            object securityTypeCode = SecurityType.FindOptionalKey(configurationId, "securityTypeCode", externalSecurityTypeCode);
            int debtTypeCode = DebtType.FindRequiredKey(configurationId, "debtTypeCode", externalDebtTypeCode);
            ServerDataModel.DebtRow debtRow = debtTable.FindByDebtId(debtId);
            // The load operation will create a record if it doesn't exist, or update an existing record.  The external
            // identifier is used to determine if a record exists with the same key.
            if ((debtRow == null))
            {
                // Populate the 'externalId' varaibles so that the external identifier can be used to find the row when an
                // external method is called with the same 'configurationId' parameter.
                int externalKeyIndex = Debt.GetExternalKeyIndex(configurationId, "debtId");
                object[] externalIdArray = new object[8];
                externalIdArray[externalKeyIndex] = externalDebtId;
                object externalId0 = externalIdArray[0];
                object externalId1 = externalIdArray[1];
                object externalId2 = externalIdArray[2];
                object externalId3 = externalIdArray[3];
                object externalId4 = externalIdArray[4];
                object externalId5 = externalIdArray[5];
                object externalId6 = externalIdArray[6];
                object externalId7 = externalIdArray[7];
                // Call the internal method to complete the operation.
                MarkThree.Quasar.Core.Debt.Insert(adoTransaction, sqlTransaction, ref rowVersion, description, externalId0, externalId1, externalId2, externalId3, externalId4, externalId5, externalId6, externalId7, groupPermission, hidden, name, owner, ownerPermission, readOnly, worldPermission, countryId, typeCode, symbol, issuerId, settlementId, securityTypeCode, debtTypeCode, priceFactor, quantityFactor, faceOutstanding, coupon, maturityDate, datedDate, firstCoupon, frequency, redemptionValue, incomeTaxRate, capitalGainsTaxRate, cutoffPeriod, issuePrice, trueYield, weekendCode, exdividendDays, rating0, rating1, rating2, rating3);
            }
            else
            {
                // While the optimistic concurrency checking is disabled for the external methods, the internal methods
                // still need to perform the check.  This ncurrency checking logic by finding the current row version to be
                // will bypass the coused when the internal method is called.
                rowVersion = ((long)(debtRow[debtTable.RowVersionColumn]));
                // Call the internal method to complete the operation.
                MarkThree.Quasar.Core.Debt.Update(adoTransaction, sqlTransaction, ref rowVersion, description, null, null, null, null, null, null, null, null, groupPermission, hidden, name, owner, ownerPermission, readOnly, worldPermission, countryId, typeCode, symbol, debtId, issuerId, settlementId, securityTypeCode, debtTypeCode, priceFactor, quantityFactor, faceOutstanding, coupon, maturityDate, datedDate, firstCoupon, frequency, redemptionValue, incomeTaxRate, capitalGainsTaxRate, cutoffPeriod, issuePrice, trueYield, weekendCode, exdividendDays, rating0, rating1, rating2, rating3);
            }
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Collects the table lock request(s) for an 'Update' operation</summary>
        /// <param name="adoTransaction">A collection of table locks required for this operation</param>
        public new static void Update(AdoTransaction adoTransaction)
        {
            // Call the internal methods to lock the tables required for an insert or update operation.
            MarkThree.Quasar.Core.Debt.Insert(adoTransaction);
            MarkThree.Quasar.Core.Debt.Update(adoTransaction);
            // These table lock(s) are required for the 'Update' operation.
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Debt));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Configuration));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Type));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Country));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Object));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.SecurityType));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.DebtType));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Issuer));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Security));
        }
        
        /// <summary>Updates a Debt record using Metadata Parameters.</summary>
        /// <param name="transaction">Contains the parameters and exceptions for this command.</param>
        public new static void Update(ParameterList parameters)
        {
            // Accessor for the Debt Table.
            ServerDataModel.DebtDataTable debtTable = ServerDataModel.Debt;
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object configurationId = parameters["configurationId"].Value;
            object description = parameters["description"].Value;
            object groupPermission = parameters["groupPermission"].Value;
            object hidden = parameters["hidden"].Value;
            object name = parameters["name"].Value;
            object owner = parameters["owner"].Value;
            object ownerPermission = parameters["ownerPermission"].Value;
            object readOnly = parameters["readOnly"].Value;
            object worldPermission = parameters["worldPermission"].Value;
            object externalCountryId = parameters["countryId"].Value;
            object externalTypeCode = parameters["typeCode"].Value;
            object symbol = parameters["symbol"].Value;
            string externalDebtId = ((string)(parameters["debtId"]));
            object externalIssuerId = parameters["issuerId"].Value;
            object externalSettlementId = parameters["settlementId"].Value;
            object externalSecurityTypeCode = parameters["securityTypeCode"].Value;
            object externalDebtTypeCode = parameters["debtTypeCode"].Value;
            object priceFactor = parameters["priceFactor"].Value;
            object quantityFactor = parameters["quantityFactor"].Value;
            object faceOutstanding = parameters["faceOutstanding"].Value;
            object coupon = parameters["coupon"].Value;
            object maturityDate = parameters["maturityDate"].Value;
            object datedDate = parameters["datedDate"].Value;
            object firstCoupon = parameters["firstCoupon"].Value;
            object frequency = parameters["frequency"].Value;
            object redemptionValue = parameters["redemptionValue"].Value;
            object incomeTaxRate = parameters["incomeTaxRate"].Value;
            object capitalGainsTaxRate = parameters["capitalGainsTaxRate"].Value;
            object cutoffPeriod = parameters["cutoffPeriod"].Value;
            object issuePrice = parameters["issuePrice"].Value;
            object trueYield = parameters["trueYield"].Value;
            object weekendCode = parameters["weekendCode"].Value;
            object exdividendDays = parameters["exdividendDays"].Value;
            object rating0 = parameters["rating0"].Value;
            object rating1 = parameters["rating1"].Value;
            object rating2 = parameters["rating2"].Value;
            object rating3 = parameters["rating3"].Value;
            // The row versioning is largely disabled for external operations.  The value is returned to the caller in the
            // event it's needed for operations within the batch.
            long rowVersion = long.MinValue;
            // Resolve External Identifiers
            object countryId = Country.FindOptionalKey(configurationId, "countryId", externalCountryId);
            object typeCode = Type.FindOptionalKey(configurationId, "typeCode", externalTypeCode);
            int debtId = Security.FindRequiredKey(configurationId, "debtId", externalDebtId);
            object issuerId = Issuer.FindOptionalKey(configurationId, "issuerId", externalIssuerId);
            object settlementId = Security.FindOptionalKey(configurationId, "settlementId", externalSettlementId);
            object securityTypeCode = SecurityType.FindOptionalKey(configurationId, "securityTypeCode", externalSecurityTypeCode);
            object debtTypeCode = DebtType.FindOptionalKey(configurationId, "debtTypeCode", externalDebtTypeCode);
            // This disables the concurrency checking logic by finding the current row version and passing it to the
            // internal method.
            ServerDataModel.DebtRow debtRow = debtTable.FindByDebtId(debtId);
            rowVersion = ((long)(debtRow[debtTable.RowVersionColumn]));
            // Call the internal method to complete the operation.
            MarkThree.Quasar.Core.Debt.Update(adoTransaction, sqlTransaction, ref rowVersion, description, null, null, null, null, null, null, null, null, groupPermission, hidden, name, owner, ownerPermission, readOnly, worldPermission, countryId, typeCode, symbol, debtId, issuerId, settlementId, securityTypeCode, debtTypeCode, priceFactor, quantityFactor, faceOutstanding, coupon, maturityDate, datedDate, firstCoupon, frequency, redemptionValue, incomeTaxRate, capitalGainsTaxRate, cutoffPeriod, issuePrice, trueYield, weekendCode, exdividendDays, rating0, rating1, rating2, rating3);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Collects the table lock request(s) for an 'Delete' operation</summary>
        /// <param name="adoTransaction">A collection of table locks required for this operation</param>
        public new static void Delete(AdoTransaction adoTransaction)
        {
            // Call the internal methods to lock the tables required for an insert or update operation.
            MarkThree.Quasar.Core.Debt.Delete(adoTransaction);
            // These table lock(s) are required for the 'Delete' operation.
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Debt));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Configuration));
        }
        
        /// <summary>Deletes a Debt record using Metadata Parameters.</summary>
        /// <param name="transaction">Contains the parameters and exceptions for this command.</param>
        public new static void Delete(ParameterList parameters)
        {
            // Accessor for the Debt Table.
            ServerDataModel.DebtDataTable debtTable = ServerDataModel.Debt;
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object configurationId = parameters["configurationId"].Value;
            string externalDebtId = parameters["debtId"];
            // The row versioning is largely disabled for external operations.  The value is returned to the caller in the
            // event it's needed for operations within the batch.
            long rowVersion = long.MinValue;
            // Find the internal identifier using the primary key elements.
            // identifier is used to determine if a record exists with the same key.
            int debtId = Debt.FindRequiredKey(configurationId, "debtId", externalDebtId);
            // This disables the concurrency checking logic by finding the current row version and passing it to the
            // internal method.
            ServerDataModel.DebtRow debtRow = debtTable.FindByDebtId(debtId);
            rowVersion = ((long)(debtRow[debtTable.RowVersionColumn]));
            // Call the internal method to complete the operation.
            MarkThree.Quasar.Core.Debt.Delete(adoTransaction, sqlTransaction, rowVersion, debtId);
        }
        
        /// <summary>Collects the table lock request(s) for an 'Archive' operation</summary>
        /// <param name="adoTransaction">A collection of table locks required for this operation</param>
        public new static void Archive(AdoTransaction adoTransaction)
        {
            // Call the internal methods to lock the tables required for an insert or update operation.
            MarkThree.Quasar.Core.Debt.Archive(adoTransaction);
            // These table lock(s) are required for the 'Archive' operation.
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Debt));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Configuration));
        }
        
        /// <summary>Archives a Debt record using Metadata Parameters.</summary>
        /// <param name="transaction">Contains the parameters and exceptions for this command.</param>
        public new static void Archive(ParameterList parameters)
        {
            // Accessor for the Debt Table.
            ServerDataModel.DebtDataTable debtTable = ServerDataModel.Debt;
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object configurationId = parameters["configurationId"].Value;
            string externalDebtId = parameters["debtId"];
            // The row versioning is largely disabled for external operations.  The value is returned to the caller in the
            // event it's needed for operations within the batch.
            long rowVersion = long.MinValue;
            // Find the internal identifier using the primary key elements.
            // identifier is used to determine if a record exists with the same key.
            int debtId = Debt.FindRequiredKey(configurationId, "debtId", externalDebtId);
            // This disables the concurrency checking logic by finding the current row version and passing it to the
            // internal method.
            ServerDataModel.DebtRow debtRow = debtTable.FindByDebtId(debtId);
            rowVersion = ((long)(debtRow[debtTable.RowVersionColumn]));
            // Call the internal method to complete the operation.
            MarkThree.Quasar.Core.Debt.Archive(adoTransaction, sqlTransaction, rowVersion, debtId);
        }
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         