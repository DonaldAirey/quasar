//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Quasar.External
{
    using MarkThree.Quasar;
    using MarkThree.Quasar.Server;
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Data.SqlClient;
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    public class Order
    {
        
        /// This value is used to map the object to a persistent storage device.  The parameters for the storage
        /// are found in the configuration file for this service.
        public static string PersistentStore = "Quasar";
        
        /// This member provides access to the in-memory database.
        private static ServerDataModel serverDataModel = new ServerDataModel();
        
        /// <summary>Collects the table lock request(s) for an 'Load' operation</summary>
        /// <param name="adoTransaction">A collection of table locks required for this operation</param>
        public static void Load(AdoTransaction adoTransaction)
        {
            // Call the internal methods to lock the tables required for an insert or update operation.
            MarkThree.Quasar.Core.Order.Insert(adoTransaction);
            MarkThree.Quasar.Core.Order.Update(adoTransaction);
            // These table lock(s) are required for the 'Load' operation.
            adoTransaction.LockRequests.AddReaderLock(ServerDataModel.OrderLock);
            adoTransaction.LockRequests.AddReaderLock(ServerDataModel.ConfigurationLock);
            adoTransaction.LockRequests.AddReaderLock(ServerDataModel.ObjectLock);
            adoTransaction.LockRequests.AddReaderLock(ServerDataModel.AccountLock);
            adoTransaction.LockRequests.AddReaderLock(ServerDataModel.OrderTypeLock);
            adoTransaction.LockRequests.AddReaderLock(ServerDataModel.SecurityLock);
            adoTransaction.LockRequests.AddReaderLock(ServerDataModel.TimeInForceLock);
            adoTransaction.LockRequests.AddReaderLock(ServerDataModel.TransactionTypeLock);
        }
        
        /// <summary>Loads a Order record using Metadata Parameters.</summary>
        /// <param name="transaction">Contains the parameters and exceptions for this command.</param>
        public static void Load(ParameterList parameters)
        {
            // Accessor for the Order Table.
            ServerDataModel.OrderDataTable orderTable = ServerDataModel.Order;
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object configurationId = parameters["configurationId"].Value;
            object externalOrderId = parameters["orderId"].Value;
            string externalBlockOrderId = parameters["blockOrderId"];
            string externalAccountId = parameters["accountId"];
            string externalSecurityId = parameters["securityId"];
            string externalSettlementId = parameters["settlementId"];
            object brokerId = parameters["brokerId"].Value;
            int positionTypeCode = parameters["positionTypeCode"];
            string externalTransactionTypeCode = parameters["transactionTypeCode"];
            string externalTimeInForceCode = parameters["timeInForceCode"];
            string externalOrderTypeCode = parameters["orderTypeCode"];
            object conditionCode = parameters["conditionCode"].Value;
            object isDeleted = parameters["isDeleted"].Value;
            object isAgency = parameters["isAgency"].Value;
            decimal quantity = parameters["quantity"];
            object price1 = parameters["price1"].Value;
            object price2 = parameters["price2"].Value;
            object note = parameters["note"].Value;
            System.DateTime createdTime = parameters["createdTime"];
            int createdUserId = parameters["createdUserId"];
            System.DateTime modifiedTime = parameters["modifiedTime"];
            int modifiedUserId = parameters["modifiedUserId"];
            // The row versioning is largely disabled for external operations.  The value is returned to the caller in the
            // event it's needed for operations within the batch.
            long rowVersion = long.MinValue;
            // Resolve External Identifiers
            int accountId = Account.FindRequiredKey(configurationId, "accountId", externalAccountId);
            int securityId = Security.FindRequiredKey(configurationId, "securityId", externalSecurityId);
            int settlementId = Security.FindRequiredKey(configurationId, "settlementId", externalSettlementId);
            int transactionTypeCode = TransactionType.FindRequiredKey(configurationId, "transactionTypeCode", externalTransactionTypeCode);
            int timeInForceCode = TimeInForce.FindRequiredKey(configurationId, "timeInForceCode", externalTimeInForceCode);
            int orderTypeCode = OrderType.FindRequiredKey(configurationId, "orderTypeCode", externalOrderTypeCode);
            // The load operation will create a record if it doesn't exist, or update an existing record.  The external
            // identifier is used to determine if a record exists with the same key.
            if ((orderId == int.MinValue))
            {
                // Populate the 'externalId' varaibles so that the external identifier can be used to find the row when an
                // external method is called with the same 'configurationId' parameter.
                int externalKeyIndex = Order.GetExternalKeyIndex(configurationId, "orderId");
                object[] externalIdArray = new object[0];
                externalIdArray[externalKeyIndex] = externalOrderId;
                // Call the internal method to complete the operation.
                MarkThree.Quasar.Core.Order.Insert(adoTransaction, sqlTransaction, ref rowVersion, blockOrderId, accountId, securityId, settlementId, brokerId, positionTypeCode, transactionTypeCode, timeInForceCode, orderTypeCode, conditionCode, isDeleted, isAgency, quantity, price1, price2, note, createdTime, createdUserId, modifiedTime, modifiedUserId);
            }
            else
            {
                // While the optimistic concurrency checking is disabled for the external methods, the internal methods
                // still need to perform the check.  This ncurrency checking logic by finding the current row version to be
                // will bypass the coused when the internal method is called.
                ServerDataModel.OrderRow orderRow = orderTable.FindByOrderId(orderId);
                rowVersion = ((long)(orderRow[orderTable.RowVersionColumn]));
                // Call the internal method to complete the operation.
                MarkThree.Quasar.Core.Order.Update(adoTransaction, sqlTransaction, ref rowVersion, orderId, blockOrderId, accountId, securityId, settlementId, brokerId, positionTypeCode, transactionTypeCode, timeInForceCode, orderTypeCode, conditionCode, isDeleted, isAgency, quantity, price1, price2, note, createdTime, createdUserId, modifiedTime, modifiedUserId);
            }
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Collects the table lock request(s) for an 'Update' operation</summary>
        /// <param name="adoTransaction">A collection of table locks required for this operation</param>
        public static void Update(AdoTransaction adoTransaction)
        {
            // Call the internal methods to lock the tables required for an insert or update operation.
            MarkThree.Quasar.Core.Order.Insert(adoTransaction);
            MarkThree.Quasar.Core.Order.Update(adoTransaction);
            // These table lock(s) are required for the 'Update' operation.
            adoTransaction.LockRequests.AddReaderLock(ServerDataModel.OrderLock);
            adoTransaction.LockRequests.AddReaderLock(ServerDataModel.ConfigurationLock);
            adoTransaction.LockRequests.AddReaderLock(ServerDataModel.ObjectLock);
            adoTransaction.LockRequests.AddReaderLock(ServerDataModel.AccountLock);
            adoTransaction.LockRequests.AddReaderLock(ServerDataModel.OrderTypeLock);
            adoTransaction.LockRequests.AddReaderLock(ServerDataModel.SecurityLock);
            adoTransaction.LockRequests.AddReaderLock(ServerDataModel.TimeInForceLock);
            adoTransaction.LockRequests.AddReaderLock(ServerDataModel.TransactionTypeLock);
        }
        
        /// <summary>Updates a Order record using Metadata Parameters.</summary>
        /// <param name="transaction">Contains the parameters and exceptions for this command.</param>
        public static void Update(ParameterList parameters)
        {
            // Accessor for the Order Table.
            ServerDataModel.OrderDataTable orderTable = ServerDataModel.Order;
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object configurationId = parameters["configurationId"].Value;
            int orderId = ((string)(parameters["orderId"]));
            object blockOrderId = parameters["blockOrderId"].Value;
            object externalAccountId = parameters["accountId"].Value;
            object externalSecurityId = parameters["securityId"].Value;
            object externalSettlementId = parameters["settlementId"].Value;
            object brokerId = parameters["brokerId"].Value;
            object positionTypeCode = parameters["positionTypeCode"].Value;
            object externalTransactionTypeCode = parameters["transactionTypeCode"].Value;
            object externalTimeInForceCode = parameters["timeInForceCode"].Value;
            object externalOrderTypeCode = parameters["orderTypeCode"].Value;
            object conditionCode = parameters["conditionCode"].Value;
            object isDeleted = parameters["isDeleted"].Value;
            object isAgency = parameters["isAgency"].Value;
            object quantity = parameters["quantity"].Value;
            object price1 = parameters["price1"].Value;
            object price2 = parameters["price2"].Value;
            object note = parameters["note"].Value;
            object createdTime = parameters["createdTime"].Value;
            object createdUserId = parameters["createdUserId"].Value;
            object modifiedTime = parameters["modifiedTime"].Value;
            object modifiedUserId = parameters["modifiedUserId"].Value;
            // The row versioning is largely disabled for external operations.
            long rowVersion = long.MinValue;
            // Resolve External Identifiers
            object accountId = Account.FindOptionalKey(configurationId, "accountId", externalAccountId);
            object securityId = Security.FindOptionalKey(configurationId, "securityId", externalSecurityId);
            object settlementId = Security.FindOptionalKey(configurationId, "settlementId", externalSettlementId);
            object transactionTypeCode = TransactionType.FindOptionalKey(configurationId, "transactionTypeCode", externalTransactionTypeCode);
            object timeInForceCode = TimeInForce.FindOptionalKey(configurationId, "timeInForceCode", externalTimeInForceCode);
            object orderTypeCode = OrderType.FindOptionalKey(configurationId, "orderTypeCode", externalOrderTypeCode);
            // While the optimistic concurrency checking is disabled for the external methods, the internal methods
            // still need to perform the check.  This ncurrency checking logic by finding the current row version to be
            // will bypass the coused when the internal method is called.
            ServerDataModel.OrderRow orderRow = orderTable.FindByOrderId(orderId);
            rowVersion = ((long)(orderRow[orderTable.RowVersionColumn]));
            // Call the internal method to complete the operation.
            MarkThree.Quasar.Core.Order.Update(adoTransaction, sqlTransaction, ref rowVersion, orderId, blockOrderId, accountId, securityId, settlementId, brokerId, positionTypeCode, transactionTypeCode, timeInForceCode, orderTypeCode, conditionCode, isDeleted, isAgency, quantity, price1, price2, note, createdTime, createdUserId, modifiedTime, modifiedUserId);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Collects the table lock request(s) for an 'Delete' operation</summary>
        /// <param name="adoTransaction">A collection of table locks required for this operation</param>
        public static void Delete(AdoTransaction adoTransaction)
        {
            // Call the internal methods to lock the tables required for an insert or update operation.
            MarkThree.Quasar.Core.Order.Delete(adoTransaction);
            // These table lock(s) are required for the 'Delete' operation.
            adoTransaction.LockRequests.AddReaderLock(ServerDataModel.OrderLock);
        }
        
        /// <summary>Deletes a Order record using Metadata Parameters.</summary>
        /// <param name="transaction">Contains the parameters and exceptions for this command.</param>
        public static void Delete(ParameterList parameters)
        {
            // Accessor for the Order Table.
            ServerDataModel.OrderDataTable orderTable = ServerDataModel.Order;
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object configurationId = parameters["configurationId"].Value;
            string externalOrderId = parameters["orderId"];
            // The row versioning is largely disabled for external operations.
            long rowVersion = long.MinValue;
            // Find the internal identifier using the primar key elements.
            // identifier is used to determine if a record exists with the same key.
            int orderId = Order.FindRequiredKey(configurationId, "orderId", externalOrderId);
            // While the optimistic concurrency checking is disabled for the external methods, the internal methods
            // still need to perform the check.  This ncurrency checking logic by finding the current row version to be
            // will bypass the coused when the internal method is called.
            ServerDataModel.OrderRow orderRow = orderTable.FindByOrderId(orderId);
            rowVersion = ((long)(orderRow[orderTable.RowVersionColumn]));
            // Call the internal method to complete the operation.
            MarkThree.Quasar.Core.Order.Delete(adoTransaction, sqlTransaction, rowVersion, orderId);
        }
        
        /// <summary>Collects the table lock request(s) for an 'Archive' operation</summary>
        /// <param name="adoTransaction">A collection of table locks required for this operation</param>
        public static void Archive(AdoTransaction adoTransaction)
        {
            // Call the internal methods to lock the tables required for an insert or update operation.
            MarkThree.Quasar.Core.Order.Archive(adoTransaction);
            // These table lock(s) are required for the 'Archive' operation.
            adoTransaction.LockRequests.AddReaderLock(ServerDataModel.OrderLock);
        }
        
        /// <summary>Archives a Order record using Metadata Parameters.</summary>
        /// <param name="transaction">Contains the parameters and exceptions for this command.</param>
        public static void Archive(ParameterList parameters)
        {
            // Accessor for the Order Table.
            ServerDataModel.OrderDataTable orderTable = ServerDataModel.Order;
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object configurationId = parameters["configurationId"].Value;
            string externalOrderId = parameters["orderId"];
            // The row versioning is largely disabled for external operations.
            long rowVersion = long.MinValue;
            // Find the internal identifier using the primar key elements.
            // identifier is used to determine if a record exists with the same key.
            int orderId = Order.FindRequiredKey(configurationId, "orderId", externalOrderId);
            // While the optimistic concurrency checking is disabled for the external methods, the internal methods
            // still need to perform the check.  This ncurrency checking logic by finding the current row version to be
            // will bypass the coused when the internal method is called.
            ServerDataModel.OrderRow orderRow = orderTable.FindByOrderId(orderId);
            rowVersion = ((long)(orderRow[orderTable.RowVersionColumn]));
            // Call the internal method to complete the operation.
            MarkThree.Quasar.Core.Order.Archive(adoTransaction, sqlTransaction, rowVersion, orderId);
        }
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          