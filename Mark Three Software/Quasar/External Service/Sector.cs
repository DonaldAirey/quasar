//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Quasar.External
{
    using MarkThree.Quasar;
    using MarkThree.Quasar.Server;
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Data.SqlClient;
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    public class Sector : Object
    {
        
        /// <summary>Collects the table lock request(s) for an 'Load' operation</summary>
        /// <param name="adoTransaction">A collection of table locks required for this operation</param>
        public new static void Load(AdoTransaction adoTransaction)
        {
            // Call the internal methods to lock the tables required for an insert or update operation.
            MarkThree.Quasar.Core.Sector.Insert(adoTransaction);
            MarkThree.Quasar.Core.Sector.Update(adoTransaction);
            // These table lock(s) are required for the 'Load' operation.
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Sector));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Configuration));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Type));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Object));
        }
        
        /// <summary>Loads a Sector record using Metadata Parameters.</summary>
        /// <param name="transaction">Contains the parameters and exceptions for this command.</param>
        public new static void Load(ParameterList parameters)
        {
            // Accessor for the Sector Table.
            ServerDataModel.SectorDataTable sectorTable = ServerDataModel.Sector;
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object configurationId = parameters["configurationId"].Value;
            object description = parameters["description"].Value;
            object groupPermission = parameters["groupPermission"].Value;
            object hidden = parameters["hidden"].Value;
            string name = parameters["name"];
            object owner = parameters["owner"].Value;
            object ownerPermission = parameters["ownerPermission"].Value;
            object readOnly = parameters["readOnly"].Value;
            object worldPermission = parameters["worldPermission"].Value;
            string externalSectorId = parameters["sectorId"];
            object externalTypeCode = parameters["typeCode"].Value;
            object sortOrder = parameters["sortOrder"].Value;
            // The row versioning is largely disabled for external operations.  The value is returned to the caller in the
            // event it's needed for operations within the batch.
            long rowVersion = long.MinValue;
            // Resolve External Identifiers
            int sectorId = Object.FindKey(configurationId, "sectorId", externalSectorId);
            object typeCode = Type.FindOptionalKey(configurationId, "typeCode", externalTypeCode);
            ServerDataModel.SectorRow sectorRow = sectorTable.FindBySectorId(sectorId);
            // The load operation will create a record if it doesn't exist, or update an existing record.  The external
            // identifier is used to determine if a record exists with the same key.
            if ((sectorRow == null))
            {
                // Populate the 'externalId' varaibles so that the external identifier can be used to find the row when an
                // external method is called with the same 'configurationId' parameter.
                int externalKeyIndex = Sector.GetExternalKeyIndex(configurationId, "sectorId");
                object[] externalIdArray = new object[8];
                externalIdArray[externalKeyIndex] = externalSectorId;
                object externalId0 = externalIdArray[0];
                object externalId1 = externalIdArray[1];
                object externalId2 = externalIdArray[2];
                object externalId3 = externalIdArray[3];
                object externalId4 = externalIdArray[4];
                object externalId5 = externalIdArray[5];
                object externalId6 = externalIdArray[6];
                object externalId7 = externalIdArray[7];
                // Call the internal method to complete the operation.
                MarkThree.Quasar.Core.Sector.Insert(adoTransaction, sqlTransaction, ref rowVersion, description, externalId0, externalId1, externalId2, externalId3, externalId4, externalId5, externalId6, externalId7, groupPermission, hidden, name, owner, ownerPermission, readOnly, worldPermission, typeCode, sortOrder);
            }
            else
            {
                // While the optimistic concurrency checking is disabled for the external methods, the internal methods
                // still need to perform the check.  This ncurrency checking logic by finding the current row version to be
                // will bypass the coused when the internal method is called.
                rowVersion = ((long)(sectorRow[sectorTable.RowVersionColumn]));
                // Call the internal method to complete the operation.
                MarkThree.Quasar.Core.Sector.Update(adoTransaction, sqlTransaction, ref rowVersion, description, null, null, null, null, null, null, null, null, groupPermission, hidden, name, owner, ownerPermission, readOnly, worldPermission, sectorId, typeCode, sortOrder);
            }
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Collects the table lock request(s) for an 'Update' operation</summary>
        /// <param name="adoTransaction">A collection of table locks required for this operation</param>
        public new static void Update(AdoTransaction adoTransaction)
        {
            // Call the internal methods to lock the tables required for an insert or update operation.
            MarkThree.Quasar.Core.Sector.Insert(adoTransaction);
            MarkThree.Quasar.Core.Sector.Update(adoTransaction);
            // These table lock(s) are required for the 'Update' operation.
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Sector));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Configuration));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Type));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Object));
        }
        
        /// <summary>Updates a Sector record using Metadata Parameters.</summary>
        /// <param name="transaction">Contains the parameters and exceptions for this command.</param>
        public new static void Update(ParameterList parameters)
        {
            // Accessor for the Sector Table.
            ServerDataModel.SectorDataTable sectorTable = ServerDataModel.Sector;
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object configurationId = parameters["configurationId"].Value;
            object description = parameters["description"].Value;
            object groupPermission = parameters["groupPermission"].Value;
            object hidden = parameters["hidden"].Value;
            object name = parameters["name"].Value;
            object owner = parameters["owner"].Value;
            object ownerPermission = parameters["ownerPermission"].Value;
            object readOnly = parameters["readOnly"].Value;
            object worldPermission = parameters["worldPermission"].Value;
            string externalSectorId = ((string)(parameters["sectorId"]));
            object externalTypeCode = parameters["typeCode"].Value;
            object sortOrder = parameters["sortOrder"].Value;
            // The row versioning is largely disabled for external operations.  The value is returned to the caller in the
            // event it's needed for operations within the batch.
            long rowVersion = long.MinValue;
            // Resolve External Identifiers
            int sectorId = Object.FindRequiredKey(configurationId, "sectorId", externalSectorId);
            object typeCode = Type.FindOptionalKey(configurationId, "typeCode", externalTypeCode);
            // This disables the concurrency checking logic by finding the current row version and passing it to the
            // internal method.
            ServerDataModel.SectorRow sectorRow = sectorTable.FindBySectorId(sectorId);
            rowVersion = ((long)(sectorRow[sectorTable.RowVersionColumn]));
            // Call the internal method to complete the operation.
            MarkThree.Quasar.Core.Sector.Update(adoTransaction, sqlTransaction, ref rowVersion, description, null, null, null, null, null, null, null, null, groupPermission, hidden, name, owner, ownerPermission, readOnly, worldPermission, sectorId, typeCode, sortOrder);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Collects the table lock request(s) for an 'Delete' operation</summary>
        /// <param name="adoTransaction">A collection of table locks required for this operation</param>
        public new static void Delete(AdoTransaction adoTransaction)
        {
            // Call the internal methods to lock the tables required for an insert or update operation.
            MarkThree.Quasar.Core.Sector.Delete(adoTransaction);
            // These table lock(s) are required for the 'Delete' operation.
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Sector));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Configuration));
        }
        
        /// <summary>Deletes a Sector record using Metadata Parameters.</summary>
        /// <param name="transaction">Contains the parameters and exceptions for this command.</param>
        public new static void Delete(ParameterList parameters)
        {
            // Accessor for the Sector Table.
            ServerDataModel.SectorDataTable sectorTable = ServerDataModel.Sector;
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object configurationId = parameters["configurationId"].Value;
            string externalSectorId = parameters["sectorId"];
            // The row versioning is largely disabled for external operations.  The value is returned to the caller in the
            // event it's needed for operations within the batch.
            long rowVersion = long.MinValue;
            // Find the internal identifier using the primary key elements.
            // identifier is used to determine if a record exists with the same key.
            int sectorId = Sector.FindRequiredKey(configurationId, "sectorId", externalSectorId);
            // This disables the concurrency checking logic by finding the current row version and passing it to the
            // internal method.
            ServerDataModel.SectorRow sectorRow = sectorTable.FindBySectorId(sectorId);
            rowVersion = ((long)(sectorRow[sectorTable.RowVersionColumn]));
            // Call the internal method to complete the operation.
            MarkThree.Quasar.Core.Sector.Delete(adoTransaction, sqlTransaction, rowVersion, sectorId);
        }
        
        /// <summary>Collects the table lock request(s) for an 'Archive' operation</summary>
        /// <param name="adoTransaction">A collection of table locks required for this operation</param>
        public new static void Archive(AdoTransaction adoTransaction)
        {
            // Call the internal methods to lock the tables required for an insert or update operation.
            MarkThree.Quasar.Core.Sector.Archive(adoTransaction);
            // These table lock(s) are required for the 'Archive' operation.
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Sector));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Configuration));
        }
        
        /// <summary>Archives a Sector record using Metadata Parameters.</summary>
        /// <param name="transaction">Contains the parameters and exceptions for this command.</param>
        public new static void Archive(ParameterList parameters)
        {
            // Accessor for the Sector Table.
            ServerDataModel.SectorDataTable sectorTable = ServerDataModel.Sector;
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object configurationId = parameters["configurationId"].Value;
            string externalSectorId = parameters["sectorId"];
            // The row versioning is largely disabled for external operations.  The value is returned to the caller in the
            // event it's needed for operations within the batch.
            long rowVersion = long.MinValue;
            // Find the internal identifier using the primary key elements.
            // identifier is used to determine if a record exists with the same key.
            int sectorId = Sector.FindRequiredKey(configurationId, "sectorId", externalSectorId);
            // This disables the concurrency checking logic by finding the current row version and passing it to the
            // internal method.
            ServerDataModel.SectorRow sectorRow = sectorTable.FindBySectorId(sectorId);
            rowVersion = ((long)(sectorRow[sectorTable.RowVersionColumn]));
            // Call the internal method to complete the operation.
            MarkThree.Quasar.Core.Sector.Archive(adoTransaction, sqlTransaction, rowVersion, sectorId);
        }
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            tion exception)
            {
                // This will pass the general exception back to the caller.
                remoteMethod.Exceptions.Add(exception);
            }
        }
        
        /// <summary>Collects the table lock request(s) for an 'Archive' operation</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        public new static void Archive(Transaction transaction)
        {
            // Call the internal methods to lock the tables required for an insert or update operation.
            Shadows.WebService.Core.Sector.Archive(transaction);
            // These table lock(s) are required for the 'Archive' operation.
            transaction.Locks.AddReaderLock(ServerDataModel.SectorLock);
            transaction.Locks.AddReaderLock(ServerDataModel.ConfigurationLock);
        }
        
        /// <summary>Archives a Sector record using Metadata Parameters.</summary>
        /// <param name="transaction">Commits or rejects a set of commands as a unit</param>
        /// <param name="remoteMethod">Contains the parameters and exceptions for this command.</param>
        public new static void Archive(Transaction transaction, RemoteMethod remoteMethod)
        {
            try
            {
                // Accessor for the Sector Table.
                ServerDataModel.SectorDataTable sectorTable = ServerDataModel.Sector;
                // Extract the parameters from the command batch.
                string configurationId = remoteMethod.Parameters.GetRequiredString("configurationId", "DEFAULT");
                string externalSectorId = remoteMethod.Parameters.GetRequiredString("sectorId");
                // Make sure the parameters were parsed correctly before calling the internal method. This will prevent the method
                // from being called with bad data, but provides for error checking on all the parameters.
                if ((remoteMethod.HasExceptions == false))
                {
                    // The row versioning is largely disabled for external operations.  The value is returned to the caller in the
                    // event it's needed for operations within the batch.
                    long rowVersion = long.MinValue;
                    // Find the internal identifier using the primary key elements.
                    // identifier is used to determine if a record exists with the same key.
                    int sectorId = Sector.FindRequiredKey(configurationId, "sectorId", externalSectorId);
                    // This disables the concurrency checking logic by finding the current row version and passing it to the
                    // internal method.
                    ServerDataModel.SectorRow sectorRow = sectorTable.FindBySectorId(sectorId);
                    rowVersion = ((long)(sectorRow[sectorTable.RowVersionColumn]));
                    // Call the internal method to complete the operation.
                    Shadows.WebService.Core.Sector.Archive(transaction, sectorId, rowVersion);
                }
            }
            catch (SqlException sqlException)
            {
                // Every exception from the SQL server call is packed into the 'RemoteMethod' structure and returned to the caller.
                for (IEnumerator iEnumerator = sqlException.Errors.GetEnumerator(); iEnumerator.MoveNext(); remoteMethod.Exceptions.Add(((SqlError)(iEnumerator.Current)).Message))
                {
                }
            }
            catch (Exception exception)
            {
                // This will pass the general exception back to the caller.
                remoteMethod.Exceptions.Add(exception);
            }
        }
    }
}
