//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarkThree.Quasar.External
{
    using MarkThree.Quasar;
    using MarkThree.Quasar.Server;
    using MarkThree;
    using System;
    using System.Collections;
    using System.Data;
    using System.Data.SqlClient;
    
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    public class SectorTarget
    {
        
        /// This value is used to map the object to a persistent storage device.  The parameters for the storage
        /// are found in the configuration file for this service.
        public static string PersistentStore = "Quasar";
        
        /// This member provides access to the in-memory database.
        private static ServerDataModel serverDataModel = new ServerDataModel();
        
        /// <summary>Collects the table lock request(s) for an 'Load' operation</summary>
        /// <param name="adoTransaction">A collection of table locks required for this operation</param>
        public static void Load(AdoTransaction adoTransaction)
        {
            // Call the internal methods to lock the tables required for an insert or update operation.
            MarkThree.Quasar.Core.SectorTarget.Insert(adoTransaction);
            MarkThree.Quasar.Core.SectorTarget.Update(adoTransaction);
            // These table lock(s) are required for the 'Load' operation.
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.SectorTarget));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Configuration));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Object));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Model));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Sector));
        }
        
        /// <summary>Loads a SectorTarget record using Metadata Parameters.</summary>
        /// <param name="transaction">Contains the parameters and exceptions for this command.</param>
        public static void Load(ParameterList parameters)
        {
            // Accessor for the SectorTarget Table.
            ServerDataModel.SectorTargetDataTable sectorTargetTable = ServerDataModel.SectorTarget;
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object configurationId = parameters["configurationId"].Value;
            string externalModelId = parameters["modelId"];
            string externalSectorId = parameters["sectorId"];
            decimal percent = parameters["percent"];
            // The row versioning is largely disabled for external operations.
            long rowVersion = long.MinValue;
            // Resolve External Identifiers
            int modelId = Model.FindRequiredKey(configurationId, "modelId", externalModelId);
            int sectorId = Sector.FindRequiredKey(configurationId, "sectorId", externalSectorId);
            // Find the record using the unique identifier.  If it doesn't exist, it will be inserted, if it does exist,
            // it will be updated.
            ServerDataModel.SectorTargetRow sectorTargetRow = sectorTargetTable.FindByModelIdSectorId(modelId, sectorId);
            if ((sectorTargetRow == null))
            {
                // Call the internal 'Insert' method to complete the operation.
                MarkThree.Quasar.Core.SectorTarget.Insert(adoTransaction, sqlTransaction, ref rowVersion, modelId, sectorId, percent);
            }
            else
            {
                // This will bypass the optimistic concurrency checking required by the internal method.
                rowVersion = ((long)(sectorTargetRow[sectorTargetTable.RowVersionColumn]));
                // Call the internal 'Update' method to complete the operation.
                MarkThree.Quasar.Core.SectorTarget.Update(adoTransaction, sqlTransaction, ref rowVersion, modelId, sectorId, percent);
            }
            // Return values
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Collects the table lock request(s) for an 'Update' operation</summary>
        /// <param name="adoTransaction">A collection of table locks required for this operation</param>
        public static void Update(AdoTransaction adoTransaction)
        {
            // Call the internal methods to lock the tables required for an insert or update operation.
            MarkThree.Quasar.Core.SectorTarget.Insert(adoTransaction);
            MarkThree.Quasar.Core.SectorTarget.Update(adoTransaction);
            // These table lock(s) are required for the 'Update' operation.
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.SectorTarget));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Configuration));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Object));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Model));
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.Sector));
        }
        
        /// <summary>Updates a SectorTarget record using Metadata Parameters.</summary>
        /// <param name="transaction">Contains the parameters and exceptions for this command.</param>
        public static void Update(ParameterList parameters)
        {
            // Accessor for the SectorTarget Table.
            ServerDataModel.SectorTargetDataTable sectorTargetTable = ServerDataModel.SectorTarget;
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object configurationId = parameters["configurationId"].Value;
            string externalModelId = parameters["modelId"];
            string externalSectorId = parameters["sectorId"];
            object percent = parameters["percent"].Value;
            // The row versioning is largely disabled for external operations.
            long rowVersion = long.MinValue;
            // Resolve External Identifiers
            int modelId = Model.FindRequiredKey(configurationId, "modelId", externalModelId);
            int sectorId = Sector.FindRequiredKey(configurationId, "sectorId", externalSectorId);
            // This will bypass the internal optimistic concurrency checking by providing the current rowVersion to the 
            // internal method.
            ServerDataModel.SectorTargetRow sectorTargetRow = sectorTargetTable.FindByModelIdSectorId(modelId, sectorId);
            rowVersion = ((long)(sectorTargetRow[sectorTargetTable.RowVersionColumn]));
            // Call the internal method to complete the operation.
            MarkThree.Quasar.Core.SectorTarget.Update(adoTransaction, sqlTransaction, ref rowVersion, modelId, sectorId, percent);
            // Return values.
            parameters["rowVersion"] = rowVersion;
        }
        
        /// <summary>Collects the table lock request(s) for an 'Delete' operation</summary>
        /// <param name="adoTransaction">A collection of table locks required for this operation</param>
        public static void Delete(AdoTransaction adoTransaction)
        {
            // Call the internal methods to lock the tables required for an insert or update operation.
            MarkThree.Quasar.Core.SectorTarget.Delete(adoTransaction);
            // These table lock(s) are required for the 'Delete' operation.
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.SectorTarget));
        }
        
        /// <summary>Deletes a SectorTarget record using Metadata Parameters.</summary>
        /// <param name="transaction">Contains the parameters and exceptions for this command.</param>
        public static void Delete(ParameterList parameters)
        {
            // Accessor for the SectorTarget Table.
            ServerDataModel.SectorTargetDataTable sectorTargetTable = ServerDataModel.SectorTarget;
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object configurationId = parameters["configurationId"].Value;
            string externalModelId = parameters["modelId"];
            string externalSectorId = parameters["sectorId"];
            // Resolve External Identifiers
            int modelId = Model.FindRequiredKey(configurationId, "modelId", externalModelId);
            int sectorId = Sector.FindRequiredKey(configurationId, "sectorId", externalSectorId);
            // The row versioning is largely disabled for external operations.
            long rowVersion = long.MinValue;
            // While the optimistic concurrency checking is disabled for the external methods, the internal methods
            // still need to perform the check.  This ncurrency checking logic by finding the current row version to be
            // will bypass the coused when the internal method is called.
            ServerDataModel.SectorTargetRow sectorTargetRow = sectorTargetTable.FindByModelIdSectorId(modelId, sectorId);
            rowVersion = ((long)(sectorTargetRow[sectorTargetTable.RowVersionColumn]));
            // Call the internal method to complete the operation.
            MarkThree.Quasar.Core.SectorTarget.Delete(adoTransaction, sqlTransaction, rowVersion, modelId, sectorId);
        }
        
        /// <summary>Collects the table lock request(s) for an 'Archive' operation</summary>
        /// <param name="adoTransaction">A collection of table locks required for this operation</param>
        public static void Archive(AdoTransaction adoTransaction)
        {
            // Call the internal methods to lock the tables required for an insert or update operation.
            MarkThree.Quasar.Core.SectorTarget.Archive(adoTransaction);
            // These table lock(s) are required for the 'Archive' operation.
            adoTransaction.LockRequests.Add(new TableReaderRequest(ServerDataModel.SectorTarget));
        }
        
        /// <summary>Archives a SectorTarget record using Metadata Parameters.</summary>
        /// <param name="transaction">Contains the parameters and exceptions for this command.</param>
        public static void Archive(ParameterList parameters)
        {
            // Accessor for the SectorTarget Table.
            ServerDataModel.SectorTargetDataTable sectorTargetTable = ServerDataModel.SectorTarget;
            // Extract the parameters from the command batch.
            AdoTransaction adoTransaction = parameters["adoTransaction"];
            SqlTransaction sqlTransaction = parameters["sqlTransaction"];
            object configurationId = parameters["configurationId"].Value;
            string externalModelId = parameters["modelId"];
            string externalSectorId = parameters["sectorId"];
            // Resolve External Identifiers
            int modelId = Model.FindRequiredKey(configurationId, "modelId", externalModelId);
            int sectorId = Sector.FindRequiredKey(configurationId, "sectorId", externalSectorId);
            // The row versioning is largely disabled for external operations.
            long rowVersion = long.MinValue;
            // While the optimistic concurrency checking is disabled for the external methods, the internal methods
            // still need to perform the check.  This ncurrency checking logic by finding the current row version to be
            // will bypass the coused when the internal method is called.
            ServerDataModel.SectorTargetRow sectorTargetRow = sectorTargetTable.FindByModelIdSectorId(modelId, sectorId);
            rowVersion = ((long)(sectorTargetRow[sectorTargetTable.RowVersionColumn]));
            // Call the internal method to complete the operation.
            MarkThree.Quasar.Core.SectorTarget.Archive(adoTransaction, sqlTransaction, rowVersion, modelId, sectorId);
        }
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
            }
            catch (SqlException sqlException)
            {
                // Every exception from the SQL server call is packed into the 'RemoteMethod' structure and returned to the caller.
                for (IEnumerator iEnumerator = sqlException.Errors.GetEnumerator(); iEnumerator.MoveNext(); remoteMethod.Exceptions.Add(((SqlError)(iEnumerator.Current)).Message))
                {
                }
            }
            catch (Exception exception)
            {
                // This will pass the general exception back to the caller.
                remoteMethod.Exceptions.Add(exception);
            }
        }
    }
}
