//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.288
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Shadows.Quasar.Viewers.Order {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class OrderSet : DataSet {
        
        private OrderDataTable tableOrder;
        
        public OrderSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected OrderSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Order"] != null)) {
                    this.Tables.Add(new OrderDataTable(ds.Tables["Order"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrderDataTable Order {
            get {
                return this.tableOrder;
            }
        }
        
        public override DataSet Clone() {
            OrderSet cln = ((OrderSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Order"] != null)) {
                this.Tables.Add(new OrderDataTable(ds.Tables["Order"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableOrder = ((OrderDataTable)(this.Tables["Order"]));
            if ((this.tableOrder != null)) {
                this.tableOrder.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "OrderSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/OrderSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableOrder = new OrderDataTable();
            this.Tables.Add(this.tableOrder);
        }
        
        private bool ShouldSerializeOrder() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void OrderRowChangeEventHandler(object sender, OrderRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrderDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnRowVersion;
            
            private DataColumn columnOrderId;
            
            private DataColumn columnBlockOrderId;
            
            private DataColumn columnBlotterId;
            
            private DataColumn columnAccountId;
            
            private DataColumn columnAccountName;
            
            private DataColumn columnAccountMnemonic;
            
            private DataColumn columnSecurityId;
            
            private DataColumn columnSecurityName;
            
            private DataColumn columnSecuritySymbol;
            
            private DataColumn columnSettlementId;
            
            private DataColumn columnSettlementName;
            
            private DataColumn columnSettlementSymbol;
            
            private DataColumn columnBrokerId;
            
            private DataColumn columnBrokerName;
            
            private DataColumn columnBrokerSymbol;
            
            private DataColumn columnPositionTypeCode;
            
            private DataColumn columnPositionTypeMnemonic;
            
            private DataColumn columnTransactionTypeCode;
            
            private DataColumn columnTransactionTypeMnemonic;
            
            private DataColumn columnTimeInForceCode;
            
            private DataColumn columnTimeInForceMnemonic;
            
            private DataColumn columnOrderTypeCode;
            
            private DataColumn columnOrderTypeMnemonic;
            
            private DataColumn columnConditionCode;
            
            private DataColumn columnConditionMnemonic;
            
            private DataColumn columnIsLocal;
            
            private DataColumn columnDeleted;
            
            private DataColumn columnAgency;
            
            private DataColumn columnQuantity;
            
            private DataColumn columnPrice1;
            
            private DataColumn columnPrice2;
            
            private DataColumn columnNote;
            
            private DataColumn columnCreatedTime;
            
            private DataColumn columnCreatedLoginId;
            
            private DataColumn columnCreatedLoginName;
            
            private DataColumn columnModifiedTime;
            
            private DataColumn columnModifiedLoginId;
            
            private DataColumn columnModifiedLoginName;
            
            internal OrderDataTable() : 
                    base("Order") {
                this.InitClass();
            }
            
            internal OrderDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            internal DataColumn OrderIdColumn {
                get {
                    return this.columnOrderId;
                }
            }
            
            internal DataColumn BlockOrderIdColumn {
                get {
                    return this.columnBlockOrderId;
                }
            }
            
            internal DataColumn BlotterIdColumn {
                get {
                    return this.columnBlotterId;
                }
            }
            
            internal DataColumn AccountIdColumn {
                get {
                    return this.columnAccountId;
                }
            }
            
            internal DataColumn AccountNameColumn {
                get {
                    return this.columnAccountName;
                }
            }
            
            internal DataColumn AccountMnemonicColumn {
                get {
                    return this.columnAccountMnemonic;
                }
            }
            
            internal DataColumn SecurityIdColumn {
                get {
                    return this.columnSecurityId;
                }
            }
            
            internal DataColumn SecurityNameColumn {
                get {
                    return this.columnSecurityName;
                }
            }
            
            internal DataColumn SecuritySymbolColumn {
                get {
                    return this.columnSecuritySymbol;
                }
            }
            
            internal DataColumn SettlementIdColumn {
                get {
                    return this.columnSettlementId;
                }
            }
            
            internal DataColumn SettlementNameColumn {
                get {
                    return this.columnSettlementName;
                }
            }
            
            internal DataColumn SettlementSymbolColumn {
                get {
                    return this.columnSettlementSymbol;
                }
            }
            
            internal DataColumn BrokerIdColumn {
                get {
                    return this.columnBrokerId;
                }
            }
            
            internal DataColumn BrokerNameColumn {
                get {
                    return this.columnBrokerName;
                }
            }
            
            internal DataColumn BrokerSymbolColumn {
                get {
                    return this.columnBrokerSymbol;
                }
            }
            
            internal DataColumn PositionTypeCodeColumn {
                get {
                    return this.columnPositionTypeCode;
                }
            }
            
            internal DataColumn PositionTypeMnemonicColumn {
                get {
                    return this.columnPositionTypeMnemonic;
                }
            }
            
            internal DataColumn TransactionTypeCodeColumn {
                get {
                    return this.columnTransactionTypeCode;
                }
            }
            
            internal DataColumn TransactionTypeMnemonicColumn {
                get {
                    return this.columnTransactionTypeMnemonic;
                }
            }
            
            internal DataColumn TimeInForceCodeColumn {
                get {
                    return this.columnTimeInForceCode;
                }
            }
            
            internal DataColumn TimeInForceMnemonicColumn {
                get {
                    return this.columnTimeInForceMnemonic;
                }
            }
            
            internal DataColumn OrderTypeCodeColumn {
                get {
                    return this.columnOrderTypeCode;
                }
            }
            
            internal DataColumn OrderTypeMnemonicColumn {
                get {
                    return this.columnOrderTypeMnemonic;
                }
            }
            
            internal DataColumn ConditionCodeColumn {
                get {
                    return this.columnConditionCode;
                }
            }
            
            internal DataColumn ConditionMnemonicColumn {
                get {
                    return this.columnConditionMnemonic;
                }
            }
            
            internal DataColumn IsLocalColumn {
                get {
                    return this.columnIsLocal;
                }
            }
            
            internal DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            internal DataColumn AgencyColumn {
                get {
                    return this.columnAgency;
                }
            }
            
            internal DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            internal DataColumn Price1Column {
                get {
                    return this.columnPrice1;
                }
            }
            
            internal DataColumn Price2Column {
                get {
                    return this.columnPrice2;
                }
            }
            
            internal DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            internal DataColumn CreatedTimeColumn {
                get {
                    return this.columnCreatedTime;
                }
            }
            
            internal DataColumn CreatedLoginIdColumn {
                get {
                    return this.columnCreatedLoginId;
                }
            }
            
            internal DataColumn CreatedLoginNameColumn {
                get {
                    return this.columnCreatedLoginName;
                }
            }
            
            internal DataColumn ModifiedTimeColumn {
                get {
                    return this.columnModifiedTime;
                }
            }
            
            internal DataColumn ModifiedLoginIdColumn {
                get {
                    return this.columnModifiedLoginId;
                }
            }
            
            internal DataColumn ModifiedLoginNameColumn {
                get {
                    return this.columnModifiedLoginName;
                }
            }
            
            public OrderRow this[int index] {
                get {
                    return ((OrderRow)(this.Rows[index]));
                }
            }
            
            public event OrderRowChangeEventHandler OrderRowChanged;
            
            public event OrderRowChangeEventHandler OrderRowChanging;
            
            public event OrderRowChangeEventHandler OrderRowDeleted;
            
            public event OrderRowChangeEventHandler OrderRowDeleting;
            
            public void AddOrderRow(OrderRow row) {
                this.Rows.Add(row);
            }
            
            public OrderRow AddOrderRow(
                        long RowVersion, 
                        int BlockOrderId, 
                        int BlotterId, 
                        int AccountId, 
                        string AccountName, 
                        string AccountMnemonic, 
                        int SecurityId, 
                        string SecurityName, 
                        string SecuritySymbol, 
                        int SettlementId, 
                        string SettlementName, 
                        string SettlementSymbol, 
                        int BrokerId, 
                        string BrokerName, 
                        string BrokerSymbol, 
                        int PositionTypeCode, 
                        string PositionTypeMnemonic, 
                        int TransactionTypeCode, 
                        string TransactionTypeMnemonic, 
                        int TimeInForceCode, 
                        string TimeInForceMnemonic, 
                        int OrderTypeCode, 
                        string OrderTypeMnemonic, 
                        int ConditionCode, 
                        string ConditionMnemonic, 
                        bool IsLocal, 
                        bool Deleted, 
                        bool Agency, 
                        System.Decimal Quantity, 
                        System.Decimal Price1, 
                        System.Decimal Price2, 
                        string Note, 
                        System.DateTime CreatedTime, 
                        int CreatedLoginId, 
                        string CreatedLoginName, 
                        System.DateTime ModifiedTime, 
                        int ModifiedLoginId, 
                        string ModifiedLoginName) {
                OrderRow rowOrderRow = ((OrderRow)(this.NewRow()));
                rowOrderRow.ItemArray = new object[] {
                        RowVersion,
                        null,
                        BlockOrderId,
                        BlotterId,
                        AccountId,
                        AccountName,
                        AccountMnemonic,
                        SecurityId,
                        SecurityName,
                        SecuritySymbol,
                        SettlementId,
                        SettlementName,
                        SettlementSymbol,
                        BrokerId,
                        BrokerName,
                        BrokerSymbol,
                        PositionTypeCode,
                        PositionTypeMnemonic,
                        TransactionTypeCode,
                        TransactionTypeMnemonic,
                        TimeInForceCode,
                        TimeInForceMnemonic,
                        OrderTypeCode,
                        OrderTypeMnemonic,
                        ConditionCode,
                        ConditionMnemonic,
                        IsLocal,
                        Deleted,
                        Agency,
                        Quantity,
                        Price1,
                        Price2,
                        Note,
                        CreatedTime,
                        CreatedLoginId,
                        CreatedLoginName,
                        ModifiedTime,
                        ModifiedLoginId,
                        ModifiedLoginName};
                this.Rows.Add(rowOrderRow);
                return rowOrderRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                OrderDataTable cln = ((OrderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new OrderDataTable();
            }
            
            internal void InitVars() {
                this.columnRowVersion = this.Columns["RowVersion"];
                this.columnOrderId = this.Columns["OrderId"];
                this.columnBlockOrderId = this.Columns["BlockOrderId"];
                this.columnBlotterId = this.Columns["BlotterId"];
                this.columnAccountId = this.Columns["AccountId"];
                this.columnAccountName = this.Columns["AccountName"];
                this.columnAccountMnemonic = this.Columns["AccountMnemonic"];
                this.columnSecurityId = this.Columns["SecurityId"];
                this.columnSecurityName = this.Columns["SecurityName"];
                this.columnSecuritySymbol = this.Columns["SecuritySymbol"];
                this.columnSettlementId = this.Columns["SettlementId"];
                this.columnSettlementName = this.Columns["SettlementName"];
                this.columnSettlementSymbol = this.Columns["SettlementSymbol"];
                this.columnBrokerId = this.Columns["BrokerId"];
                this.columnBrokerName = this.Columns["BrokerName"];
                this.columnBrokerSymbol = this.Columns["BrokerSymbol"];
                this.columnPositionTypeCode = this.Columns["PositionTypeCode"];
                this.columnPositionTypeMnemonic = this.Columns["PositionTypeMnemonic"];
                this.columnTransactionTypeCode = this.Columns["TransactionTypeCode"];
                this.columnTransactionTypeMnemonic = this.Columns["TransactionTypeMnemonic"];
                this.columnTimeInForceCode = this.Columns["TimeInForceCode"];
                this.columnTimeInForceMnemonic = this.Columns["TimeInForceMnemonic"];
                this.columnOrderTypeCode = this.Columns["OrderTypeCode"];
                this.columnOrderTypeMnemonic = this.Columns["OrderTypeMnemonic"];
                this.columnConditionCode = this.Columns["ConditionCode"];
                this.columnConditionMnemonic = this.Columns["ConditionMnemonic"];
                this.columnIsLocal = this.Columns["IsLocal"];
                this.columnDeleted = this.Columns["Deleted"];
                this.columnAgency = this.Columns["Agency"];
                this.columnQuantity = this.Columns["Quantity"];
                this.columnPrice1 = this.Columns["Price1"];
                this.columnPrice2 = this.Columns["Price2"];
                this.columnNote = this.Columns["Note"];
                this.columnCreatedTime = this.Columns["CreatedTime"];
                this.columnCreatedLoginId = this.Columns["CreatedLoginId"];
                this.columnCreatedLoginName = this.Columns["CreatedLoginName"];
                this.columnModifiedTime = this.Columns["ModifiedTime"];
                this.columnModifiedLoginId = this.Columns["ModifiedLoginId"];
                this.columnModifiedLoginName = this.Columns["ModifiedLoginName"];
            }
            
            private void InitClass() {
                this.columnRowVersion = new DataColumn("RowVersion", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnOrderId = new DataColumn("OrderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrderId);
                this.columnBlockOrderId = new DataColumn("BlockOrderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlockOrderId);
                this.columnBlotterId = new DataColumn("BlotterId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlotterId);
                this.columnAccountId = new DataColumn("AccountId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountId);
                this.columnAccountName = new DataColumn("AccountName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountName);
                this.columnAccountMnemonic = new DataColumn("AccountMnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountMnemonic);
                this.columnSecurityId = new DataColumn("SecurityId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityId);
                this.columnSecurityName = new DataColumn("SecurityName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityName);
                this.columnSecuritySymbol = new DataColumn("SecuritySymbol", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecuritySymbol);
                this.columnSettlementId = new DataColumn("SettlementId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSettlementId);
                this.columnSettlementName = new DataColumn("SettlementName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSettlementName);
                this.columnSettlementSymbol = new DataColumn("SettlementSymbol", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSettlementSymbol);
                this.columnBrokerId = new DataColumn("BrokerId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBrokerId);
                this.columnBrokerName = new DataColumn("BrokerName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBrokerName);
                this.columnBrokerSymbol = new DataColumn("BrokerSymbol", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBrokerSymbol);
                this.columnPositionTypeCode = new DataColumn("PositionTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPositionTypeCode);
                this.columnPositionTypeMnemonic = new DataColumn("PositionTypeMnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPositionTypeMnemonic);
                this.columnTransactionTypeCode = new DataColumn("TransactionTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionTypeCode);
                this.columnTransactionTypeMnemonic = new DataColumn("TransactionTypeMnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionTypeMnemonic);
                this.columnTimeInForceCode = new DataColumn("TimeInForceCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeInForceCode);
                this.columnTimeInForceMnemonic = new DataColumn("TimeInForceMnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeInForceMnemonic);
                this.columnOrderTypeCode = new DataColumn("OrderTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrderTypeCode);
                this.columnOrderTypeMnemonic = new DataColumn("OrderTypeMnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrderTypeMnemonic);
                this.columnConditionCode = new DataColumn("ConditionCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConditionCode);
                this.columnConditionMnemonic = new DataColumn("ConditionMnemonic", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConditionMnemonic);
                this.columnIsLocal = new DataColumn("IsLocal", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsLocal);
                this.columnDeleted = new DataColumn("Deleted", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDeleted);
                this.columnAgency = new DataColumn("Agency", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAgency);
                this.columnQuantity = new DataColumn("Quantity", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQuantity);
                this.columnPrice1 = new DataColumn("Price1", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrice1);
                this.columnPrice2 = new DataColumn("Price2", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrice2);
                this.columnNote = new DataColumn("Note", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNote);
                this.columnCreatedTime = new DataColumn("CreatedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedTime);
                this.columnCreatedLoginId = new DataColumn("CreatedLoginId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedLoginId);
                this.columnCreatedLoginName = new DataColumn("CreatedLoginName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedLoginName);
                this.columnModifiedTime = new DataColumn("ModifiedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedTime);
                this.columnModifiedLoginId = new DataColumn("ModifiedLoginId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedLoginId);
                this.columnModifiedLoginName = new DataColumn("ModifiedLoginName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedLoginName);
                this.columnRowVersion.AllowDBNull = false;
                this.columnRowVersion.DefaultValue = 1;
                this.columnOrderId.AutoIncrement = true;
                this.columnOrderId.AutoIncrementSeed = 1;
                this.columnOrderId.AllowDBNull = false;
                this.columnIsLocal.AllowDBNull = false;
                this.columnIsLocal.DefaultValue = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnDeleted.DefaultValue = false;
                this.columnAgency.AllowDBNull = false;
                this.columnAgency.DefaultValue = false;
            }
            
            public OrderRow NewOrderRow() {
                return ((OrderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new OrderRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(OrderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrderRowChanged != null)) {
                    this.OrderRowChanged(this, new OrderRowChangeEvent(((OrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrderRowChanging != null)) {
                    this.OrderRowChanging(this, new OrderRowChangeEvent(((OrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrderRowDeleted != null)) {
                    this.OrderRowDeleted(this, new OrderRowChangeEvent(((OrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrderRowDeleting != null)) {
                    this.OrderRowDeleting(this, new OrderRowChangeEvent(((OrderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveOrderRow(OrderRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrderRow : DataRow {
            
            private OrderDataTable tableOrder;
            
            internal OrderRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrder = ((OrderDataTable)(this.Table));
            }
            
            public long RowVersion {
                get {
                    return ((long)(this[this.tableOrder.RowVersionColumn]));
                }
                set {
                    this[this.tableOrder.RowVersionColumn] = value;
                }
            }
            
            public int OrderId {
                get {
                    return ((int)(this[this.tableOrder.OrderIdColumn]));
                }
                set {
                    this[this.tableOrder.OrderIdColumn] = value;
                }
            }
            
            public int BlockOrderId {
                get {
                    try {
                        return ((int)(this[this.tableOrder.BlockOrderIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.BlockOrderIdColumn] = value;
                }
            }
            
            public int BlotterId {
                get {
                    try {
                        return ((int)(this[this.tableOrder.BlotterIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.BlotterIdColumn] = value;
                }
            }
            
            public int AccountId {
                get {
                    try {
                        return ((int)(this[this.tableOrder.AccountIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.AccountIdColumn] = value;
                }
            }
            
            public string AccountName {
                get {
                    try {
                        return ((string)(this[this.tableOrder.AccountNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.AccountNameColumn] = value;
                }
            }
            
            public string AccountMnemonic {
                get {
                    try {
                        return ((string)(this[this.tableOrder.AccountMnemonicColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.AccountMnemonicColumn] = value;
                }
            }
            
            public int SecurityId {
                get {
                    try {
                        return ((int)(this[this.tableOrder.SecurityIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.SecurityIdColumn] = value;
                }
            }
            
            public string SecurityName {
                get {
                    try {
                        return ((string)(this[this.tableOrder.SecurityNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.SecurityNameColumn] = value;
                }
            }
            
            public string SecuritySymbol {
                get {
                    try {
                        return ((string)(this[this.tableOrder.SecuritySymbolColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.SecuritySymbolColumn] = value;
                }
            }
            
            public int SettlementId {
                get {
                    try {
                        return ((int)(this[this.tableOrder.SettlementIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.SettlementIdColumn] = value;
                }
            }
            
            public string SettlementName {
                get {
                    try {
                        return ((string)(this[this.tableOrder.SettlementNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.SettlementNameColumn] = value;
                }
            }
            
            public string SettlementSymbol {
                get {
                    try {
                        return ((string)(this[this.tableOrder.SettlementSymbolColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.SettlementSymbolColumn] = value;
                }
            }
            
            public int BrokerId {
                get {
                    try {
                        return ((int)(this[this.tableOrder.BrokerIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.BrokerIdColumn] = value;
                }
            }
            
            public string BrokerName {
                get {
                    try {
                        return ((string)(this[this.tableOrder.BrokerNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.BrokerNameColumn] = value;
                }
            }
            
            public string BrokerSymbol {
                get {
                    try {
                        return ((string)(this[this.tableOrder.BrokerSymbolColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.BrokerSymbolColumn] = value;
                }
            }
            
            public int PositionTypeCode {
                get {
                    try {
                        return ((int)(this[this.tableOrder.PositionTypeCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.PositionTypeCodeColumn] = value;
                }
            }
            
            public string PositionTypeMnemonic {
                get {
                    try {
                        return ((string)(this[this.tableOrder.PositionTypeMnemonicColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.PositionTypeMnemonicColumn] = value;
                }
            }
            
            public int TransactionTypeCode {
                get {
                    try {
                        return ((int)(this[this.tableOrder.TransactionTypeCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.TransactionTypeCodeColumn] = value;
                }
            }
            
            public string TransactionTypeMnemonic {
                get {
                    try {
                        return ((string)(this[this.tableOrder.TransactionTypeMnemonicColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.TransactionTypeMnemonicColumn] = value;
                }
            }
            
            public int TimeInForceCode {
                get {
                    try {
                        return ((int)(this[this.tableOrder.TimeInForceCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.TimeInForceCodeColumn] = value;
                }
            }
            
            public string TimeInForceMnemonic {
                get {
                    try {
                        return ((string)(this[this.tableOrder.TimeInForceMnemonicColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.TimeInForceMnemonicColumn] = value;
                }
            }
            
            public int OrderTypeCode {
                get {
                    try {
                        return ((int)(this[this.tableOrder.OrderTypeCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.OrderTypeCodeColumn] = value;
                }
            }
            
            public string OrderTypeMnemonic {
                get {
                    try {
                        return ((string)(this[this.tableOrder.OrderTypeMnemonicColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.OrderTypeMnemonicColumn] = value;
                }
            }
            
            public int ConditionCode {
                get {
                    try {
                        return ((int)(this[this.tableOrder.ConditionCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.ConditionCodeColumn] = value;
                }
            }
            
            public string ConditionMnemonic {
                get {
                    try {
                        return ((string)(this[this.tableOrder.ConditionMnemonicColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.ConditionMnemonicColumn] = value;
                }
            }
            
            public bool IsLocal {
                get {
                    return ((bool)(this[this.tableOrder.IsLocalColumn]));
                }
                set {
                    this[this.tableOrder.IsLocalColumn] = value;
                }
            }
            
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableOrder.DeletedColumn]));
                }
                set {
                    this[this.tableOrder.DeletedColumn] = value;
                }
            }
            
            public bool Agency {
                get {
                    return ((bool)(this[this.tableOrder.AgencyColumn]));
                }
                set {
                    this[this.tableOrder.AgencyColumn] = value;
                }
            }
            
            public System.Decimal Quantity {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableOrder.QuantityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.QuantityColumn] = value;
                }
            }
            
            public System.Decimal Price1 {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableOrder.Price1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.Price1Column] = value;
                }
            }
            
            public System.Decimal Price2 {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableOrder.Price2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.Price2Column] = value;
                }
            }
            
            public string Note {
                get {
                    try {
                        return ((string)(this[this.tableOrder.NoteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.NoteColumn] = value;
                }
            }
            
            public System.DateTime CreatedTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableOrder.CreatedTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.CreatedTimeColumn] = value;
                }
            }
            
            public int CreatedLoginId {
                get {
                    try {
                        return ((int)(this[this.tableOrder.CreatedLoginIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.CreatedLoginIdColumn] = value;
                }
            }
            
            public string CreatedLoginName {
                get {
                    try {
                        return ((string)(this[this.tableOrder.CreatedLoginNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.CreatedLoginNameColumn] = value;
                }
            }
            
            public System.DateTime ModifiedTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableOrder.ModifiedTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.ModifiedTimeColumn] = value;
                }
            }
            
            public int ModifiedLoginId {
                get {
                    try {
                        return ((int)(this[this.tableOrder.ModifiedLoginIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.ModifiedLoginIdColumn] = value;
                }
            }
            
            public string ModifiedLoginName {
                get {
                    try {
                        return ((string)(this[this.tableOrder.ModifiedLoginNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOrder.ModifiedLoginNameColumn] = value;
                }
            }
            
            public bool IsBlockOrderIdNull() {
                return this.IsNull(this.tableOrder.BlockOrderIdColumn);
            }
            
            public void SetBlockOrderIdNull() {
                this[this.tableOrder.BlockOrderIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsBlotterIdNull() {
                return this.IsNull(this.tableOrder.BlotterIdColumn);
            }
            
            public void SetBlotterIdNull() {
                this[this.tableOrder.BlotterIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsAccountIdNull() {
                return this.IsNull(this.tableOrder.AccountIdColumn);
            }
            
            public void SetAccountIdNull() {
                this[this.tableOrder.AccountIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsAccountNameNull() {
                return this.IsNull(this.tableOrder.AccountNameColumn);
            }
            
            public void SetAccountNameNull() {
                this[this.tableOrder.AccountNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsAccountMnemonicNull() {
                return this.IsNull(this.tableOrder.AccountMnemonicColumn);
            }
            
            public void SetAccountMnemonicNull() {
                this[this.tableOrder.AccountMnemonicColumn] = System.Convert.DBNull;
            }
            
            public bool IsSecurityIdNull() {
                return this.IsNull(this.tableOrder.SecurityIdColumn);
            }
            
            public void SetSecurityIdNull() {
                this[this.tableOrder.SecurityIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsSecurityNameNull() {
                return this.IsNull(this.tableOrder.SecurityNameColumn);
            }
            
            public void SetSecurityNameNull() {
                this[this.tableOrder.SecurityNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsSecuritySymbolNull() {
                return this.IsNull(this.tableOrder.SecuritySymbolColumn);
            }
            
            public void SetSecuritySymbolNull() {
                this[this.tableOrder.SecuritySymbolColumn] = System.Convert.DBNull;
            }
            
            public bool IsSettlementIdNull() {
                return this.IsNull(this.tableOrder.SettlementIdColumn);
            }
            
            public void SetSettlementIdNull() {
                this[this.tableOrder.SettlementIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsSettlementNameNull() {
                return this.IsNull(this.tableOrder.SettlementNameColumn);
            }
            
            public void SetSettlementNameNull() {
                this[this.tableOrder.SettlementNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsSettlementSymbolNull() {
                return this.IsNull(this.tableOrder.SettlementSymbolColumn);
            }
            
            public void SetSettlementSymbolNull() {
                this[this.tableOrder.SettlementSymbolColumn] = System.Convert.DBNull;
            }
            
            public bool IsBrokerIdNull() {
                return this.IsNull(this.tableOrder.BrokerIdColumn);
            }
            
            public void SetBrokerIdNull() {
                this[this.tableOrder.BrokerIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsBrokerNameNull() {
                return this.IsNull(this.tableOrder.BrokerNameColumn);
            }
            
            public void SetBrokerNameNull() {
                this[this.tableOrder.BrokerNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsBrokerSymbolNull() {
                return this.IsNull(this.tableOrder.BrokerSymbolColumn);
            }
            
            public void SetBrokerSymbolNull() {
                this[this.tableOrder.BrokerSymbolColumn] = System.Convert.DBNull;
            }
            
            public bool IsPositionTypeCodeNull() {
                return this.IsNull(this.tableOrder.PositionTypeCodeColumn);
            }
            
            public void SetPositionTypeCodeNull() {
                this[this.tableOrder.PositionTypeCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsPositionTypeMnemonicNull() {
                return this.IsNull(this.tableOrder.PositionTypeMnemonicColumn);
            }
            
            public void SetPositionTypeMnemonicNull() {
                this[this.tableOrder.PositionTypeMnemonicColumn] = System.Convert.DBNull;
            }
            
            public bool IsTransactionTypeCodeNull() {
                return this.IsNull(this.tableOrder.TransactionTypeCodeColumn);
            }
            
            public void SetTransactionTypeCodeNull() {
                this[this.tableOrder.TransactionTypeCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsTransactionTypeMnemonicNull() {
                return this.IsNull(this.tableOrder.TransactionTypeMnemonicColumn);
            }
            
            public void SetTransactionTypeMnemonicNull() {
                this[this.tableOrder.TransactionTypeMnemonicColumn] = System.Convert.DBNull;
            }
            
            public bool IsTimeInForceCodeNull() {
                return this.IsNull(this.tableOrder.TimeInForceCodeColumn);
            }
            
            public void SetTimeInForceCodeNull() {
                this[this.tableOrder.TimeInForceCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsTimeInForceMnemonicNull() {
                return this.IsNull(this.tableOrder.TimeInForceMnemonicColumn);
            }
            
            public void SetTimeInForceMnemonicNull() {
                this[this.tableOrder.TimeInForceMnemonicColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrderTypeCodeNull() {
                return this.IsNull(this.tableOrder.OrderTypeCodeColumn);
            }
            
            public void SetOrderTypeCodeNull() {
                this[this.tableOrder.OrderTypeCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrderTypeMnemonicNull() {
                return this.IsNull(this.tableOrder.OrderTypeMnemonicColumn);
            }
            
            public void SetOrderTypeMnemonicNull() {
                this[this.tableOrder.OrderTypeMnemonicColumn] = System.Convert.DBNull;
            }
            
            public bool IsConditionCodeNull() {
                return this.IsNull(this.tableOrder.ConditionCodeColumn);
            }
            
            public void SetConditionCodeNull() {
                this[this.tableOrder.ConditionCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsConditionMnemonicNull() {
                return this.IsNull(this.tableOrder.ConditionMnemonicColumn);
            }
            
            public void SetConditionMnemonicNull() {
                this[this.tableOrder.ConditionMnemonicColumn] = System.Convert.DBNull;
            }
            
            public bool IsQuantityNull() {
                return this.IsNull(this.tableOrder.QuantityColumn);
            }
            
            public void SetQuantityNull() {
                this[this.tableOrder.QuantityColumn] = System.Convert.DBNull;
            }
            
            public bool IsPrice1Null() {
                return this.IsNull(this.tableOrder.Price1Column);
            }
            
            public void SetPrice1Null() {
                this[this.tableOrder.Price1Column] = System.Convert.DBNull;
            }
            
            public bool IsPrice2Null() {
                return this.IsNull(this.tableOrder.Price2Column);
            }
            
            public void SetPrice2Null() {
                this[this.tableOrder.Price2Column] = System.Convert.DBNull;
            }
            
            public bool IsNoteNull() {
                return this.IsNull(this.tableOrder.NoteColumn);
            }
            
            public void SetNoteNull() {
                this[this.tableOrder.NoteColumn] = System.Convert.DBNull;
            }
            
            public bool IsCreatedTimeNull() {
                return this.IsNull(this.tableOrder.CreatedTimeColumn);
            }
            
            public void SetCreatedTimeNull() {
                this[this.tableOrder.CreatedTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCreatedLoginIdNull() {
                return this.IsNull(this.tableOrder.CreatedLoginIdColumn);
            }
            
            public void SetCreatedLoginIdNull() {
                this[this.tableOrder.CreatedLoginIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsCreatedLoginNameNull() {
                return this.IsNull(this.tableOrder.CreatedLoginNameColumn);
            }
            
            public void SetCreatedLoginNameNull() {
                this[this.tableOrder.CreatedLoginNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsModifiedTimeNull() {
                return this.IsNull(this.tableOrder.ModifiedTimeColumn);
            }
            
            public void SetModifiedTimeNull() {
                this[this.tableOrder.ModifiedTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsModifiedLoginIdNull() {
                return this.IsNull(this.tableOrder.ModifiedLoginIdColumn);
            }
            
            public void SetModifiedLoginIdNull() {
                this[this.tableOrder.ModifiedLoginIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsModifiedLoginNameNull() {
                return this.IsNull(this.tableOrder.ModifiedLoginNameColumn);
            }
            
            public void SetModifiedLoginNameNull() {
                this[this.tableOrder.ModifiedLoginNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrderRowChangeEvent : EventArgs {
            
            private OrderRow eventRow;
            
            private DataRowAction eventAction;
            
            public OrderRowChangeEvent(OrderRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public OrderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
