//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.288
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Shadows.Quasar.Viewers.Placement {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class AddressMapSet : DataSet {
        
        private AddressMapDataTable tableAddressMap;
        
        private ColumnIndexMapDataTable tableColumnIndexMap;
        
        private ColumnIdMapDataTable tableColumnIdMap;
        
        public AddressMapSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected AddressMapSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["AddressMap"] != null)) {
                    this.Tables.Add(new AddressMapDataTable(ds.Tables["AddressMap"]));
                }
                if ((ds.Tables["ColumnIndexMap"] != null)) {
                    this.Tables.Add(new ColumnIndexMapDataTable(ds.Tables["ColumnIndexMap"]));
                }
                if ((ds.Tables["ColumnIdMap"] != null)) {
                    this.Tables.Add(new ColumnIdMapDataTable(ds.Tables["ColumnIdMap"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AddressMapDataTable AddressMap {
            get {
                return this.tableAddressMap;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ColumnIndexMapDataTable ColumnIndexMap {
            get {
                return this.tableColumnIndexMap;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ColumnIdMapDataTable ColumnIdMap {
            get {
                return this.tableColumnIdMap;
            }
        }
        
        public override DataSet Clone() {
            AddressMapSet cln = ((AddressMapSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["AddressMap"] != null)) {
                this.Tables.Add(new AddressMapDataTable(ds.Tables["AddressMap"]));
            }
            if ((ds.Tables["ColumnIndexMap"] != null)) {
                this.Tables.Add(new ColumnIndexMapDataTable(ds.Tables["ColumnIndexMap"]));
            }
            if ((ds.Tables["ColumnIdMap"] != null)) {
                this.Tables.Add(new ColumnIdMapDataTable(ds.Tables["ColumnIdMap"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableAddressMap = ((AddressMapDataTable)(this.Tables["AddressMap"]));
            if ((this.tableAddressMap != null)) {
                this.tableAddressMap.InitVars();
            }
            this.tableColumnIndexMap = ((ColumnIndexMapDataTable)(this.Tables["ColumnIndexMap"]));
            if ((this.tableColumnIndexMap != null)) {
                this.tableColumnIndexMap.InitVars();
            }
            this.tableColumnIdMap = ((ColumnIdMapDataTable)(this.Tables["ColumnIdMap"]));
            if ((this.tableColumnIdMap != null)) {
                this.tableColumnIdMap.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "AddressMapSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/AddressMapSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableAddressMap = new AddressMapDataTable();
            this.Tables.Add(this.tableAddressMap);
            this.tableColumnIndexMap = new ColumnIndexMapDataTable();
            this.Tables.Add(this.tableColumnIndexMap);
            this.tableColumnIdMap = new ColumnIdMapDataTable();
            this.Tables.Add(this.tableColumnIdMap);
        }
        
        private bool ShouldSerializeAddressMap() {
            return false;
        }
        
        private bool ShouldSerializeColumnIndexMap() {
            return false;
        }
        
        private bool ShouldSerializeColumnIdMap() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void AddressMapRowChangeEventHandler(object sender, AddressMapRowChangeEvent e);
        
        public delegate void ColumnIndexMapRowChangeEventHandler(object sender, ColumnIndexMapRowChangeEvent e);
        
        public delegate void ColumnIdMapRowChangeEventHandler(object sender, ColumnIdMapRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AddressMapDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPlacementId;
            
            private DataColumn columnColumnType;
            
            private DataColumn columnDocumentVersion;
            
            private DataColumn columnRowIndex;
            
            private DataColumn columnColumnIndex;
            
            internal AddressMapDataTable() : 
                    base("AddressMap") {
                this.InitClass();
            }
            
            internal AddressMapDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PlacementIdColumn {
                get {
                    return this.columnPlacementId;
                }
            }
            
            internal DataColumn ColumnTypeColumn {
                get {
                    return this.columnColumnType;
                }
            }
            
            internal DataColumn DocumentVersionColumn {
                get {
                    return this.columnDocumentVersion;
                }
            }
            
            internal DataColumn RowIndexColumn {
                get {
                    return this.columnRowIndex;
                }
            }
            
            internal DataColumn ColumnIndexColumn {
                get {
                    return this.columnColumnIndex;
                }
            }
            
            public AddressMapRow this[int index] {
                get {
                    return ((AddressMapRow)(this.Rows[index]));
                }
            }
            
            public event AddressMapRowChangeEventHandler AddressMapRowChanged;
            
            public event AddressMapRowChangeEventHandler AddressMapRowChanging;
            
            public event AddressMapRowChangeEventHandler AddressMapRowDeleted;
            
            public event AddressMapRowChangeEventHandler AddressMapRowDeleting;
            
            public void AddAddressMapRow(AddressMapRow row) {
                this.Rows.Add(row);
            }
            
            public AddressMapRow AddAddressMapRow(int PlacementId, int ColumnType, int DocumentVersion, int RowIndex, int ColumnIndex) {
                AddressMapRow rowAddressMapRow = ((AddressMapRow)(this.NewRow()));
                rowAddressMapRow.ItemArray = new object[] {
                        PlacementId,
                        ColumnType,
                        DocumentVersion,
                        RowIndex,
                        ColumnIndex};
                this.Rows.Add(rowAddressMapRow);
                return rowAddressMapRow;
            }
            
            public AddressMapRow FindByPlacementIdColumnType(int PlacementId, int ColumnType) {
                return ((AddressMapRow)(this.Rows.Find(new object[] {
                            PlacementId,
                            ColumnType})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AddressMapDataTable cln = ((AddressMapDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AddressMapDataTable();
            }
            
            internal void InitVars() {
                this.columnPlacementId = this.Columns["PlacementId"];
                this.columnColumnType = this.Columns["ColumnType"];
                this.columnDocumentVersion = this.Columns["DocumentVersion"];
                this.columnRowIndex = this.Columns["RowIndex"];
                this.columnColumnIndex = this.Columns["ColumnIndex"];
            }
            
            private void InitClass() {
                this.columnPlacementId = new DataColumn("PlacementId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPlacementId);
                this.columnColumnType = new DataColumn("ColumnType", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnColumnType);
                this.columnDocumentVersion = new DataColumn("DocumentVersion", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDocumentVersion);
                this.columnRowIndex = new DataColumn("RowIndex", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowIndex);
                this.columnColumnIndex = new DataColumn("ColumnIndex", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnColumnIndex);
                this.Constraints.Add(new UniqueConstraint("AddressMapKey", new DataColumn[] {
                                this.columnPlacementId,
                                this.columnColumnType}, true));
                this.columnPlacementId.AllowDBNull = false;
                this.columnColumnType.AllowDBNull = false;
            }
            
            public AddressMapRow NewAddressMapRow() {
                return ((AddressMapRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AddressMapRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AddressMapRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AddressMapRowChanged != null)) {
                    this.AddressMapRowChanged(this, new AddressMapRowChangeEvent(((AddressMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AddressMapRowChanging != null)) {
                    this.AddressMapRowChanging(this, new AddressMapRowChangeEvent(((AddressMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AddressMapRowDeleted != null)) {
                    this.AddressMapRowDeleted(this, new AddressMapRowChangeEvent(((AddressMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AddressMapRowDeleting != null)) {
                    this.AddressMapRowDeleting(this, new AddressMapRowChangeEvent(((AddressMapRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAddressMapRow(AddressMapRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AddressMapRow : DataRow {
            
            private AddressMapDataTable tableAddressMap;
            
            internal AddressMapRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAddressMap = ((AddressMapDataTable)(this.Table));
            }
            
            public int PlacementId {
                get {
                    return ((int)(this[this.tableAddressMap.PlacementIdColumn]));
                }
                set {
                    this[this.tableAddressMap.PlacementIdColumn] = value;
                }
            }
            
            public int ColumnType {
                get {
                    return ((int)(this[this.tableAddressMap.ColumnTypeColumn]));
                }
                set {
                    this[this.tableAddressMap.ColumnTypeColumn] = value;
                }
            }
            
            public int DocumentVersion {
                get {
                    try {
                        return ((int)(this[this.tableAddressMap.DocumentVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressMap.DocumentVersionColumn] = value;
                }
            }
            
            public int RowIndex {
                get {
                    try {
                        return ((int)(this[this.tableAddressMap.RowIndexColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressMap.RowIndexColumn] = value;
                }
            }
            
            public int ColumnIndex {
                get {
                    try {
                        return ((int)(this[this.tableAddressMap.ColumnIndexColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddressMap.ColumnIndexColumn] = value;
                }
            }
            
            public bool IsDocumentVersionNull() {
                return this.IsNull(this.tableAddressMap.DocumentVersionColumn);
            }
            
            public void SetDocumentVersionNull() {
                this[this.tableAddressMap.DocumentVersionColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowIndexNull() {
                return this.IsNull(this.tableAddressMap.RowIndexColumn);
            }
            
            public void SetRowIndexNull() {
                this[this.tableAddressMap.RowIndexColumn] = System.Convert.DBNull;
            }
            
            public bool IsColumnIndexNull() {
                return this.IsNull(this.tableAddressMap.ColumnIndexColumn);
            }
            
            public void SetColumnIndexNull() {
                this[this.tableAddressMap.ColumnIndexColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AddressMapRowChangeEvent : EventArgs {
            
            private AddressMapRow eventRow;
            
            private DataRowAction eventAction;
            
            public AddressMapRowChangeEvent(AddressMapRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AddressMapRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ColumnIndexMapDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnColumnId;
            
            private DataColumn columnColumnIndex;
            
            internal ColumnIndexMapDataTable() : 
                    base("ColumnIndexMap") {
                this.InitClass();
            }
            
            internal ColumnIndexMapDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ColumnIdColumn {
                get {
                    return this.columnColumnId;
                }
            }
            
            internal DataColumn ColumnIndexColumn {
                get {
                    return this.columnColumnIndex;
                }
            }
            
            public ColumnIndexMapRow this[int index] {
                get {
                    return ((ColumnIndexMapRow)(this.Rows[index]));
                }
            }
            
            public event ColumnIndexMapRowChangeEventHandler ColumnIndexMapRowChanged;
            
            public event ColumnIndexMapRowChangeEventHandler ColumnIndexMapRowChanging;
            
            public event ColumnIndexMapRowChangeEventHandler ColumnIndexMapRowDeleted;
            
            public event ColumnIndexMapRowChangeEventHandler ColumnIndexMapRowDeleting;
            
            public void AddColumnIndexMapRow(ColumnIndexMapRow row) {
                this.Rows.Add(row);
            }
            
            public ColumnIndexMapRow AddColumnIndexMapRow(int ColumnId, int ColumnIndex) {
                ColumnIndexMapRow rowColumnIndexMapRow = ((ColumnIndexMapRow)(this.NewRow()));
                rowColumnIndexMapRow.ItemArray = new object[] {
                        ColumnId,
                        ColumnIndex};
                this.Rows.Add(rowColumnIndexMapRow);
                return rowColumnIndexMapRow;
            }
            
            public ColumnIndexMapRow FindByColumnId(int ColumnId) {
                return ((ColumnIndexMapRow)(this.Rows.Find(new object[] {
                            ColumnId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ColumnIndexMapDataTable cln = ((ColumnIndexMapDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ColumnIndexMapDataTable();
            }
            
            internal void InitVars() {
                this.columnColumnId = this.Columns["ColumnId"];
                this.columnColumnIndex = this.Columns["ColumnIndex"];
            }
            
            private void InitClass() {
                this.columnColumnId = new DataColumn("ColumnId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnColumnId);
                this.columnColumnIndex = new DataColumn("ColumnIndex", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnColumnIndex);
                this.Constraints.Add(new UniqueConstraint("ColumnIndexMapKey", new DataColumn[] {
                                this.columnColumnId}, true));
                this.columnColumnId.AllowDBNull = false;
                this.columnColumnId.Unique = true;
            }
            
            public ColumnIndexMapRow NewColumnIndexMapRow() {
                return ((ColumnIndexMapRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ColumnIndexMapRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ColumnIndexMapRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ColumnIndexMapRowChanged != null)) {
                    this.ColumnIndexMapRowChanged(this, new ColumnIndexMapRowChangeEvent(((ColumnIndexMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ColumnIndexMapRowChanging != null)) {
                    this.ColumnIndexMapRowChanging(this, new ColumnIndexMapRowChangeEvent(((ColumnIndexMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ColumnIndexMapRowDeleted != null)) {
                    this.ColumnIndexMapRowDeleted(this, new ColumnIndexMapRowChangeEvent(((ColumnIndexMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ColumnIndexMapRowDeleting != null)) {
                    this.ColumnIndexMapRowDeleting(this, new ColumnIndexMapRowChangeEvent(((ColumnIndexMapRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveColumnIndexMapRow(ColumnIndexMapRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ColumnIndexMapRow : DataRow {
            
            private ColumnIndexMapDataTable tableColumnIndexMap;
            
            internal ColumnIndexMapRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableColumnIndexMap = ((ColumnIndexMapDataTable)(this.Table));
            }
            
            public int ColumnId {
                get {
                    return ((int)(this[this.tableColumnIndexMap.ColumnIdColumn]));
                }
                set {
                    this[this.tableColumnIndexMap.ColumnIdColumn] = value;
                }
            }
            
            public int ColumnIndex {
                get {
                    try {
                        return ((int)(this[this.tableColumnIndexMap.ColumnIndexColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableColumnIndexMap.ColumnIndexColumn] = value;
                }
            }
            
            public bool IsColumnIndexNull() {
                return this.IsNull(this.tableColumnIndexMap.ColumnIndexColumn);
            }
            
            public void SetColumnIndexNull() {
                this[this.tableColumnIndexMap.ColumnIndexColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ColumnIndexMapRowChangeEvent : EventArgs {
            
            private ColumnIndexMapRow eventRow;
            
            private DataRowAction eventAction;
            
            public ColumnIndexMapRowChangeEvent(ColumnIndexMapRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ColumnIndexMapRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ColumnIdMapDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnColumnIndex;
            
            private DataColumn columnColumnId;
            
            internal ColumnIdMapDataTable() : 
                    base("ColumnIdMap") {
                this.InitClass();
            }
            
            internal ColumnIdMapDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ColumnIndexColumn {
                get {
                    return this.columnColumnIndex;
                }
            }
            
            internal DataColumn ColumnIdColumn {
                get {
                    return this.columnColumnId;
                }
            }
            
            public ColumnIdMapRow this[int index] {
                get {
                    return ((ColumnIdMapRow)(this.Rows[index]));
                }
            }
            
            public event ColumnIdMapRowChangeEventHandler ColumnIdMapRowChanged;
            
            public event ColumnIdMapRowChangeEventHandler ColumnIdMapRowChanging;
            
            public event ColumnIdMapRowChangeEventHandler ColumnIdMapRowDeleted;
            
            public event ColumnIdMapRowChangeEventHandler ColumnIdMapRowDeleting;
            
            public void AddColumnIdMapRow(ColumnIdMapRow row) {
                this.Rows.Add(row);
            }
            
            public ColumnIdMapRow AddColumnIdMapRow(int ColumnIndex, int ColumnId) {
                ColumnIdMapRow rowColumnIdMapRow = ((ColumnIdMapRow)(this.NewRow()));
                rowColumnIdMapRow.ItemArray = new object[] {
                        ColumnIndex,
                        ColumnId};
                this.Rows.Add(rowColumnIdMapRow);
                return rowColumnIdMapRow;
            }
            
            public ColumnIdMapRow FindByColumnIndex(int ColumnIndex) {
                return ((ColumnIdMapRow)(this.Rows.Find(new object[] {
                            ColumnIndex})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ColumnIdMapDataTable cln = ((ColumnIdMapDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ColumnIdMapDataTable();
            }
            
            internal void InitVars() {
                this.columnColumnIndex = this.Columns["ColumnIndex"];
                this.columnColumnId = this.Columns["ColumnId"];
            }
            
            private void InitClass() {
                this.columnColumnIndex = new DataColumn("ColumnIndex", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnColumnIndex);
                this.columnColumnId = new DataColumn("ColumnId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnColumnId);
                this.Constraints.Add(new UniqueConstraint("ColumnIdMap", new DataColumn[] {
                                this.columnColumnIndex}, true));
                this.columnColumnIndex.AllowDBNull = false;
                this.columnColumnIndex.Unique = true;
            }
            
            public ColumnIdMapRow NewColumnIdMapRow() {
                return ((ColumnIdMapRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ColumnIdMapRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ColumnIdMapRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ColumnIdMapRowChanged != null)) {
                    this.ColumnIdMapRowChanged(this, new ColumnIdMapRowChangeEvent(((ColumnIdMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ColumnIdMapRowChanging != null)) {
                    this.ColumnIdMapRowChanging(this, new ColumnIdMapRowChangeEvent(((ColumnIdMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ColumnIdMapRowDeleted != null)) {
                    this.ColumnIdMapRowDeleted(this, new ColumnIdMapRowChangeEvent(((ColumnIdMapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ColumnIdMapRowDeleting != null)) {
                    this.ColumnIdMapRowDeleting(this, new ColumnIdMapRowChangeEvent(((ColumnIdMapRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveColumnIdMapRow(ColumnIdMapRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ColumnIdMapRow : DataRow {
            
            private ColumnIdMapDataTable tableColumnIdMap;
            
            internal ColumnIdMapRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableColumnIdMap = ((ColumnIdMapDataTable)(this.Table));
            }
            
            public int ColumnIndex {
                get {
                    return ((int)(this[this.tableColumnIdMap.ColumnIndexColumn]));
                }
                set {
                    this[this.tableColumnIdMap.ColumnIndexColumn] = value;
                }
            }
            
            public int ColumnId {
                get {
                    try {
                        return ((int)(this[this.tableColumnIdMap.ColumnIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableColumnIdMap.ColumnIdColumn] = value;
                }
            }
            
            public bool IsColumnIdNull() {
                return this.IsNull(this.tableColumnIdMap.ColumnIdColumn);
            }
            
            public void SetColumnIdNull() {
                this[this.tableColumnIdMap.ColumnIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ColumnIdMapRowChangeEvent : EventArgs {
            
            private ColumnIdMapRow eventRow;
            
            private DataRowAction eventAction;
            
            public ColumnIdMapRowChangeEvent(ColumnIdMapRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ColumnIdMapRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
