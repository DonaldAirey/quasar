//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Shadows.Quasar.Viewers.Placement {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class PlacementSet : DataSet {
        
        private PlacementDataTable tablePlacement;
        
        public PlacementSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected PlacementSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Placement"] != null)) {
                    this.Tables.Add(new PlacementDataTable(ds.Tables["Placement"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PlacementDataTable Placement {
            get {
                return this.tablePlacement;
            }
        }
        
        public override DataSet Clone() {
            PlacementSet cln = ((PlacementSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Placement"] != null)) {
                this.Tables.Add(new PlacementDataTable(ds.Tables["Placement"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablePlacement = ((PlacementDataTable)(this.Tables["Placement"]));
            if ((this.tablePlacement != null)) {
                this.tablePlacement.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "PlacementSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PlacementSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablePlacement = new PlacementDataTable();
            this.Tables.Add(this.tablePlacement);
        }
        
        private bool ShouldSerializePlacement() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void PlacementRowChangeEventHandler(object sender, PlacementRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PlacementDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLocalPlacementId;
            
            private DataColumn columnPlacementId;
            
            private DataColumn columnBlockOrderId;
            
            private DataColumn columnBrokerId;
            
            private DataColumn columnTimeInForceCode;
            
            private DataColumn columnOrderTypeCode;
            
            private DataColumn columnRowVersion;
            
            private DataColumn columnIsEmpty;
            
            private DataColumn columnIsValid;
            
            private DataColumn columnIsError;
            
            private DataColumn columnIsRouted;
            
            private DataColumn columnQuantity;
            
            private DataColumn columnPrice1;
            
            private DataColumn columnPrice2;
            
            private DataColumn columnCreatedTime;
            
            private DataColumn columnCreatedLoginId;
            
            private DataColumn columnModifiedTime;
            
            private DataColumn columnModifiedLoginId;
            
            internal PlacementDataTable() : 
                    base("Placement") {
                this.InitClass();
            }
            
            internal PlacementDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LocalPlacementIdColumn {
                get {
                    return this.columnLocalPlacementId;
                }
            }
            
            internal DataColumn PlacementIdColumn {
                get {
                    return this.columnPlacementId;
                }
            }
            
            internal DataColumn BlockOrderIdColumn {
                get {
                    return this.columnBlockOrderId;
                }
            }
            
            internal DataColumn BrokerIdColumn {
                get {
                    return this.columnBrokerId;
                }
            }
            
            internal DataColumn TimeInForceCodeColumn {
                get {
                    return this.columnTimeInForceCode;
                }
            }
            
            internal DataColumn OrderTypeCodeColumn {
                get {
                    return this.columnOrderTypeCode;
                }
            }
            
            internal DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            internal DataColumn IsEmptyColumn {
                get {
                    return this.columnIsEmpty;
                }
            }
            
            internal DataColumn IsValidColumn {
                get {
                    return this.columnIsValid;
                }
            }
            
            internal DataColumn IsErrorColumn {
                get {
                    return this.columnIsError;
                }
            }
            
            internal DataColumn IsRoutedColumn {
                get {
                    return this.columnIsRouted;
                }
            }
            
            internal DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            internal DataColumn Price1Column {
                get {
                    return this.columnPrice1;
                }
            }
            
            internal DataColumn Price2Column {
                get {
                    return this.columnPrice2;
                }
            }
            
            internal DataColumn CreatedTimeColumn {
                get {
                    return this.columnCreatedTime;
                }
            }
            
            internal DataColumn CreatedLoginIdColumn {
                get {
                    return this.columnCreatedLoginId;
                }
            }
            
            internal DataColumn ModifiedTimeColumn {
                get {
                    return this.columnModifiedTime;
                }
            }
            
            internal DataColumn ModifiedLoginIdColumn {
                get {
                    return this.columnModifiedLoginId;
                }
            }
            
            public PlacementRow this[int index] {
                get {
                    return ((PlacementRow)(this.Rows[index]));
                }
            }
            
            public event PlacementRowChangeEventHandler PlacementRowChanged;
            
            public event PlacementRowChangeEventHandler PlacementRowChanging;
            
            public event PlacementRowChangeEventHandler PlacementRowDeleted;
            
            public event PlacementRowChangeEventHandler PlacementRowDeleting;
            
            public void AddPlacementRow(PlacementRow row) {
                this.Rows.Add(row);
            }
            
            public PlacementRow AddPlacementRow(
                        int PlacementId, 
                        int BlockOrderId, 
                        int BrokerId, 
                        int TimeInForceCode, 
                        int OrderTypeCode, 
                        long RowVersion, 
                        bool IsEmpty, 
                        bool IsValid, 
                        bool IsError, 
                        bool IsRouted, 
                        System.Decimal Quantity, 
                        System.Decimal Price1, 
                        System.Decimal Price2, 
                        System.DateTime CreatedTime, 
                        int CreatedLoginId, 
                        System.DateTime ModifiedTime, 
                        int ModifiedLoginId) {
                PlacementRow rowPlacementRow = ((PlacementRow)(this.NewRow()));
                rowPlacementRow.ItemArray = new object[] {
                        null,
                        PlacementId,
                        BlockOrderId,
                        BrokerId,
                        TimeInForceCode,
                        OrderTypeCode,
                        RowVersion,
                        IsEmpty,
                        IsValid,
                        IsError,
                        IsRouted,
                        Quantity,
                        Price1,
                        Price2,
                        CreatedTime,
                        CreatedLoginId,
                        ModifiedTime,
                        ModifiedLoginId};
                this.Rows.Add(rowPlacementRow);
                return rowPlacementRow;
            }
            
            public PlacementRow FindByLocalPlacementId(int LocalPlacementId) {
                return ((PlacementRow)(this.Rows.Find(new object[] {
                            LocalPlacementId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PlacementDataTable cln = ((PlacementDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PlacementDataTable();
            }
            
            internal void InitVars() {
                this.columnLocalPlacementId = this.Columns["LocalPlacementId"];
                this.columnPlacementId = this.Columns["PlacementId"];
                this.columnBlockOrderId = this.Columns["BlockOrderId"];
                this.columnBrokerId = this.Columns["BrokerId"];
                this.columnTimeInForceCode = this.Columns["TimeInForceCode"];
                this.columnOrderTypeCode = this.Columns["OrderTypeCode"];
                this.columnRowVersion = this.Columns["RowVersion"];
                this.columnIsEmpty = this.Columns["IsEmpty"];
                this.columnIsValid = this.Columns["IsValid"];
                this.columnIsError = this.Columns["IsError"];
                this.columnIsRouted = this.Columns["IsRouted"];
                this.columnQuantity = this.Columns["Quantity"];
                this.columnPrice1 = this.Columns["Price1"];
                this.columnPrice2 = this.Columns["Price2"];
                this.columnCreatedTime = this.Columns["CreatedTime"];
                this.columnCreatedLoginId = this.Columns["CreatedLoginId"];
                this.columnModifiedTime = this.Columns["ModifiedTime"];
                this.columnModifiedLoginId = this.Columns["ModifiedLoginId"];
            }
            
            private void InitClass() {
                this.columnLocalPlacementId = new DataColumn("LocalPlacementId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocalPlacementId);
                this.columnPlacementId = new DataColumn("PlacementId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPlacementId);
                this.columnBlockOrderId = new DataColumn("BlockOrderId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBlockOrderId);
                this.columnBrokerId = new DataColumn("BrokerId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBrokerId);
                this.columnTimeInForceCode = new DataColumn("TimeInForceCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeInForceCode);
                this.columnOrderTypeCode = new DataColumn("OrderTypeCode", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrderTypeCode);
                this.columnRowVersion = new DataColumn("RowVersion", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRowVersion);
                this.columnIsEmpty = new DataColumn("IsEmpty", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsEmpty);
                this.columnIsValid = new DataColumn("IsValid", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsValid);
                this.columnIsError = new DataColumn("IsError", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsError);
                this.columnIsRouted = new DataColumn("IsRouted", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsRouted);
                this.columnQuantity = new DataColumn("Quantity", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQuantity);
                this.columnPrice1 = new DataColumn("Price1", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrice1);
                this.columnPrice2 = new DataColumn("Price2", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPrice2);
                this.columnCreatedTime = new DataColumn("CreatedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedTime);
                this.columnCreatedLoginId = new DataColumn("CreatedLoginId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreatedLoginId);
                this.columnModifiedTime = new DataColumn("ModifiedTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedTime);
                this.columnModifiedLoginId = new DataColumn("ModifiedLoginId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModifiedLoginId);
                this.Constraints.Add(new UniqueConstraint("PKPlacement", new DataColumn[] {
                                this.columnLocalPlacementId}, true));
                this.columnLocalPlacementId.AutoIncrement = true;
                this.columnLocalPlacementId.AllowDBNull = false;
                this.columnLocalPlacementId.Unique = true;
                this.columnBlockOrderId.AllowDBNull = false;
                this.columnIsEmpty.DefaultValue = false;
                this.columnIsValid.DefaultValue = false;
                this.columnIsError.DefaultValue = false;
                this.columnIsRouted.DefaultValue = false;
            }
            
            public PlacementRow NewPlacementRow() {
                return ((PlacementRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PlacementRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PlacementRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PlacementRowChanged != null)) {
                    this.PlacementRowChanged(this, new PlacementRowChangeEvent(((PlacementRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PlacementRowChanging != null)) {
                    this.PlacementRowChanging(this, new PlacementRowChangeEvent(((PlacementRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PlacementRowDeleted != null)) {
                    this.PlacementRowDeleted(this, new PlacementRowChangeEvent(((PlacementRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PlacementRowDeleting != null)) {
                    this.PlacementRowDeleting(this, new PlacementRowChangeEvent(((PlacementRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePlacementRow(PlacementRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PlacementRow : DataRow {
            
            private PlacementDataTable tablePlacement;
            
            internal PlacementRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePlacement = ((PlacementDataTable)(this.Table));
            }
            
            public int LocalPlacementId {
                get {
                    return ((int)(this[this.tablePlacement.LocalPlacementIdColumn]));
                }
                set {
                    this[this.tablePlacement.LocalPlacementIdColumn] = value;
                }
            }
            
            public int PlacementId {
                get {
                    try {
                        return ((int)(this[this.tablePlacement.PlacementIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacement.PlacementIdColumn] = value;
                }
            }
            
            public int BlockOrderId {
                get {
                    return ((int)(this[this.tablePlacement.BlockOrderIdColumn]));
                }
                set {
                    this[this.tablePlacement.BlockOrderIdColumn] = value;
                }
            }
            
            public int BrokerId {
                get {
                    try {
                        return ((int)(this[this.tablePlacement.BrokerIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacement.BrokerIdColumn] = value;
                }
            }
            
            public int TimeInForceCode {
                get {
                    try {
                        return ((int)(this[this.tablePlacement.TimeInForceCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacement.TimeInForceCodeColumn] = value;
                }
            }
            
            public int OrderTypeCode {
                get {
                    try {
                        return ((int)(this[this.tablePlacement.OrderTypeCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacement.OrderTypeCodeColumn] = value;
                }
            }
            
            public long RowVersion {
                get {
                    try {
                        return ((long)(this[this.tablePlacement.RowVersionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacement.RowVersionColumn] = value;
                }
            }
            
            public bool IsEmpty {
                get {
                    try {
                        return ((bool)(this[this.tablePlacement.IsEmptyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacement.IsEmptyColumn] = value;
                }
            }
            
            public bool IsValid {
                get {
                    try {
                        return ((bool)(this[this.tablePlacement.IsValidColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacement.IsValidColumn] = value;
                }
            }
            
            public bool IsError {
                get {
                    try {
                        return ((bool)(this[this.tablePlacement.IsErrorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacement.IsErrorColumn] = value;
                }
            }
            
            public bool IsRouted {
                get {
                    try {
                        return ((bool)(this[this.tablePlacement.IsRoutedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacement.IsRoutedColumn] = value;
                }
            }
            
            public System.Decimal Quantity {
                get {
                    try {
                        return ((System.Decimal)(this[this.tablePlacement.QuantityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacement.QuantityColumn] = value;
                }
            }
            
            public System.Decimal Price1 {
                get {
                    try {
                        return ((System.Decimal)(this[this.tablePlacement.Price1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacement.Price1Column] = value;
                }
            }
            
            public System.Decimal Price2 {
                get {
                    try {
                        return ((System.Decimal)(this[this.tablePlacement.Price2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacement.Price2Column] = value;
                }
            }
            
            public System.DateTime CreatedTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePlacement.CreatedTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacement.CreatedTimeColumn] = value;
                }
            }
            
            public int CreatedLoginId {
                get {
                    try {
                        return ((int)(this[this.tablePlacement.CreatedLoginIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacement.CreatedLoginIdColumn] = value;
                }
            }
            
            public System.DateTime ModifiedTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePlacement.ModifiedTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacement.ModifiedTimeColumn] = value;
                }
            }
            
            public int ModifiedLoginId {
                get {
                    try {
                        return ((int)(this[this.tablePlacement.ModifiedLoginIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacement.ModifiedLoginIdColumn] = value;
                }
            }
            
            public bool IsPlacementIdNull() {
                return this.IsNull(this.tablePlacement.PlacementIdColumn);
            }
            
            public void SetPlacementIdNull() {
                this[this.tablePlacement.PlacementIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsBrokerIdNull() {
                return this.IsNull(this.tablePlacement.BrokerIdColumn);
            }
            
            public void SetBrokerIdNull() {
                this[this.tablePlacement.BrokerIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsTimeInForceCodeNull() {
                return this.IsNull(this.tablePlacement.TimeInForceCodeColumn);
            }
            
            public void SetTimeInForceCodeNull() {
                this[this.tablePlacement.TimeInForceCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrderTypeCodeNull() {
                return this.IsNull(this.tablePlacement.OrderTypeCodeColumn);
            }
            
            public void SetOrderTypeCodeNull() {
                this[this.tablePlacement.OrderTypeCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRowVersionNull() {
                return this.IsNull(this.tablePlacement.RowVersionColumn);
            }
            
            public void SetRowVersionNull() {
                this[this.tablePlacement.RowVersionColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsEmptyNull() {
                return this.IsNull(this.tablePlacement.IsEmptyColumn);
            }
            
            public void SetIsEmptyNull() {
                this[this.tablePlacement.IsEmptyColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsValidNull() {
                return this.IsNull(this.tablePlacement.IsValidColumn);
            }
            
            public void SetIsValidNull() {
                this[this.tablePlacement.IsValidColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsErrorNull() {
                return this.IsNull(this.tablePlacement.IsErrorColumn);
            }
            
            public void SetIsErrorNull() {
                this[this.tablePlacement.IsErrorColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsRoutedNull() {
                return this.IsNull(this.tablePlacement.IsRoutedColumn);
            }
            
            public void SetIsRoutedNull() {
                this[this.tablePlacement.IsRoutedColumn] = System.Convert.DBNull;
            }
            
            public bool IsQuantityNull() {
                return this.IsNull(this.tablePlacement.QuantityColumn);
            }
            
            public void SetQuantityNull() {
                this[this.tablePlacement.QuantityColumn] = System.Convert.DBNull;
            }
            
            public bool IsPrice1Null() {
                return this.IsNull(this.tablePlacement.Price1Column);
            }
            
            public void SetPrice1Null() {
                this[this.tablePlacement.Price1Column] = System.Convert.DBNull;
            }
            
            public bool IsPrice2Null() {
                return this.IsNull(this.tablePlacement.Price2Column);
            }
            
            public void SetPrice2Null() {
                this[this.tablePlacement.Price2Column] = System.Convert.DBNull;
            }
            
            public bool IsCreatedTimeNull() {
                return this.IsNull(this.tablePlacement.CreatedTimeColumn);
            }
            
            public void SetCreatedTimeNull() {
                this[this.tablePlacement.CreatedTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCreatedLoginIdNull() {
                return this.IsNull(this.tablePlacement.CreatedLoginIdColumn);
            }
            
            public void SetCreatedLoginIdNull() {
                this[this.tablePlacement.CreatedLoginIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsModifiedTimeNull() {
                return this.IsNull(this.tablePlacement.ModifiedTimeColumn);
            }
            
            public void SetModifiedTimeNull() {
                this[this.tablePlacement.ModifiedTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsModifiedLoginIdNull() {
                return this.IsNull(this.tablePlacement.ModifiedLoginIdColumn);
            }
            
            public void SetModifiedLoginIdNull() {
                this[this.tablePlacement.ModifiedLoginIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PlacementRowChangeEvent : EventArgs {
            
            private PlacementRow eventRow;
            
            private DataRowAction eventAction;
            
            public PlacementRowChangeEvent(PlacementRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PlacementRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
