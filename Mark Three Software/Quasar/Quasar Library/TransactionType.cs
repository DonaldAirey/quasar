/*************************************************************************************************************************
*
*	File:			TransactionType.cs
*	Description:	TransactionType type.
*					Donald Roy Airey  Copyright ©  2002 - All Rights Reserved
*
*************************************************************************************************************************/

using System;

namespace MarkThree.Quasar
{

	/// <summary>
	/// TransactionType Types
	/// </summary>
	public class TransactionType
	{
		/// <summary>Deposit</summary>
		public const int Deposit = 0;
		/// <summary>Withdraw</summary>
		public const int Withdraw = 1;
		/// <summary>Buy</summary>
		public const int Buy = 2;
		/// <summary>Sell</summary>
		public const int Sell = 3;
		/// <summary>Buy Cover</summary>
		public const int BuyCover = 4;
		/// <summary>Sell Short</summary>
		public const int SellShort = 5;

		/// <summary>
		/// Returns the type of position generated by the given transaction.
		/// </summary>
		/// <param name="transactionType">The transaction.</param>
		/// <returns>The type of position generated from the transaction.</returns>
		public static int GetPosition(int transactionType)
		{

			// These transactionType generate long position.
			switch (transactionType)
			{

				case Deposit:
				case Withdraw:
				case Buy:
				case Sell:

					return PositionType.Long;

			}

			// All other transactionType generate short position.
			return PositionType.Short;

		}

		/// <summary>
		/// Translates a securityType, positionTypeCode and signed quantity into a TransactionTypeCode.
		/// </summary>
		/// <param name="securityType">The major asset category for a security.</param>
		/// <param name="positionTypeCode">The long or short attribute of the order.</param>
		/// <param name="quantity">The signed (relative) quantity of the trade.</param>
		/// <returns>A TransactionTypeCode for the order.</returns>
		public static int Calculate(int securityType, int positionTypeCode, decimal quantity)
		{

			// Different assets have different TransactionTypeCodes.
			switch (securityType)
			{

				case SecurityType.Currency:

					// Translate the quantity into a deposit or withdrawl transaction.
					return (quantity > 0) ? TransactionType.Deposit : TransactionType.Withdraw;

				case SecurityType.Debt:
				case SecurityType.Equity:
	
					// Translate the position and signed quantity into a transaction.
					return positionTypeCode == PositionType.Long ?
						(quantity > 0) ? TransactionType.Buy : TransactionType.Sell :
						(quantity > 0) ? TransactionType.SellShort : TransactionType.BuyCover;

			}

			// Throw an exception if we try to translate any other securityType.
			throw new ArgumentOutOfRangeException("securityType");

		}

		/// <summary>
		/// Gets the impact that the given transactionType would have on the cash holdings.
		/// </summary>
		/// <param name="transactionType">The transactionType in question.</param>
		/// <returns>1.0 if the transactionType would add to the cash holdings, -1.0 if it would remove cash.</returns>
		public static decimal GetCashSign(int transactionType)
		{

			// These transactionType will add to cash.  All others will reduce cash.
			return (transactionType == TransactionType.Deposit || transactionType == TransactionType.Sell ||
				transactionType == TransactionType.BuyCover) ? 1.0M : -1.0M;

		}

	};

}
